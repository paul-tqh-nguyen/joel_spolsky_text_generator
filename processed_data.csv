blog_link,title,published_date,updated_date,author,blog_tags,blog_text
https://www.joelonsoftware.com/1999/12/24/19991224/,1999/12/24,1999-12-24T00:00:02+00:00,,Joel Spolsky,News,"
	I'm on sabbatical now. I left my last job, at Juno Online Services, last November. Since then I've been traveling, learning, and resting up for the next big thing. Over the next few months I plan to write several articles about software development in this weblog. Keep an eye out for discussions on managing teams of developers at high tech companies; how to motivate and excite people; strategies for software firms, and more. 
	"
https://www.joelonsoftware.com/2000/03/30/20000330/,2000/03/30,2000-03-30T00:00:09+00:00,,Joel Spolsky,News,"
	As summer interns at Microsoft, my friends and I used to take ""field trips"" to the company supply room to stock up on school supplies. Among the floppy disks, mouse pads, and post-it notes was a stack of small paperback books, so I took one home to read. The book was Peopleware, by Tom DeMarco and Timothy Lister. This book was one of the most influential books I've ever read. The best way to describe it would be as an Anti-Dilbert Manifesto. Ever wonder why everybody at Microsoft gets their own office, with walls and a door that shuts? It's in there. Why do managers give so much leeway to their teams to get things done? That's in there too. Why are there so many jelled SWAT teams at Microsoft that are remarkably productive? Mainly because Bill Gates has built a company full of managers who read Peopleware. I can't recommend this book highly enough. It is the one thing every software manager needs to read... not just once, but once a year. 
	"
https://www.joelonsoftware.com/2000/03/29/20000329/,2000/03/29,2000-03-29T00:00:08+00:00,,Joel Spolsky,News,"
	So, you have to make a schedule. This is something almost no programmer wants to do. In my experience, the vast majority just try to get away with not making a schedule at all. Of the few that make a schedule, most are only doing it because their boss made them do it, halfheartedly, and nobody actually believes the schedule except for upper management, which simultaneously believes that ""no software project is ever on time"" and in the existence of UFOs. Read today's article Painless Software Schedules and be enlightened. Arg! BellAtlantic DSL is doing that annoying thing where you only get about 500 bytes through per hour. Good thing I have dial up backup. Good news! You can still burn flags! Yay!
	"
https://www.joelonsoftware.com/2000/03/28/ndas-and-contracts-that-you-should-never-sign/,NDAs and Contracts That You Should Never Sign,2000-03-28T00:15:10+00:00,2016-12-05T19:06:22+00:00,Joel Spolsky,"New developer, News","
	Over time, I've signed a lot of NDAs (non-disclosure agreements)... they seem to be the Silicon Valley equivalent of the Japanese business card. Some of them are short and simple, others are quite elaborate. 
There is, however, one clause I've seen in a lot of NDAs that I consider quite unacceptable. It is a clause which forbids you to hire anybody who works for the company that is making you sign the NDA. Presumably, they think that while you are visiting them, you will hire away all their employees and put them out of business. Well, you know what? If your employees are so eager to leave, that's your problem, not mine. You need to keep your employees loyal by treating them well, not by creating arbitrary obstacles in their career. In some cases it's quite ridiculous; I recently signed this clause in a 3 page NDA by a startup company that consisted of exactly two founders, and no employees. So the founders, by putting this clause in the NDA, are doing nothing but guaranteeing that if their business doesn't work out, none of the people they met while working on the business will be able to give them jobs. 
On a similar note, a lot of companies have the audacity to put non-compete clauses in their employment contracts. Typically, this says that you agree not to work for one of their ""competitors"" or even ""potential competitors"" (which is never very well defined) for a period, usually 1 or 2 years, after leaving the company. 
This is completely outrageous. I signed such a contract at Microsoft without paying too much attention. When I left, I realized that because Microsoft has a finger in everything related to software, technically I could not work in my field AT ALL for 12 months after leaving Microsoft. 
Of course, it is extremely rare for Microsoft to enforce this clause. Among other things, it is considered legally unenforceable in some states, like California, although in New York I have heard it can sometimes be enforced. If they are not going to enforce it, why is it in there? 
At Juno, management tried to add such a clause to the contract. Of course, there was a bit of an uproar, and guess what? The employees won! The clause was removed from the standard contract. 
You can win on this one. Highly skilled technical employees are in too much demand, and it's too easy to get a job. You don't have to accept this clause in your contract. If the employer absolutely, positively insists that you promise not to go work for a competitor when you leave your job, you can tell them: ""fine. You don't want me to work for a year after I leave, that's fine, but if I'm going to be 'on the beach', I want you to keep paying me my salary for one year after I leave, until I can legally get a job that you approve of."" 
Another dangerous clause says that you agree not to hire, or cause to be hired, anybody from the company if you leave for a period of x months (usually 12 to 24). The idea is to prevent a group of people from leaving en-masse, and it's to protect against the standard practice of a manager leaving a company and taking his team along with him. 
This is something you're really going to regret. Among other things, if you leave a company, then six months later someone else leaves and uses you as a reference for a new job, technically, you can't give them one. That's not nice. 
And if somebody from the company leaves to do a cool startup, you can't go work for them! By signing this, you're basically cutting off this whole branch of possibilities in your career. 
Suppose you want to leave to do your own startup. Your single best source of potential partners and employees are the people you know professionally. It is definitely not in your best interest to sign this clause. 
I think that companies need to keep their employees loyal by treating them well, not by enforcing blind loyalty though a contract. I am not going to make the mistake of signing this clause again. Fortunately, with today's shortage of qualified programmers, the balance of power today is sharply in your favor when you start a new job, and I think you have a very high chance of getting a job without signing restrictive employment clauses. 
I'm not a lawyer, and this is not legal advice!
	"
https://www.joelonsoftware.com/2000/03/28/20000328/,2000/03/28,2000-03-28T00:00:07+00:00,,Joel Spolsky,News,"
	Yikes! The US Senate will vote on the proposed constitutional amendment to outlaw flag ""desecration"" on Wednesday. The vote on the amendment is expected to be very close. Even if you have already written to your Senators, it is imperative that you write and call today! (More info at the ACLU web site: http://www.aclu.org/congress/congress.html) NDAs and contracts that you should never sign. An issue which comes up a lot in start up companies is how to divide up the ownership fairly. The best article I've ever read on this topic is by Jim Clark, founder of SGI, Netscape, Healtheon, myCFO, et al. You can read it here 
	"
https://www.joelonsoftware.com/2000/03/23/command-and-conquer-and-the-herd-of-coconuts/,Command and Conquer and the Herd of Coconuts,2000-03-23T00:15:51+00:00,2016-12-05T19:34:11+00:00,Joel Spolsky,"Fog Creek Software, News","
	Recently I've been thinking a lot about what made Microsoft a great company to work for, and why working at Juno was so frustrating. At first I attributed the difference to the east coast/west coast thing, but I think it's a bit more subtle than that. 
One of the most important things that made Microsoft successful was Bill Gates' devotion to hiring the best people. If you hire all A people, he said, they'll also hire A people. But if you hire B people, they'll hire the C people and then it's all over. This was certainly true at Microsoft. There were huge branches of the Microsoft tree filled with great people; these businesses were perennially successful (Office, Windows, and the developer products). But there were also branches that were just not as successful: MSN failed again and again and again; Microsoft Money took forever to get going, and Microsoft Consulting Services is full of airheads. In each of these cases it's pretty clear that a B leader built up a business unit full of C players and it just didn't work. 
So: hire smart people who get things done. (See The Guerrilla Guide to Interviewing) It's so important there's a web page all about it and it's one of PaxDigita's most important goals. And when it worked, it worked quite well at Microsoft. 
When I first went to interview at Juno, I wasn't sure that this was the company for me. The software looked a little bit goofy. The whole company smelled like a bunch of Wall Street Jocks who heard that the Internet was the New New Thing and they wanted in. So I called them up and said, ""well, I'm not sure if I want to work there, but I'd like to learn more about your company."" 
In typical arrogant manner, they proceeded to schedule me for a whole battery of interviews and made me prove that I was good enough to work there. At first I was a little bit miffed, because I hadn't really decided that I was interested in the job in the first place. But then I realized that any company that has such a rigorous hiring process as Juno does has got to be full of smart people. This alone impressed me enough to take the job. Sure enough, Juno (and D. E. Shaw, the corporate parent) were full of geniuses. The receptionists had PhDs. The place was full of people like Dr. Eric Caplan, a former associate professor from U. Chicago who was writing technical documents for the intranet for heaven's sake. Talk about overqualified. 
For a couple of years, I was very happy at Juno. It seemed like a dream job. (I even got interviewed for a website called dreamjobs.com talking about how dreamy Juno was). One thing was a little bit strange - after about a year, I was promoted to be in charge of exactly 2 people on my little team of 6. In fact the average manager at Juno has about 2 reports, a stunningly vertical organization by any standard. 
The next thing that I started noticing was strange is that a lot of people were leaving. In the wired wired world of Silicon Alley that's not uncommon. What was weird is how consistent their reason for leaving was: none of them felt any possibility of moving up in the company. 
So what we had here was a company that was already as vertical and hierarchical as imaginable, with about 50 managers for a total of 150 employees, and people were complaining because there was no hope of moving up. 
What's going on here? 
At Microsoft, for some reason, lots of people at the lowest rung of the hierarchy were completely satisfied with their jobs and were happy to go on doing them forever. Whereas at Juno, people in the same positions rapidly got frustrated and wanted to leave because they couldn't get promoted. 
I think the crucial difference here was in the corporate culture, specifically, in the way management worked. 
At Microsoft, management was extremely hands-off. In general, everybody was given some area to own, and they owned it. Managers made no attempt to tell people what to do, in fact, they saw their role as running around, moving the furniture out of the way, so their reports could get things done. 
There were some great examples of this. Managers always refused to resolve conflicts. Typically what would happen is that a designer would get into an argument with a developer over what a feature should look like. They would argue back and forth, discussing the issue for an hour, and eventually, failing to reach agreement, they would stomp into some manager's office hoping for a resolution. Now you've got three people in the room: a designer, a developer, and a manager. Who's the person who knows least about the problem? Obviously, it's the manager - who was just hauled in at the last minute for Conflict Resolution. At Microsoft, the manager would usually refuse to make the decision. After all, they have the least information about the problem. The manager would generally force the designer and developer to work it out on their own, which, eventually, they did. 
At Juno, quite the opposite was the case. Nobody at Juno owned anything, they just worked on it, and different layers of management happily stuck their finger into every pie, giving orders left and right in a style which I started calling hit and run management because managers tended to pop up unannounced, give some silly order for exactly how they wanted something done, dammit, without giving any thought to the matter, and leave the room for everyone else to pick up the pieces. The most egregious example was the CEO and president of the company, who would regularly demand printouts of every screen, take them home, and edit them using a red pen. His edits were sometimes helpful (spelling and grammar corrections), but usually, they demonstrated a complete lack of understanding as to what went into the screens and why they said what they said. For months later, we would have meetings where people would say things like ""Charles [the CEO] doesn't like dropdown list boxes,"" because of something he had edited without any thought, and that was supposed to end the discussion. You couldn't argue against this fictional Charles because he wasn't there; he didn't participate in the design except for hit and run purposes. Ouch. 
Hit and run management is but one symptom of what I would call Command and Control Management... something right out of the General Motors 1953 operations manual. In a particularly political company, it even becomes worse - more like Command and Conquer management. It's completely inappropriate because it makes people unhappy, it causes the person with the least information to make the decisions, and it doesn't allow a corporation to take advantage of all the talents of the people it hired. If, like Juno, the corporation had been careful only to hire the brightest, most talented people, then it squandered an incredible resource and made those talented people frustrated as all hell. 
When is Command and Conquer management acceptable? Well, it might work where your company is a Herd of Coconuts - a bunch of underqualified morons who need herding. Perhaps something like the workfare corps that does the raking in Central Park. But software companies aren't Herds of Coconuts, and Command and Conquer doesn't cut it. 
PaxDigita Culture 
So this is why I'm concerned with creating the right culture of hands-off management at PaxDigita. In general: 
everybody owns some area. When they own it, they own it. If a manager, or anybody else, wants to provide input into how that area is managed, they have to convince the owner. The owner has final say.
every decision is made by the person with the most information.
management is extremely flat. Ideally, managers just don't have time to get their fingers in the pies of their reports. You may be interested to read about a GE plant in North Carolina that has 170 employees who all report directly to the plant manager. 
As a result, we will build a democratic culture where everybody runs the company. On a day to day basis, PaxDigita people have no boss - they run themselves.
	"
https://www.joelonsoftware.com/2000/03/23/20000323/,2000/03/23,2000-03-23T00:00:06+00:00,,Joel Spolsky,News,"
	Today, two pieces I wrote as a blueprint for PaxDigita. The Guerrilla Guide to Interviewing. I originally wrote this for Microsoft, and edited it a couple of times in my career; now it's the PaxDigita interviewing manual. Recently I've been thinking a lot about what made Microsoft a great company to work for, and why working at Juno was so frustrating. At first I attributed the difference to the east coast/west coast thing, but I think it's a bit more subtle than that. History in the making: 
	"
https://www.joelonsoftware.com/2000/03/21/20000321/,2000/03/21,2000-03-21T00:00:05+00:00,,Joel Spolsky,News,"
	I'm convinced that most people think about software companies in an upside-down way. The common belief is that when you're building a software company, the goal is to find a neat idea that solves some problem which hasn't been solved before, implement it, and make a fortune. We'll call this the build-a-better-mousetrap belief. But the real goal for software companies should be converting capital into software that works. If you understand this, its easier to make the right strategic decisions.
	"
https://www.joelonsoftware.com/2000/03/19/two-stories/,Two Stories,2000-03-19T00:15:28+00:00,2016-12-05T19:13:46+00:00,Joel Spolsky,"Tech lead, News","
	I want to tell you two stories from my career which I think are classic illustrations of the difference between tech companies that are well-managed and tech companies that are disasters. It comes down to the difference between trusting employees and letting them get things done, versus treating them like burger flippers that need to be monitored and controlled every minute, lest they wander off and sabotage everything.
 
My first assignment at my first job was working at Microsoft, where I was told to come up with a new macro language strategy for Excel. Pretty soon, I had the first draft of the ""Excel Basic"" spec (which later evolved into Visual Basic for Applications, but that's another story). Somehow, this mysterious group of people at Microsoft called the ""Application Architecture"" group got wind of my spec, which must have concerned them, because for some reason they thought that they were in charge of things like macro language strategies, and they asked to see my spec.
I asked around. Who's the Application Architecture group? Nobody seemed to think they were very serious. It turns out that they were a group of just four people, recent hires with PhDs (very unusual for Microsoft). I sent them a copy of my spec and went to meet them, in case they had something interesting to say.
""Blah blah!"" said one of them. ""Blah blah blah, blah blah blah!"" said another. I don't think they quite had anything interesting to say. They were very enamored of the idea of subclassing and sort of thought that people making macros in Excel wanted to subclass a lot of things. In any case, one of the fellows said, ""Well, this is all very interesting. What's next? Who has to approve your spec?""
I laughed. Even though I had only been at Microsoft for a few months, I knew that there was no such thing as somebody approving my spec. Hell, nobody had time to read my spec, let alone approve it. The programmers were bugging me every day to get them more pages so that they could write more code. My boss (and his boss) made it very clear to me that nobody else understood macros or had time to work on macros, so whatever I did, it better be right. And here this PhD working in a strange research group at Microsoft assumed that things were a bit more formal than that.
I pretty rapidly realized that the App Architecture group knew even less than I did about macros. At least, I had talked to a handful of macro developers and some Excel old-timers to get a grip on what people actually did with Excel macros: things like recalculating a spreadsheet every day, or rearranging some data according to a certain pattern. But the App Architecture group had merely thought about macros as an academic exercise, and they couldn't actually come up with any examples of the kind of macros people would want to write. Pressured, one of them came up with the idea that since Excel already had underlining and double-underlining, perhaps someone would want to write a macro to triple underline. Yep. REAL common. So I proceeded to ignore them as diplomatically as possible.
This seemed to piss off a guy named Greg Whitten who headed up the App Architecture group. Now, Greg was something like Microsoft employee number 6. He had been around forever; nobody could quite point to anything he had done but apparently he had lunch with Bill Gates a lot and GW-BASIC was named after him. Greg called a BIG MEETING and proceeded to complain about how the Excel team (meaning me) was screwing up the macro strategy. We pressured him to come up with some specific reasons but his arguments just weren't convincing. I thought it was nice that here I was, a new hire pipsqueak right out of college, arguing with employee number 6 and apparently winning the argument. (Can you imagine that happening at a Grey Flannel Suit company?) My programming team, headed by Ben Waldman (now a VP at Microsoft) backed me up completely, which was all that really mattered, because the programming team wrote the code and thus had the final say on how things got done.
I would have been perfectly happy to leave it at that. If the Apps Architecture team needed care and feeding and wanted to argue about stuff, that was OK, I would argue with them as much as they wanted as long as they left the programmers alone to do their work. But then something even more interesting happened that blew my mind. I was sitting at lunch with some coworkers, in the Redmond sun, when Pete Higgins came up to me. At that time Pete was the general manager for Office - I knew who he was, of course, but didn't expect that he knew me very well. 
""How's it going, Joel?"" he asked. ""I hear you've been having some issues with the App Architecture group.""
""Oh no!"" I said. ""Nothing I can't handle.""
""Say no more,"" he said, ""I understand."" He left. By the next day the rumor had gotten back to me: the App Architecture group was disbanded. Not only that, but each member of the group was sent to a different department at Microsoft, as far apart as possible. I never heard from them again.
I was blown away, of course. At Microsoft, if you're the Program Manager working on the Excel macro strategy, even if you've been at the company for less than six months, it doesn't matter - you are the GOD of the Excel macro strategy, and nobody, not even employee number 6, is allowed to get in your way. Period.
This sends a really strong message. For one, it makes everyone that much more conscientious about their jobs. They can't hide behind the idea that ""management approved their spec,"" since management really didn't look too closely at their spec. All management did was hire smart people and gave them something to do. For another, it makes for an extremely nice place to work. Who doesn't want to be king of their own domain? Software, by its nature, is very easy to divide into smaller and smaller components, so it's always possible to divide up responsibility among people and let people own an area. This is probably THE reason why software people love working at Microsoft.
Years passed. I found myself working at Juno, an online service and free email provider. This time, the experience was the exact opposite of my work at Microsoft. I had two programmers reporting to me, but my own manager constantly undermined my (limited) authority by going directly to my reports and giving them things to do, often without even telling me. Even for trivial requests like days off, my manager thought that it was his job to approve or disapprove the request. 
After a couple of years at Juno I was working on the new user signup feature. For Juno 3.x, a major release, I was going to be in charge of a complete overhaul of the signup process. By this time, I was a relatively senior member of the technical team; I got great performance reviews, and my managers seemed to appreciate the work I was doing. But they just couldn't bring themselves to trust me. Command and control.
One part of the signup process asked the users to type in their birthday. This was just one small bit of a lengthy signup process that went on for something like 30 screens as Juno grilled you about your income, your favorite sports, how many children you have and how old they were, and about 100 other things. To make the signup process a little bit easier, I wanted to change the birthday field to be free format, so you could type ""8/12/74"" or ""August 12, 1974"" or ""12 Aug 74"" or whatever. (Have you used Outlook? It would work like Outlook, where you could type dates in just about any format and it would accept them).
Without going into too much detail, my manager decided he didn't like this. It became an issue of ego for him. First he yelled at the designer who was working on that page (without even telling me). Then he yelled at me. Then he reminded me every single day that I had to change it to the way he wanted it. Then he got the CEO of the company to review it, and made a big show out of getting the CEO of the company to criticize my new design. Even the CEO at Juno is perfectly happy to interfere in work done at the lowest level in the company, in fact, it's standard operating procedure.
I was furious, needless to say. It was a small thing, a matter of taste, really. Some people would prefer my way. Some people would prefer his. In either case, the message was clear: you WILL do as you are told here, dammit. It was a very command-and-conquer mentality that was more of a battle of cojones than a discussion of user interface design.
I won't say that this is the reason I left Juno, but it does illustrate the reason I left Juno: it was the idea that no matter how hard you work, no matter how smart you are, no matter whether you are 'in charge' of something or not, you have no authority whatsoever for even the tiniest thing. None. Take your damn ideas, training, brains, and intelligence, all the things we're paying you for, and shove it. And at Juno, there were plenty of managers, something like 1/4 of all the employees, and so they had plenty of times to stick their fingers into every single decision and make sure that they were in control. The contrast with Microsoft, where VP's descended from Building 9 to make it clear that you have the authority to get things done, was stark.
To some extent, Juno's hopelessly inept management process is a factor of being a New York City company, not a West Coast company, so modern styles of management haven't quite permeated. It's also a problem caused by the deep inexperience of Juno's managers, and it originates at the top - the CEO, a 29 year old who has never worked outside D. E. Shaw, who interferes in everything he can get his fingers into, including the wording on error messages that come up when things go wrong; the CTO regularly screams at his reports if they dare to question his wisdom; they take it out on the programmers, who go home and kick their dogs. Compare this to Microsoft, where things are done at the lowest level, and most managers act like their most important job is to run around the room, moving the furniture out of the way, so people can concentrate on their work.
	"
https://www.joelonsoftware.com/2000/03/19/20000319/,2000/03/19,2000-03-19T00:00:04+00:00,,Joel Spolsky,News,"
	I want to tell you two stories from my career which I think are classic illustrations of the difference between tech companies that are well-managed and tech companies that are disasters. It comes down to the difference between trusting employees and letting them get things done, versus treating them like burger flippers that need to be monitored and controlled every minute, lest they wander off and sabotage everything. (My second feature article). Don't even get me started about what a bad brokerage PaineWebber is. They actually sent me a check (to close the account) for $7 which bounced! They had put a stop payment on it! This is the kind of service you get for paying $1000 commissions. 
	"
https://www.joelonsoftware.com/2000/03/18/more-on-sabbaticals/,More on Sabbaticals…,2000-03-18T00:16:06+00:00,2016-12-05T19:34:19+00:00,Joel Spolsky,"Fog Creek Software, News","
	I took a self-funded sabbatical in 1995, and I'm taking another one now. I think they're great.
In 1991, I graduated from college and set off on my first cross country journey, by Ryder van, to Redmond, Washington. My first job was at Microsoft. This was, I would like to point out, before everybody hated Microsoft. In those days, only college kids and UNIX weenies hated Microsoft because it made ""toy"" products and boring office software for suits. One of the kids in my class was offered a job to work on OS/2. ""No way I'm going down with that ship,"" he said, and went to law school instead.
I was, to say the least, unhappy at the prospect of being out of school. I thrived on the social atmosphere of dorm life and was dreading the prospect of living in a dull apartment in a grey city where I didn't know anybody. Of course, that's the trick at Microsoft: most new hires are recent graduates from around the country who arrive in the waterlogged suburbia of Redmond without too many friends or social life. For the average geek, this formula means that you spend all your time at work. A typical day consisted of: wake up, walk to work (try not to step on any slugs), work until late at night, go home, watch TV, go to sleep, repeat.
My version was a little bit different, because I'm not a totally hopeless geek; I went to the gym in the evening instead of watching TV, and spent my weekends biking around Lake Washington to the U. District where I hung out at bookstores, libraries, and coffee houses and felt grumpy about not being in college anymore. But after a couple of years of this, I noticed that I wasn't developing much of a social life; I didn't have a boyfriend; everybody I knew was from Microsoft. Drabsville.
Needing a change, I moved to New York to work for Microsoft Consulting Services. At some point, I want to write a book-length treatment about that horrible hellmouth of incompetence. For now, suffice it to say that I didn't last for long. A quick calculation of my stock options showed that I had accumulated about $120,000 in 2 1/2 years at ""the soft"", and, by my calculations, I thought I could afford the risk of working at a startup.
I got a job offer from Pipeline, an early ISP in the New York area, and quit Microsoft. But talking to the founder and owner of Pipeline gave me some bad feelings, and thus began my first sabbatical.
Over the next 9 months or so, I did a couple of things. First, I learned. It was 1994, the Internet was starting to happen, and I had some catching up to do after living in the insular waters of Microsoft Before The Memo when it was assumed that MSN was going to compete with, and subsume, the Internet totally.
I also went through the exercise of thinking about my own startup - twice. Both exercises fell apart after a few weeks work because I didn't have the right partner, and I didn't know what I was doing, but I would like to compliment myself with the thoughts that the first startup could have become Yahoo! and the second startup could have become Vermeer (the company that became Microsoft Front Page.) I have specs somewhere on my hard drive for products that, if we had actually created them, really could have been huge Internet companies. But it's not the idea that matters, it's the execution - an idea I will return to many times in this weblog.
Another idea that had been itching in the back of my mind was to take a cross-country bicycle trip. When these startup ideas fell through, I started planning to take a trip in the spring, as soon as the weather was warm enough. (This was before I knew that it rains a lot in the spring.) The trip was great, you can read my web log (from way back in 1995!) here. 
Somewhere in Idaho, riding through an empty road, my mood changed; I felt totally rested and eager to get back to work. Sitting in the library at Boise State, I read all the computer industry trade rags enthusiastically, and was excited to see how much was changing and how many new things there were to learn. When I got home and checked my bank account, I was happy to discover that the $7000 dollars it took for the 10 week bike trip had been magically replaced through the mystical power of Microsoft stock; being out of work for eight or nine months had barely depleted my savings.
So that was sabbatical one. It took about 2 days to find another, interesting job, and I spent the next four years working: first at Viacom, then at Juno.
Last November, some of the really bad management over at Juno had just worn me down. I found it impossible to be excited any more. It was increasingly difficult to ignore the subtle and unsubtle ways that Juno managers at all levels were screwing up. Worse, the intense politicalness and arrogance of management there convinced me that I had almost no chance of changing things. I joined the flow of talented, frustrated people streaming for the doors.
I really like the formula of working for four years, and then taking one year off. This time I'm pretty convinced that when I go back to work I want to work in a real startup, as a founder. I've learned a lot about this over the years, and I've gradually come to realize that there is nothing really risky about starting a company these days. There are billions of not-very-smart venture dollars out there looking for somebody to spend; even startups pay good salaries (they have to); and the chance of having a ""liquidity event"" - IPO or selling the company - is high enough that over the average career, say, working at 4 startups over a 10 year period, there is a fantanstic chance that you will make a big buttload of moolah.
	"
https://www.joelonsoftware.com/2000/04/30/top-five-wrong-reasons-you-dont-have-testers/,Top Five (Wrong) Reasons You Don’t Have Testers,2000-04-30T00:15:35+00:00,2016-12-05T19:26:40+00:00,Joel Spolsky,"CEO, News","
	In 1992, James Gleick was having a lot of problems with buggy software. A new version of Microsoft Word for Windows had come out, which Gleick, a science writer, considered to be awful. He wrote a lengthy article in the Sunday New York Times Magazine which could only be described as a flame, skewering the Word team for being unresponsive to the requests of customers, and delivering an enormously buggy product.
Later, as a customer of a local Internet provider Panix (which also happens to be my Internet provider), he wanted a way to automatically sort and filter his mail. The UNIX tool for doing this is called procmail, which is really arcane and has the kind of interface that even the most hardcore UNIX groupies will admit is obscure.
Anyway, Mr. Gleick inadvertently made some kind of innocent typo in procmail which deleted all his email. In a rage, he decided that he was going to create his own Internet access company. Hiring Uday Ivatury, a programmer, he created Pipeline, which was really quite a bit ahead of its time: it was the first commercial provider of Internet access with any kind of graphical interface. 
Now, Pipeline had its problems, of course. The very first version didn't use any kind of error correction protocol, so it had a tendency to garble things up or crash. Like all software, it had bugs. I applied for a job at Pipeline in 1993. During the interview, I asked Mr. Gleick about the article he wrote. ""Now that you're on the other side of the fence,"" I asked, ""do you have a bit more of an appreciation for the difficultly of creating good software?""
Gleick was unrepentant. He denied that Pipeline had any bugs. He denied that it was anything as bad as Word. He told me: ""one day, Joel, you too will come to hate Microsoft."" I was a little bit shocked that his year of experience as a software creator, not merely a software user, hadn't given him a smidgen of appreciation for how hard it is to really get bug-free, easy to use software. So I fled, turning down the job offer. (Pipeline was bought out, by PSI, the strangest Internet provider on earth, and then unceremoniously taken out and shot.)
Software has bugs. CPUs are outrageously finicky. They absolutely refuse to deal with things that they weren't taught to deal with explicitly, and they tend to refuse in the most childish of ways. When my laptop is away from home, it tends to crash a lot because it can't find the network printer it's used to finding. What a baby. It probably comes down to a single line of code somewhere with a teensy tiny almost insignificant bug in it.
Which is why you positively, absolutely, need to have a QA department. You are going to need 1 tester for every 2 programmers (more if your software needs to work under a lot of complicated configurations or operating systems). Each programmer should work closely with a single tester, throwing them private builds as often as necessary. 
The QA department should be independent and powerful, it must not report to the development team, in fact, the head of QA should have veto power over releasing any software that doesn't meet muster.
My first real software job was at Microsoft; a company that is not exactly famous for its high quality code, but which does nonetheless hire a large number of software testers. So I had sort of assumed that every software operation had testers.
Many do. But a surprising number do not have testers. In fact, a lot of software teams don't even believe in testing.
You would think that after all the Quality mania of the 80s, with all kinds of meaningless international ""quality"" certifications like ISO-9000 and buzzwords like ""six-sigma"", managers today would understand that having high quality products makes good business sense. In fact, they do. Most have managed to get this through their heads. But they still come up with lots of reasons not to have software testers, all of which are wrong.
I hope I can explain to you why these ideas are wrong. If you're in a hurry, skip the rest of this article, and go out and hire one full-time tester for every two full-time programmers on your team. 
Here are the most common boo-hoo excuses I've heard for not hiring testers:
1. Bugs come from lazy programmers.
""If we hire testers"", this fantasy goes, ""the programmers will get sloppy and write buggy code. By avoiding testers, we can force the programmers to write correct code in the first place.""
Sheesh. If you think that, you either have never written code, or you are remarkably dishonest about what writing code is like. Bugs, by definition, leak out because programmers did not see the bug in their own code. A lot of times it just takes a second set of eyes to see a bug.
When I was writing code at Juno, I tended to exercise my code the same way every time ... I used my own habits, relying on the mouse a lot. Our marvelous, vastly overqualified tester had slightly different habits: she did more things with the keyboard (and actually rigorously tested the interface using every possible combination of inputs). This quickly uncovered a whole slew of bugs. In fact at times she actually told me that the interface flatly didn't work, 100% did not work, even though it always worked for me. When I watched her repro the bug I had one of those whack-your-forehead moments. Alt! You're holding down the Alt Key! Why didn't I test that?
2. My software is on the web. I can fix bugs in a second.
Bwa ha ha ha ha! OK, it's true, web distribution lets you distribute bug fixes much faster than the old days of packaged software. But don't underestimate the cost of fixing a bug, even on a web site, after the project has already frozen. For one thing, you may introduce even more bugs when you fix the first one. But a worse problem is that if you look around at the process you have in place for rolling out new versions, you'll realize that it may be quite an expensive proposition to roll out fixes on the web. Besides the bad impression you will make, which leads to:
3. My customers will test the software for me.
Ah, the dreaded ""Netscape Defense"". This poor company did an almost supernatural amount of damage to its reputation through their ""testing"" methodology:
when the programmers are about halfway done, release the software on the web without any testing.
when the programmers say they are done, release the software on the web without any testing.
repeat six or seven times.
call one of those versions the ""final version""
release .01, .02, .03 versions every time an embarrassing bug is mentioned on c|net. 
This company pioneered the idea of ""wide betas"". Literally millions of people would download these unfinished, buggy releases. In the first few years, almost everybody using Netscape was using some kind of pre-release or beta version. As a result, most people think that Netscape software is really buggy. Even if the final release was usually reasonably unbuggy, Netscape had so doggone many people using buggy versions that the average impression that most people have of the software was pretty poor.
Besides, the whole point of letting ""your customers"" do the testing is that they find the bugs, and you fix them. Unfortunately, neither Netscape, nor any other company on earth, has the manpower to sift through bug reports from 2,000,000 customers and decide what's really important. When I reported bugs in Netscape 2.0, the bug reporting website repeatedly crashed and simply did not let me report a bug (which, of course, would have gone into a black hole anyway). But Netscape doesn't learn. Testers of the current ""preview"" version, 6.0, have complained in newsgroups that the bug reporting website still just doesn't allow submissions. Years later! Same problem!
Of those zillions of bug reports, I would bet that almost all of them were about the same set of 5 or 10 really obvious bugs, anyway. Buried in that haystack will be one or two interesting, difficult-to-find bugs that somebody has gone to the trouble of submitting, but nobody is looking at all these reports anyway, so it is lost.
The worst thing about this form of testing is the remarkably bad impression you will make of your company. When Userland released the first Windows version of their flagship Frontier product, I downloaded it and started working through the tutorial. Unfortunately, Frontier crashed several times. I was literally following the instructions exactly as they were printed in the tutorial, and I just could not get more than 2 minutes into the program. I felt like nobody at Userland had even done the minimum amount of testing, making sure that the tutorial works. The low perceived quality of the product turned me off of Frontier for an awfully long time. 
4. Anybody qualified to be a good tester doesn't want to work as a tester.
This one is painful. It's very hard to hire good testers. 
With testers, like programmers, the best ones are an order of magnitude better than the average ones. At Juno, we had one tester, Jill McFarlane, who found three times as many bugs as all four other testers, combined. I'm not exaggerating, I actually measured this. She was more than twelve times more productive than the average tester. When she quit, I sent an email to the CEO saying ""I'd rather have Jill on Mondays and Tuesdays than the rest of the QA team put together"".
Unfortunately, most people who are that smart will tend to get bored with day-to-day testing, so the best testers tend to last for about 3 or 4 months and then move on.
The only thing to do about this problem is to recognize that it exists, and deal with it. Here are some suggestions:
Use testing as a career move up from technical support. Tedious as testing may be, it sure beats dealing with irate users on the phone, and this may be a way to eliminate some of the churn from the technical support side.
Allow testers to develop their careers by taking programming classes, and encourage the smarter ones to develop automated test suites using programming tools and scripting languages. This is a heck of a lot more interesting than testing the same dialog again and again and again.
Recognize that you will have a lot of turnover among your top testers. Hire aggressively to keep a steady inflow of people. Don't stop hiring just because you temporarily have a full manifest, 'cause da golden age ain't gonna last.
Look for ""nontraditional"" workers: smart teenagers, college kids, and retirees, working part time. You could create a stunningly good testing department with two or three top notch full timers and an army of kids from Bronx Science (a top-ranked high school in New York) working summers in exchange for college money.
Hire temps. If you hire about 10 temps to come in and bang on your software for a few days, you'll find a tremendous number of bugs. Two or three of those temps are likely to have good testing skills, in which case it's worth buying out their contracts to get them full time. Recognize in advance that some of the temps are likely to be worthless as testers; send them home and move on. That's what temp agencies are for. 
Here's one way not to deal with it:
Don't even think of trying to tell college CS graduates that they can come work for you, but ""everyone has to do a stint in QA for a while before moving on to code"". I've seen a lot of this. Programmers do not make good testers, and you'll lose a good programmer, who is a lot harder to replace. 
And finally. The number one stupid reason people don't hire testers:
5. I can't afford testers!
This is the stupidest, and it's the easiest to debunk.
No matter how hard it is to find testers, they are still cheaper than programmers. A lot cheaper. And if you don't hire testers, you're going to have programmers doing testing. And if you think it's bad when you have testers churning out, just wait till you see how expensive it is to replace that star programmer, at $100,000 a year, who got sick of being told to ""spend a few weeks on testing before we release"" and moved on to a more professional company. You could hire three testers for a year just to cover the recruiter's fee on the replacement programmer.
Skimping on testers is such an outrageous false economy that I'm simply blown away that more people don't recognize it.
	"
https://www.joelonsoftware.com/2000/04/30/20000430/,2000/04/30,2000-04-30T00:00:22+00:00,,Joel Spolsky,News,"
	Every software development team needs testers, but too many companies just won't hire them. This is one of the worst ""false economy"" moves you can make. Read my new article: Top Five (Wrong) Reasons You Don't Have Testers. In my chapter on affordances and metaphors, I praised tab dialogs as providing a better metaphor and better usability than the listbox/combination dialogs that they replaced. I was barraged with mail saying, ""yeah, tab dialogs are great, but not if you need more than one row of tabs!"" Which is true. All the designs I've ever seen with multiple rows are terrible - they're either confusing, or they violate realism in some way. Now, you could make a good case that if you have to have more than one row of tabs, your design is too complicated and it needs to be simplified. But if you can't do that, here's a way to do multiple rows that doesn't violate realism: Last week, working on some web page design that relied heavily on style sheets, JavaScript, and DHTML, I came across the best HTML reference I've ever seen. It's called Dynamic HTML: The Definitive Reference, by Danny Goodman. This is the Talmud of Dynamic HTML. It's 1000 pages long. It covers HTML, DOM, CSS, and JavaScript in staggering detail. The best part is that the author has tested everything on Netscape and IE, and provides a detailed cross reference of what works where. As soon as I started using this book instead of the shoddy, disorganized, unindexed 'documentation' that Microsoft provides, I became a significantly happier person. You will too. 
	"
https://www.joelonsoftware.com/2000/04/28/20000428/,2000/04/28,2000-04-28T00:00:21+00:00,,Joel Spolsky,News,"
	I'm coming to suspect that Microsoft has this one extra marketing team that is not assigned to a product. Their job is to make up a non-thing and market the heck out of it. This year it's NGWS. Last year it was DNA. The year before, it was ActiveX. Before that, it was Intellisense. Even before Intellisense, they had WOSA. What all these have in common is that they don't exist and don't mean anything, but they have a marketing team from Microsoft blathering about them. There's so much stuff here that it's getting hard to find things! I've added a Site Index now that there's so much stuff here. I also put some links along the bottom of the page. The book ""UI for Programmers"" will eventually have 9 chapters. So far 7 chapters have been written.
	"
https://www.joelonsoftware.com/2000/04/27/20000427/,2000/04/27,2000-04-27T00:00:20+00:00,,Joel Spolsky,News,"
	Another thing users have trouble with is using the mouse. Even if they are adept mousers, using the mouse precisely can be difficult. User Interface Design for Programmers 7 talks about how to smooth out some of the hard edges of your program, by thinking about the dexterity it takes to use the mouse in UI. 
	"
https://www.joelonsoftware.com/2000/04/26/20000426/,2000/04/26,2000-04-26T00:00:19+00:00,,Joel Spolsky,News,"
	I really, really don't want to say that users are coconuts. They're not. But if you design your program for the, um, challenged users, everyone will find them easier to use. Today, I talk about users and reading. You see, users don't like to read. Give them a lot of words, and they will happily ignore them. Read Chapter 6 of UI for Programmers for more! 
	"
https://www.joelonsoftware.com/2000/04/23/20000423/,2000/04/23,2000-04-23T00:00:18+00:00,,Joel Spolsky,News,"
	When charitable organizations send you a request for a donation, they almost always include a ""gift"" in the envelope. Sticky labels with your address on them. Or a couple of blank greeting cards. The reason they're giving you the gift is because of the social principle of reciprocity; now you will feel obliged to give something back. You've probably heard the expression ""hurry, supplies are limited!"" so many times in television advertisements that it hardly registers any more. But it's there because of the principle of scarcity; your natural assumption that something that is scarce is worth more money. These tricks, among others, are used by salespeople, marketers, and advertisers to influence people to behave in a certain way. Every couple of years or so, I reread a great book about the psychological theories behind the science and practice of influencing the behavior of other people: Robert B. Cialdini's classic Influence. This was assigned reading in Psych 110 at Yale, and one of the most popular textbooks of the year. I assure you that every beginning car salesperson and advertising copy writer is reading this book, and you should too, if only in self-defense! 
	"
https://www.joelonsoftware.com/2000/04/22/20000422/,2000/04/22,2000-04-22T00:00:17+00:00,,Joel Spolsky,News,"
	From the latest chapter on UI design: Even if you think (as the Netscape 6.0 engineers clearly do) that Alt+Left is not a good shortcut key for ""Back"", there are literally millions of people out there who will try to use Alt+Left to go back, and if you refuse to do it on some general religious principle that Bill Gates is the evil Smurf Gargamel, then you are just gratuitously ruining your program so that you can feel smug and self-satisfied, and your users will not thank you for it. User Interface Design for Programmers 5 
	"
https://www.joelonsoftware.com/2000/04/19/where-do-these-people-get-their-unoriginal-ideas/,Where do These People Get Their (Unoriginal) Ideas?,2000-04-19T00:15:39+00:00,2016-12-05T19:27:18+00:00,Joel Spolsky,"CEO, News","
	Maybe I should call this article ""why I should stop reading Upside Magazine"". I really have been trying to stop, but they send it to me for free, and I really needed bathroom reading material, so I grabbed it and found one of the most wrong-headed articles I've seen in a long time. Well, actually, there are wrong-headed articles all over Upside magazine, but this one was particularly irksome. 
It's an article by Stephen James called ""Lessons in Survival"". (March 2000 Upside). Every month, I'm told, Mr James will share with us ""some of the simple lessons [he's] learned from [his] own startups"". 
It includes lots of extremely useful advise that you would never figure out on your own, like, don't spend a lot of money on office space and try to find a neighborhood where you don't have to stand in line at the local restaurants. If you are starting a dot com, Mr James reminds us, ""Get out of the house... Working at home sucks."" And he points out that you should never pay more than $1.50 per square foot. Thanks, Mr James! It's extremely strange to me that you could expect the same price in every market. Maybe he just assumes that everyone in the world starts all companies in Silicon Valley. 
""Forget the free coffee and drinks. Sure they're free at Microsoft... who wants to be like Microsoft?"" 
Hello? Is this a joke? Did Upside schedule their April issue for May? 
I guess Mr James lives in a funny la-la world where there are millions of programmers just dying to work at your startup. When you are the founder of a company, you want to skimp on frills; they seem like a waste of money to you. That's fine. But don't think that candidates interviewing at your company will have the same emotional attachment; they won't. They are looking for a nice place to work. Skimping on free soft drinks, a completely standard benefit at most high tech companies, is a great way to send your employees and potential employees the message that you just don't care about being an attractive workplace. 
Everybody in Silicon Valley seems to be talking about Charlie, the gourmet cook at Google who used to work for Jerry Garcia. I can tell you, the food is spectacular even by Michelin standards, not just corporate cafeteria standards. Because the food in the company cafeteria is so good, people don't leave work to eat. They eat with their colleagues, which increases learning and communication. They get back to work within half an hour, making them more productive. They feel like Google cares about them, making them more loyal. 
Meanwhile, ""Build-outs are a bad idea,"" Stephen James tells us. ""Don't build out your space with walls or partitions - leave it open... If employees need an office with a door, let them go to law school or Apple."" 
Guess what? They will go to Apple! And replacing just one of them will cost on the order of $50,000 in recruiting and training. A friend of mine provides gorgeous private office space for his programmers in the most expensive real estate district in the USA, Manhattan, and it's probably costing about $6,000 per person per year. Not much in the scheme of things. 
What's worse, Mr James seems to be completely ignorant of the documented productivity gains provided by giving knowledge workers space, quiet, and privacy. The classic software management book Peopleware documents these productivity benefits extensively. (To be fair, Mr James is not alone in his cluelessness. He's just reflecting the folk wisdom prevalent in the Valley). 
Here's the trouble. We all know that knowledge workers work best by getting into ""flow"", also known as being ""in the zone"", where they are fully concentrated on their work and fully tuned out of their environment. They lose track of time and produce great stuff through absolute concentration. This is when they get all of their productive work done. Writers, programmers, scientists, and even basketball players will tell you about being in the zone. 
The trouble is, getting into ""the zone"" is not easy. When you try to measure it, it looks like it takes an average of 15 minutes to start working at maximum productivity. Sometimes, if you're tired or have already done a lot of creative work that day, you just can't get into the zone and you spend the rest of your work day fiddling around, reading the web, playing Tetris. 
The other trouble is that it's so easy to get knocked out of the zone. Noise, phone calls, going out for lunch, having to drive 5 minutes to Starbucks for coffee, and interruptions by coworkers - ESPECIALLY interruptions by coworkers - all knock you out of the zone. If you take a 1 minute interruption by a coworker asking you a question, and this knocks out your concentration enough that it takes you half an hour to get productive again, your overall productivity is in serious trouble. If you're in a noisy bullpen environment like the type that caffinated dotcoms love to create, with marketing guys screaming on the phone next to programmers, your productivity will plunge as knowledge workers get interrupted time after time and never get into the zone. 
With programmers, it's especially hard. Productivity depends on being able to juggle a lot of little details in short term memory all at once. Any kind of interruption can cause these details to come crashing down. When you resume work, you can't remember any of the details (like local variable names you were using, or where you were up to in implementing that search algorithm) and you have to keep looking these things up, which slows you down a lot until you get back up to speed. 
Here's the simple algebra. Let's say (as the evidence seems to suggest) that if we interrupt a programmer, even for a minute, we're really blowing away 15 minutes of productivity. For this example, lets put two programmers, Jeff and Mutt, in open cubicles next to each other in a standard Dilbert veal-fattening farm. Mutt can't remember the name of the Unicode version of the strcpy function. He could look it up, which takes 30 seconds, or he could ask Jeff, which takes 15 seconds. Since he's sitting right next to Jeff, he asks Jeff. Jeff gets distracted and loses 15 minutes of productivity (to save Mutt 15 seconds). 
Now let's move them into separate offices with walls and doors. Now when Mutt can't remember the name of that function, he could look it up, which still takes 30 seconds, or he could ask Jeff, which now takes 45 seconds and involves standing up (not an easy task given the average physical fitness of programmers!). So he looks it up. So now Mutt loses 30 seconds of productivity, but we save 15 minutes for Jeff. 
Anyway, I fully expect that most of you, reading this, will write to say, ""what the heck are you doing reading Upside anyway? You get what you deserve"". How true. Serves me right. 
	"
https://www.joelonsoftware.com/2000/04/19/20000419/,2000/04/19,2000-04-19T00:00:16+00:00,,Joel Spolsky,News,"
	Where do these people get their (unoriginal) ideas? Joel responds to a completely wrong idea in Upside magazine, which he shouldn't have been reading, in the first place. Back in New York City. Happy Passover! 
	"
https://www.joelonsoftware.com/2000/04/18/20000418/,2000/04/18,2000-04-18T00:00:15+00:00,,Joel Spolsky,News,"
	Two related concepts you hear about endlessly in UI design are affordances and metaphors. These are just ways to bring the user model in line with the program model by giving the user little clues about how the program works and what they're supposed to do with it. Read more in Chapter 4 of UI for Programmers. 
	"
https://www.joelonsoftware.com/2000/05/26/20000526/,2000/05/26,2000-05-26T00:00:31+00:00,,Joel Spolsky,News,"
	Seth Gordon emailed me some great tips for reading other people's source code. Reading Code is Like Reading the Talmud Ramon Garcia Fernandez writes: In your essay 'Things you should never do, Part I' you are against rewriting source code. But, what if the author of some source code is not available? What methods would you recommend to understand code written by another programmer? This situation is often encountered in the free software world, where you would rather reuse an existing program than write one from scratch, but it is difficult to read code written by another programmer. My response: I think the best way to read somebody else's code is just to SLOW DOWN... it's like deciphering a code, not like reading. Most people have trouble reading code because their eyes are used to reading at a certain speed from reading text written in human languages. But code is much more dense than English, and contains 'secrets' that need to be deciphered by looking elsewhere: for example, when you see that function call that says UpdateData(FALSE), unless you remember how UpdateData() works, you have to go look for it to figure out what the first argument is and what FALSE means. It takes some skill to learn how to read code slowly and carefully, and many programmers are not patient enough (so they wind up rewriting the code from scratch). But you have to remember that it's still faster to read than to rewrite! While we're at it, Lou Montulli, one of the founding engineers of Netscape and the creator of Lynx, sent me the following response to my plea never to start over from scratch in 'Things You Should Never Do': I agree completely, it's one of the major reasons I resigned from Netscape. In 1998, after wasting a year wanking, a group of new but experienced programmers, and one of our misguided founders, decided it was a good idea to rewrite everything. I had alot of vested interest since I had done most of the original design work on Navigator, but I was unable to supply enough visions of doom to divert the effort. The original design had degenerated substantially due to the integration of Java and the rapid pace of zig zag development that went on over the course of 4 years. There was good reason for a large change, but rewriting everything was a bit overboard to say the least. I laughed heartily as I got questions from one of my former employees about FTP code the he was rewriting. It had taken 3 years of tuning to get code that could read the 60 different types of FTP servers, those 5000 lines of code may have looked ugly, but at least they worked. Alfie Kohn: While rewards are effective at producing temporary compliance, they are strikingly ineffective at producing lasting changes in attitudes or behavior.
	"
https://www.joelonsoftware.com/2000/05/24/strategy-letter-ii-chicken-and-egg-problems/,Strategy Letter II: Chicken and Egg Problems,2000-05-24T00:15:38+00:00,2016-12-05T19:25:27+00:00,Joel Spolsky,"CEO, News","
	The idea of advertising is to lie without getting caught. Most companies, when they run an advertising campaign, simply take the most unfortunate truth about their company, turn it upside down (""lie""), and drill that lie home. Let's call it ""proof by repeated assertion."" For example, plane travel is cramped and uncomfortable and airline employees are rude and unpleasant, indeed the whole commercial air system is designed as a means of torture. So almost all airline ads are going to be about how comfortable and pleasant it is to fly and how pampered you will be every step of the way. When British airways showed an ad with a businessman in a plane seat dreaming that he was a baby in a basket, all sense of reasonableness was gone for good. 
Need another example? Paper companies are completely devastating our national forests, clear cutting old growth forest which they don't even own. So when they advertise, they inevitably show some nice old pine forest and talk about how much they care about the environment. Cigarettes cause death, so their ads show life, like all the ads with happy smiling healthy people exercising outdoors. And so on.
When the Macintosh first came out, there was no software available for it. So obviously, Apple created a giant glossy catalog listing all the great software that was ""available"". Half of the items listed said, in fine print, ""under development,"" and the other half couldn't be had for love or money. Some were such lame products nobody would buy them. But even having a thick glossy catalog with one software ""product"" per page described in glowing prose couldn't disguise the fact that you just could not buy a word processor or spreadsheet to run on your 128KB Macintosh. There were similar ""software product guides"" for NeXT and BeOS. (Attention, NeXT and BeOS bigots: I don't need any flak about your poxy operating systems, OK? Write your own column.) The only thing a software product guide tells you is that there is no software available for the system. When you see one of these beasts, run fleeing in the opposite direction.
Amiga, Atari ST, Gem, IBM TopView, NeXT, BeOS, Windows CE, General Magic, the list of failed ""new platforms"" goes on and on. Because they are platforms, they are, by definition, not very interesting in and of themselves without juicy software to run on them. But, with very few exceptions (and I'm sure I'll get a whole host of email from tedious supporters of arcane and unloved platforms like the Amiga or RSTS-11), no software developer with the least bit of common sense would intentionally write software for a platform with 100,000 users on a good day, like BeOS, when they could do the same amount of work and create software for a platform with 100,000,000 users, like Windows. The fact that anybody writes software for those oddball systems at all proves that the profit motive isn't everything: religious fervor is still alive and well. Good for you, darling. You wrote a nice microEmacs clone for the Timex Sinclair 1000. Bravo. Here's a quarter, buy yourself a treat.
So. If you're in the platform creation business, you are probably going to suffer from what is commonly known as the chicken and egg problem. Nobody is going to buy your platform until there's good software that runs on it, and nobody is going to write software until you have a big installed base. Ooops. It's sort of like a Gordian Knot, although a Gordian Death Spiral might be more descriptive. 
The chicken and egg problem, and variants thereof, is the most important element of strategy to understand. Well, OK, you can probably live without understanding it: Steve Jobs practically made a career out of not understanding the chicken and egg problem, twice. But the rest of us don't have Jobs' Personal Reality Distortion Field at our disposal, so we'll have to buckle down and study hard.
Lesson one. The classic domain of chicken and egg problems is in software platforms. But here's another chicken and egg problem: every month, millions of credit card companies mail out zillions of bills to consumers in the mail. People write paper checks, stuff them in trillions of envelopes, and mail them back. The envelopes are put in big boxes and taken to countries where labor is cheap to be opened and processed. But the whole operation costs quite a bit: the last figure I heard was that it is more than $1 per bill.
To us Internet wise-guys, that's a joke. ""Email me my bill"", you say. ""I'll pay it online!"" You say. ""It'll only cost, say, 1/100000th of a penny. You'll save millions"" Or something like that. 
And you're right. So a lot of companies have tried to get into this field, which is technically known as Bill Presentment. One example is (guess who) Microsoft. Their solution, TransPoint, looks like this: it's a web site. You go there, and it shows you your bills. You pay them. 
So, now, if you get your bills on this Microsoft system, you have to visit the web page every few days to see if any bills have arrived so you don't miss them. If you get, say, 10 bills a month, this might not be too big a hassle. Therein lies the other problem: there are only a small handful of merchants that will bill you over this system. So for all your other bills, you'll have to go elsewhere.
End result? It's not worth it. I would be surprised if 10,000 people are using this system. Now, Microsoft has to go to merchants and say, ""bill your customers over our system!"" And the merchants will say, ""OK! How much will it cost?"" And Microsoft will say, ""50 cents! But it's a lot cheaper than $1!"" And the merchants will say, ""OK. Anything else?"" And Microsoft will say, ""Oh yes, it will cost you about $250,000 to set up the software, connect our systems to your systems, and get everything working.""
And since Microsoft has so few dang users on this system, it's hard to imagine why anyone would pay $250,000 to save 50 cents on 37 users. Aha! The chicken and egg problem has reared its ugly head! Customers won't show up until you have merchants, and merchants won't show up until you have customers! Eventually, Microsoft is just going to spend their way out of this predicament. For smaller companies, that's not an option. So what can you do?
Software platforms actually gives us some nice hints as to how to roast your chicken and egg problem. Let's look a bit at the history of personal computer software platforms in the years since the IBM-PC came out; maybe we'll discover something!
Most people think that the IBM-PC required PC-DOS. Not true. When the IBM-PC first came out, you had a choice of three operating systems: PC-DOS, XENIX (a wimpy 8 bit version of UNIX published by, and I am not making this up, Microsoft), and something called UCSD P-System, which was, if you can believe this, just like Java: nice, slow, portable bytecodes, about 20 years before Java.
Now, most people have never heard of XENIX or UCSD's weirdo stuff. You kids today probably think that this is because Microsoft took over the market for dinky operating systems through marketing muscle or something. Absolutely not true; Microsoft was tiny in those days. The company with the marketing muscle was Digital Research, which had a different operating system. So, why was PC-DOS the winner of the three way race?
Before the PC, the only real operating system you could get was CP/M, although the market for CP/M based computers, which cost about $10,000, was too small. They were cranky and expensive and not very user friendly. But those who did buy them, did so to use as word processors, because you could get a pretty good word processor called WordStar for CP/M, and the Apple II just could not do word processing (it didn't have lower case, to begin with).
Now, here's a little known fact: even DOS 1.0 was designed with a CP/M backwards compatibility mode built in. Not only did it have its own spiffy new programming interface, known to hard core programmers as INT 21, but it fully supported the old CP/M programming interface. It could almost run CP/M software. In fact, WordStar was ported to DOS by changing one single byte in the code. (Real Programmers can tell you what that byte was, I've long since forgotten).
That bears mentioning again. WordStar was ported to DOS by changing one single byte in the code. Let that sink in.
There.
Got it?
DOS was popular because it had software from day one. And it had software because Tim Paterson had thought to include a CP/M compatibility feature in it, because way back in the dark ages somebody was smart about chicken and egg problems.
Fast forward. In the entire history of the PC platform, there have only been two major paradigm shifts that took along almost every PC user: we all switched to Windows 3.x, and then we all switched to Windows 95. Only a tiny number of people ever switched to anything else on the way. Microsoft conspiracy to take over the world? Fine, you're welcome to think that. I think it's for another, more interesting reason, which just comes back to the chicken and the egg.
We all switched to Windows 3.x. The important clue in that sentence is the 3. Why didn't we all switch to Windows 1.0? Or Windows 2.0? Or Windows 286 or Windows 386 which followed? Is it because it takes Microsoft five releases to ""get it right""? No. 
The actual reason was even more subtle than that, and it has to do with a very arcane hardware features that first showed up on the Intel 80386 chip which Windows 3.0 required.
Feature one: old DOS programs put things on the screen by writing directly to memory locations which corresponded to character cells on the screen. This was the only way to do output fast enough to make your program look good. But Windows ran in graphics mode. On older Intel chips, the Microsoft engineers had no choice but to flip into full screen mode when they were running DOS programs. But on the 80386, they could set up virtual memory blocks and set interrupts so that the operating system was notified whenever a program tried to write to screen memory. Windows could then write the equivalent text into a graphical window on the screen instantly. 
Feature two: old DOS programs assumed they had the run of the chip. As a result, they didn't play well together. But the Intel 80386 had the ability to create ""virtual"" PCs, each of them acting like a complete 8086, so old PC programs could pretend like they had the computer to themselves, even while other programs were running and, themselves, pretending they had the whole computer to themselves. 
So Windows 3.x on Intel 80386s was the first version that could run multiple DOS programs respectably. (Technically, Windows 386 could too, but 80386s were rare and expensive until about the time that Windows 3.0 came out.) Windows 3.0 was the first version that could actually do a reasonable job running all your old software.
Windows 95? No problem. Nice new 32 bit API, but it still ran old 16 bit software perfectly. Microsoft obsessed about this, spending a big chunk of change testing every old program they could find with Windows 95. Jon Ross, who wrote the original version of SimCity for Windows 3.x, told me that he accidentally left a bug in SimCity where he read memory that he had just freed. Yep. It worked fine on Windows 3.x, because the memory never went anywhere. Here's the amazing part: On beta versions of Windows 95, SimCity wasn't working in testing. Microsoft tracked down the bug and added specific code to Windows 95 that looks for SimCity. If it finds SimCity running, it runs the memory allocator in a special mode that doesn't free memory right away. That's the kind of obsession with backward compatibility that made people willing to upgrade to Windows 95.
You should be starting to get some ideas about how to break the chicken and egg problem: provide a backwards compatibility mode which either delivers a truckload of chickens, or a truckload of eggs, depending on how you look at it, and sit back and rake in the bucks.
Ah. Now back to bill presentment. Remember bill presentment? The chicken-egg problem is that you can only get your Con Ed bills, so you won't use the service. How can you solve it? Microsoft couldn't figure it out. PayMyBills.com (and a half dozen other Silicon Valley startups) all figured it out at the same time. You provide a backwards compatibility mode: if the merchant won't support the system, just get the merchant to mail their damn paper bills to University Avenue, in Palo Alto, where a bunch of actual human beings will open them and scan them in. Now you can get all your bills on their web site. Since every merchant on earth is available on the system, customers are happy to use it, even if it is running in this weird backwards compatibility mode where stupid Visa member banks send the bill electronically to a printer, print it out on paper, stuff it in an envelope, ship it 1500 miles to California, where it is cut open, the stupid flyers harping worthless ""free"" AM clock radios that actually cost $9.95 are thrown into a landfill somewhere, and the paper bill is scanned back into a computer and stuck up on the web where it should have been sent in the first place. But the stupid backwards compatibility mode will eventually go away, because PayMyBills.com, unlike Microsoft, can actually get customers to use their system, so pretty soon they'll be able to go to the stupid Visa member banks and say, ""hey, I've got 93,400 of your customers. Why don't you save yourselves $93,400 each month with a direct wire connection to me?"" And suddenly PayMyBills.com is very profitable while Microsoft is still struggling to sign up their second electric utility, maybe one serving Georgia would be a nice change of pace.
Companies that fail to recognize the Chicken and Egg problem can be thought of as boil the ocean companies: their business plan requires 93,000,000 humans to cooperate with their crazy business scheme before it actually works. One of the most outrageously stupid ideas I ever encountered was called ActiveNames. Their boneheaded idea was that everybody in the world would install a little add-in to their email client which looked up people's names on their central servers to get the actual email address. Then instead of telling people that your email address is kermit@sesame-street.com, you would tell them that your ActiveName is ""spolsky"", and if they want to email you, they need to install this special software. Bzzzzzt. Wrong answer. I can't even begin to list all the reasons this idea is never going to work.
Conclusion: if you're in a market with a chicken and egg problem, you better have a backwards-compatibility answer that dissolves the problem, or it's going to take you a loooong time to get going (like, forever).
There are a lot of other companies that recognized the chicken and egg problem face on and defeated it intelligently. When Transmeta unveiled their new CPU, it was the first time in a long time that a company that was not Intel finally admitted that if you're a CPU, and you want a zillion people to buy you, you gotta run x86 code. This after Hitachi, Motorola, IBM, MIPS, National Semiconductor, and who knows how many other companies deceived themselves into thinking that they had the right to invent a new instruction set. The Transmeta architecture assumes from day one that any business plan that calls for making a computer that doesn't run Excel is just not going anywhere.
	"
https://www.joelonsoftware.com/2000/05/24/20000524/,2000/05/24,2000-05-24T00:00:30+00:00,,Joel Spolsky,News,"
	A new strategy letter talks about the Chicken and the Egg problem, and one way of solving it. 
	"
https://www.joelonsoftware.com/2000/05/15/20000515/,2000/05/15,2000-05-15T00:00:29+00:00,,Joel Spolsky,News,"
	My strategy letter seems to have hit a nerve. For an insider perspective on this from one of the many ex-Netscape employees known as ""Netscapees"", read this.
	"
https://www.joelonsoftware.com/2000/05/12/strategy-letter-i-ben-and-jerrys-vs-amazon/,Strategy Letter I: Ben and Jerry’s vs. Amazon,2000-05-12T00:15:22+00:00,2016-12-05T19:25:48+00:00,Joel Spolsky,"Top 10, CEO, News","
	Building a company? You've got one very important decision to make, because it affects everything else you do. No matter what else you do, you absolutely must figure out which camp you're in, and gear everything you do accordingly, or you're going to have a disaster on your hands.
The decision? Whether to grow slowly, organically, and profitably, or whether to have a big bang with very fast growth and lots of capital.
The organic model is to start small, with limited goals, and slowly build a business over a long period of time. I'm going to call this the Ben and Jerry's model, because Ben and Jerry's fits this model pretty well.
The other model, popularly called ""Get Big Fast"" (a.k.a. ""Land Grab""), requires you to raise a lot of capital, and work as quickly as possible to get big fast without concern for profitability. I'm going to call this the Amazon model, because Jeff Bezos, the founder of Amazon, has practically become the celebrity spokesmodel for Get Big Fast.
Let's look at some of the differences between these models. The first thing to ask is: are you going into a business that has competition, or not?
Ben and Jerry's
Amazon
Lots of established competitors
New technology, no competition at first
If you don't have any real competition, like Amazon, there is a chance that you can succeed at a ""land grab"", that is, get as many customers as quickly as possible, so that later competitors will have a serious barrier to entry. But if you're going into an industry where there is already a well-established set of competitors, the land-grab idea doesn't make sense. You need to create your customer base by getting customers to switch over from competitors. 
In general, venture capitalists aren't too enthusiastic about the idea of going into a market with pesky competitors. Personally, I'm not so scared of established competition; perhaps because I worked on Microsoft Excel during a period when it almost completely took over Lotus 123, which virtually had the market to themselves. The number one word processor, Word, displaced WordPerfect, which displaced WordStar, all of which had been near monopolies at one time or another. And Ben and Jerry's grew to be a fabulous business, even though it's not like you couldn't get ice cream before they came along. It's not impossible to displace a competitor, if that's what you want to do. (I'll talk about how to do that in a future Strategy Letter). 
Another question about displacing competitors has to do with network effects and lock-in: 
Ben and Jerry's
Amazon
No network effect; weak customer lock-in
Strong network effect, strong customer lock-in
A ""network effect"" is a situation where the more customers you have, the more customers you will get. It's based on Metcalfe's Law: the value of a network is equal to the number of users squared. 
A good example is eBay. If you want to sell your old Patek Philippe watch, you're going to get a better price on eBay, because there are more buyers there. If you want to buy a Patek Philippe watch, you're going to look on eBay, because there are more sellers there. 
Another extremely strong network effect is proprietary chat systems like ICQ or AOL Instant Messenger. If you want to chat with people, you have to go where they are, and ICQ and AOL have the most people by far. Chances are, your friends are using one of those services, not one of the smaller ones like MSN Instant Messenger. With all of Microsoft's muscle, money, and marketing skill, they are just not going to be able to break into auctions or instant messaging, because the network effects there are so strong.
""Lock-in"" is where there is something about the business that makes people not want to switch. Nobody wants to switch their Internet provider, even if the service isn't very good, because of the hassle of changing your email address and notifying everyone of the new email address. People don't want to switch word processors if their old files can't be read by the new word processor. 
Even better than lock-in is the sneaky version I call stealth lock-in: services which lock you in without your even realizing it. For example, all those new services like PayMyBills.com which receive your bills for you, scan them in, and show them to you on the Internet. They usually come with three months free service. But when the three months are up, if you don't want to continue with the service, you have no choice but to contact every single bill provider and ask them to change the billing address back to your house. The sheer chore of doing this is likely to prevent you from switching away from PayMyBills.com - better just to let them keep sucking $8.95 out of your bank account every month. Gotcha!
If you are going into a business that has natural network effects and lock-in, and there are no established competitors, then you better use the Amazon model, or somebody else will, and you simply won't be able to get a toehold.
Quick case study. In 1998, AOL was spending massively to grow at a rate of a million customers every five weeks. AOL has nice features like chat rooms and instant messaging that provide stealth lock-in. Once you've found a group of friends you like to chat with, you are simply not going to switch Internet providers. That's like trying to get all new friends. In my mind that's the key reason that AOL can charge around $22 a month when there are plenty of $10 a month Internet providers. 
While I was working at Juno, management just failed to understand this point, and they missed their best opportunity to overtake AOL during a land rush when everyone was coming online: they didn't spend strongly enough on customer acquisition because they didn't want to dilute existing shareholders by raising more capital, and they didn't think strategically about chat and IM, so they never developed any software features to provide the kind of stealth lock-in that AOL has. Now Juno has around 3 million people paying them an average of $5.50 a month, while AOL has around 21 million people paying them an average of $17 a month. ""Oops.""
Ben and Jerry's
Amazon
Little capital required; break even fast
Outrageous amounts of capital required; profitability can take years
Ben and Jerry's companies start on somebody's credit card. In their early months and years, they have to use a business model that becomes profitable extremely quickly, which may not be the ultimate business model that they want to achieve. For example, you may want to become a giant ice cream company with $200,000,000 in annual sales, but for now, you're going to have to settle for opening a little ice cream shop in Vermont, hope that it's profitable, and, if it is, reinvest the profits to expand business steadily. The Ben and Jerry's corporate history says they started with a $12,000 investment. ArsDigita says that they started with an $11,000 investment. These numbers sound like a typical MasterCard credit limit. Hmmm.
Amazon companies raise money practically as fast as anyone can spend it. There's a reason for this. They are in a terrible rush. If they are in a business with no competitors and network effects, they better get big super-fast. Every day matters. And there are lots of ways to substitute money for time (see sidebar). Nearly all of them are fun.
Ways to substitute money for time: 
Use prebuilt, furnished executive offices instead of traditional office space. Cost: about 3 times as much. Time saved: several months to a year, depending on market.
Pay outrageous salaries or offer programmers BMWs as starting bonuses. Cost: about 25% extra for technical staff. Time saved: you can fill openings in 3 weeks instead of the more typical 6 months.
Hire consultants instead of employees. Cost: about 3 times as much. Time saved: you can get consultants up and running right away.
Having trouble getting your consultants to give you the time and attention you need? Bribe them with cash until they only want to work for you.
Spend cash freely to spot-solve problems. If your new star programmer isn't getting a lot of work done because they are busy setting up their new house and relocating, hire a high class relocation service to do it for them. If it's taking forever to get phones installed in your new offices, buy a couple of dozen cellular phones. Internet access problems slowing people down? Just get two redundant providers. Provide a concierge available to all employees for picking up dry cleaning, getting reservations, arranging for limos to the airport, etc. 
Ben and Jerry's companies just can't afford to do this, so they have to settle for growing slowly.
Ben and Jerry's
Amazon
Corporate culture is important
Corporate culture is impossible
When you are growing faster than about 100% per year, it is simply impossible for mentors to transmit corporate values to new hires. If a programmer is promoted to manager and suddenly has 5 new reports, hired just yesterday, it is simply impossible for there to be very much mentoring. Netscape is the most egregious example of this, growing from 5 to about 2000 programmers in one year. As a result, their culture was a mishmash of different people with different values about the company, all tugging in different directions.
For some companies, this might be OK. For other companies, the corporate culture is an important part of the raison-d'etre of the company. Ben and Jerry's exists because of the values of the founders, who would not accept growing faster than the rate at which that culture can be promulgated. 
Let's take a hypothetical software example. Suppose you want to break into the market for word processors. Now, this market seems to be pretty sewn up by Microsoft, but you see a niche for people who, for whatever reason, absolutely cannot have their word processors crashing on them. You are going to make a super-robust, industrial strength word processor that just won't go down and sell it at a premium to people who simply depend on word processors for their lives. (OK, it's a stretch. I said this was a hypothetical example).
Now, your corporate culture probably includes all kinds of techniques for writing highly-robust code: unit testing, formal code reviews, coding conventions, large QA departments, and so on. These techniques are not trivial; they must be learned over a period of time. While a new programmer is learning how to write robust code, they need to be mentored and coached by someone more experienced.
As soon as you try to grow so fast that mentoring and coaching is impossible, you are simply going to stop transmitting those values. New hires won't know better and will write unreliable code. They won't check the return value from malloc(), and their code will fail in some bizarre case that they never thought about, and nobody will have time to review their code and teach them the right way to do it, and your entire competitive advantage over Microsoft Word has been squandered.
Ben and Jerry's
Amazon
Mistakes become valuable lessons
Mistakes are not really noticed
A company that is growing too fast will simply not notice when it makes a big mistake, especially of the spend-too-much-money kind. Amazon buys Junglee, a comparison shopping service, for around $180,000,000 in stock, and then suddenly realizes that comparison shopping services are not very good for their business, so they just shut it down. Having piles and piles of cash makes stupid mistakes easy to cover up.
Ben and Jerry's
Amazon
It takes a long time to get big
You get big very fast
Getting big fast gives the impression (if not the reality) of being successful. When prospective employees see that you're hiring 30 new people a week, they will feel like they are part of something big and exciting and successful which will IPO. They may not be as impressed by a ""sleepy little company"" with 12 employees and a dog, even if the sleepy company is profitable and is building a better long-term company.
A sleepy little company in Albuquerque
As a rule of thumb, you can make a nice place to work, or you can promise people they'll get rich quick. But you have to do one of those, or you won't be able to hire.
Some of your employees will be impressed by a company with a high chance of an IPO that gives out lots of stock options. Such people will be willing to put in three or four years at a company like this, even if they hate every minute of their working days, because they see the pot at the end of the rainbow.
If you're growing slowly and organically, the pot may be farther off. In that case, you have no choice but to make a work environment where the journey is the reward. It can't be hectic 80 hour workweeks. The office can't be a big noisy loft jammed full of folding tables and hard wooden chairs. You have to give people decent vacations. People have to be friends with their co-workers, not just co-workers. Sociology and community at work matter. Managers have to be enlightened and get off people's backs, they can't be Dilbertesque micromanagers. If you do all this, you'll attract plenty of people who have been fooled too many times by dreams of becoming a millionaire in the next IPO; now they are just looking for something sustainable.
Ben and Jerry's
Amazon
You'll probably succeed. You certainly won't lose too much money.
You have a tiny chance of becoming a billionaire, and a high chance of just failing.
With the Ben and Jerry's model, if you're even reasonably smart, you're going to succeed. It may be a bit of a struggle, there may be good years and bad years, but unless we have another depression, you're certainly not going to lose too much money, because you didn't put in too much to begin with.
The trouble with the Amazon model is that all anybody thinks about is Amazon. And there's only one Amazon. You have to think of the other 95% of companies which spend an astonishing amount of venture capital and then simply fail because nobody wants to buy their product. At least, if you follow the Ben and Jerry's model, you'll know that nobody wants your product long before you spend more than one MasterCard's worth of credit limit on it. 
The Worst Thing You Can Do
The worst thing you can do is fail to decide whether you're going to be a Ben and Jerry's company or an Amazon company. 
If you're going into a market with no existing competition, lock-in, and network effects, you better use the Amazon model, or you're going the way of Wordsworth.com, which started two years before Amazon, and nobody's ever heard of them. Or even worse, you're going to be a ghost site like MSN Auctions with virtually no chance of ever overcoming ebay. (Read Wordsworth's reply )
If you're going into an established market, getting big fast is a fabulous way of wasting tons of money, as did BarnesandNoble.com. Your best hope is to do something sustainable and profitable, so that you have years to slowly take over your competition. 
Still can't decide? There are other things to consider. Think of your personal values. Would you rather have a company like Amazon or a company like Ben and Jerry's? Read a couple of corporate histories - Amazon and Ben and Jerry's for starters, even though they are blatant hagiographies, and see which one jibes more with your set of core values. Actually, an even better model for a Ben and Jerry's company is Microsoft, and there are lots of histories of Microsoft. Microsoft was, in a sense, ""lucky"" to land the PC-DOS deal, but the company was profitable and growing all along, so they could have hung around indefinitely waiting for their big break.
Think of your risk/reward profile. Do you want to take a shot at being a billionaire by the time you're 35, even if the chances of doing that make the lottery look like a good deal? Ben and Jerry's companies are not going to do that for you. 
Probably the worst thing you can do is to decide that you have to be an Amazon company, and then act like a Ben and Jerry's company (while in denial all the time). Amazon companies absolutely must substitute cash for time whenever they can. You may think you're smart and frugal by insisting on finding programmers who will work at market rates. But you're not so smart, because that's going to take you six months, not two months, and those 4 months might mean you miss the Christmas shopping season, so now it cost you a year, and probably made your whole business plan unviable. You may think that it's smart to have a Mac version of your software, as well as a Windows version, but if it takes you twice as long to ship while your programmers build a compatibility layer, and you only get 15% more customers, well, you're not going to look so smart, then, are you?
Both models work, but you've got to pick one and stick to it, or you'll find things mysteriously going wrong and you won't quite know why.
 Further reading: The Motley Fool review 
	"
https://www.joelonsoftware.com/2000/05/12/20000512/,2000/05/12,2000-05-12T00:00:28+00:00,,Joel Spolsky,News,"
	Are you a Ben and Jerry's company or an Amazon company? In Strategy Letter I, I talk about two different kinds of startups. If you don't know which one you are, you're going to make lots of mistakes and you won't even know why. Sometimes, my kind readers resort to tricks to find out if I'm awake! Like this suggestion from Hanan. It sounds good at first, but after a minute you realize it might be a minefield. 
	"
https://www.joelonsoftware.com/2000/05/10/20000510/,2000/05/10,2000-05-10T00:00:27+00:00,,Joel Spolsky,News,"
	Despite the fact that raging search, an AltaVista spinoff, is a blatant ripoff of Google in every way, it still produces pathetic search results. (Compare the result of searching for President Clinton on raging and google and you'll see what I mean.) From Juno's latest ""Privacy"" statement: In addition to the data you may provide through the Member Profile and other surveys, we may collect information relating to how you use the Service (including, for example, information relating to your frequency of use, navigational information such as the uniform resource locator (URL) of the Web pages you visit, configuration information such as the type of Web browser you are using, your Internet Protocol (IP) address, processor type and operating system, and information relating to the display of any advertisements transmitted to you). This steady erosion of privacy dismays me. The Juno database will have your name and address and the web pages you visited, for 3 million Americans who use the service every month. If I had still been working at Juno, I would have probably been assigned to implement this feature. I would like to think that I would have refused on principle, even if it cost me my job. Maybe my taking a stand would have inspired other people to refuse to go along (not that that would have changed anything - management would just gather us all in a room and scream at us.) Then again, it's hard to say ""I would have taken a stand,"" since I wasn't really there, and I didn't really take a stand. Lucky for me, I quit way back in November, and so my integrity never stood the test. Don't worry, I'm not retired now just because the UI book is done. I've still got a half dozen articles in the pipeline! Then I can retire 
	"
https://www.joelonsoftware.com/2000/05/09/the-process-of-designing-a-product/,The Process of Designing a Product,2000-05-09T00:14:38+00:00,2016-12-05T19:15:33+00:00,Joel Spolsky,"Software designer, News","
	We've talked about the principles of good design, but principles only give you a way to evaluate and improve an existing design. But... how do you figure out what the dang design should be in the first place? Many people write big, functional outlines of all the features they thought up. Then they design each one, and hang it off of a menu item (or web page). When they're done, the program (or web site) has all the functionality they wanted, but it doesn't flow right. People sit down and they don't know what it does, and they don't know how to accomplish what they want.
Microsoft's solution to this is something called Activity Based Planning. (As far as I can tell, this concept was invented by Mike Conte on the Excel team, who got bored with that and went on to a second career as a race car driver). The key insight is to figure out the activity that the user is doing, and focus on making it easy to accomplish that activity. This is best illustrated with an example.
You've decided to make a web site that lets people create greeting cards. Using a somewhat naive approach, you might come up with a list of features like this:
1. Add text to card2. Add picture to card3. Get predesigned card from library4. Send card: a. Using email b. By printing it out 
For lack of any better way of thinking about the problem, this might lead itself to a typical Macintosh user interface, circa-1984: a program that starts out with a blank card, with menu items for adding text, pictures, loading cards from a library, and sending cards. And then what the user is going to have to do is sit down and browse through the menus, trying to figure out all the commands available, and then do their own synthesis of how to put these atomic commands together to create a card.
Now, activity based planning says that you need to come up with a list of activities that users might do. So, you talk to your potential users, and you come up with this ""top three"" list:
Birthday Greeting
Party Invitation
Anniversary Greeting 
Now, instead of thinking about your program like a programmer (in terms of what features you need to have to make a card), you're thinking about it like the user, in terms of, what activities is the user doing, specifically:
Sending a birthday card
Planning a party, and inviting people to it
Sending an anniversary card 
Suddenly, all kinds of ideas will rush into your head. Instead of starting with a blank card, you might start with a menu like this:
What do you want to do? 
Send a birthday card
Send an anniversary card
Send a party invitation
Start with a blank card 
Suddenly users will find it much easier to get started with your program, without browsing around on the menus, since the program will virtually lead them through the steps to complete the activity. (There is a risk that if you didn't pick the activities correctly, you will alienate or confuse users who might have been able to use your program, say, to send a Hanukah card, but don't see that as a choice. So be careful in picking activities that blanket the majority of the market you want to target.)
Just looking at our list of three activities suggests some great features which you might want to add. For example, if you're sending a birthday or anniversary card, you might want to be reminded next year to send a card to the same person... so you might add a checkbox that says ""remind me next year"". And a party invitation needs a way to RSVP, so you might add a feature that lets you collect RSVPs from people electronically. Both of these feature ideas almost fell out of looking at the activity that users were performing instead of the features in the application.
This example is trivial; for any serious application, the rewards of activity based planning are even greater. When you're designing a program from scratch, you already have a vision of what activities your users are going to be doing. Figuring out this vision is not hard at all, it takes almost no effort at all to do some brainstorming with coworkers, write down a list of potential activities, and then decide which ones you want to focus on. But forcing yourself to list these activities on paper will help your overall design enormously. 
Activity based planning is even more important when you are working on version two of a product that people are already using. Here, it may be a matter of observing a sample of customers to see what they are using your program for. 
In the days of Excel 1.0 through 4.0, most people at Microsoft thought that the most common user activity was doing financial what-if scenarios, where you do things like change the inflation rate and see how this affects your profitability. 
When we were designing Excel 5.0, the first major release to use serious activity-based planning, we only had to watch about five customers using the product before we realized that an enormous number of people just use Excel to keep lists. They are not entering any formulas or doing any calculation at all! We hadn't even considered this before. Keeping lists turned out to be far more popular than any other activity with Excel. And this led us to invent a whole slew of features that make it easier to keep lists: easier sorting, automatic data entry, the AutoFilter feature which helps you see a slice of your list, and multi-user features which let several people work on the same list at the same time while Excel automatically reconciles everything.
While Excel 5 was being designed, Lotus had shipped a ""new paradigm"" spreadsheet called Improv. According to the press releases, Improv was a whole new generation of spreadsheet, which was going to blow away everything that existed before it. For various strange reasons, Improv was first available on the NeXT, which certainly didn't help its sales, but a lot of smart people believed that Improv would be to NeXT as VisiCalc was to the Apple II: it would be the killer app that made people go out and buy all new hardware just to run one program.
Of course, Improv is now a footnote in history. Search for it on the web, and the only links you'll find are from very over-organized storeroom managers who have, for some reason, made a web site with an inventory of all the stuff they have collecting dust.
Why? Because in Improv, it was almost impossible to just make lists. The Improv designers thought that people were using spreadsheets to create complicated multi-dimensional financial models. Turns out, if they asked people, they would discover that making lists was so much more common than multi-dimensional financial models, and in Improv, making lists was a downright chore, if not impossible.
So activity based planning is helpful in the initial version of your application, where you have to make guesses about what people want to do, but it's even more helpful when you're planning the upgrade, because you understand what your customers are doing. 
Another example, from the web, is the evolution of deja.com, which started out as an huge, searchable index of Usenet called dejanews. The original interface basically had an edit box and said ""search Usenet for blah,"" and that was it. In 1999 a bit of activity based planning showed that one common user activity was doing research on a product or service, of the ""which car should I buy"" nature. Deja was completely reorganized, and today, it is more of a product opinion research service: the Usenet searching ability is almost completely hidden. This annoyed the small number of users who were using the site to search for whether their Matrox video card worked with Redhat Linux 5.1, but it delighted the much larger population of users who just wanted to buy the best digital camera.
The other great thing about activity based planning is that it lets you make a list of what features not to do. When you create any kind of software, the reality is that you will come up with three times as many features as you have time to do. And one of the best ways to decide which features get done, and which features get left out, is to evaluate which features support the most important user activities.
Imaginary Users.
The very best UI designers in the industry all agree on one thing: you have to invent and describe some imaginary users before you can design your UI. You may remember back in the introduction to this book, I introduced an imaginary user Pete:
Pete is an accountant for a technical publisher who has used Windows for six years at the office and a bit at home. He is fairly competent and technical. He installs his own software; he reads PC Magazine, and he has even programmed some simple Word macros to help the secretaries in his office send invoices. He's getting a cable modem at home. Pete has never used a Macintosh. ""They're too expensive,"" he'll tell you. ""You can get a 700 Mhz PC with 128 Meg RAM for the price of..."" OK, Pete. We get it.
When you read this, you can almost imagine a user. I could also have invented quite another type of user:
Patricia is an English professor who has written several well-received books of poetry. She has been using computers for word processing since 1980, although the only two programs she ever used are Nota Bene (an ancient academic word processor) and Microsoft Word. She doesn't want to spend time learning the theory of how the computer works, and she tends to store all her documents in whatever directory they would go in if you didn't know about directories.
Obviously, designing software for Pete is quite different from designing software for Patricia, who in turn is quite different from Mike, a 16 year old who runs Linux at home, talks on IRC for hours, and uses no ""Micro$oft"" software.
When you invent these users, thinking about whether your design is appropriate becomes much easier. For example, a lot of programmers tend to overestimate the ability of the typical user to figure things out. Whenever I write something about command line interfaces being hard to use, I get the inevitable email barrage saying that command line interfaces are ultra-powerful because you can do things like 'gunzip foo.tar.gz | tar xvf -'. But as soon as you have to think about getting Patricia to type ""gunzip..."" it becomes obvious that that kind of interface just isn't going to serve her needs, ever. Thinking about a ""real"" person gives you the empathy you need to make a feature that serves that person's need. (Of course, if you're making Linux backup software for advanced sysadmins, you need to invent a character like ""Frank"" who refuses to touch Windows, which he only refers to as an ""operating system"" in quotation marks, uses his own personally modified version of tcsh, and runs X11 with four tiled xterms all day long. And about 11 xperfs.)
To summarize, designing good software takes about six steps:
Invent some users 
Figure out the important activities 
Figure out the user model - how the user will expect to accomplish those activities 
Sketch out the first draft of the design 
Iterate over your design again and again, making it easier and easier until it's well within the capabilities of your imaginary users 
Watch real humans trying to use your software. Note the areas where people have trouble, which probably demonstrate areas where the program model isn't matching the user model. 
Good UI sells software, but it also makes people happy, because people are happy when they accomplish the task they wanted to accomplish. Which is why UI design is such a satisfying field to be in. Where else are you going to get a chance to make millions of people just a little bit happier?
	"
https://www.joelonsoftware.com/2000/05/09/20000509/,2000/05/09,2000-05-09T00:00:26+00:00,,Joel Spolsky,News,"
	We've talked about the principles of good design, but principles only give you a way to evaluate and improve an existing design. But... how do you figure out what the dang design should be in the first place? Many people write big, functional outlines of all the features they thought up. Then they design each one, and hang it off of a menu item (or web page). When they're done, the program (or web site) has all the functionality they wanted, but it doesn't flow right. People sit down and they don't know what it does, and they don't know how to accomplish what they want. Microsoft's solution to this is something called Activity Based Planning. (As far as I can tell, this concept was invented by Mike Conte on the Excel team, who got bored with that and went on to a second career as a race car driver). The key insight is to figure out the activity that the user is doing, and focus on making it easy to accomplish that activity. Read all about it in Chapter 9, the final installment of my book on UI design.
	"
https://www.joelonsoftware.com/2000/05/08/20000508/,2000/05/08,2000-05-08T00:00:25+00:00,,Joel Spolsky,News,"
	Human aptitude tends towards the bell curve. Maybe 98% of your friends are smart enough to use a television set. About 70% of them can use Windows. 15% can use Linux. 1% can program. But only 0.1% of them can program in a language like C++. And only 0.01% of them can figure out Microsoft ATL programming. The effect of this sharp drop-off is that whenever you ""lower the bar"" by even a small amount, making your program, say, 10% easier to use, you dramatically increase the number of people who can use it, say, by 50%. Chapter 8 of my UI design series is now online! News of the vile: Cubicles are getting smaller. The good news? If you're willing to spend more to provide humane office space, you should have no problem recruiting people. A response to a reader's question on using Excel for schedules: Juggling Tasks in Excel.
	"
https://www.joelonsoftware.com/2000/06/15/whaddaya-mean-you-cant-find-programmers/,"Whaddaya Mean, You Can’t Find Programmers?",2000-06-15T00:15:15+00:00,2016-12-05T19:43:54+00:00,Joel Spolsky,"Recruiter, News","
	Ask any software CEO these days what their biggest problem is, and they'll usually complain about how hard it is to find good programmers. ""There's just nobody out there,"" they say. ""I can't hire anyone.""
Frankly, this is baloney. In microeconomic terms: the market is clearing. There are hundreds of thousands of programmers out there, and you can hire them, if you know how. This article is about the ""programmer's perspective"" on how to find people and convince them to work for you.
First of all, let me motivate you a little. 
If you go down to your neighborhood Starbucks (a large coffee shop chain) and ask them if they have job openings, they'll say something, ""yes, we have n openings now,"" where n is a nice round integer like ""0"" or ""4"". Once they hire n people, they don't have any more openings and they won't hire any more people. That's because for a given coffee shop, customer demand is fixed. You have to have enough employees to meet that demand, or the lines will be too long and people will walk out, but after that point, hiring more people is pointless.
But with software companies, that's not the case. Customer demand is directly related to how many problems you solve, how good your product is, and how many features it has that address potential customers' needs. Adding another programmer means you have time to implement more features, optimize and debug code, make file format converters, and other things which get you more customers. So almost every software company or Internet startup I've visited has generally had a policy of ""we'll hire any good technical people we can get."" (I wrote an article about this which you can read here.)
Now, let's review some microeconomics. In a free market, it is almost axiomatic that the market always clears. That's a technical term that means that when somebody tries to sell something, if they are willing to accept the market price, they will be able to sell it, and when somebody wants to buy something, if they are willing to pay the market price, they will be able to buy it. It's just a matter of both sides accepting the market price.
The trouble comes when people are not realistic about market prices. A two bedroom, two bathroom coop apartment in my neighborhood sells for about $500,000. Sellers who believe that will be able to sell their apartment. Sellers who don't believe that and list their apartment for $800,000 are going to wait years without selling their apartment, and they won't know why.
A top notch web programmer in New York City at a top web development firm, working on a consulting basis, is going to bill about $250 an hour. People who believe that are going to be able to hire consulting firms to build their web sites. People who don't believe that aren't going to understand why they can't hire anyone.
You can hire programmers if you are willing to pay at or above the market price. This past spring, a company in Texas took out full page ads in the Yale Daily News and the Harvard Crimson saying ""Attention seniors: We are going to hire the best 5 computer science graduates, and we're going to give them a $200,000 per year salary and a BMW."" This happens to be a lot more than the going rate for recent CompSci graduates of those schools (which is more like $65,000), but I'm sure they filled those positions.
""Well, yes,"" you say, ""if I'm willing to vastly overpay, I can hire people. But how do I hire people without shelling out $200,000 a year?""
Aha! We're onto something here. The trick is that money is not everyone's number one motivator, in fact, it's not even the number one consideration for most people. There are other things that matter more, and, luckily, most of those things are cheaper than money. So the next trick is, how do we whittle down that market price to something a little bit more affordable by substituting the kind of non-monetary benefits that excite people?
There are a lot of other things that you can ""give"" programmers, for example, you can give them the feeling that they're working on something worthwhile, which has actual cash value for most people and therefore reduces the amount you have to pay them.
I love Julia Roberts. And I loved her the most when she threw a tantrum in the movie Erin Brockovich:
""That is my work! my sweat! my time away from my kids! If that's not personal, I don't know what is!""
And this is the key to making people want to work for you: you have to understand that people spend most of their waking hours at work, and they are going to take it personally, and they are not going to be willing to suffer throughout their career just for a little extra cash they can spend when they retire. Work needs to be rewarding and pleasant. Doing things that make work rewarding and pleasant is the most important part of attracting people.
I recommend a three-pronged approach to hiring people:
Make the workplace attractive,
Eliminate obstacles, and
Provide benefits which are more valuable than the money they cost. 
1: Make the workplace attractive
After I finished my bike trip, I applied for a couple of different jobs in New York City, one at AT&T and the other at Viacom. They were roughly equivalent. The salaries were pretty close. But I just couldn't stop thinking about one thing: the AT&T offices were dingy and dark, in some kind of a stone age office that smelled of 1930s bureaucracy. People were starting to look like mushrooms. There were torn Dilbert cartoons all over the cubicles. (Warning sign number one.) The furniture was falling apart. It was just nasty. But Viacom was in a nice, shiny, modern, bright office building that felt like lawyers' offices. It was clean and new and pleasant. I know I should have been thinking about something more substantial as I made my decision, but I just could not get over how unpleasant it would be to spend my days working in the AT&T dungeon.
It reminded me of a visit I made to EDS once when I was working for Microsoft. EDS had modern, clean, well lit offices, but they were just seas of cubicles. Any kind of personalization of the workspace was forbidden. Fluorescent lights everywhere. Windows were strictly for managers. If you've seen the movie Office Space, you know what I mean. As I left the building with my Microsoft colleagues, I remember saying, ""you know, if I had to work in a place like that, I'd cry for two hours when I got to work in the morning.""
There's a whole list of things you can do to create a pleasant and attractive workplace. People spend so much of their time at work that you can't blame them for wanting to work in a nice place, not a dilbertesque cubicle farm. Think of a university professor's office, or a lawyer's. Is it quiet? Do people have enough space to get some privacy? Does your workplace feel like a Moroccan marketplace, or the English department at Princeton? Is there sun? Or is it all fluorescent lighting?
Cubicles have become such an icon of nasty workplaces that it's shocking that the companies who manufacture them still have the chutzpah to pretend that they're efficient, productive, and pleasant. Peopleware calls this ""lying by repeated assertion.""
Put yourself in the job candidate's shoes. Company number 1 shows you a big crowded room, with a bunch of desks shoved in tightly, lots of marketing guys shouting on the phone next to the programmers and a bunch of sales jocks shouting tasteless jokes. ""You would sit here, in this cubicle with Doris from Accounts Payable."" Doris has a whiny, high-pitched voice and self-affirmation notes to herself pinned up on the dividers. The half-height cubicle they show you is completely lit by a fluorescent light which is on the fritz.
Company number 2 shows you through a quiet hallways, shows you a sunlit, plush office with a window, big plants, a door that closes, a nice Aeron chair, the smell of fresh-brewed coffee from the espresso machine in the kitchen, cool mahogany stuff and Ansel Adams prints, and says ""this would be your office."" There's a patio outside for lunch when it's warm and a lounge where people meet for afternoon tea. Doris is nowhere to be seen. 
All else being equal, which job are you going to take?
It's human nature for people to jump to snap judgments based on all kinds of external factors. If they come to visit you on the interview and something just doesn't smell right, they're not going to work for you. First impressions count for a lot. The fountain in the lobby, the fully-stocked kitchen with Snapple and Perrier as well as cheap drinks like Coke - it all seems trivial, but it's making an impression.
2: Eliminate Obstacles
 
Make a list of the obstacles that are likely to keep someone from wanting to work for you, and figure out creative ways to solve them.
First of all, get your recruiting department to stop being an obstacle. I don't know how many companies I've seen that have disorganized recruiters who just forget candidates and don't call them back. It took my last employer something like 3 months from the time I first contacted them to make me an offer. There's just no excuse for that.
Another thing I don't understand is why people have so much trouble telling candidates ""no thanks."" You would not believe how many companies I know that just don't tell the candidate anything, hoping they ""get the hint."" They do this even when there's a devoted recruiting staff whose whole job is saying ""no thanks"" 93 times a day.
When a candidate applies for a job, you should be able to schedule an interview immediately. After the interview, you should be able to give the candidate a straight yes or no answer on the spot. If you have to wait for references, you should be able to take care of that in a day or two, and keep the candidate apprised daily.
Next, find out what things are worrying your job candidates. In the US, a common problem is getting work visas for people from other countries. Get a great immigration lawyer and pay all expenses.
In some markets, especially Silicon Valley and New York City, the housing situation is insane. Apartments are absurdly expensive and real estate brokers are sharks. This worries people. Solve the problem for them: offer them temporary, furnished housing for a couple of months while they look for an apartment. Retain an local real estate expert to find them housing - somebody who you trust will only show them nice apartments, not ratty dumps, and pay all the broker fees.
What other fears do they have? A new school for the kids? A job for their spouse? All these are things you can help with by being creative. You can hire relocation specialists who are experts at smoothing these things over (but make sure they're good, or you'll do more damage than good).
Want to hire someone who has been working in Europe? They're probably used to 6 weeks a year of paid vacations. Match it. Giving somebody six weeks instead of three weeks vacation is like paying them about 6% more salary. Many people who like to travel or spend long weeks at the beach with their family would be happy to get more vacation in exchange for lower base salary, and they'll be more productive to boot.
3. Provide benefits which are more valuable than the money they cost
Have you ever gotten junk mail from a phone company offering you a $50 savings bond if you switch to their service?
Most people think that a $50 savings bond is worth $50. Nope. It's worth $25.
Have you ever gotten a free T-shirt at a trade show?
Most people think that a t-shirt is worth about $15, because that's how much they cost at the Gap. Nope. It's worth about 50 cents.
There are a whole bunch of things you can give employees which cost less than they seem to be worth. Almost every software company has free soft drinks. Massages seem to be popular in Silicon Valley. I've heard of a consulting company that is setting up beach houses and ski houses for employees to use. Microsoft has subsidized espresso carts in practically every building. Google has a gourmet chef with free lunches and dinners. Health club memberships cost a lot less than you think if you buy them for all your employees, because only a fraction of them actually take advantage of them. 
Every Microsoft manager has a morale budget to use as they see fit. Whenever a new Star Trek movie comes out, Microsoft rents out an entire movie theater for the afternoon and takes the whole damn company out to the movies. Movie theatres are usually empty in the afternoon, so this costs a heck of a lot less than you think.
Think about what you can do to show people how much you appreciate them. Here's an example. When you call someone up to say, ""you've got the job,"" if you're organized, you probably have a little post-in note stuck on your finger you got from The Big Boss which says something like $100-$105. That's to remind you that you're going to offer them $100,000, but if they balk, you have the authority to go as far as $105. Now imagine that you call the candidate up and offer them $100. They accept. Great! You saved the company $5,000 a year!
Oh my. Big deal. $5,000 a year. Wait a day, call them right back, and say, ""I know you accepted at $100, but we've decided to set your salary at $105.""
Aha. Now sit back and watch the law of reciprocity kick in. Having agreed that the ""fair"" price for their services is $100, you've thrown them a gift of an extra $5, and they're going to feel some level of extra obligation towards you in exchange. It's human nature. And it's going to keep them from taking another job. (If you haven't heard about the law of reciprocity, read Cialdini.)
And then think about the things that attract employees which do not even cost money. Give people authority. Let them work with smart people and learn from the best. Have an exciting project to work on. Make sure they keep learning and are always doing something new, not just the same old thing. Read all the other essays on my site about making a healthy work environment. Read Peopleware and make everyone else read it, too.
	"
https://www.joelonsoftware.com/2000/06/15/20000615/,2000/06/15,2000-06-15T00:00:34+00:00,,Joel Spolsky,News,"
	Ask any software CEO these days what their biggest problem is, and they'll usually complain about how hard it is to find good programmers. ""There's just nobody out there,"" they say. ""I can't hire anyone."" Frankly, this is baloney. In microeconomic terms: the market is clearing. There are hundreds of thousands of programmers out there, and you can hire them, if you know how. This article is about the ""programmer's perspective"" on how to find people and convince them to work for you. Whaddaya mean, you can't find programmers? 
	"
https://www.joelonsoftware.com/2000/06/12/20000612/,2000/06/12,2000-06-12T00:00:33+00:00,,Joel Spolsky,News,"
	I've written up some thoughts on REALBasic. REAL Software is a particularly interesting example because all three of my strategy letters apply to them very directly! 
	"
https://www.joelonsoftware.com/2000/06/03/strategy-letter-iii-let-me-go-back/,Strategy Letter III: Let Me Go Back!,2000-06-03T00:15:30+00:00,2016-12-05T19:24:33+00:00,Joel Spolsky,"CEO, News","
	When you're trying to get people to switch from a competitor to your product, you need to understand barriers to entry, and you need to understand them a lot better than you think, or people won't switch and you'll be waiting tables.
In an earlier letter, I wrote about the difference between two kinds of companies: the Ben and Jerry's kind of company which is trying to take over from established competition, versus the Amazon.com kind of company which is trying a ""land grab"" in a new field where there is no established competition. When I worked on Microsoft Excel in the early 90's, it was a card-carrying member of the Ben and Jerry's camp. Lotus 123, the established competitor, had an almost complete monopoly in the market for spreadsheets. Sure, there were new users buying computers who started out with Excel, but for the most part, if Microsoft wanted to sell spreadsheets, they were going to have to get people to switch.
The most important thing to do when you're in this position is to admit it. Some companies can't even do this. The management at my last employer, Juno, was unwilling to admit that AOL had already achieved a dominant position. They spoke of the ""millions of people not yet online."" They said that ""in every market, there is room for two players: Time and Newsweek, Coke and Pepsi, etc."" The only thing they wouldn't say is ""we have to get people to switch away from AOL."" I'm not sure what they were afraid of. Perhaps they thought they were afraid to ""wake up the sleeping bear"". When one of Juno's star programmers (no, not me) had the chutzpah, the unmitigated gall to ask a simple question at a company meeting: ""Why aren't we doing more to get AOL users to switch?"" they hauled him off, screamed at him for an hour, and denied him a promotion he had been promised. (Guess who took his talent elsewhere?)
There's nothing wrong with being in a market that has established competition. In fact, even if your product is radically new, like eBay, you probably have competition: garage sales! Don't stress too much. If your product is better in some way, you actually have a pretty good chance of getting people to switch. But you have to think strategically about it, and thinking strategically means thinking one step beyond the obvious.
The only strategy in getting people to switch to your product is to eliminate barriers. Imagine that it's 1991. The dominant spreadsheet, with 100% market share, is Lotus 123. You're the product manager for Microsoft Excel. Ask yourself: what are the barriers to switching? What keeps users from becoming Excel customers tomorrow?
Barrier
 
1. They have to know about Excel and know that it's better
 
2. They have to buy Excel
 
3. They have to buy Windows to run Excel
 
4. They have to convert their existing spreadsheets from 123 to Excel
 
5. They have to rewrite their keyboard macros which won't run in Excel
 
6. They have to learn a new user interface
 
7. They need a faster computer with more memory
 
And so on, and so on. Think of these barriers as an obstacle course that people have to run before you can count them as your customers. If you start out with a field of 1000 runners, about half of them will trip on the tires; half of the survivors won't be strong enough to jump the wall; half of those survivors will fall off the rope ladder into the mud, and so on, until only 1 or 2 people actually overcome all the hurdles. With 8 or 9 barriers, everybody will have one non-negotiable deal killer.
This calculus means that eliminating barriers to switching is the most important thing you have to do if you want to take over an existing market, because eliminating just one barrier will likely double your sales. Eliminate two barriers, and you'll double your sales again. Microsoft looked at the list of barriers and worked on all of them:
Barrier
Solution
1. They have to know about Excel and know that it's better
Advertise Excel, send out demo disks, and tour the country showing it off
2. They have to buy Excel
Offer a special discount for former 123 users to switch to Excel
3. They have to buy Windows to run Excel
Make a runtime version of Windows which ships free with Excel
4. They have to convert their existing spreadsheets from 123 to Excel
Give Excel the capability to read 123 spreadsheets
5. They have to rewrite their keyboard macros which won't run in Excel
Give Excel the capability to run 123 macros
6. They have to learn a new user interface
Give Excel the ability to understand Lotus keystrokes, in case you were used to the old way of doing things
7. They need a faster computer with more memory
Wait for Moore's law to solve the problem of computer power
And it worked pretty well. By incessant pounding on eliminating barriers, they slowly pried some market share away from Lotus.
One thing you see a lot when there is a transition from an old monopoly to a new monopoly is that there is a magic ""tipping point"": one morning, you wake up and your product has 80% market share instead of 20% market share. This flip tends to happen very quickly (VisiCalc to 123 to Excel, WordStar to WordPerfect to Word, Mosaic to Netscape to Internet Explorer, dBase to Access, and so on). It usually happens because the very last barrier to entry has fallen and suddenly it's logical for everyone to switch.
Obviously, it's important to work on fixing the obvious barriers to entry, but once you think you've addressed those, you need to figure out what the non-so-obvious ones are. And this is where strategy becomes tricky, because there are some non-obvious things that keep people from switching.
Here's an example. This summer I'm spending most of my time in a house near the beach, but my bills still go to the apartment in New York City. And I travel a lot. There's a nice web service, PayMyBills.com, which is supposed to simplify your life: you have all your bills sent to them, and they scan them and put them on the web for you to see wherever you may be.
Now, PayMyBills costs about $9 a month, which sounds reasonable, and I would consider using it, but in the past, I've had pretty bad luck with financial services on the Internet, like Datek, which made so many arithmetic mistakes in my statements I couldn't believe they were licensed. So I'm willing to try PayMyBills, but if I don't like it, I want to be able to go back to the old way.
The trouble is, after I use PayMyBills, if I don't like it, I need to call every damn credit card company and change my address again. That's a lot of work. And so the fear of how hard it will be to switch back is keeping me from using their service. Earlier I called this ""stealth lock-in,"" and sort of praised it, but if potential customers figure it out, oh boy are you in trouble.
That's the barrier to entry. Not how hard it is to switch in: it's how hard it might be to switch out.
And this reminded me of Excel's tipping point, which happened around the time of Excel 4.0. And the biggest reason was that Excel 4.0 was the first version of Excel that could write Lotus spreadsheets transparently.
Yep, you heard me. Write. Not read. It turns out that what was stopping people from switching to Excel was that everybody else they worked with was still using Lotus 123. They didn't want a product that would create spreadsheets that nobody else could read: a classic Chicken and Egg problem. When you're the lone Excel fan in a company where everyone else is using 123, even if you love Excel, you can't switch until you can participate in the 123 ecology.
To take over a market, you have to address every barrier to entry. If you forget just one barrier which trips up 50% of your potential customers, then by definition, you can't have more than 50% market share, and you will never displace the dominant player, and you'll be stuck on the sad (omelet) side of chicken and egg problems.
The trouble is that most managers only think about strategy one step at a time, like chess players who refuse to think one move ahead. Most of them will say, ""it's important to let people convert into your product, but why should I waste my limited engineering budget letting people convert out?""
That's a childish approach to strategy. It reminds me of independent booksellers, who said ""why should I make it comfortable for people to read books in my store? I want them to buy the books!"" And then one day Barnes and Nobles puts couches and cafes in the stores and practically begged people to read books in their store without buying them. Now you've got all these customers sitting in their stores for hours at a time, mittengrabben all the books with their filthy hands, and the probability that they find something they want to buy is linearly proportional to the amount of time they spend in the store, and even the dinkiest Barnes and Nobles superstore in Iowa City rakes in hundreds of dollars a minute while the independent booksellers are going out of business. Honey, Shakespeare and Company on Manhattan's Upper West Side did not close because Barnes and Nobles had cheaper prices, it closed because Barnes and Nobles had more human beings in the building.
The mature approach to strategy is not to try to force things on potential customers. If somebody isn't even your customer yet, trying to lock them in just isn't a good idea. When you have 100% market share, come talk to me about lock-in. Until then, if you try to lock them in now, it's too early, and if any customer catches you in the act, you'll just wind up locking them out. Nobody wants to switch to a product that is going to eliminate their freedom in the future.
Let's take a more current example: ISPs, a highly competitive market. Something that virtually no ISP offers is the ability to get your email forwarded to another email address after you quit their service. This is small-minded thinking of the worst sort, and I'm pretty surprised nobody has figured it out. If you're a small ISP trying to get people to switch, they are going to be worrying about the biggest barrier: telling all their friends their new email address. So they won't even want to try your service. If they do try it, they won't tell their friends the new address for a while, just in case it doesn't work out. Which means they won't be getting much email at the new address, which means they won't really be trying out the service and seeing how much better they like it. Lose-lose.
Now suppose one brave ISP would make the following promise: ""Try us. If you don't like us, we'll keep your email address functioning, and we'll forward your email for free to any other ISP. For life. Hop around from ISP to ISP as many times as you want, just let us know, and we'll be your permanent forwarding service."" 
Of course, the business managers would have fits. Why should we make it easy for customers to leave the service? That's because they are short sighted. These are not your customers now. Try to lock them in before they become your customers, and you'll just lock them out. But if you make an honest promise that it will be easy to back out of the service if they're not happy, and suddenly you eliminate one more barrier to entry. And, as we learned, eliminating even a single barrier to entry can have a dramatic effect on conversions, and over time, when you knock down that last barrier to entry, people will start flooding in, and life will be good for a while. Until somebody does the same thing to you.
	"
https://www.joelonsoftware.com/2000/06/03/20000603/,2000/06/03,2000-06-03T00:00:32+00:00,,Joel Spolsky,News,"
	When you're trying to get people to switch from a competitor to your product, you need to understand barriers of entry, and you need to understand them a lot better than you think, or people won't switch and you'll be waiting tables. My third and final installment on strategy: Strategy Letter III: Let Me Go Back! 
	"
https://www.joelonsoftware.com/2000/07/31/20000731/,2000/07/31,2000-07-31T00:00:40+00:00,,Joel Spolsky,News,"
	I've been playing with WAP, the new web-like service for cellphones. Conclusion: I'm underwhelmed. The Wireless Web: Spacesuits Needed
	"
https://www.joelonsoftware.com/2000/07/28/20000728/,2000/07/28,2000-07-28T00:00:39+00:00,,Joel Spolsky,News,"
	I received some responses on my Passport article. It's sort of interesting that the only person who defended Passport was a 10-year Microsoft employee - a person who I know, trust, like, and respect, but who, I'm afraid to say, has been living in Redmond too long to see things the way the rest of the world sees them.
	"
https://www.joelonsoftware.com/2000/07/26/20000726/,2000/07/26,2000-07-26T00:00:38+00:00,,Joel Spolsky,News,"
	Am I the only one who is terrified about Microsoft Passport? It seems to me like a fairly blatant attempt to build the world's largest, richest consumer database, and then make fabulous profits mining it. It's a terrifying threat to everyone's personal privacy and it will make today's 'cookies' seem positively tame by comparison. The scariest thing is that Microsoft is advertising Passport as if it were a benefit to consumers, and people seem to be falling for it! By the time you've read this article, I can guarantee that I'll scare you into turning off your Hotmail account and staying away from MSN web sites. Read all about it: Does Issuing Passports Make Microsoft a Country? Where do morons like this get $10,000? I promise I am not making this up. I was watching the TV news, and they were interviewing a passenger getting off the Concorde, and he actually said these words: ""I'm not a statistician, but I do know that the probability of the Concorde crashing twice is infinitesimal."" Um, excuse me, even if you don't know basic probability, do you really think that the Concorde you're flying on knows about the other Concorde that crashed?
	"
https://www.joelonsoftware.com/2000/07/25/20000725/,2000/07/25,2000-07-25T00:00:37+00:00,,Joel Spolsky,News,"
	An Anonymous Response from inside Microsoft on my article criticizing Microsoft .NET (Microsoft Goes Bonkers). It's not that Microsoft doesn't have any new products that they're calling .NET; it's that the concept .NET itself is just marketing blather designed to make it look like there's a grand vision at Microsoft, when all that you have is a handful of upgraded products. It's exactly like the last stupid substance-free campaign, when Microsoft was selling Windows DNA, as if that were a product or feature. Remember that famous Dilbert cartoon, where a marketing guy is going crazy asking for features? ""It has to have a 35 inch screen and fit in your pocket. It has to have a telepathic user interface and cure cancer."" The trouble is, at Microsoft, these marketing guys are allowed to write white papers and pretend that the engineers are really working on that telepathic user interface they asked for. I've redesigned a little bit. Let me know if you have problems. 
	"
https://www.joelonsoftware.com/2000/07/24/20000724/,2000/07/24,2000-07-24T00:00:36+00:00,,Joel Spolsky,News,"
	A lot of people are talking these days about international software development: typically, that means that a US company builds a development center in India, where salaries are low and skills are high, to do programming. I've heard a lot of rumours, and I've worked on one such team myself, but I've never seen a more general analysis of whether it can be made to work. Have you worked on such a project, either from the US or from India? If so, I'd love to hear some details on whether it's working or not. Is it saving money? How much? What are the problems? What works well? Be brutally honest. This site is not known for pulling punches. I'll write up an article about it in a couple of weeks. 
	"
https://www.joelonsoftware.com/2000/07/22/20000722/,2000/07/22,2000-07-22T00:00:35+00:00,,Joel Spolsky,News,"
	It's not Microsoft .NET per se that gets me all riled up, it's that everyone has been duped into thinking that this is some kind of revolutionary new thing when it's really one level worse than vaporware: even the vapor isn't there. Read all about it: Microsoft Goes Bonkers. I've been on vacation, so I haven't been writing as often as usual. If you're tired of checking for updates, why not sign up for an email notification when I publish a new article? 
	"
https://www.joelonsoftware.com/2000/08/31/20000831/,2000/08/31,2000-08-31T00:00:51+00:00,,Joel Spolsky,News,"
	How to look like you're wearing a $350 Prada T-Shirt for 1/10th the price The trick is to buy Patagonia Capilene Silkweight T-Shirts in white or black. They look fantastic, they're the lightest, most comfortable thing I've ever worn, and you can sweat like crazy and nobody will know. no, nobody paid me to say that. i just love these t-shirts. Joel's Next Business I'm sick of computers. I think my next venture will be a very tastefully decorated shop, lots of wood and bronze, that only sells mustard and mayonnaise. It will be called ""Smith, Smith, Smith, and Son: Purveyors of Fine Mustards and Mayonnaises Since 1804"". We will have Lime-Basil Aioli, (which real foodies know does not involve limes), we will have all kinds of exciting imported mustards with lots of seeds and stuff, and it will be conveniently located on Newtown Lane in East Hampton, right next to the train station, so you can pick up some mustard for your smoked-chedder-and-pear-on-champagne-raisin-semolina-bread sandwich on the way to the country house.
	"
https://www.joelonsoftware.com/2000/08/30/20000830/,2000/08/30,2000-08-30T00:00:50+00:00,,Joel Spolsky,News,"
	Yesterday's compensation story generated a flood of good feedback. I've reworked the policy extensively based on this feedback. Although you'll see that the basic idea is the same, it's been refined a lot thanks to my readers, and it's almost completely rewritten. The process feels a lot like open source. It's not really the source code in this case, it's the blueprint for making a software company which I'm developing, in the open, with feedback and enhancements sent in by a community of contributors. I wrote a bit about Open Blueprint Companies here.
	"
https://www.joelonsoftware.com/2000/08/28/20000828/,2000/08/28,2000-08-28T00:00:49+00:00,,Joel Spolsky,News,"
	I'm designing the compensation package for programmers at Fog Creek Software! How do you compensate programmers? Reader's feedback is here. Rant Time Normally, I edit documents for this site in FrontPage or Dreamweaver. Today, I wanted to post a document that I had originally written in Word. Unfortunately, Word, which ""uses HTML as its native format,"" made a mess of it. The ""HTML"" that it generated was full of unnecessary formatting crap that only Word cares about. That took 15 minutes of manual editing to strip out. Later I discovered that Word uses smart quotes, and it leaves them in the doc, even though they are not a part of HTML and they don't show up right on non-Windows platforms. That took another 15 minutes to hunt down and remove. Grumble grumble grumble. Good thing there's Demoroniser!
	"
https://www.joelonsoftware.com/2000/08/22/20000822/,2000/08/22,2000-08-22T00:00:48+00:00,,Joel Spolsky,News,"
	Not to rain on everybody's parade, but there are three important ideas from computer science which are, frankly, wrong, and people are starting to notice. Ignore them at your peril. Three Wrong Ideas from Computer Science Fog Creek Software My consulting company, Fog Creek Software, is now open for business in New York City. If you need top quality, high-end custom software development, or know somebody who does, please get in touch! 
	"
https://www.joelonsoftware.com/2000/08/21/20000821/,2000/08/21,2000-08-21T00:00:47+00:00,,Joel Spolsky,News,"
	I just got through reading Why Does Software Cost So Much?, an excellent book of essays by Tom DeMarco. I bought the book because it came from one of the authors of Peopleware, which is the all-time best book about software management ever written. About half the essays prove that Tom DeMarco is simply the world's leading genious of software project management, and you shouldn't skip this book.
	"
https://www.joelonsoftware.com/2000/08/18/20000818/,2000/08/18,2000-08-18T00:00:46+00:00,,Joel Spolsky,News,"
	Michael Volker, an entrepreneur in Canada, has a great web site on Business Basics for Engineers. 
	"
https://www.joelonsoftware.com/2000/08/14/20000814/,2000/08/14,2000-08-14T00:00:45+00:00,,Joel Spolsky,News,"
	Silly, Paranoid Theory of the Day I'll bet that Verizon management decided that too many people were pronouncing their new name ""Very Zohn"" instead of ""Vuh Rise ON"", so they staged a ""strike"" just to get in the news a lot so that people would learn the new name! Speaking of Verizon (formed by the merger of BellAtlantic and GTE): whenever a company changes its name, the only thing that it logically means is that they concluded that their old brand name was a liability, not an asset. BellAtlantic and GTE have spent so long pissing off so many people with such bad customer service that their names had negative brand equity. Which reminds me. On a completely unrelated subject, my company PaxDigita is now known as Fog Creek Software.
	"
https://www.joelonsoftware.com/2000/08/10/20000810/,2000/08/10,2000-08-10T00:00:44+00:00,,Joel Spolsky,News,"
	Setting up PaxDigita Over the last few days I've started working furiously on setting up PaxDigita, a software company based in New York City. That's not going to be the real name. I'll tell you the real name as soon as it's been through the trademark search. I visited a place called TechSpace which provides temporary offices and business services to high tech startups. Sounded good. But the offices were tiny and crowded. I know the real estate market is tight, but this was ridiculous. They had two kinds of offices: ""cages"" and ""bullpens"". Very funny. Can you imagine trying to hire the world's top computer scientists to work in ""cages""? The Nielsen|Norman Group If you asked experienced UI designers to list the world's top names in UI design, you would get surprisingly similar results. Norman. Laurel. Tognazzini. Nielsen. Those four names are probably everybody's top four. They are the writers of the four best UI books that have ever been written. It seems to have escaped everyone's notice that all four are working together now, at the Nielsen|Norman Group. This is an incredible dream team. Imagine the Institute for Advanced Study in the forties when Einstein and Feynmann were there. Now imagine if Newton and Kepler were there, too, and you get some idea of how exciting this is. P.S. The books are: The Design of Everyday Things, Donald Norman Tog on Interface, Bruce Tognazzini Art of Human-Computer Interface Design, Brenda Laurel Designing Web Usability, Jakob Nielsen These four books are the ""Great Books"" of UI design and should be required reading for every software engineer and UI designer. 
	"
https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/,The Joel Test: 12 Steps to Better Code,2000-08-09T00:14:59+00:00,2016-12-05T19:23:00+00:00,Joel Spolsky,"Top 10, Rock star developer, News","
	Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. No, wait! Don't follow that link! It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software team. The great part about it is that it takes about 3 minutes. With all the time you save, you can go to medical school.
The Joel Test
Do you use source control?
Can you make a build in one step?
Do you make daily builds?
Do you have a bug database?
Do you fix bugs before writing new code?
Do you have an up-to-date schedule?
Do you have a spec?
Do programmers have quiet working conditions?
Do you use the best tools money can buy?
Do you have testers?
Do new candidates write code during their interview?
Do you do hallway usability testing?
The neat thing about The Joel Test is that it's easy to get a quick yes or no to each question. You don't have to figure out lines-of-code-per-day or average-bugs-per-inflection-point. Give your team 1 point for each ""yes"" answer. The bummer about The Joel Test is that you really shouldn't use it to make sure that your nuclear power plant software is safe.
A score of 12 is perfect, 11 is tolerable, but 10 or lower and you've got serious problems. The truth is that most software organizations are running with a score of 2 or 3, and they need serious help, because companies like Microsoft run at 12 full-time.
Of course, these are not the only factors that determine success or failure: in particular, if you have a great software team working on a product that nobody wants, well, people aren't going to want it. And it's possible to imagine a team of ""gunslingers"" that doesn't do any of this stuff that still manages to produce incredible software that changes the world. But, all else being equal, if you get these 12 things right, you'll have a disciplined team that can consistently deliver.
1. Do you use source control?
I've used commercial source control packages, and I've used CVS, which is free, and let me tell you, CVS is fine. But if you don't have source control, you're going to stress out trying to get programmers to work together. Programmers have no way to know what other people did. Mistakes can't be rolled back easily. The other neat thing about source control systems is that the source code itself is checked out on every programmer's hard drive - I've never heard of a project using source control that lost a lot of code.
2. Can you make a build in one step?
By this I mean: how many steps does it take to make a shipping build from the latest source snapshot? On good teams, there's a single script you can run that does a full checkout from scratch, rebuilds every line of code, makes the EXEs, in all their various versions, languages, and #ifdef combinations, creates the installation package, and creates the final media - CDROM layout, download website, whatever.
If the process takes any more than one step, it is prone to errors. And when you get closer to shipping, you want to have a very fast cycle of fixing the ""last"" bug, making the final EXEs, etc. If it takes 20 steps to compile the code, run the installation builder, etc., you're going to go crazy and you're going to make silly mistakes.
For this very reason, the last company I worked at switched from WISE to InstallShield: we required that the installation process be able to run, from a script, automatically, overnight, using the NT scheduler, and WISE couldn't run from the scheduler overnight, so we threw it out. (The kind folks at WISE assure me that their latest version does support nightly builds.)
3. Do you make daily builds?
When you're using source control, sometimes one programmer accidentally checks in something that breaks the build. For example, they've added a new source file, and everything compiles fine on their machine, but they forgot to add the source file to the code repository. So they lock their machine and go home, oblivious and happy. But nobody else can work, so they have to go home too, unhappy.
Breaking the build is so bad (and so common) that it helps to make daily builds, to insure that no breakage goes unnoticed. On large teams, one good way to insure that breakages are fixed right away is to do the daily build every afternoon at, say, lunchtime. Everyone does as many checkins as possible before lunch. When they come back, the build is done. If it worked, great! Everybody checks out the latest version of the source and goes on working. If the build failed, you fix it, but everybody can keep on working with the pre-build, unbroken version of the source.
On the Excel team we had a rule that whoever broke the build, as their ""punishment"", was responsible for babysitting the builds until someone else broke it. This was a good incentive not to break the build, and a good way to rotate everyone through the build process so that everyone learned how it worked.
Read more about daily builds in my article Daily Builds are Your Friend.
4. Do you have a bug database?
I don't care what you say. If you are developing code, even on a team of one, without an organized database listing all known bugs in the code, you are going to ship low quality code. Lots of programmers think they can hold the bug list in their heads. Nonsense. I can't remember more than two or three bugs at a time, and the next morning, or in the rush of shipping, they are forgotten. You absolutely have to keep track of bugs formally.
Bug databases can be complicated or simple. A minimal useful bug database must include the following data for every bug:
complete steps to reproduce the bug
expected behavior
observed (buggy) behavior
who it's assigned to
whether it has been fixed or not
If the complexity of bug tracking software is the only thing stopping you from tracking your bugs, just make a simple 5 column table with these crucial fields and start using it.
For more on bug tracking, read Painless Bug Tracking.
5. Do you fix bugs before writing new code?
The very first version of Microsoft Word for Windows was considered a ""death march"" project. It took forever. It kept slipping. The whole team was working ridiculous hours, the project was delayed again, and again, and again, and the stress was incredible. When the dang thing finally shipped, years late, Microsoft sent the whole team off to Cancun for a vacation, then sat down for some serious soul-searching.
What they realized was that the project managers had been so insistent on keeping to the ""schedule"" that programmers simply rushed through the coding process, writing extremely bad code, because the bug fixing phase was not a part of the formal schedule. There was no attempt to keep the bug-count down. Quite the opposite. The story goes that one programmer, who had to write the code to calculate the height of a line of text, simply wrote ""return 12;"" and waited for the bug report to come in about how his function is not always correct. The schedule was merely a checklist of features waiting to be turned into bugs. In the post-mortem, this was referred to as ""infinite defects methodology"".
To correct the problem, Microsoft universally adopted something called a ""zero defects methodology"". Many of the programmers in the company giggled, since it sounded like management thought they could reduce the bug count by executive fiat. Actually, ""zero defects"" meant that at any given time, the highest priority is to eliminate bugs before writing any new code. Here's why.
In general, the longer you wait before fixing a bug, the costlier (in time and money) it is to fix.
For example, when you make a typo or syntax error that the compiler catches, fixing it is basically trivial.
When you have a bug in your code that you see the first time you try to run it, you will be able to fix it in no time at all, because all the code is still fresh in your mind.
If you find a bug in some code that you wrote a few days ago, it will take you a while to hunt it down, but when you reread the code you wrote, you'll remember everything and you'll be able to fix the bug in a reasonable amount of time.
But if you find a bug in code that you wrote a few months ago, you'll probably have forgotten a lot of things about that code, and it's much harder to fix. By that time you may be fixing somebody else's code, and they may be in Aruba on vacation, in which case, fixing the bug is like science: you have to be slow, methodical, and meticulous, and you can't be sure how long it will take to discover the cure.
And if you find a bug in code that has already shipped, you're going to incur incredible expense getting it fixed.
That's one reason to fix bugs right away: because it takes less time. There's another reason, which relates to the fact that it's easier to predict how long it will take to write new code than to fix an existing bug. For example, if I asked you to predict how long it would take to write the code to sort a list, you could give me a pretty good estimate. But if I asked you how to predict how long it would take to fix that bug where your code doesn't work if Internet Explorer 5.5 is installed, you can't even guess, because you don't know (by definition) what's causing the bug. It could take 3 days to track it down, or it could take 2 minutes.
What this means is that if you have a schedule with a lot of bugs remaining to be fixed, the schedule is unreliable. But if you've fixed all the known bugs, and all that's left is new code, then your schedule will be stunningly more accurate.
Another great thing about keeping the bug count at zero is that you can respond much faster to competition. Some programmers think of this as keeping the product ready to ship at all times. Then if your competitor introduces a killer new feature that is stealing your customers, you can implement just that feature and ship on the spot, without having to fix a large number of accumulated bugs.
6. Do you have an up-to-date schedule?
Which brings us to schedules. If your code is at all important to the business, there are lots of reasons why it's important to the business to know when the code is going to be done. Programmers are notoriously crabby about making schedules. ""It will be done when it's done!"" they scream at the business people.
Unfortunately, that just doesn't cut it. There are too many planning decisions that the business needs to make well in advance of shipping the code: demos, trade shows, advertising, etc. And the only way to do this is to have a schedule, and to keep it up to date.
The other crucial thing about having a schedule is that it forces you to decide what features you are going to do, and then it forces you to pick the least important features and cut them rather than slipping into featuritis (a.k.a. scope creep).
Keeping schedules does not have to be hard. Read my article Painless Software Schedules, which describes a simple way to make great schedules.
7. Do you have a spec?
Writing specs is like flossing: everybody agrees that it's a good thing, but nobody does it.
I'm not sure why this is, but it's probably because most programmers hate writing documents. As a result, when teams consisting solely of programmers attack a problem, they prefer to express their solution in code, rather than in documents. They would much rather dive in and write code than produce a spec first.
At the design stage, when you discover problems, you can fix them easily by editing a few lines of text. Once the code is written, the cost of fixing problems is dramatically higher, both emotionally (people hate to throw away code) and in terms of time, so there's resistance to actually fixing the problems. Software that wasn't built from a spec usually winds up badly designed and the schedule gets out of control. This seems to have been the problem at Netscape, where the first four versions grew into such a mess that management stupidly decided to throw out the code and start over. And then they made this mistake all over again with Mozilla, creating a monster that spun out of control and took several years to get to alpha stage.
My pet theory is that this problem can be fixed by teaching programmers to be less reluctant writers by sending them off to take an intensive course in writing. Another solution is to hire smart program managers who produce the written spec. In either case, you should enforce the simple rule ""no code without spec"".
Learn all about writing specs by reading my 4-part series.
8. Do programmers have quiet working conditions?
There are extensively documented productivity gains provided by giving knowledge workers space, quiet, and privacy. The classic software management book Peopleware documents these productivity benefits extensively.
Here's the trouble. We all know that knowledge workers work best by getting into ""flow"", also known as being ""in the zone"", where they are fully concentrated on their work and fully tuned out of their environment. They lose track of time and produce great stuff through absolute concentration. This is when they get all of their productive work done. Writers, programmers, scientists, and even basketball players will tell you about being in the zone.
The trouble is, getting into ""the zone"" is not easy. When you try to measure it, it looks like it takes an average of 15 minutes to start working at maximum productivity. Sometimes, if you're tired or have already done a lot of creative work that day, you just can't get into the zone and you spend the rest of your work day fiddling around, reading the web, playing Tetris.
The other trouble is that it's so easy to get knocked out of the zone. Noise, phone calls, going out for lunch, having to drive 5 minutes to Starbucks for coffee, and interruptions by coworkers - especially interruptions by coworkers - all knock you out of the zone. If a coworker asks you a question, causing a 1 minute interruption, but this knocks you out of the zone badly enough that it takes you half an hour to get productive again, your overall productivity is in serious trouble. If you're in a noisy bullpen environment like the type that caffeinated dotcoms love to create, with marketing guys screaming on the phone next to programmers, your productivity will plunge as knowledge workers get interrupted time after time and never get into the zone.
With programmers, it's especially hard. Productivity depends on being able to juggle a lot of little details in short term memory all at once. Any kind of interruption can cause these details to come crashing down. When you resume work, you can't remember any of the details (like local variable names you were using, or where you were up to in implementing that search algorithm) and you have to keep looking these things up, which slows you down a lot until you get back up to speed.
Here's the simple algebra. Let's say (as the evidence seems to suggest) that if we interrupt a programmer, even for a minute, we're really blowing away 15 minutes of productivity. For this example, lets put two programmers, Jeff and Mutt, in open cubicles next to each other in a standard Dilbert veal-fattening farm. Mutt can't remember the name of the Unicode version of the strcpy function. He could look it up, which takes 30 seconds, or he could ask Jeff, which takes 15 seconds. Since he's sitting right next to Jeff, he asks Jeff. Jeff gets distracted and loses 15 minutes of productivity (to save Mutt 15 seconds).
Now let's move them into separate offices with walls and doors. Now when Mutt can't remember the name of that function, he could look it up, which still takes 30 seconds, or he could ask Jeff, which now takes 45 seconds and involves standing up (not an easy task given the average physical fitness of programmers!). So he looks it up. So now Mutt loses 30 seconds of productivity, but we save 15 minutes for Jeff. Ahhh!
9. Do you use the best tools money can buy?
Writing code in a compiled language is one of the last things that still can't be done instantly on a garden variety home computer. If your compilation process takes more than a few seconds, getting the latest and greatest computer is going to save you time. If compiling takes even 15 seconds, programmers will get bored while the compiler runs and switch over to reading The Onion, which will suck them in and kill hours of productivity.
Debugging GUI code with a single monitor system is painful if not impossible. If you're writing GUI code, two monitors will make things much easier.
Most programmers eventually have to manipulate bitmaps for icons or toolbars, and most programmers don't have a good bitmap editor available. Trying to use Microsoft Paint to manipulate bitmaps is a joke, but that's what most programmers have to do.
At my last job, the system administrator kept sending me automated spam complaining that I was using more than ... get this ... 220 megabytes of hard drive space on the server. I pointed out that given the price of hard drives these days, the cost of this space was significantly less than the cost of the toilet paper I used. Spending even 10 minutes cleaning up my directory would be a fabulous waste of productivity.
Top notch development teams don't torture their programmers. Even minor frustrations caused by using underpowered tools add up, making programmers grumpy and unhappy. And a grumpy programmer is an unproductive programmer.
To add to all this... programmers are easily bribed by giving them the coolest, latest stuff. This is a far cheaper way to get them to work for you than actually paying competitive salaries!
10. Do you have testers?
If your team doesn't have dedicated testers, at least one for every two or three programmers, you are either shipping buggy products, or you're wasting money by having $100/hour programmers do work that can be done by $30/hour testers. Skimping on testers is such an outrageous false economy that I'm simply blown away that more people don't recognize it.
Read Top Five (Wrong) Reasons You Don't Have Testers, an article I wrote about this subject.
11. Do new candidates write code during their interview?
Would you hire a magician without asking them to show you some magic tricks? Of course not.
Would you hire a caterer for your wedding without tasting their food? I doubt it. (Unless it's Aunt Marge, and she would hate you forever if you didn't let her make her ""famous"" chopped liver cake).
Yet, every day, programmers are hired on the basis of an impressive resume or because the interviewer enjoyed chatting with them. Or they are asked trivia questions (""what's the difference between CreateDialog() and DialogBox()?"") which could be answered by looking at the documentation. You don't care if they have memorized thousands of trivia about programming, you care if they are able to produce code. Or, even worse, they are asked ""AHA!"" questions: the kind of questions that seem easy when you know the answer, but if you don't know the answer, they are impossible.
Please, just stop doing this. Do whatever you want during interviews, but make the candidate write some code. (For more advice, read my Guerrilla Guide to Interviewing.)
12. Do you do hallway usability testing?
A hallway usability test is where you grab the next person that passes by in the hallway and force them to try to use the code you just wrote. If you do this to five people, you will learn 95% of what there is to learn about usability problems in your code.
Good user interface design is not as hard as you would think, and it's crucial if you want customers to love and buy your product. You can read my free online book on UI design, a short primer for programmers.
But the most important thing about user interfaces is that if you show your program to a handful of people, (in fact, five or six is enough) you will quickly discover the biggest problems people are having. Read Jakob Nielsen's article explaining why. Even if your UI design skills are lacking, as long as you force yourself to do hallway usability tests, which cost nothing, your UI will be much, much better.
	"
https://www.joelonsoftware.com/2000/08/09/20000809/,2000/08/09,2000-08-09T00:00:43+00:00,,Joel Spolsky,News,"
	Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software team. The great part about it is that it takes about 3 minutes. With all the time you save, you can go to medical school. The Joel Test: 12 Steps to Better Code Russian Sedelnikov Andrei has started translating my User Interface book into Russian! The cool thing is, since I have Windows 2000 and the latest IE, I can just go to that site and see the page appear in the original Russian without thinking about fonts, code pages, or encodings. It's all automatic. I read Hebrew newspapers, too, and the fact that it ""just works"" is fantastic! My latest wishlist for Manila (the software that runs Joel On Software - quite well, I should point out) 
	"
https://www.joelonsoftware.com/2000/09/29/20000929/,2000/09/29,2000-09-29T00:00:57+00:00,,Joel Spolsky,News,"
	This is strange. In 1960, almost 40 years before the Internet came along, Barbra Streisand drops the ""a"" from her first name. Of course, with the unusual spelling, it's much easier to find her in search engines, on Amazon, etc. That woman has incredible foresight. 
	"
https://www.joelonsoftware.com/2000/09/28/20000928/,2000/09/28,2000-09-28T00:00:56+00:00,,Joel Spolsky,News,"
	Coming next week: how to write specs! Good service I wrote to Starbucks. ""The grease pencils which you use to mark up the coffee cups (in New York, at least) wind up leaving ugly black goo on my hands every time I order a Starbucks beverage,"" I said. ""Please consider finding some kind of marker for the cups that does not come right off on my fingers."" (See what drinking too much coffee makes you do?) ""Cynthia B."" in Starbucks Customer Relations replied promptly: ""I shared your suggestion for using a different type of marking pen in our New York locations with the Retail Operations Department for their attention."" We'll see! 
	"
https://www.joelonsoftware.com/2000/09/25/20000925/,2000/09/25,2000-09-25T00:00:55+00:00,,Joel Spolsky,News,"
	Non-competes Does your employment contract include a non-compete clause? I've started hearing of some companies with the chutzpah to require a two-year non-compete clause in the employment contract. That's nuts. What am I supposed to do? Go two years without a job? Go back to graduate school? Some of these companies have such grandiose/paranoid ideas of who their competitors are that they consider everyone a competitor. I loathe these things (see my earlier story on the topic), so Fog Creek will never have a non-compete clause. When I mentioned this to a lawyer who works with a lot of high tech startups, this is what he said: ""We're trying to get all the employers to put them in. Provide a united front. So that employees don't have any choice."" Who, exactly, does this benefit if everybody has the same clause? I'll tell you who it benefits. Me. Because I'll hire you even if you don't want to sign a restrictive non-compete clause that makes you scared to ever look for another job in your field. The ""Hello, World"" company Over the last four or five weeks I've been shocked, shocked at how much work it takes just to create a company that doesn't do anything. Payroll, incorporation, certificate of good standing, Federal EIN, Authorization to do Business, Workman's Compensation, liability insurance, health insurance, business checking account, I-9 forms, W-4 forms, SS-4 forms, Payroll Direct Deposit, domain name registration, trademark search, ... Oh, wait, I forgot. Articles of incorporation, shareholders resolutions, election of the board of directors, by-laws, founders' agreements, flounder agreement, baked flounder and spam, halibut and spam, plain spam, spam spam eggs and spam, and spam spam spam spam spam spam bacon spam and spam. 
	"
https://www.joelonsoftware.com/2000/09/19/20000919/,2000/09/19,2000-09-19T00:00:54+00:00,,Joel Spolsky,News,"
	As if there weren't enough reasons not to use Cue Cat, the company can't even keep it's customer data private. 
	"
https://www.joelonsoftware.com/2000/09/18/20000918/,2000/09/18,2000-09-18T00:00:53+00:00,,Joel Spolsky,News,"
	Register.com and URL forwarding A good friend, looking for a CTO job in NYC, called me to ask what I thought about register.com. He sort of thought that because ""www.JoelOnSoftware.com"" has a big ad for register.com on the bottom, that I was affiliated with them in some way. Actually, the correct URL for Joel on Software is supposed to be ""joel.editthispage.com"", where I sure as heck don't have any ads for register.com. But I wanted to reserve the domain name ""JoelOnSoftware.com"" for when I get rich and can afford to host it myself. So I used register.com to register the new domain name, and then used register.com's ""free"" URL redirection service. And that's the problem: their free redirection service frames your site with a big fat ad. Lame. For now, I've added a little bit of Javascript to get rid of the ad that they put up... but it still flashes briefly. Now I'm kind of hoping that people mistakenly believe that if you use register.com, your web page will have a big register.com ad. That would teach them to sneak their nasty ads in where they don't belong! Cobalt Qube We've set up a Cobalt Qube for Fog Creek. It's doing a nice job as a web server, email server, CVS server, firewall, NAT, and a few other things I haven't figured out yet. All told, we got all this stuff running with about 3 hours of work between us... compared to several days of work when I set up the same thing for myself on a new Linux box at home. When the Qube came out about a year ago at $999, they bragged about how it ""doesn't need a keyboard and monitor"" and therefore can be a lot cheaper than a PC running Linux. Well, this thing is still $999, now a heck of a lot more expensive than the equivalent PC, and I'm sure it's still selling like hotcakes... know why? It's because of the software. Software adds value faster than it adds cost. Prediction: Cobalt will outsource all the hardware stuff and become a pure software company. 
	"
https://www.joelonsoftware.com/2000/09/12/wasting-money-on-cats/,Wasting Money on Cats,2000-09-12T00:15:34+00:00,2016-12-05T19:24:16+00:00,Joel Spolsky,"CEO, News","
	Did you get this little box in the mail this week?
I did. I think it's because I'm a Wired subscriber. Inside the box was a free ""cat"", which is supposed to remind you of a mouse, and Jared says looks like a fox:
The little cat can be used to scan barcodes which appear in magazines like, um, Wired, for example.
 
And when you scan the cool barcode, presumably, your web browser goes to the Altoids web page.
Well.
The number of dumb things going on here exceeds my limited ability to grok all at once. I'm a bit overwhelmed with what a feeble business idea this is.
The cat is called Cue Cat, which I'm supposed to punctuate as so: :CueCat. That's right, the colon is a part of the name. The software that comes with this cutie says that it's made by DigitalConvergence.:Com. No, don't type the colon before the com, that's merely there to be cute.
The colonated company DigitalConvergence.:Com has, and I kid you not, 200 employees, according to their web page. That means that even on the most moderate estimate, they are burning about a million dollars a month just on salaries. Now, the auditors say that the paid circulation of Wired is around half a million, so mailing this dang thing out is going to cost about a million dollars in postage, if they're really sending it to everyone. Not to mention the cost of manufacturing the CD with the software; the cable that comes with the thing, and the :Cat itself: this is a company that is burning money at Iridium rates.
What kind of investors are willing to burn money at that rate? Don't they realize that it's a dumb idea?
I guess not. But it is. Here's why.
1. This thing is not solving a problem.
I've racked my brain, and I've tried to figure out why I would want their cat chasin' my mouse around the desk. I came up with two ""problems"" that it solves:
typing URLs is hard. As if. Going to the Altoids web site is not a hard problem that I need solved. We're talking 7 characters to type, here.
magazines can't prove to advertisers that people actually look at their ads and go to the URLs mentioned in the ad. 
I think that #2 is really where the focus is, because that seems to be where the money is to be made (and that's who's going to pay for the cats, which users get for free). But #2 is a falsehood, too. People don't have cats and they won't use them. Just to direct mail a bunch of cats, free, to the subscribers of one magazine is going to cost millions, and if it's like any other direct mail, 99% of them are going straight in the trash. If 1% of Wired's subscribers install the thing, we're talking about an installed base of around 5000 cats. So if Wired thinks they are going to impress their advertisers by showing them how 13 people scanned the page and went to the web site, they're in for a rude awakening.
If you invent something that doesn't solve a problem, it better be entertaining. Is the :Cat entertaining? Let me entertain you with a quick quote from the instructions that came with this thing:
""TO CHANGE YOUR COMPUTER'S BIOS SETTINGS...""
That's where I stopped reading. Changing the BIOS settings is not my idea of entertainment. I don't think I want to install this. There is no possible benefit to the consumer, so no consumer in their right mind will use this.
2. The Cat Suffers from Chicken and Egg Syndrome
No advertiser will bother putting the Cat barcode in their ads unless a lot of people have cats installed on their computers, because, well, it's just a lot of bother and looks dumb.
Nobody will install a Cat on their computer unless they see Cat barcodes all over the place.
Conclusion: this thing will die an unhappy death of Chicken and Egg Syndrome. You can read all about this syndrome in my earlier article here. This might be a decent business if everybody had cats installed, and it would be a great business if every ad, everywhere, had barcodes, but, uh, they don't, and they don't, so it's not such a great business.
To get around the chicken/egg problem, DigitalConvergence.:Com is spending a fortune giving away the devices. If they send them to all of Wired's subscribers, well, that's half a million people. Out of 300 million people on the net, I'm not impressed. And their system lets you scan in UPC symbols, for some bizarre reason, so if you want to go to the Campbell's Tomato Soup web page, you can do that by scanning the actual can itself. Both of these are half-hearted attempts to solve the mother of all chicken and egg problems.
3. And anyway, what the heck happened to last month's dumb Wired idea?
About two months ago, Wired magazine had a different technology for going to a URL automatically from an ad. It was some kind of weird thing where you held up the page to your digital camera, took a digital picture, and ran this wacked out software that navigated your browser to the Altoids home page. So now instead of typing 7 letters I have to find my digital camera, turn it on, wait for it to boot up, take a picture of the page, turn off the camera, wait for it to flush its memory to flash, remove the flash card from the camera, take the network card out of the PCMCIA slot, put the compact flash into it's holder, plug it into the PCMCIA slot, find the picture, run the software which I previously installed, oh, don't get me started. It would be a half-hour trauma just to go to the damn Altoids web site, where you can't even buy an Altoids, for heaven's sake. Curious.
Of course, that idea died so quickly that here it is, two months later, and there's no sign of it in the pages of this month's Wired. A mere flash in the primordial soup. I can't even remember what the damn thing was called. (My readers inform me that it's called the Digimarc MediaBridge.)
Bottom line: if you're working for a company that's spending millions of dollars trying to get people to do something with absolutely no benefit to them, and which suffers from chicken and egg problems, don't be counting your stock options just yet.
[June 16, 2001: Digital Convergence lays off most employees.]
	"
https://www.joelonsoftware.com/2000/09/12/20000912/,2000/09/12,2000-09-12T00:00:52+00:00,,Joel Spolsky,News,"
	Cats ""The number of dumb things going on here exceeds my limited ability to grok all at once. I'm a bit overwhelmed with what a feeble business idea this is."" Read my full review of DigitalConvergence's new Cat: Wasting money on cats New office! Fog Creek Software has a new office. We moved in yesterday: The office is located about a block from South Street Seaport. It has windows everywhere, a full kitchen, and some exciting bright-red walls (but not for long!) 
	"
https://www.joelonsoftware.com/2000/10/27/20001027/,2000/10/27,2000-10-27T00:01:07+00:00,,Joel Spolsky,News,"
	The Enigma Browser Is this a complete fraud, or merely misleading? These guys have written a 'web browser' which they say is only 33K. But it's really nothing than a little program which embeds the Microsoft Internet Explorer control. So they're using all of Internet Explorer, basically, and pretending that they don't have any ""bloat"". The joke is, Internet Explorer itself is nothing but a 59K program that embeds the Internet Explorer control. Wooooo, they saved 26K. I am so excited. The author is quoted as saying ""The Internet Explorer and Netscape models are clunky and inefficient. They seldom take the most efficient path to accomplish things, and they prefer to use RAM over code optimization and CPU utilization."" When you look closely at Enigma, you still need Internet Explorer, you're still using Internet Explorer, but you don't get any of the features. Now look a little closer. Enigma is written in Visual Basic. So it needs the Visual Basic runtime, which not many people have. That's another 1.32 Meg right there. Oh, and... oops! there are a whole bunch of other components it needs, too. Come on, this is lame. I can't believe nobody at Dr. Dobbs Journal caught them on this lie.
	"
https://www.joelonsoftware.com/2000/10/25/20001025/,2000/10/25,2000-10-25T00:01:06+00:00,,Joel Spolsky,News,"
	Another Business Model That Doesn't Seem To Work I used to have Atomz.com as my search provider. When Atomz asked me to start paying ($100 for three months), it took me 20 minutes to switch over to Google. Kiss them goodbye. Nortel's Loss is Fog Creek's Gain As soon as the investment community realized that Babak Ghahremanpour had left Nortel to join Fog Creek Software, Nortel's stock plunges 27%. 
	"
https://www.joelonsoftware.com/2000/10/24/20001024/,2000/10/24,2000-10-24T00:01:05+00:00,,Joel Spolsky,News,"
	Who linked to Joel? Somebody must be linking to this site; my readership is up dramatically since yesterday. Who can it be? Aha. A link in The Motley Fool. That explains it.
	"
https://www.joelonsoftware.com/2000/10/16/20001016/,2000/10/16,2000-10-16T00:01:04+00:00,,Joel Spolsky,News,"
	Did you know Joel on Software is the #1 response when you search for ""Joel"" on Google? Among other things, I finally beat out Billy Joel, the minor prophet, and that cute child actor from ""Sixth Sense"".
	"
https://www.joelonsoftware.com/2000/10/15/painless-functional-specifications-part-4-tips/,Painless Functional Specifications – Part 4: Tips,2000-10-15T00:14:39+00:00,2016-12-05T19:12:22+00:00,Joel Spolsky,"Software designer, News","
	OK, we've talked about why you need a spec, what a spec has in it, and who should write them. In this fourth and final part of the series I'll share some of my advice for writing good specs.
The biggest complaint you'll hear from teams that do write specs is that ""nobody reads them."" When nobody reads specs, the people who write them tend to get a little bit cynical. It's like the old Dilbert cartoon in which engineers use stacks of 4-inch thick specs to build extensions to their cubicles. At your typical big, bureaucratic company, everybody spends months and months writing boring specs. Once the spec is done, it goes up on the shelf, never to be taken down again, and the product is implemented from scratch without any regard to what the spec said, because nobody read the spec, because it was so dang mind-numbing. The very process of writing the spec might have been a good exercise, because it forced everyone, at least, to think over the issues. But the fact that the spec was shelved (unread and unloved) when it was completed makes people feel like it was all a bunch of work for naught.
Also, if your spec never gets read, you get a lot of arguments when the finished product is delivered. Somebody (management, marketing, or a customer) says: ""wait a minute! You promised me that there would be a Clam Steamer! Where's the clam steamer?"" And the programmers say, ""no, actually, if you look on the spec on chapter 3, subchapter 4, paragraph 2.3.0.1, you'll see it says quite explicitly 'no clam steamer.'"" But that doesn't satisfy the customer, who is always right, so the grumpy programmers have to go retrofit a clam steamer into the thing (making them even more cynical about specs). Or a manager says, ""hey, all the wording on this dialog is too verbose, and there should be an advertisement at the top of every dialog box."" And the programmers say, in frustration, ""but you approved the spec which precisely listed the layout and contents of every dialog box!"" But of course, the manager hadn't actually read the spec, because when he tried, his brain started seeping out through his eye sockets, and anyway, it was interfering with his Tuesday golf game.
So. Specs are good, but not if nobody reads them. As a spec-writer, you have to trick people into reading your stuff, and you should also probably make an effort not to cause any already-too-small brains to leak out through eye-sockets.
Tricking people into reading your stuff is usually just a matter of good writing. But it's not fair of me to just say ""be a good writer"" and leave it at that. Here are four easy rules that you absolutely must follow to make specs that get read.
Rule 1: Be Funny
Yep, rule number one in tricking people into reading your spec is to make the experience enjoyable. Don't tell me you weren't born funny, I don't buy it. Everybody has funny ideas all the time, they just self-censor them because they think that it's ""unprofessional."" Feh. Sometimes you have to break the rules.
If you read the volumes of garbage I've written on this web site, you'll notice that there are a few lame attempts at being funny scattered throughout. Just four paragraphs ago I was making a gross body-fluid joke and making fun of managers for playing golf. Even though I'm not really that funny, I still try pretty hard, and even the act of flailing around trying to be funny is in itself amusing, in a sad-clown sort of way. When you're writing a spec, an easy place to be funny is in the examples. Every time you need to tell a story about how a feature works, instead of saying:
The user types Ctrl+N to create a new Employee table and starts entering the names of the employees.
write something like:
Miss Piggy, poking at the keyboard with a eyeliner stick because her chubby little fingers are too fat to press individual keys, types Ctrl+N to create a new Boyfriend table and types in the single record ""Kermit.""
If you read a lot of Dave Barry, you'll discover that one of the easiest ways to be funny is to be specific when it's not called for. ""Scrappy pugs"" are funnier than ""dogs."" ""Miss Piggy"" is funnier than ""the user"". Instead of saying ""special interests,"" say ""left-handed avocado farmers."" Instead of saying ""People who refuse to clean up after their dogs should be punished,"" say that they should be ""sent to prisons so lonely that the inmates have to pay spiders for sex.""
Oh, and, by the way, if you think that it's unprofessional to be funny, then I'm sorry, but you just don't have a sense of humor. (Don't deny it. People without senses of humors always deny it. You can't fool me.) And if you work in a company where people will respect you less because your specs are breezy, funny, and enjoyable to read, then go find another company to work for, because life is just too damn short to spend your daylight hours in such a stern and miserable place.
Rule 2: Writing a spec is like writing code for a brain to execute
Here's why I think that programmers have trouble writing good specs.
When you write code, your primary audience is the compiler. Yeah, I know, people have to read code, too, but it's generally very hard for them. For most programmers it's hard enough to get the code into a state where the compiler reads it and correctly interprets it; worrying about making human-readable code is a luxury. Whether you write:
void print_count( FILE* a, char * b, int c ){ fprintf(a, ""there are %d %s\n"", c, b);}
main(){ int n; n = 10; print_count(stdout, ""employees"", n) /* codedeliberately obfuscated */ }
or
printf(""there are 10 employees\n"");
you get the same output. Which is why, if you think about it, you tend to get programmers who write things like:
Assume a function AddressOf(x) which is defined as the mapping from a user x, to the RFC-822 compliant email address of that user, an ANSI string. Let us assume user A and user B, where A wants to send an email to user B. So user A initiates a new message using any (but not all) of the techniques defined elsewhere, and types AddressOf(B) in the To: editbox.
This could also have been speced as:
Miss Piggy wants to go to lunch, so she starts a new email and types Kermit's address in the ""To:"" box. 
Technical note: the address must be a standard Internet address (RFC-822 compliant.)
They both ""mean"" the same thing, theoretically, except that the first example is impossible to understand unless you carefully decode it, and the second example is easy to understand. Programmers often try to write specs which look like dense academic papers. They think that a ""correct"" spec needs to be ""technically"" correct and then they are off the hook.
The mistake is that when you write a spec, in addition to being correct, it has to be understandable, which, in programming terms, means that it needs to be written so that the human brain can ""compile"" it. One of the big differences between computers and human brains is that computers are willing to sit there patiently while you define the terms that you want to use later. But humans won't understand what you're talking about unless you motivate it first. Humans don't want to have to decode something, they just want to read it in order and understand it. For humans, you have to provide the big picture and then fill in the details. With computer programs, you start at the top and work your way to the bottom, with full details throughout. A computer doesn't care if your variable names are meaningful. A human brain understands things much better if you can paint a vivid picture in their mind by telling a story, even if it's just a fragment of a story, because our brains have evolved to understand stories.
If you show a chess board, in the middle of a real game of chess, to an experienced chess player for even a second or two, they will instantly be able to memorize the position of every piece. But if you move around a couple of pieces in nonsensical ways that couldn't happen in normal play (for example, put some pawns on the first row, or put both black bishops on black squares), it becomes much, much harder for them to memorize the board. This is different from the way computers think. A computer program that could memorize a chess board could memorize both possible and impossible layouts with equal ease. The way the human brain works is not random access; pathways tend to be strengthened in our brains and some things are just easier to understand than other things because they are more common.
So, when you're writing a spec, try to imagine the person you are addressing it to, and try to imagine what you're asking them to understand at every step. Sentence by sentence, ask yourself if the person reading this sentence will understand it at a deep level, in the context of what you've already told them. If some members of your target audience don't know what RFC-822 is, you either have to define it, or, at the very least, bury the mention of RFC-822 in a technical note, so that the executive-types who read the spec won't give up and stop reading the first time they see a lot of technical jargon. 
Rule 3: Write as simply as possible
Don't use stilted, formal language because you think it's unprofessional to write in simple sentences. Use the simplest language you can. 
People use words like ""utilize"" because they think that ""use"" looks unprofessional. (There's that word ""unprofessional"" again. Any time somebody tells you that you shouldn't do something because it's ""unprofessional,"" you know that they've run out of real arguments.) In fact I think that many people think that clear writing means that something is wrong.
Break things down to short sentences. If you're having trouble writing a sentence clearly, break it into two or three shorter sentences. 
Avoid walls of text: entire pages with just text. People get scared and don't read them. When was the last time you noticed a popular magazine or newspaper with entire pages of text? Magazines will go so far as to take a quote from the article and print it, in the middle of the page, in a giant font, just to avoid the appearance of a full page of text. Use numbered or bulleted lists, pictures, charts, tables, and lots of whitespace so that the reading ""looks"" fluffier.
 
""Magazines will go so far as to take a quote from the article and print it, in the middle of the page, in a giant font, just to avoid the appearance of a full page of text.""
 
Nothing improves a spec more than lots and lots of screenshots. A picture can be worth a thousand words. Anyone who writes specs for Windows software should invest in a copy of Visual Basic, and learn to use it at least well enough to create mockups of the screens. (For the Mac, use REAL Basic; for Web pages, use Front Page or Dreamweaver). Then capture these screenshots (Ctrl+PrtSc) and paste them into your spec.
Rule 4: Review and reread several times
Um, well, I was originally planning to have a lengthy exegesis of this rule here, but this rule is just too simple and obvious. Review and reread your spec several times, OK? When you find a sentence that isn't super easy to understand, rewrite it.
I've saved so much time by not explaining Rule 4 that I'm going to add another rule.
Rule 5: Templates considered harmful
Avoid the temptation to make a standard template for specs. At first you might just think that it's important that ""every spec look the same."" Hint: it's not. What difference does it make? Does every book on your bookshelf at home look exactly the same? Would you want them to?
Worse, if you have templates, what tends to happen is that you add a bunch of sections to the template for things that you think are important for every feature. Example: Big Bill decrees that from here on forward, every Microsquish product shall have an Internet component. So the spec template now has a section that says ""Internet Component."" Whenever somebody writes a spec, no matter how trivial, they have to fill in that section that says ""Internet Component"", even if they're just creating the spec for the Microsquish Keyboard. (And you wondered why those useless Internet shopping buttons started cropping up like mushrooms on keyboards).
As these sections accumulate, the template gets pretty large. (Here is an example of a very, very bad template for specifications. Who needs a bibliography in a spec, for heaven's sake? Or a glossary?) The trouble with such a large template is that it scares people away from writing specs because it looks like such a daunting task.
A spec is a document that you want people to read. In that way, it is no different than an essay in The New Yorker or a college paper. Have you ever heard of a professor passing out templates for students to write their college papers? Have you ever read two good essays that could be fit into a template? Just drop the idea.
	"
https://www.joelonsoftware.com/2000/10/15/20001015/,2000/10/15,2000-10-15T00:01:03+00:00,,Joel Spolsky,News,"
	The biggest complaint you'll hear from teams that do write specs is that ""nobody reads them."" When nobody reads specs, the people who write them tend to get a little bit cynical. It's like the old Dilbert cartoon in which engineers use stacks of 4-inch thick specs to build extensions to their cubicles. At your typical big, bureaucratic company, everybody spends months and months writing boring specs. Once the spec is done, it goes up on the shelf, never to be taken down again, and the product is implemented from scratch without any regard to what the spec said, because nobody read the spec, because it was so dang mind-numbing. The very process of writing the spec might have been a good exercise, because it forced everyone, at least, to think over the issues. But the fact that the spec was shelved (unread and unloved) when it was completed makes people feel like it was all a bunch of work for naught. Getting people to read your specs is the topic of the fourth and final part of my series on functional specifications.
	"
https://www.joelonsoftware.com/2000/10/12/20001012/,2000/10/12,2000-10-12T00:01:02+00:00,,Joel Spolsky,News,"
	Every once in a while some venture capitalist feels a need to give you some money. Usually it's because he has a nasty business idea and he needs to bribe people to play along for a while. For example, when Drugstore.com started up, they offered everyone $10 worth of free stuff. I used my $10 on Mach 3 razor blades, which last forever in the closet and are small and easy to store. Now UrbanFetch is going out of business, and they're dumping all their inventory at bargain basement prices. This time I bought about $70 worth of Mach 3 razor blades, which last forever in the closet and are easy to store. The thing about Mach 3 razor blades is that they're quite expensive, and never on sale. But when you find a stupid venture capitalist trying to give you stuff, if you can get him to give you Mach 3 razor blades, that's basically as good as cash (in small quantities). Razor blades. The currency of the New Economy.
	"
https://www.joelonsoftware.com/2000/10/10/20001010/,2000/10/10,2000-10-10T00:01:01+00:00,,Joel Spolsky,News,"
	Silicon Alley stocks aren't doing too well. Company 52-week high Today's Close Loss Juno 87 2 11/16 -97% TheGlobe.com 16 1/8 35/64 -97% iTurf 25 1 3/32 -96% Priceline 104 1/4 6 25/32 -93% Register.com 116 7 7/8 -93% IVillage 34 11/16 3 -91% 24/7 Media 65 1/4 6 -91% Razorfish 56 15/16 5 15/32 -90% Agency.com 98 11 15/16 -88% TheStreet.com 22 3/16 3 1/2 -84% EarthWeb 55 5/16 9 1/2 -83% Doubleclick 135 1/4 24 11/16 -82% about.com 105 13/16 22 7/8 -78% and I have a cold. Sorry for the delay in posting part 4 of Painless Specs.
	"
https://www.joelonsoftware.com/2000/10/04/painless-functional-specifications-part-3-but-how/,Painless Functional Specifications – Part 3: But… How?,2000-10-04T00:14:45+00:00,2016-12-05T19:12:36+00:00,Joel Spolsky,"Software designer, News","
	Now that you've read all about why you need a spec and what a spec has in it, let's talk about who should write them.
Who writes specs? 
Let me give you a little Microsoft history here. When Microsoft started growing seriously in the 1980s, everybody there had read The Mythical Man-Month, one of the classics of software management. (If you haven't read it, I highly recommend it.) The main point of that book was that when you add more programmers to a late project, it gets even later. That's because when you have n programmers on a team, the number of communication paths is n(n-1)/2, which grows at O(n2).
So the programmers at Microsoft were worried about how to write bigger and bigger programs, when the prevailing wisdom of the day was that adding programmers just makes things worse.
Charles Simonyi, Microsoft's long time ""chief architect"", suggested the concept of master programmers. The idea was basically that one master programmer would be responsible for writing all the code, but he or she would rely on a team of junior programmers as ""code slaves"". Instead of worrying about debugging every function, the master programmer would basically just prototype each function, creating the bare outline, and then throw it to one of the junior programmers to implement. (Of course, Simonyi would be the Master Master Programmer.) The term ""Master Programmer"" was a bit too medieval, so Microsoft went with ""Program Manager."" 
Theoretically, this was supposed to solve the Mythical Man-Month problem, because nobody has to talk to anyone else - every junior programmer only talks to the one program manager, and so communication grows at O(n) instead of O(n2).
Well, Simonyi may know Hungarian Notation, but he doesn't know Peopleware. Nobody wants to be a code slave. The system didn't work at all. Eventually, Microsoft discovered that despite the alleged Mythical Man Month, you can still add smart people to a team and get increased output, although at decreasing marginal values. The Excel team had 50 programmers when I was there, and it was marginally more productive than a team of 25 would have been - but not twice as productive.
The idea of master/slave programming was discredited, but Microsoft still had these people called program managers bouncing around. A smart man named Jabe Blumenthal basically reinvented the position of program manager. Henceforth, the program manager would own the design and the spec for products.
Since then, program managers at Microsoft gather requirements, figure out what the code is supposed to do, and write the specs. There are usually about 5 programmers for every program manager; these programmers are responsible for implementing in code what the program manager has implemented in the form of a spec. A program manager also needs to coordinate marketing, documentation, testing, localization, and all the other annoying details that programmers shouldn't spend time on. Finally, program managers at Microsoft are supposed to have the ""big picture"" of the company in mind, while programmers are free to concentrate on getting their bits of code exactly right.
Program managers are invaluable. If you've ever complained about how programmers are more concerned with technical elegance than with marketability, you need a program manager. If you've ever complained about how people who can write good code never do a good job of writing good English, you need a program manager. If you've ever complained about how your product seems to drift without any clear direction, you need a program manager.
How do you hire a program manager? 
Most companies don't even have the concept of program manager. I think that's too bad. In my time, the groups at Microsoft with strong program managers had very successful products: Excel, Windows 95, and Access come to mind. But other groups (such as MSN 1.0 and Windows NT 1.0) were run by developers who generally ignored the program managers (who weren't very good anyway, and probably deserved to be ignored), and their products were not as successful. 
Here are three things to avoid. 
1. Don't promote a coder to be a program manager. The skills for being a good program manager (writing clear English, diplomacy, market awareness, user empathy, and good UI design) are very rarely the skills for being a good coder. Sure, some people can do both, but they are rare. Rewarding good coders by promoting them to a different position, one that involves writing English, not C++, is a classic case of the Peter Principle: people tend to be promoted to their level of incompetence. 
2. Don't let the marketing people be program managers. No offense, but I think my readers will agree that good marketing people rarely have a good enough grasp of the technology issues to design products. 
Basically, program management is a separate career path. All program managers need to be very technical, but they don't have to be good coders. Program managers study UI, meet customers, and write specs. They need to get along with a wide variety of people - from ""moron"" customers, to irritating hermit programmers who come to work in Star Trek uniforms, to pompous sales guys in $2000 suits. In some ways, program managers are the glue of software teams. Charisma is crucial. 
3. Don't have coders report to the program manager. This is a subtle mistake. As a program manager at Microsoft, I designed the Visual Basic (VBA) strategy for Excel and completely speced out, to the smallest detail, how VBA should be implemented in Excel. My spec ran to about 500 pages. At the height of development for Excel 5.0, I estimated that every morning, 250 people came to work and basically worked off of that huge spec I wrote. I had no idea who all these people were, but there were about a dozen people on the Visual Basic team alone just writing documentation for this thing (not to mention the team writing documentation from the Excel side, or the full time person who was responsible for hyperlinks in the help file.) The weird thing was that I was at the ""bottom"" of the reporting tree. That's right. NOBODY reported to me. If I wanted people to do something, I had to convince them that it was the right thing to do. When Ben Waldman, the lead developer, didn't want to do something I had speced out, he just didn't do it. When the testers complained that something I had speced was impossible to test completely, I had to simplify it. If any of these people had reported to me, the product wouldn't have been as good. Some of them would have thought that it's inappropriate to second-guess a superior. Other times, I would have just put my foot down and ordered them to do it my way, out of conceit or nearsightedness. As it was, I had no choice but to build consensus. This form of decision making was the best way to get the right thing done. 
The final article in my series on specs talks about how to write good specs that people want to read.
	"
https://www.joelonsoftware.com/2000/10/04/20001004/,2000/10/04,2000-10-04T00:01:00+00:00,,Joel Spolsky,News,"
	Most companies don't even have the concept of program manager. I think that's too bad. In my time, the groups at Microsoft with strong program managers had very successful products: Excel, Windows 95, and Access come to mind. But other groups (such as MSN 1.0 and Windows NT 1.0) were run by developers who generally ignored the program managers (who weren't very good anyway, and probably deserved to be ignored), and their products were not as successful. Program managers are the people who write the specs, so as part three in my four-part series on writing specs, I talk about who they are, what they do, and how to hire them.
	"
https://www.joelonsoftware.com/2000/11/30/20001130/,2000/11/30,2000-11-30T00:01:24+00:00,,Joel Spolsky,News,"
	Day Without ArtDay Without WeblogsWorld AIDS Day Joel on Software is closed for the day.
	"
https://www.joelonsoftware.com/2000/11/29/20001129/,2000/11/29,2000-11-29T00:01:23+00:00,,Joel Spolsky,News,"
	I'm pretty psyched, because UI Design for Programmers is going to appear in print soon. The print version will be expanded from the web version, with about 5 bonus chapters, lots more illustrations, and a foreword by Dave Winer. It's being published by Apress, a publisher I love because the founder, Gary Cornell, actually knows more about programming than I do, a rare trait in a computer books publisher.
	"
https://www.joelonsoftware.com/2000/11/28/20001128/,2000/11/28,2000-11-28T00:01:22+00:00,,Joel Spolsky,News,"
	Know somebody who might hire Fog Creek Software? We'll pay up to $5000 as a finder's fee.
	"
https://www.joelonsoftware.com/2000/11/27/20001127/,2000/11/27,2000-11-27T00:01:21+00:00,,Joel Spolsky,News,"
	Working without a salesperson As a tiny company, Fog Creek Software can't afford a sales team, or even a sales person, or in fact, a sales cat. ""So how do you plan to sell your consulting services?"" you ask. ""Aha!"" I say. ""I'll promote them on my web site! Surely somebody out there wants to hire smart programmers and architects."" Here's what I was thinking of doing to make it worth your time. If you know someone who can use the services of Fog Creek Software, and they hire us, I'll pay you 5% of the revenue we get from the project, up to a maximum $5000 (U.S.) for each referral. I'll post more details and the complete terms as soon as I get the OK from my lawyer. (""You can afford a lawyer?"" you ask. ""No, but we couldn't afford to buy errors and omissions insurance if we didn't have a lawyer, so it's the lesser of two costs,"" I reply). Meanwhile start thinking of all your friends who are CTOs at wealthy startups and Fortune 500 corporations that need a small but crack team of software wizards.
	"
https://www.joelonsoftware.com/2000/11/22/20001122/,2000/11/22,2000-11-22T00:01:20+00:00,,Joel Spolsky,News,"
	FogBUGZ Yesterday we shipped our first product, a bug tracking package called FogBUGZ. I've noticed that lots of development teams have bug tracking software, but many of them just don't use it. There are a lot of subtle sociology and group-dynamics issues that explain why some software is univerally used, and other software languishes on the shelf. Microsoft's internal bug tracking tool, RAID, is used universally by developers throughout the company. (FogBUGZ works a lot like RAID, but it's web-based instead of client-server). But lots of companies spend hundreds of thousands of dollars on overengineered ""defects management"" tools which nobody ever uses. And the reason for the difference comes down to small issues of usability and sociology. For example, usability theory holds that if you make a task 10% easier, you double the number of people that can accomplish it. I've always felt that if you can make it 10% easier to fill in a bug report, you'll get twice as many bug reports. (When I removed two questions from the Joel On Software signup page, the rate of new signups went up dramatically). Over the three years in which I've been developing and tweaking FogBUGZ, I've resisted dozens of requests for new fields, because I've learned that the more fields you have to fill out, the less likely you are to use the bug database to report a bug, and the more likely you are to work around the system by sending email or making a post-it note. And in sociology, it's vital to remember that change is hard. It's difficult to get people to learn new habits and new ways of working, and it's impossible to inflict a new style of working on an existing group of developers all at once. So we designed FogBUGZ to be viral. One person on any team - a manager, tester, or developer, can start using it, and pretty soon it will spread to the whole development team. It can start with a single developer, who starts using it as a ""to do"" list. Then it spreads slowly: maybe the first developer assigns an item on the to do list to a friend. Then the two of them decide to tell the testing team not to report bugs via email, but to use the bug tracking tool instead. Rapidly, it spreads to the whole development organization, and pretty soon, developers get disgruntled that they can't enter a bug for the office manager to get more Mountain Dew. FogBUGZ reflects our attention to usability and sociology, not just technological ""gee whiz"" gadgetry. Try it out! We've got a demo online where you can set up your own private bug database to play with for free. And let me know how you like it. Google Just Rocks. They are beta testing a new navigation bar - an add-in for Internet Explorer that's really, really cool. It's the first thing I've seen that justifies the screen real estate. (And I'm not just saying that because I own Google stock!)
	"
https://www.joelonsoftware.com/2000/11/20/20001120/,2000/11/20,2000-11-20T00:01:19+00:00,,Joel Spolsky,News,"
	Painless Bug Tracking TRS-80 Level-I BASIC could only store two string variables, A$ and B$. Similarly, I was born with only two bug-storing-slots in my brain. At any given time, I can only remember two bugs. If you ask me to remember three, one of them will fall on the floor and get swept under the bed with the dust bunnies, who will eat it. Keeping a database of bugs is one of the hallmarks of a good software team. I never cease to be amazed at how few teams are actually doing this. One of the biggest incorrect facts that programmers consistently seem to believe is that they can remember all their bugs or keep them on post-it notes. If I can bend your ear a moment, I'd like to explain a pretty painless way to do bug tracking, in the spirit of my previous articles on painless schedules and painless specs. Netscape 6 Netscape 6 is just not making people happy. I'm happy, because Netscape 6 is practically an advertisement for what happens if you don't read Joel on Software and do what I tell you The number of problems in Netscape 6 that I've already addressed on these pages is mind boggling. Netscape Goes Bonkers The Autodesk Files Wow, I read this in print years ago, and didn't realize it was on the web! The Autodesk Files tells the story of the creation of Autodesk. An interesting look at bootstrapping a big company before the days of lunatic VCs and dotcom mania. (Thanks to Bill Seitz for finding it!) ""Lifeboat is probably the largest independent software vendor in the world today,"" John Walker wrote, back in 1982. (They were really more of a distributor). Lifeboat was eaten up by what is now Programmer's Paradise, if you can believe that. And people stopped calling PCs ""micros."" Now when you write ""micros"" it looks like you were going to write microsoft but thought better. Fun with Mailing Lists In an attempt to gain a bit more control over the mailing lists for Joel on Software, I've installed a program called Mailman which, from now on, will handle the email notifications I send to my subscribers. (For me, this means two big improvements: I can delete email addresses that bounce, instead of getting 50 bounces in my mailbox every time I send a bulletin; it should also reduce the incidence of corrupted messages that some of you have been reporting.) Installing Mailman, by the way, was a barrel of laughs. Like most open source software, ""it's only free if your time is worthless."" Sob. If you're not already a subscriber, please sign up! (I've made it very easy.) You'll receive a short notification whenever there is a significant new article on the site - that is, one of my long articles, not just the short ramblings on the home page which can appear almost every day.
	"
https://www.joelonsoftware.com/2000/11/19/20001119/,2000/11/19,2000-11-19T00:01:18+00:00,,Joel Spolsky,News,"
	I just came back from a weekend in Boston. The discussion on Netscape 6 seems to be pretty universally negative. I know, I know, I asked for bug reports, so it's not exactly fair.
	"
https://www.joelonsoftware.com/2000/11/16/20001116/,2000/11/16,2000-11-16T00:01:17+00:00,,Joel Spolsky,News,"
	Survey: How long did it take you to find the first 3 show-stopper bugs in Netscape 6?
	"
https://www.joelonsoftware.com/2000/11/14/20001114/,2000/11/14,2000-11-14T00:01:16+00:00,,Joel Spolsky,News,"
	We're trying to find a new office for Fog Creek Software in New York. One of the buildings we're looking at, the World Trade Center, requires businesses to have an international presence. It turns out that Joel on Software has subscribers in 44 countries! Dell And Usability Dell doesn't think like their users think. When you go to their website, the first question they ask is what kind of buyer you are: home, small business, large business, etc. I don't know what I am! I guess I'm a small business, but home systems are usually cheaper, and I usually like to buy top of the line PCs, so maybe I need the Big Business section. This distinction is completely lost on me. I want a PC. What difference does it make whether I'm a home buyer or a small business buyer? I suspect that they are asking me this because they want to charge businesses more than homes, and large businesses even more. To defeat their system, I choose ""home."" Suppose I want a PC to run Linux. (I do, actually, need a small, cheap Linux server). There's no way to search for computers that come with Linux as an option. In fact, if you click on the ""Search"" button and type ""Linux,"" the very first link you get is for something called: ""Air Force - Dell and Linux"", some kind of page targetted to buyers in the US Air Force. Very strange. There's a link there on the USAF page to ""Dell and Red Hat Alliance."" I tried it, hoping it would get me out of the Air Force zone. Indeed it did, but all it had was a list of press releases. Thanks, guys, I'm trying to buy a computer here. And in fact, what I really want is a Linux computer in a small form factor. We don't have much room and I hardly ever need expansion cards. How do I tell Dell's dang web site that I want a small form factor Linux machine? The only way to really find systems that run Linux is to try configuring a bunch of different systems until you find a system that happens to have Linux as one of the OS options in the dropdown box. If Dell is really ""building one for me,"" I don't see why there are so many confusing product lines and why Dell insists on putting their customers into little boxes based on their arbitrary distinctions. I'm sure it made sense for Michael Dell to organize his executives according to target markets, but it makes no sense to organize the web site this way. The first principle of usability says that you have to bring the program model in line with the user model. Figure out what the user expects to see on the first page, and make that the first page. Look at Apple's hardware page. This makes sense. There's a list of computers down the side.Or the IBM Thinkpad site. As soon as you click ""Browse"", you see an organized list describing the main models and their key differences. As for search, it's no longer good enough to rely on crappy old mechanical search engines. At the very least, your search engine must look for common keywords, trademarks, your own damn brand names, and provide a reasonable answer. Search for ""Thinkpad"" on the IBM website, and you go to the Thinkpad homepage. Search for ""Linux"" and you go to IBM's Linux website. But if you search for ""Linux"" at Dell, you wind up deep inside the site for US Air Force buyers, which is almost certainly wrong.
	"
https://www.joelonsoftware.com/2000/11/13/20001113/,2000/11/13,2000-11-13T00:01:15+00:00,,Joel Spolsky,News,"
	I was quoted in Le Monde: <<Bush finira vraiment par etre le premier president elu grace a un ""bogue d'utilisabilite"">>
	"
https://www.joelonsoftware.com/2000/12/30/20001230/,2000/12/30,2000-12-30T00:01:34+00:00,,Joel Spolsky,News,"
	 It's snowing today in New York City. I took a few pictures .
	"
https://www.joelonsoftware.com/2000/12/26/20001226/,2000/12/26,2000-12-26T00:01:33+00:00,,Joel Spolsky,News,"
	My publisher is looking for someone to write a book about programming for accessibility. If you are interested and qualified, or know someone who is, please email me and I'll put you in touch. 
	"
https://www.joelonsoftware.com/2000/12/21/20001221/,2000/12/21,2000-12-21T00:01:32+00:00,,Joel Spolsky,News,"
	Dave Winer wrote a beautiful foreword for my book. Thank you, thank you, thank you! I couldn't have dreamed of a better foreword. This hits the nail right on the head, Dave! The symbol above is representative of what I'm doing today. My copy editor keeps deleting my commas. I keep putting them back. That's the theme of the day! [PS the picture shows what it looks like in Word with revision marks on, when one person deletes a comma and another person adds it back.]
	"
https://www.joelonsoftware.com/2000/12/20/20001220/,2000/12/20,2000-12-20T00:01:31+00:00,,Joel Spolsky,News,"
	My Revenge Against Clueless Internet Providers We're getting a T1 installed in our new office, which has made me the target of an awful lot of marketing calls by very aggressive salespeople from Internet providers. They usually want to fax me a quote. Fax? Hello, people, you're Internet providers. Why not email me a quote? I asked Qwest if they could just email it to me. This didn't seem to be within their capability. They insisted on faxing it. So, Qwest, been nice to know ya. I don't know why I would want to buy T1 access from an Internet company that doesn't know how to send an email. We're probably going to go with SAVVIS. New Toy Oh boy oh boy oh boy, I just got a new toy via FedEx. It's a wireless 128kbps modem from Ricochet and Juno. Full report here. Ooo, this is fun. I'm actually posting this from a cafe on 70th and Broadway. Nice!
	"
https://www.joelonsoftware.com/2000/12/19/20001219/,2000/12/19,2000-12-19T00:01:30+00:00,,Joel Spolsky,News,"
	The cover for my new book came back from the publisher today. Very exciting! Soon, I will be a famous author and people will stop me on the subway for an autograph and stuff. Now I just have to go through about 10 chapters of copy edits and change everything back to the way I originally wrote it What's so depressing about customer ""service"" these days is that when you read something like this, it sort of seems like par for the course.
	"
https://www.joelonsoftware.com/2000/12/09/20001209/,2000/12/09,2000-12-09T00:01:29+00:00,,Joel Spolsky,News,"
	This month's Wired magazine finally admits what everyone has known for three months: Digital Convergence's completely moronic "":CueCat"" is simply the most expensive, most meritless idea since Ishtar. (I wrote about this three months ago.) There is no longer a single CueCat barcode to be seen anywhere. Surprise, surprise. This company now has 265 employees, all for a product that nobody wants. Since I posted my flame three months ago, not a single reader has written in defense of the CueCat. (Quite a lot of people pointed out that it has been hacked and makes a nice cheap barcode reader). Which makes me wonder how not one of those 265 geniuses in Dallas noticed that their company was working on a product which not a single person wants. 265 people, assuming a conservative cost of, say, $50,000 each, costs over $13m a year just in salary. Not to mention the cost of building and mailing out the millions of barcodes that are choking landfills from coast to coast. Somebody is footing the bill. The rumors are that the company raised $190,000,000 in VC on this little boondoggle. I think a few investors are going to be very, very pissed when the whole thing goes up in smoke.
	"
https://www.joelonsoftware.com/2000/12/07/20001207/,2000/12/07,2000-12-07T00:01:28+00:00,,Joel Spolsky,News,"
	OK, I don't normally post random links, but Simple DJ is way cool! Today is system administration day. And tomorrow. I'd like to think that I'm learning things, but really I'm just spending a lot of time trying different command-line arguments to ./configure. Isn't that a howl! On my agenda: moving our FogBUGZ demo to a new machine with a huge hard drive; moving all our email to a new machine so that when we move offices, it can continue uninterrupted; getting the various mailing lists moved; and trying to get closer to that happy day when we can toss the [expletive] Qube out the [expletive] window. UI For Programmers, The Book, is now in the publisher's hands (and those of the tech reviewer). Ah! It's like when you turn in your senior thesis. I have nothing to do this weekend!
	"
https://www.joelonsoftware.com/2000/12/06/20001206/,2000/12/06,2000-12-06T00:01:27+00:00,,Joel Spolsky,News,"
	A couple of weeks after I complained about searching for Linux on Dell's home page, it looks like Dell has actually fixed their search engine. Bravo. So why is Starbucks still using their damned grease pencils? 
	"
https://www.joelonsoftware.com/2000/12/05/20001205/,2000/12/05,2000-12-05T00:01:26+00:00,,Joel Spolsky,News,"
	Flat Screens If you're a flat-screen fetishist like me, you'll be glad to know that SGI's excellent 1600x1024 flatscreen is now on sale - at $1500, it's ridiculously cheap (used to be $2995). This is it, the ne plus ultra. Once you have one of these, you can just drop dead on the spot, because it can only go downhill from there. (Another great monitor is the widely available Samsung SyncMaster 770TFT). Click Clack Babak found a really old Smith-Corona typewriter in the closet here (circa 1940) and he's typing away. Click click clack. Not only doesn't this thing have Windows, but there's not even a decent web browser that runs on it. Moving We're in the process of moving Fog Creek into a new office. It's especially a nuisance because there is a two week period when we won't have any office and will be working from home. (It coincides with the holidays, and we'll all be on vacation most of the time anyway, so it's not worth getting temporary office space). Meanwhile I'm figuring out all the tricks you need to do to move a ""live"" web server, mail server, and (this is the hard part) Mailman installation to a new machine with a different IP address without downtime.
	"
https://www.joelonsoftware.com/2000/12/02/20001202/,2000/12/02,2000-12-02T00:01:25+00:00,,Joel Spolsky,News,"
	Until yesterday, the FogBUGZ license said that you couldn't reverse engineer the program, attempt to look at the source code, or modify it in any way. Various honest people have asked how much we charge for a source license, so that they could customize a few things. Hmmm. Why does the license say you can't change the source code? I couldn't think of a single reason. In fact I thought of a lot of counter-reasons, and immediately changed the license agreement. So now you're going to have to sit through one of those old-fuddy-duddy stories from my past. Up the tata without a tutu
	"
https://www.joelonsoftware.com/2001/01/30/20010130/,2001/01/30,2001-01-30T00:01:41+00:00,,Joel Spolsky,News,"
	I'm going on vacation for a week. Now behave and don't give the babysitter a hard time or I'll dock your allowance.
	"
https://www.joelonsoftware.com/2001/01/27/daily-builds-are-your-friend/,Daily Builds Are Your Friend,2001-01-27T00:14:53+00:00,2016-12-05T19:22:01+00:00,Joel Spolsky,"Rock star developer, News","
	In 1982, my family took delivery of the very first IBM-PC in Israel. We actually went down to the warehouse and waited while our PC was delivered from the port. Somehow, I convinced my dad to get the fully-decked out version, with two floppy disks, 128 K memory, and both a dot-matrix printer (for fast drafts) and a Brother Letter-Quality Daisy Wheel printer, which sounds exactly like a machine gun when it is operating, only louder. I think we got almost every accessory available: PC-DOS 1.0, the $75 technical reference manual with a complete source code listing of the BIOS, Macro Assembler, and the stunning IBM Monochrome display with a full 80 columns and ... lower case letters! The whole thing cost about $10,000 including Israel's then-ridiculous import taxes. Extravagant!
Now, ""everybody"" knew that BASIC was a children's language that requires you to write spaghetti code and turns your brain into Camembert cheese. So we shelled out $600 for IBM Pascal, which came on three floppy diskettes. The compiler's first pass was on the first diskette, the second pass was on the second diskette, and the linker was on the third diskette. I wrote a simple ""hello, world"" program and compiled it. Total time elapsed: 8 minutes.
Hmm. That's a long time. I wrote a batch file to automate the process and shaved it down to 7 1/2 minutes. Better. But when I tried to write long programs like my stunning version of Othello which always beat me, I spent most of the time waiting for compiles. ""Yep,"" a professional programmer told me, ""we used to keep a sit-up board in the office and do sit-ups while we were doing compiles. After a few months of programming I had killer abs.""
One day, a spiffy program called Compas Pascal appeared from Denmark, which Philippe Kahn bought and renamed Borland Turbo Pascal. Turbo Pascal was sort of shocking, since it basically did everything that IBM Pascal did, only it ran in about 33K of memory including the text editor. This was nothing short of astonishing. Even more astonishing was the fact that you could compile a small program in less than one second. It's as if a company you had never heard of introduced a clone of the Buick LeSabre which could go 1,000,000 MPH and drive around the world on so little gasoline than an ant could drink it without getting sick. 
Suddenly, I became much more productive. 
That's when I learned about the concept of the REP loop. REP stands for ""Read, Eval, Print"", and it describes what a lisp interpreter does for a living: it ""reads"" your input, evaluates it, and prints the result. An example of the REP loop is shown below: I type something, and the lisp interpreter reads it, evaluates it, and prints the result.
On a slightly larger scale, when you're writing code, you are in a macro-version of the REP loop called the Edit-Compile-Test loop. You edit your code, compile it, test it, and see how well it works.
A crucial observation here is that you have to run through the loop again and again to write a program, and so it follows that the faster the Edit-Compile-Test loop, the more productive you will be, down to a natural limit of instantaneous compiles. That's the formal, computer-science-y reason that computer programmers want really fast hardware and compiler developers will do anything they can to get super-fast Edit-Compile-Test loops. Visual Basic does it by parsing and lex-ing each line as you type it, so that the final compile can be super-quick. Visual C++ does it by providing incremental compiles, precompiled headers, and incremental linking.
But as soon as you start working on a larger team with multiple developers and testers, you encounter the same loop again, writ larger (it's fractal, dude!). A tester finds a bug in the code, and reports the bug. The programmer fixes the bug. How long does it take before the tester gets the fixed version of the code? In some development organizations, this Report-Fix-Retest loop can take a couple of weeks, which means the whole organization is running unproductively. To keep the whole development process running smoothly, you need to focus on getting the Report-Fix-Retest loop tightened.
One good way to do this is with daily builds. A daily build is an automatic, daily, complete build of the entire source tree. 
Automatic - because you set up the code to be compiled at a fixed time every day, using cron jobs (on UNIX) or the scheduler service (on Windows). 
Daily - or even more often. It's tempting to do continuous builds, but you probably can't, because of source control issues which I'll talk about in a minute. 
Complete - chances are, your code has multiple versions. Multiple language versions, multiple operating systems, or a high-end/low-end version. The daily build needs to build all of them. And it needs to build every file from scratch, not relying on the compiler's possibly imperfect incremental rebuild capabilities. 
Here are some of the many benefits of daily builds:
When a bug is fixed, testers get the new version quickly and can retest to see if the bug was really fixed.
Developers can feel more secure that a change they made isn't going to break any of the 1024 versions of the system that get produced, without actually having an OS/2 box on their desk to test on.
Developers who check in their changes right before the scheduled daily build know that they aren't going to hose everybody else by checking in something which ""breaks the build"" - that is, something that causes nobody to be able to compile. This is the equivalent of the Blue Screen of Death for an entire programming team, and happens a lot when a programmer forgets to add a new file they created to the repository. The build runs fine on their machines, but when anyone else checks out, they get linker errors and are stopped cold from doing any work.
Outside groups like marketing, beta customer sites, and so forth who need to use the immature product can pick a build that is known to be fairly stable and keep using it for a while.
By maintaining an archive of all daily builds, when you discover a really strange, new bug and you have no idea what's causing it, you can use binary search on the historical archive to pinpoint when the bug first appeared in the code. Combined with good source control, you can probably track down which check-in caused the problem.
When a tester reports a problem that the programmer thinks is fixed, the tester can say which build they saw the problem in. Then the programmer looks at when he checked in the fix and figure out whether it's really fixed. 
Here's how to do them. You need a daily build server, which will probably be the fastest computer you can get your hands on. Write a script which checks out a complete copy of the current source code from the repository (you are using source control, aren't you?) and then builds, from scratch, every version of the code that you ship. If you have an installer or setup program, build that too. Everything you ship to customers should be produced by the daily build process. Put each build in its own directory, coded by date. Run your script at a fixed time every day.
It's crucial that everything it takes to make a final build is done by the daily build script, from checking out the code up to and including putting the bits up on a web server in the right place for the public to download (although during the development process, this will be a test server, of course). That's the only way to insure that there is nothing about the build process that is only ""documented"" in one person's head. You never get into a situation where you can't release a product because only Shaniqua knows how to create the installer, and she was hit by a bus. On the Juno team, the only thing you needed to know to create a full build from scratch was where the build server was, and how to double-click on its ""Daily Build"" icon.
There is nothing worse for your sanity then when you are trying to ship the code, and there's one tiny bug, so you fix that one tiny bug right on the daily build server and ship it. As a golden rule, you should only ship code that has been produced by a full, clean daily build that started from a complete checkout.
Set your compilers to maximum warning level (-W4 in Microsoft's world; -Wall in gcc land) and set them to stop if they encounter even the smallest warning.
If a daily build is broken, you run the risk of stopping the whole team. Stop everything and keep rebuilding until it's fixed. Some days, you may have multiple daily builds.
Your daily build script should report failures, via email, to the whole development team. It's not too hard to grep the logs for ""error"" or ""warning"" and include that in the email, too. The script can also append status reports to an HTML page visible to everyone so programmers and testers can quickly determine which builds were successful.
One rule we followed on the Microsoft Excel team, to great effect, was that whoever broke the build became responsible for babysitting builds until somebody else broke it. In addition to serving as a clever incentive to keep the build working, it rotated almost everybody through the job of buildmaster so everybody learned about how builds are produced.
If your team works in one time zone, a good time to do builds is at lunchtime. That way everybody checks in their latest code right before lunch, the build runs while they're eating, and when they get back, if the build is broken, everybody is around to fix it. As soon as the build is working everybody can check out the latest version without fear that they will be hosed due to a broken build.
If your team is working in two time zones, schedule the daily build so that the people in one time zone don't hose the people in the other time zone. On the Juno team, the New York people would check things in at 7 PM New York time and go home. If they broke the build, the Hyderabad, India team would get into work (at about 8 PM New York Time) and be completely stuck for a whole day. We started doing two daily builds, about an hour before each team went home, and completely solved that problem.
For Further Reading:
Some discussion on tools for daily builds
Making daily builds is important enough that it's one of the 12 steps to better code.
There's a lot of interesting stuff about the builds made (weekly) by the Windows NT team in G. Pascal Zachary's book Showstopper.
Steve McConnell writes about daily builds here. 
	"
https://www.joelonsoftware.com/2001/01/27/20010127/,2001/01/27,2001-01-27T00:01:40+00:00,,Joel Spolsky,News,"
	When you're using source control, sometimes one programmer accidentally checks in something that breaks the build. For example, they've added a new source file, and everything compiles fine on their machine, but they forgot to add the source file to the code repository. So they lock their machine and go home, oblivious and happy. But nobody else can work, so they have to go home too, unhappy. Breaking the build is so bad (and so common) that it helps to make daily builds, to insure that no breakage goes unnoticed. On large teams, one good way to insure that breakages are fixed right away is to do the daily build every afternoon at, say, lunchtime. Everyone does as many checkins as possible before lunch. When they come back, the build is done. If it worked, great! Everybody checks out the latest version of the source and goes on working. If the build failed, you fix it, but everybody can keep on working with the pre-build, unbroken version of the source. On the Excel team we had a rule that whoever broke the build, as their ""punishment"", was responsible for babysitting the builds until someone else broke it. This was a good incentive not to break the build, and a good way to rotate everyone through the build process so that everyone learned how it worked. Read more about daily builds in my new article Daily Builds are Your Friend.
	"
https://www.joelonsoftware.com/2001/01/23/20010123/,2001/01/23,2001-01-23T00:01:39+00:00,,Joel Spolsky,News,"
	The Onion says it better than I did...
	"
https://www.joelonsoftware.com/2001/01/20/20010120/,2001/01/20,2001-01-20T00:01:38+00:00,,Joel Spolsky,News,"
	How exciting, my book is already on Amazon! It's not shipping until March, though. And the cover image they have on Amazon is just a mockup, it's not the real thing.
	"
https://www.joelonsoftware.com/2001/01/19/20010119/,2001/01/19,2001-01-19T00:01:37+00:00,,Joel Spolsky,News,"
	ADP has the worst web programmers in the world. Jared was trying to check his 401K info at this site. Enter social security number, press tab, enter PIN, press tab, and press Space to press the ""Login"" button. Because the morons who wrote that page are using the ""tabindex"" attribute without understanding it, this actually activates a button way down at the bottom of the page which locks you out of your account and mails a new PIN to you via snail mail. This kind of horrific programming shows evidence of no usability testing whatsoever. The most trivial usability test would uncover this. (Not to mention the other horrific JavaScript on that page, for example, the JavaScript that pops up an dialog box if you put a space in the social security number). Now, based on one web page, I wouldn't condemn a whole company. But ADP's entire web site is crawling with these kinds of bugs. I tried using ADP's EasyPayNet to run the payroll for my company. The UI was full of stupid JavaScript bugs that screwed up my payroll every single time I tried to pay people. It copied employee's data on top of other employee's data. It locked me out for days at a time. Way-too-clever JavaScript validation routines made it impossible to change values on certain forms (because they would not let me tab off of a control that was inconsistent with another control, so there was no way to change them both at once to make them consistent). That's why Fog Creek stopped using ADP for our Payroll - now we use Intuit QuickBooks and it's a million times better. And while I'm complaining... Thinking of wireless networking? Stay away from SMC Networks. Their products are terrible. We tried a bunch of their 802.11 wireless networking PC cards and discovered that they barely worked at 10 feet; one wall was enough to stop them cold. Serves me right for buying the cheapest brand. We switched to the Lucent/Orinoco stuff, which works much, much better.
	"
https://www.joelonsoftware.com/2001/01/18/big-macs-vs-the-naked-chef/,Big Macs vs. The Naked Chef,2001-01-18T00:15:37+00:00,2016-12-05T19:24:02+00:00,Joel Spolsky,"CEO, News","
	Mystery: why is it that some of the biggest IT consulting companies in the world do the worst work? 
Why is it that the cool upstart consulting companies start out with a string of spectacular successes, meteoric growth, and rapidly degenerate into mediocrity?
I've been thinking about this, and thinking about how Fog Creek Software (my own company) should grow. And the best lessons I can find come from McDonald's. Yes, I mean the awful hamburger chain.
The secret of Big Macs is that they're not very good, but every one is not very good in exactly the same way. If you're willing to live with not-very-goodness, you can have a Big Mac with absolutely no chance of being surprised in the slightest.
The other secret of Big Macs is that you can have an IQ that hovers somewhere between ""idiot"" and ""moron"" (to use the technical terms) and you'll still be able to produce Big Macs that are exactly as unsurprising as all the other Big Macs in the world. That's because McDonald's real secret sauce is its huge operations manual, describing in stunning detail the exact procedure that every franchisee must follow in creating a Big Mac. If a Big Mac hamburger is fried for 37 seconds in Anchorage, Alaska, it will be fried for 37 seconds in Singapore - not 36, not 38. To make a Big Mac you just follow the damn rules.
The rules have been carefully designed by reasonably intelligent people (back at McDonald's Hamburger University) so that dumdums can follow them just as well as smart people. In fact the rules include all kinds of failsafes, like bells that go off if you keep the fries in the oil too long, which were created to compensate for more than a little human frailty. There are stopwatches and timing systems everywhere. There is a system to make sure that the janitor checks if the bathrooms are clean every half hour. (Hint: they're not.)
The system basically assumes that everybody will make a bunch of mistakes, but the burgers that come out will be, um, consistent, and you'll always be asked if you want fries with that.
Just for the sake of amusement, let's compare a McDonald's cook, who is following a set of rules exactly and doesn't know anything about food, to a genius like The Naked Chef, the British cutie Jamie Oliver. (If you chose to leave this site now and follow that link to watch the MTV-like videos of The Naked Chef making basil aioli, you have my blessing. Go in good health.) Anyway, comparing McDonald's to a gourmet chef is completely absurd, but please suspend disbelief for a moment, because there's something to be learned here.
Now, the Naked Chef doesn't follow no stinkin' Operations Manual. He doesn't measure anything. While he's cooking, you see a flurry of food tossed around willy-nilly. ""We'll just put a bit of extra rosemary in there, that won't hurt, and give it a good old shake,"" he says. "" Mash it up. Perfect. Just chuck it all over the place."" (Yes, it really looks like he's just chucking it all over the place. Sorry, but if I tried to chuck it all over the place, it wouldn't work.) It takes about 14 seconds and he's basically improvised a complete gourmet meal with roasted slashed fillet of sea-bass stuffed with herbs, baked on mushroom potatoes with a salsa-verde. Yum.
Well, I think it's pretty obvious that The Naked Chef's food is better than you get at McDonald's. Even if it sounds like a stupid question, it's worth a minute to ask why. It's not such a stupid question. Why can't a big company with zillions of resources, incredible scale, access to the best food designers money can buy, and infinite cash flow produce a nice meal?
Imagine that The Naked Chef gets bored doing ""telly"" and opens a restaurant. Of course, he's a brilliant chef, the food would be incredible, so the place is hopping with customers and shockingly profitable.
When you have a shockingly profitable restaurant, you quickly realize that even if you fill up every night, and even if you charge $19 for an appetizer and $3.95 for a coke, your profits reach a natural limit, because one chef can only make so much food. So you hire another chef, and maybe open some more branches, maybe in other cities.
Now a problem starts to develop: what we in the technical fields call the scalability problem. When you try to clone a restaurant, you have to decide between hiring another great chef of your caliber (in which case, that chef will probably want and expect to keep most of the extra profits that he created, so why bother), or else you'll hire a cheaper, younger chef who's not quite as good, but pretty soon your patrons will figure that out and they won't go to the clone restaurant.
The common way of dealing with the scalability problem is to hire cheap chefs who don't know anything, and give them such precise rules about how to create every dish that they ""can't"" screw it up. Just follow these here rules, and you'll make great gourmet food!
Problem: it doesn't work exactly right. There are a million things that a good chef does that have to do with improvisation. A good chef sees some awesome mangos in the farmer's market and improvises a mango-cilantro salsa for the fish of the day. A good chef deals with a temporary shortage of potatoes by creating some taro chip thing. An automaton chef who is merely following instructions might be able to produce a given dish when everything is working perfectly, but without real talent and skill, will not be able to improvise, which is why you never see jicama at McDonald's. 
McDonald's requires a very particular variety of potato, which they grow all over the world, and which they pre-cut and freeze in massive quantities to survive shortages. The precutting and freezing means that the french-fries are not as good as they could be, but they are certainly consistent and require no chef-skills. In fact, McDonald's does hundreds of things to make sure that their product can be produced with consistent quality, by any moron you can get in the kitchen, even if the quality is ""a bit"" lower.
Summary, so far:
Some things need talent to do really well.
It's hard to scale talent.
One way people try to scale talent is by having the talent create rules for the untalented to follow.
The quality of the resulting product is very low.
You can see the exact same story playing out in IT consulting. How many times have you heard this story?
Mike was unhappy. He had hired a huge company of IT consultants to build The System. The IT consultants he hired were incompetents who kept talking about ""The Methodology"" and who spent millions of dollars and had failed to produce a single thing.
Luckily, Mike found a youthful programmer who was really smart and talented. The youthful programmer built his whole system in one day for $20 and pizza. Mike was overjoyed. He recommended the youthful programmer to all his friends.
Youthful Programmer starts raking in the money. Soon, he has more work than he can handle, so he hires a bunch of people to help him. The good people want too many stock options, so he decides to hire even younger programmers right out of college and ""train them"" with a 6 week course.
The trouble is that the ""training"" doesn't really produce consistent results, so Youthful Programmer starts creating rules and procedures that are meant to make more consistent results. Over the years, the rule book grows and grows. Soon it's a six-volume manual called The Methodology.
After a few dozen years, Youthful Programmer is now a Huge Incompetent IT Consultant with a capital-M-methodology and a lot of people who blindly obey the Methodology, even when it doesn't seem to be working, because they have no bloody idea whatsoever what else to do, and they're not really talented programmers - they're just well-meaning Poli Sci majors who attended the six-week course. 
And Newly Huge Incompetent IT Consultant starts messing up. Their customers are unhappy. And another upstart talented programmer comes and takes away all their business, and the cycle begins anew.
I don't need to name names, here, this cycle has happened a dozen times. All the IT service companies get greedy and try to grow faster than they can find talented people, and they grow layers upon layers of rules and procedures which help produce ""consistent,"" if not very brilliant work. 
But the rules and procedures only work when nothing goes wrong. Various ""data-backed Web site"" consulting companies sprouted up in the last couple of years and filled their ranks by teaching rank amateurs the fourteen things you need to know to create a data-backed Web site (""here's a select statement, kid, build a Web site""). But now that dotcoms are imploding and there's suddenly demand for high-end GUI programming, C++ skills, and real computer science, the kids who only have select statements in their arsenal just have too steep a learning curve and can't catch up. But they still keep trying, following the rules in chapter 17 about normalizing databases, which mysteriously don't apply to The New World. The brilliant founders of these companies could certainly adjust to the new world: they are talented computer scientists who can learn anything, but the company they built can't adjust because it has substituted a rulebook for talent, and rulebooks don't adjust to new times.
What's the moral of the story? Beware of Methodologies. They are a great way to bring everyone up to a dismal, but passable, level of performance, but at the same time, they are aggravating to more talented people who chafe at the restrictions that are placed on them. It's pretty obvious to me that a talented chef is not going to be happy making burgers at McDonald's, precisely because of McDonald's rules. So why do IT consultants brag so much about their methodologies? (Beats me.)
What does this mean for Fog Creek? Well, our goal has never been to become a huge consulting company. We started out doing consulting as a means to an end - the long-term goal was to be a software company that is always profitable, and we achieved that by doing some consulting work to supplement our software income. After a couple of years in business our software revenues grew to the point where consulting was just a low-margin distraction, so now we only do consulting engagements that directly support our software. Software, as you know, scales incredibly well. When one new person buys FogBUGZ, we make more money without spending any more money.
More important is our obsession with hiring the best... we are perfectly happy to stay small if we can't find enough good people (although with six weeks annual vacation, finding people doesn't seem to pose a problem). And we refuse to grow until the people we already hired have learned enough to become teachers and mentors of the new crowd.
	"
https://www.joelonsoftware.com/2001/01/18/20010118/,2001/01/18,2001-01-18T00:01:36+00:00,,Joel Spolsky,News,"
	Mystery: why is it that some of the biggest IT consulting companies in the world do the worst work? Why is it that the cool upstart consulting companies start out with a string of spectacular successes, meteoric growth, and rapidly degenerate into mediocrity? Big Macs vs. The Naked Chef tries to explain it.
	"
https://www.joelonsoftware.com/2001/01/16/20010116/,2001/01/16,2001-01-16T00:01:35+00:00,,Joel Spolsky,News,"
	Remember how I said you should never sign non-compete agreements? Here's why.
	"
https://www.joelonsoftware.com/2001/02/21/20010221/,2001/02/21,2001-02-21T00:01:45+00:00,,Joel Spolsky,News,"
	What's up at Fog Creek Software? Sometimes I think we should be called Fog Creek Renovation, since we're spending a lot of time fixing up the new office. Michael got all 3 bathrooms working. David is working on new halogen lighting downstairs. Babak came up with a great layout, and I assembled some kewl curvy bookcases. You venture-capital funded wimps probably never had to touch spackle. More interestingly, we're getting close to shipping 2.0, the next major version of FogBUGZ, on March 1st as promised. If you have any urgent feature requests email David directly. If you bought the first version, the upgrade is free. In an earlier column I slammed Netscape for using the entire world as beta-testers, and then ignoring the bug reports that came in. Here's how we're going to do beta tests. First of all, we're limiting the beta test to people who promise to install the beta. We're inviting a select group of people to install the beta, and asking them to tell us when they will be installing it. During that time, we will literally be standing by the phone on our toll-free line to help them with any problems that come up. For our 1.0 users who are upgrading, this is the best way to get help and be sure the upgrade goes smoothly. If you tried out FogBUGZ using our on-line demo, but didn't buy it, I'd sure appreciate a quick email telling me what you thought. I'm obsessive about listening to customers. We've got another very cool product in the oven, which I'm super excited about, but that will have to remain a mystery for a few weeks. Stay tuned, all will be revealed in good time!
	"
https://www.joelonsoftware.com/2001/02/13/20010213/,2001/02/13,2001-02-13T00:01:44+00:00,,Joel Spolsky,News,"
	Michael has started a weblog about technical interview questions. 
	"
https://www.joelonsoftware.com/2001/02/12/human-task-switches-considered-harmful/,Human Task Switches Considered Harmful,2001-02-12T00:15:27+00:00,2016-12-05T19:13:22+00:00,Joel Spolsky,"Tech lead, News","
	When you're managing a team of programmers, one of the first things you have to learn to get right is task allocation. That's just a five-dollar word for giving people things to do. It's known colloquially as ""file dumping"" in Hebrew (because you dump files in peoples' laps). And how you decide which files to dump in which laps is one of the areas where you can get incredible productivity benefits if you do it right. Do it wrong, and you can create one of those gnarly situations where nobody gets anything accomplished and everybody complains that ""nothing ever gets done around here.""
Since this site is for programmers, I'm going to warm up your brains a little bit with a programming problem. 
Suppose you have two separate computations to perform, A and B. Each computation requires 10 seconds of CPU time. You have one CPU which, for the sake of this problem, doesn't have anything else in the queue.
On our CPU, multitasking is optional. So you can either do these computations one after the other...
Sequential Processing
Computation A
Computation B
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
... or, you can multitask. If you multitask, on this particular CPU, tasks run for 1 second at a time, and a task switch takes no time at all.
Multitasking
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
Which would you rather do? Most people's gut reaction is that multitasking is better. In both cases, you have to wait 20 seconds to get both of your answers. But think about how long it takes to get the results to each computation. 
In both cases, the results of Computation B (shown in blue) take 20 seconds to arrive. But look at Computation A. With multitasking, its results take 19 seconds to arrive... yet with sequential processing they are ready in only 10 seconds.
In other words, in this nice contrived example, the average time per computation is lower (15 seconds rather than 19.5 seconds) when you do sequential processing rather than multitasking. (Actually, it's not such a contrived example - it's based on a real problem Jared had to solve at work).
Method
Computation A takes
Computation B takes
Average
Sequential
10 seconds
20 seconds
15
Multitasking
19 seconds
20 seconds
19.5
Earlier I said that ""a task switch takes no time at all."" Actually, on real CPUs, a task switch takes a little bit of time... basically enough time to save out the state of the CPU registers and load the CPU registers for the other task. Realistically, this is as close to negligible as possible. But to make life interesting, let's imagine that task switches take half a second. Now things look even worse:
Method
Computation A takes
Computation B takes
Average
Sequential
10 seconds
20 + 1 task switch = 20.5 seconds
15.25
Multitasking
19 + 18 task switches =28 seconds
20 + 19 task switches = 29.5 seconds
28.75
Now ... just humor me, I know this is silly ... what if task switches take a whole minute? 
Method
Computation A takes
Computation B takes
Average
Sequential
10 seconds
20 + 1 task switch = 80 seconds
45 seconds
Multitasking
19 + 18 task switches =1099 seconds
20 + 19 task switches = 1160 seconds
almost 19 minutes!
The longer a task switch takes, the worse the multitasking penalty. 
That, in and of itself, is not so earth shaking, is it? Pretty soon I'm going to be getting irate email from morons accusing me of being ""against"" multitasking. ""Do you want to go back to the days of DOS when you had to exit WordPerfect to run 1-2-3?"" they will ask me.
But that's not my point. I just want you to agree with me that in this kind of example:
a) sequential processing gets you results faster on average, and
b) the longer it takes to task switch, the bigger the penalty you pay for multitasking.
OK, back to the more interesting topic of managing humans, not CPUs. The trick here is that when you manage programmers, specifically, task switches take a really, really, really long time. That's because programming is the kind of task where you have to keep a lot of things in your head at once. The more things you remember at once, the more productive you are at programming. A programmer coding at full throttle is keeping zillions of things in their head at once: everything from names of variables, data structures, important APIs, the names of utility functions that they wrote and call a lot, even the name of the subdirectory where they store their source code. If you send that programmer to Crete for a three week vacation, they will forget it all. The human brain seems to move it out of short-term RAM and swaps it out onto a backup tape where it takes forever to retrieve.
How long? Well, my software company recently dropped what we were doing (developing a software product codenamed CityDesk) to help a client with a bit of an emergency situation for three weeks. When we got back to the office, it seemed to take another three weeks to get back to full speed on CityDesk.
On the individual level - have you ever noticed that you can assign one job to one person, and they'll do a great job, but if you assign two jobs to that person, they won't really get anything done? They'll either do one job well and neglect the other, or they'll do both jobs so slowly you feel like slugs have more zip. That's because programming tasks take so long to task switch. I feel like when I have two programming projects on my plate at once, the task switch time is something like 6 hours. In an 8-hour day, that means multitasking reduces my productivity to 2 hours per day. Pretty dismal. 
As it turns out, if you give somebody two things to work on, you should be grateful if they ""starve"" one task and only work on one, because they're going to get more stuff done and finish the average task sooner. In fact, the real lesson from all this is that you should never let people work on more than one thing at once. Make sure they know what it is. Good managers see their responsibility as removing obstacles so that people can focus on one thing and really get it done. When emergencies come up, think about whether you can handle it yourself before you delegate it to a programmer who is deeply submersed in a project. 
	"
https://www.joelonsoftware.com/2001/02/12/20010212/,2001/02/12,2001-02-12T00:01:43+00:00,,Joel Spolsky,News,"
	When you're managing a team of programmers, one of the first things you have to learn to get right is task allocation. That's just a five-dollar word for giving people things to do. It's known colloquially as ""file dumping"" in Hebrew (because you dump files in peoples' laps). And how you decide which files to dump in which laps is one of the areas where you can get incredible productivity benefits if you do it right. Do it wrong, and you can create one of those gnarly situations where nobody gets anything accomplished and everybody complains that ""nothing ever gets done around here."" My latest article, Human Task Switches Considered Harmful, explains why you should be careful that each programmer is only working on one thing at a time. Don't buy puppies at pet stores. New Yorkers for Companion Animals Petfinder
	"
https://www.joelonsoftware.com/2001/02/08/20010208/,2001/02/08,2001-02-08T00:01:42+00:00,,Joel Spolsky,News,"
	I'm back! My company, Fog Creek Software, has moved into a new office in a Manhattan townhouse. It's great because there's a big garden out back - we got wireless networking so we can work outside in the summer. 
	"
https://www.joelonsoftware.com/2001/03/29/20010329/,2001/03/29,2001-03-29T00:01:51+00:00,,Joel Spolsky,News,"
	Vacation Planning Time We're looking to rent a luxury villa on an island in Greece, walking distance to a nice beach, for a week or two in July/August, for the family. It needs to sleep around 10 people and be self-catered so we can cook our own kosher meals. If anybody has any suggestions, I'd love to hear them!
	"
https://www.joelonsoftware.com/2001/03/27/20010327/,2001/03/27,2001-03-27T00:01:50+00:00,,Joel Spolsky,News,"
	Oy, I'm exhausted. We just shipped FogBUGZ 2.0 and completely redid the Fog Creek website. Feels good to get it out the door! 
	"
https://www.joelonsoftware.com/2001/03/24/how-many-lies-can-you-find-in-one-direct-mail-piece/,How Many Lies Can You Find In One Direct Mail Piece?,2001-03-24T00:14:29+00:00,2016-12-05T19:36:29+00:00,Joel Spolsky,"Product manager, News","
	George Meyer, one of the writers on the Simpsons, likes to collect examples of advertising in which ""the word-to-falsehood ratio approaches one."" In an interview in the New Yorker, he complained about a magazine ad for a butter substitute called Country Crock. ""It's not from the country, there is no crock,"" he told the interviewer. ""Two words, two lies."" 
Recently I got this piece of junk mail from Earthlink (larger view)
Just for my own personal amusement, I decided to try to count how many lies are on this particular fine specimen.
The whole piece is attempting to disguise itself as an express mail letter. They are working on the assumption that ignorant recipients will confuse it with a Federal Express letter, or perhaps think that ""Urgent Express"" is a company that competes with FedEx. Uh huh. Ooooh! The marketing slimeballs at Earthlink must have drooled at the thought of old Marge in a nursing home, practically falling over with excitement that she got an urgent express letter, like those letters you get from fancy New York lawyers urging you to sue the nursing home.
It says that it's urgent, and it isn't, it's just a stupid CD trying to get you to sign up for Internet access.
It says that it's ""express"", but it's mailed using ""Presorted Standard"" rate, which isn't express at all, in fact, it probably cost precisely $0.23 to mail (FedEx is $15.34).
It has a tracking number, but it is using a class of mail service that is not tracked, and I'll bet you anything that everybody gets the same tracking number. Sorry, folks, for $0.23 you don't get tracking.
It uses a fake handwriting font, intended to make you think that it is not junk mail but rather something that a person made for you.
It says that it's from Sky Dayton (founder of Earthlink) although it is actually from Earthlink's direct marketing department. I can just see the thought going through the copy writer's head. ""People won't open it unless it's from someone they know, and everyone knows Sky Dayton!""
It has a ""sender's account number"" which is, of course, completely fake (Anybody care to try to use it to sign up for Earthlink?)
It has a little ""payment"" section with a checkbox indicating that it should be billed to the sender, even though this has no meaning on standard mail.
It has a ""release signature"" with a little annotation that this signature is ""required,"" when actually no ""release signature"" is required at all.
It says ""Time Sensitive Material Enclosed,"" which is almost certainly untrue and meaningless anyway.
On the back, it says ""Weight Limit 8 Ounces"" even though the actual weight limit for Presorted Standard is 16 Ounces.
It actually has a piece of clear plastic glued on the front. The clear plastic serves no purpose whatsoever except to imitate FedEx envelopes which have the same plastic to hold the mailing manifest, much like those little butterflies which have fierce markings in attempt to convince butterfly-eaters that they themselves are fierce, even though they couldn't be less fierce if they were dressed up like Julie Andrews in high heels singing ""My Favorite Things."" In nature this is called Batesian mimicry.
The biggest problem with direct mail (what we normal people call ""Junk Mail"") is that 99% of it (literally) gets thrown away unopened, Batesian mimicry or not. To combat this, direct mailers will do anything to get you to open their junk, no matter how dishonest.
When I went to Earthlink's home page, it only took me a couple of clicks to find their Mission and Core Values and Beliefs. And what it says there is:
We require complete honesty and integrity in everything we do.
I didn't even have the energy to open the damn thing and see how many lies were on the inside. Does this mailing strike you as ""completely honest""? Or just ""business as usual?"" Am I too sensitive? Should I go back to complaining about complaining about Bloatware?
[Followup: Earthlink is unrepentant.]
	"
https://www.joelonsoftware.com/2001/03/24/20010324/,2001/03/24,2001-03-24T00:01:49+00:00,2016-12-05T07:19:06+00:00,Joel Spolsky,News,"
	Mark Bernstein writes:
There's one question that bothers me about huge programs like Excel, though, a question you don't quite address. What are they doing with all that space?
I actually think that Excel's ""minimum system requirements"" come from all the other apps that it installs. For example, if they use a part of Internet Explorer 5.x to parse XML or display HTML documents, they just install ALL of Internet Explorer 5.x (which most people have anyway, so it doesn't really take up that much extra space for most people). There are a few applications such as Microsoft Query, the Jet Database Engine, and Microsoft's Picture editor, and the office toolbar, which probably get installed when you install any Office App. The actual Excel EXE itself is under 7 MB.
On my system all of office takes up 190MB, which confirms my belief that it is the shared office components which take up all the space. But who cares? It's a great app and it's 1% of my disk space.
Lies, Damn Lies, and Direct Marketing
George Meyer, one of the writers on the Simpsons, likes to collect examples of advertising in which ""the word-to-falsehood ratio approaches one."" In an interview in the New Yorker, he complained about a magazine ad for a butter substitute called Country Crock. ""It's not from the country, there is no crock,"" he told the interviewer. ""Two words, two lies.""
Recently I got this piece of junk mail from Earthlink...
	"
https://www.joelonsoftware.com/2001/03/23/strategy-letter-iv-bloatware-and-the-8020-myth/,Strategy Letter IV: Bloatware and the 80/20 Myth,2001-03-23T00:15:40+00:00,2016-12-05T19:23:48+00:00,Joel Spolsky,"CEO, News","
	Version 5.0 of Microsoft's flagship spreadsheet program Excel came out in 1993. It was positively huge: it required a whole 15 megabytes of hard drive space. In those days we could still remember our first 20MB PC hard drives (around 1985) and so 15MB sure seemed like a lot.
By the time Excel 2000 came out, it required a whopping 146MB ... almost a tenfold increase! Dang those sloppy Microsoft programmers, right?
Wrong.
I'll bet you think I'm going to write one of those boring articles you see all over the net bemoaning ""bloatware"". Whine whine whine, this stuff is so bloated, oh woe is me, edlin and vi are so much better than Word and Emacs because they are svelte, etc.
Ha ha! I tricked you! I'm not going to write that article again, because it's not true.
In 1993, given the cost of hard drives in those days, Microsoft Excel 5.0 took up about $36 worth of hard drive space.
In 2000, given the cost of hard drives in 2000, Microsoft Excel 2000 takes up about $1.03 in hard drive space.
(These figures are adjusted for inflation and based on hard drive price data from here.)
In real terms, it's almost like Excel is actually getting smaller!
What is bloatware, exactly? The Jargon File snidely defines it as ""software that provides minimal functionality while requiring a disproportionate amount of diskspace and memory. Especially used for application and OS upgrades. This term is very common in the Windows/NT world. So is its cause.""
I guess those guys just hate Windows. I haven't run out of memory in more than a decade, ever since virtual memory appeared in Windows 386 (1989). And hard drive space is down to $0.0071 per megabyte and still plummeting like a sheep learning to fly by jumping out of a tree.
Maybe Linus Akerlund can explain it. On his web page, he writes, ""The big disadvantage of using these bloated programs is that you have to load this very large program, even if you just want to accomplish one tiny little thing. It eats up all your memory... you're not using your system in an efficient way. You make the system seem more inefficient than it really is, and this is totally unnecessary.""
Ohhh. It eats up all your memory. I see. Actually, well, no, it doesn't. Ever since Windows 1.0, in 1987, the operating system only loads pages as they are used. If you have a 15MB executable and you only use code that spans 2MB worth of pages, you will only ever load 2MB from disk to RAM. In fact if you have a modern version of Windows, the OS will automatically rearrange those pages on the hard drive so that they're consecutive, which makes the program start even faster next time.
And I don't think anyone will deny that on today's overpowered, under-priced computers, loading a huge program is still faster than loading a small program was even 5 years ago. So what's the problem?
RA Downes gives us a clue. It looks like he spent hours dissecting a small Microsoft utility, apparently enraged that it was a whole megabyte in size. (That's 3.15 cents of hard drive space at the time he wrote the article). In his opinion, the program should have been around 95% smaller. The joke is that the utility he dissected is something called RegClean, which you've probably never heard of. This is a program that goes through your Windows registry looking for things that aren't being used and deleting them. You have to be a little bit on the obsessive-compulsive side to care about cleaning up unused parts of your registry. So I'm starting to suspect that fretting about bloatware is more of a mental health problem than a software problem.
In fact there are lots of great reasons for bloatware. For one, if programmers don't have to worry about how large their code is, they can ship it sooner. And that means you get more features, and features make your life better (when you use them) and don't usually hurt (when you don't). If your software vendor stops, before shipping, and spends two months squeezing the code down to make it 50% smaller, the net benefit to you is going to be imperceptible. Maybe, just maybe, if you tend to keep your hard drive full, that's one more Duran Duran MP3 you can download. But the loss to you of waiting an extra two months for the new version is perceptible, and the loss to the software company that has to give up two months of sales is even worse.
A lot of software developers are seduced by the old ""80/20"" rule. It seems to make a lot of sense: 80% of the people use 20% of the features. So you convince yourself that you only need to implement 20% of the features, and you can still sell 80% as many copies. 
Unfortunately, it's never the same 20%. Everybody uses a different set of features. In the last 10 years I have probably heard of dozens of companies who, determined not to learn from each other, tried to release ""lite"" word processors that only implement 20% of the features. This story is as old as the PC. Most of the time, what happens is that they give their program to a journalist to review, and the journalist reviews it by writing their review using the new word processor, and then the journalist tries to find the ""word count"" feature which they need because most journalists have precise word count requirements, and it's not there, because it's in the ""80% that nobody uses,"" and the journalist ends up writing a story that attempts to claim simultaneously that lite programs are good, bloat is bad, and I can't use this damn thing 'cause it won't count my words. If I had a dollar for every time this has happened I would be very happy.
When you start marketing your ""lite"" product, and you tell people, ""hey, it's lite, only 1MB,"" they tend to be very happy, then they ask you if it has their crucial feature, and it doesn't, so they don't buy your product.
Bottom line: if your strategy is ""80/20"", you're going to have trouble selling software. That's just reality. This strategy is as old as the software industry itself and it just doesn't pay; what's surprising is how many executives at fast companies think that it's going to work.
Jamie Zawinski says it best, discussing the original version of Netscape that changed the world. ""Convenient though it would be if it were true, Mozilla [Netscape 1.0] is not big because it's full of useless crap. Mozilla is big because your needs are big. Your needs are big because the Internet is big. There are lots of small, lean web browsers out there that, incidentally, do almost nothing useful. But being a shining jewel of perfection was not a goal when we wrote Mozilla.""
	"
https://www.joelonsoftware.com/2001/03/23/20010323/,2001/03/23,2001-03-23T00:01:48+00:00,,Joel Spolsky,News,"
	Version 5.0 of Microsoft's flagship spreadsheet program Excel came out in 1993. It was positively huge: it required a whole 15 megabytes of hard drive space. In those days we could still remember our first 20MB PC hard drives (around 1985) and so 15MB sure seemed like a lot. By the time Excel 2000 came out, it required a whopping 146MB ... almost a tenfold increase! Dang those sloppy Microsoft programmers, right?Wrong. 
	"
https://www.joelonsoftware.com/2001/03/19/spring-in-cambridge/,Spring in Cambridge,2001-03-19T00:16:08+00:00,2016-12-05T19:34:05+00:00,Joel Spolsky,"Fog Creek Software, News","
	Even though the weather is in the 40s, and the wind chill is wintry, today I woke up and went outside and felt like spring was finally in the air. Maybe I started to notice this last Friday when I went back to the Fog Creek garden in a t-shirt and wasn't actually cold. 
Spring conjures up a funny set of associations for me. I think about the fact that it's still daylight when you go outside after dinner. I think about living in a nice old messy house with real wood floors, lots and lots of books, and flowers in the garden. I think about two of my favorite places in the spring, Berkeley and Boston, cities that revolve around learning and education and the unbridled enthusiasm of youth and the belief that anything is possible. As a first year student I arrived at university without even the basic premise of the shape my life would take, but compared to the unspeakably horrible time I had doing compulsory military duty, any shape of life sounded utopian to me. I could be in theatre! I could write for the school newspaper! Politics! Hacking! Teaching! Art! I could become a competitive swimmer! Play piano! All possible!
Around 1993, I think, I finally got access to the World Wide Web at home. $35 a month for SLIP from Panix. One of the first things that captivated me was Travels with Samantha, by Philip Greenspun. The pictures were almost impossible to make out in 16 VGA colors; the connection was at 14.4 baud; the screen was 640x480. But Greenspun's style of personal journal was captivating. He told us how lonely it was to live in Las Alamos for three months. He told us how to build an online community. He told us about his $5000 Viking stove.
Greenspun has been a key inspiration to many of us. He started a company called arsDigita, which was really just another consulting company for the Internet, but it had two things which made it uniquely different.
It had a personal voice. When you went to the home page, there was a happy little note about the new offices or the latest course offerings; the style was not boring corporate/marcomm happy-talk, it was Philip telling you that if you're poor, there are some free services, but if you're rich, head on over here and we'll build you a nice service of your own, but bring a lot of money please, because the future's so bright you gotta wear shades.
And it had education. The web was new and exciting and offered unlimited possibilities. Everybody wanted to learn about it and arsDigita would teach you, for free, starting with a book that cost about $15 more than it should because it was stuffed with completely irrelevant full-color photographs that seemed to be there solely to assuage the author's egotistical photography hobby, but which really were so bright and colorful and optimistic that nobody could read that book (or any of the photography-filled pages of Greenspun's websites) without becoming optimistic and excited about the future of the Internet, and when you did, there was a whole chapter on how to start a consulting company just like Philip and get rich off of the Internet, complete with suggested prices and detailed calculations of how you will make $250,000 a year and be able to buy $5000 Viking stoves and a beautiful condo in Harvard Square, in the spring, with flowers budding and optimist young students everywhere practically popping out of their tanktops. Stream of consciousness, random, and interspersed with completely random bogus snippets of half-baked Oracle SQL statements but goddamn it, there was a personal voice there.
(I know, anybody at arsDigita will tell you ""no, Joel! It's open source that made arsDigita different."" Or community. Or content management software. Sorry, all that stuff bores me. What excites me was the way arsDigita had a personal voice on the Internet that made it possible to relate to it in a human way, which is what people want to do, since we're humans.)
Fog Creek Software was inspired in no small part by arsDigita; the code name for the company was ""PaxDigita"" and we took inspiration from Greenspun's tongue-in-cheek corporate slogan ""We don't have venture capital; we have money."" ArsDigita thought that it was enough to be profitable. 
There were two things I thought that arsDigita did wrong. First of all, they didn't understand that consulting doesn't scale so well; if you really want to make an impact, you need to license software. A consultant working on a project makes ten or twenty percent profit. If you license software, each marginal unit you sell is 100% profit. That's why software companies have valuations that are something like 25 times richer than consulting companies. Consulting is important and keeps us in touch with customers, and it funds the software development, but our goal is to be a software company. (ArsDigita seems to have learned this lesson. Allen Shaheen, the CEO, writes that ""we are also considering developing and marketing additional software products using a different type of licensing arrangement. This investment is in addition to our investment in ACS as an open source product. We are considering this approach because it would allow us to accelerate our development of new and expanded features."" That's happy talk for ""the new features are going to cost you from now on."")
The other thing I didn't like about arsDigita was an almost religious aversion to Microsoft. There was a deep belief that arsDigita ""eliminated risk"" by never using a Microsoft product. The truth is, they just didn't know anything about Microsoft products. Their religious bigotry struck me as just that: bigotry. In the words of Lazarus Long, ""I don't believe anything. Gets in the way of learning."" If you say, ""we know Unix better, so we get better results with Unix,"" you're a scientist. If you say, ""we don't use any Microsoft crap, it all sucks"" you're just a fanatic, and it's getting in the way of doing good work. (Greenspun has learned this lesson too; almost all of his bitterness to Microsoft seems to have dissipated and he finally admits, ""I'm not motivated to fight a religious war for any particular database management system or Web server."" It's nice to watch smart people learning.)
But there's one thing that arsDigita did very, very, right, and that was the personal voice thing. The biggest thing I think about with Fog Creek is how to maintain that personal voice, and if we can do it, I'll owe a big, big debt to Philip Greenspun.
For ArsDigita, the spring is over. ArsDigita found it impossible to hire engineers during the dotcom bubble without the promises of IPO riches, and took $38 million in venture capital. They grew from 5 to 250 people.
And then the excited exuberance gave way to a completely collapsed market for Internet consulting services. 
The VCs promptly installed boring old-school management who insisted on a happy-talk marcomm website with complete bullshit like ""Fully integrated through a single data model to ensure consistency across all business processes, ACS empowers organizations to create Web services that maximize value for the end-user.""
Philip left.
The voice is gone.
To me, arsDigita will always remind me of those silly irrelevant pictures of pretty girls rollerblading and clam stands and boats in the Charles and sunsets in New Mexico and flowers and spring, and if you built it, they will come, and if you have a voice on your website, they will care. When I go to the website today and read that they ""maximize value for the end-user,"" I think of that dazzling, exciting kid you knew freshman year, who jumped from varsity squash to journalism to drama to campus politics, and was all fired up to change the world. But he got married, has 2 1/2 kids, took a job as an insurance agent and wears a gray suit to work every day.
Maturity is kind of sad.
But spring is in the air, and that makes up for it.
	"
https://www.joelonsoftware.com/2001/03/19/20010319/,2001/03/19,2001-03-19T00:01:47+00:00,,Joel Spolsky,News,"
	Philip Greenspun has been a key inspiration to many people, including Fog Creek. We owe him a debt. He started a company called arsDigita, which was really just another consulting company for the Internet, but it had two things which made it uniquely different. It had a personal voice, and it had education. But now it doesn't have Philip, and that's a real bummer. Spring in Cambridge
	"
https://www.joelonsoftware.com/2001/03/05/20010305/,2001/03/05,2001-03-05T00:01:46+00:00,,Joel Spolsky,News,"
	Normally I love Jakob Nielsen and can't wait to hear from him. This week Jakob Nielsen posted an article that's supposed to tell you how to retain key staff. Now, I read the article again and again and it just doesn't say anything. All it does is list a bunch of things and then asserts that they don't work. For those of you who are feeling a bit empty after that, may I point you to: my article on attracting programmers my article on managing programmers the book Peopleware, far better than anything I could write. Managers who understand and implement the philosophies of Peopleware have virtually no turnover. 
	"
https://www.joelonsoftware.com/2001/04/22/20010421/,2001/04/21,2001-04-22T00:01:59+00:00,,Joel Spolsky,News,"
	Spring in New York City It was a beautiful day; I went out with Jared, Ami, and Hagit and took some pictures in Central Park. See them here. Debugging Tip About half of our customers are in the US, and half outside. On my primary laptop, I finally decided to permanently set my regional settings to France to smoke out the last of the internationalization (""i18n"") bugs in our applications. (For example, did you know that in France large numbers are written with spaces as the thousands separator? For example 1 000 000 is a million. And 3,14 is pi. And 4/1 is January fourth). Anyway, if you see email from me with dates in French, that's why! Even web-based applications should be written to respond to locale settings. FogBUGZ shows you dates according to the web browser's settings, not the web server. If you set your computer's regional settings to Denmark, Google appears in Danish.
	"
https://www.joelonsoftware.com/2001/04/21/dont-let-architecture-astronauts-scare-you/,Don’t Let Architecture Astronauts Scare You,2001-04-21T00:15:00+00:00,2016-12-05T19:21:10+00:00,Joel Spolsky,"Rock star developer, News","
	When great thinkers think about problems, they start to see patterns. They look at the problem of people sending each other word-processor files, and then they look at the problem of people sending each other spreadsheets, and they realize that there's a general pattern: sending files. That's one level of abstraction already. Then they go up one more level: people send files, but web browsers also ""send"" requests for web pages. And when you think about it, calling a method on an object is like sending a message to an object! It's the same thing again! Those are all sending operations, so our clever thinker invents a new, higher, broader abstraction called messaging, but now it's getting really vague and nobody really knows what they're talking about any more. Blah.
When you go too far up, abstraction-wise, you run out of oxygen. Sometimes smart thinkers just don't know when to stop, and they create these absurd, all-encompassing, high-level pictures of the universe that are all good and fine, but don't actually mean anything at all. 
These are the people I call Architecture Astronauts. It's very hard to get them to write code or design programs, because they won't stop thinking about Architecture. They're astronauts because they are above the oxygen level, I don't know how they're breathing. They tend to work for really big companies that can afford to have lots of unproductive people with really advanced degrees that don't contribute to the bottom line.
A recent example illustrates this. Your typical architecture astronaut will take a fact like ""Napster is a peer-to-peer service for downloading music"" and ignore everything but the architecture, thinking it's interesting because it's peer to peer, completely missing the point that it's interesting because you can type the name of a song and listen to it right away.
All they'll talk about is peer-to-peer this, that, and the other thing. Suddenly you have peer-to-peer conferences, peer-to-peer venture capital funds, and even peer-to-peer backlash with the imbecile business journalists dripping with glee as they copy each other's stories: ""Peer To Peer: Dead!""
 The Architecture Astronauts will say things like: ""Can you imagine a program like Napster where you can download anything, not just songs?"" Then they'll build applications like Groove that they think are more general than Napster, but which seem to have neglected that wee little feature that lets you type the name of a song and then listen to it - the feature we wanted in the first place. Talk about missing the point. If Napster wasn't peer-to-peer but it did let you type the name of a song and then listen to it, it would have been just as popular.
Another common thing Architecture Astronauts like to do is invent some new architecture and claim it solves something. Java, XML, Soap, XmlRpc, Hailstorm, .NET, Jini, oh lord I can't keep up. And that's just in the last 12 months!
I'm not saying there's anything wrong with these architectures... by no means. They are quite good architectures. What bugs me is the stupendous amount of millennial hype that surrounds them. Remember the Microsoft Dot Net white paper? 
The next generation of the Windows desktop platform, Windows.NET supports productivity, creativity, management, entertainment and much more, and is designed to put users in control of their digital lives.
That was about 9 months ago. Last month, we got Microsoft Hailstorm. That white paper says:
People are not in control of the technology that surrounds them....HailStorm makes the technology in your life work together on your behalf and under your control.
Oh, good, so now the high tech halogen light in my apartment will stop blinking randomly.
Microsoft is not alone. Here's a quote from a Sun Jini whitepaper:
These three facts (you are the new sys admin, computers are nowhere, the one computer is everywhere) should combine to improve the world of using computers as computers - by making the boundaries of computers disappear, by making the computer be everywhere, and by making the details of working with the computer as simple as putting a DVD into your home theater system.
And don't even remind me of the fertilizer George Gilder spread about Java:
A fundamental break in the history of technology...
That's one sure tip-off to the fact that you're being assaulted by an Architecture Astronaut: the incredible amount of bombast; the heroic, utopian grandiloquence; the boastfulness; the complete lack of reality. And people buy it! The business press goes wild!
Why the hell are people so impressed by boring architectures that often amount to nothing more than a new format on the wire for RPC, or a new virtual machine? These things might be good architectures, they will certainly benefit the developers that use them, but they are not, I repeat, not, a good substitute for the messiah riding his white ass into Jerusalem, or world peace. No, Microsoft, computers are not suddenly going to start reading our minds and doing what we want automatically just because everyone in the world has to have a Passport account. No, Sun, we're not going to be able to analyze our corporate sales data ""as simply as putting a DVD into your home theatre system.""
Remember that the architecture people are solving problems that they think they can solve, not problems which are useful to solve. Soap + WSDL may be the Hot New Thing, but it doesn't really let you do anything you couldn't do before using other technologies - if you had a reason to. All that Distributed Services Nirvana the architecture astronauts are blathering about was promised to us in the past, if we used DCOM, or JavaBeans, or OSF DCE, or CORBA.
It's nice that we can use XML now for the format on the wire. Whoopee. But that's about as interesting to me as learning that my supermarket uses trucks to get things from the warehouse. Yawn. Mangos, that's interesting. Tell me something new that I can do that I couldn't do before, O Astronauts, or stay up there in space and don't waste any more of my time.
	"
https://www.joelonsoftware.com/2001/04/20/20010420/,2001/04/20,2001-04-20T00:01:58+00:00,,Joel Spolsky,News,"
	From the ""Extreme Programming"" Test Lab A couple of weeks ago Michael and Babak were finishing off some work for a client. They spent a couple of days working together doing pair programming and blasted through a long list of minor features and bug fixes. To some extent, the ""continual code review"" made things go very quickly. This week, we're plowing through a large pile of last minute changes to CityDesk (an original Fog Creek product), and we're not doing pair programming. I have to say that we're moving even faster without pairing up, literally blasting through dozens of fixes and small features a day per person. Old joke: Q: To a Political Scientist, what is the singular of the word ""data""?A: ""Anecdote"" In that spirit, I've gathered some data which shows that the benefits of pair programming are not enough to offset the loss in productivity. We've been making up for it by doing a lot of code review (a process which is made absolutely trivial using CVS/FogBUGZ integration - two clicks from the bug report notification to graphical diffs). Today I spent about 10 minutes total doing code reviews (found some problems, even) which is really cheap compared to pair programming.
	"
https://www.joelonsoftware.com/2001/04/19/20010419/,2001/04/19,2001-04-19T00:01:57+00:00,,Joel Spolsky,News,"
	Are the Groove designers Architecture Astronauts? 
	"
https://www.joelonsoftware.com/2001/04/18/20010418/,2001/04/18,2001-04-18T00:01:56+00:00,,Joel Spolsky,News,"
	The Joel on Software discussion group is starting to show signs of life. Cool! At some point I have to figure out how to use the categories feature to sort out old postings. Stupid IT Research Forrester Research says that content management software is about to ""explode."" ""According to a recent report from the Yankee Group, sales of content management software will grow to $3 billion in 2004, up from $900 million in 2000."" I hate those cheesy market research companies who come up with ridiculous numbers and extrapolations (suitable for business plans) that make no sense, which, frankly, they pulled out of their tokhes. They always have these lame bar charts where they only have data for this year, then they extrapolate out four years assuming a typical 736.13% rate of growth, a number they divined by rolling dice and tossing bones about haphazardly. It's cool, because you can make a business plan that shows that if you can get only 1% of the market for content management, you'll be making $30m a year, which easily supports 250 employees. So you show the stupid veecees the report from Forrester (or Jupiter, or Gartner, or one of the less popular ones) and they give you enough money to hire 250 people, and two years later you've got $254 in revenue from selling tomatoes you grew in the company backyard and you have to fire everyone. Conclusion: if your business plan includes projections from IT research firms, you better start planting tomatoes. From the ""Why We Don't Want VC"" Department Philip Greenspun: ""I was pushed out of ArsDigita by the venture capitalists and managers that I brought in.""
	"
https://www.joelonsoftware.com/2001/04/17/20010417/,2001/04/17,2001-04-17T00:01:55+00:00,,Joel Spolsky,News,"
	Your typical architecture astronaut will take a fact like ""Napster is a peer-to-peer service for downloading music"" and ignore everything but the architecture, thinking it's interesting because it's peer to peer, completely missing the point that it's interesting because you can type the name of a song and listen to it right away. All they'll talk about is peer-to-peer this, that, and the other thing. Suddenly you have peer-to-peer conferences, peer-to-peer venture capital funds, and even peer-to-peer backlash with the imbecile business journalists dripping with glee as they copy each other's stories: ""Peer To Peer: Dead!"" Read all about it in today's story: Don't Let Architecture Astronauts Scare You
	"
https://www.joelonsoftware.com/2001/04/06/20010406/,2001/04/06,2001-04-06T00:01:54+00:00,,Joel Spolsky,News,"
	Mark Newman: ""As you can see, I'm not a fan of CMM. I view it primarily as a means for high-priced consultants to hold seminars and sell books, not as a process to improve software."" (CMM: ""capability maturity model"".) Capturing Email Addresses We used to ask people to provide an email address to sign up for our on-the-web FogBUGZ demo. Just an email address, nothing else: many of the free software demos you find on the web require a complete name, address, where did you hear about us, birthday, mother's driver's license ID, etc. I was curious as to how many people our email request was scaring away. So (sneaky Joel) we changed the demo signup so that 50% of the guinea pigs, er, potential customers had to provide an email address and 50% didn't. Result: about half of the people gave up when asked to type in an email address. We want people to try the demo, so we changed it to never ask for an email address. Of course, people are concerned about privacy and spam. But this reminds me of a more interesting principle of the usability curve: reducing difficulty by even a small amount tends to double the number of people who succeed with a task.
	"
https://www.joelonsoftware.com/2001/04/05/20010405/,2001/04/05,2001-04-05T00:01:53+00:00,,Joel Spolsky,News,"
	A couple of developers here at Fog Creek have spent the last day or so doing 'extreme programming' ... actually pair programming, which is all anybody remembers about extreme programming... Conclusion: it's very effective when you have a long list of small bug fixes you want to sprint through, because you can reach incredible velocity. Typos and small bugs get caught right away. But you can't stop and concentrate, so it's probably not so useful for longer programming tasks. Another caveat: personal synergy is crucial. It's like being a cop: if you don't like your partner, it's one of the less pleasant rings of hell! (Luckily, rule #0 in Fog Creek hiring is no jerks.)
	"
https://www.joelonsoftware.com/2001/04/03/20010403/,2001/04/03,2001-04-03T00:01:52+00:00,,Joel Spolsky,News,"
	Earthlink responds: We're shooting for an 'effect of verisimilitude'.
	"
https://www.joelonsoftware.com/2001/05/31/20010531/,2001/05/31,2001-05-31T00:02:06+00:00,,Joel Spolsky,News,"
	From the Fun Toys Department: Tomorrow I'm starting on a Windows CE project. For the last 4 years I've been furious every time I try to find something in MSDN, and the bloody WinCE documentation kept getting in the way. After I finally figured out how to delete the WinCE stuff from MSDN, of course, I find myself starting a WinCE development project. Blah.
	"
https://www.joelonsoftware.com/2001/05/29/20010529/,2001/05/29,2001-05-29T00:02:05+00:00,,Joel Spolsky,News,"
	Jef Raskin: ""On the day I resigned, I made a last attempt to be helpful, suggesting that the CEO use her full name, 'Patti. Hart,' in her email address, because the form she was using had an unfortunate pronunciation. The reply said that my note would not be passed on because Ms. Hart was accepting 'revenue generating messages only.' Until she left to become CEO of ExciteAtHome last month, she still used her old 'phart' email."" By the way, whenever usability experts point to Microsoft Office products as an ""example"" of horrendous usability, they are usually being disingenuous and just pandering to the crowd. In my opinion they're just attacking the products with the biggest market share because most of their listeners will have experience with some Microsoft UI problem. The dishonest part is that they never seem to offer any specific improvements. Designing UIs for a program as complex as Word or Excel is extremely hard and the very best designs are still often difficult to use, and that applies to any program with a reasonable level of complexity. Before you hand-wave about a bad UI, explain what you would do differently and tell us why that would be easier to use. When Jef says ""... everybody knows that Microsoft Word, Excel, and other popular programs can be maddeningly frustrating ..."" he reminds me of Scott McNealy telling really stupid jokes about Microsoft at Sun developer conferences because it never fails to win applause. Good for you, children. Now say something interesting without just making fun of the fat boy. TechInterview You have 20 blue balls and 14 red balls in a bag...
	"
https://www.joelonsoftware.com/2001/05/28/20010528/,2001/05/28,2001-05-28T00:02:04+00:00,,Joel Spolsky,News,"
	I've been watching videos from Reboot, a web conference in Denmark. Mark Hurst tells some interesting stories about usability lessons from the web. My favorite: when your checkout screen prompts for a username and password, some newbie users will type in their AOL username and password. Why? They're not reading the text that says ""returning customers, type your username and password."" More proof that people don't read, but also evidence that people will assume the simplest possible program model - i.e., that their new AOL password works everywhere - until they learn otherwise. (Feel free to fast-forward over the pompous negroponteisms like his slide titled ""This is the Age of Bits."") The video is here. Techinterview: How does one find a loop in a singly linked list in O(n) time using constant memory? You cannot modify the list in any way (and constant memory means the amount of memory required for the solution cannot be a function of n.)
	"
https://www.joelonsoftware.com/2001/05/08/20010508/,2001/05/08,2001-05-08T00:02:03+00:00,,Joel Spolsky,News,"
	People seem to think that just because I advocate eating your own dog food, that means that I don't approve of usability testing. Nothing could be further from the truth. Cheap ""hallway"" usability testing is one of the 12 requirements of The Joel Test. There's a whole chapter on usability testing, and how to do it the right way, in my upcoming book. Carl Zetim wrote a critique of my article called ""Eat Your Own Dog Food, but Not as a Substitute for Usability"". Sorry, you can't read it, he works for Giga and they charge for their ideas. His critique basically said that eating your own dog food is ""one of the most pernicious barriers to doing true usability,"" and then he gives the unlikely example of Microsoft, which actually does tons of usability testing. Just because I said ""eat your own dog food"" doesn't mean I don't advocate usability testing. It's just a logical fallacy. They could have said ""Eat Your Own Dog Food, but Not If It Means The Dog Will Go Hungry."" It just doesn't follow.
	"
https://www.joelonsoftware.com/2001/05/05/what-is-the-work-of-dogs-in-this-country/,What is the Work of Dogs in this Country?,2001-05-05T00:16:01+00:00,2016-12-05T19:33:57+00:00,Joel Spolsky,"Fog Creek Software, News","
	How naive were we?
We had assumed that Bezos was just reinvesting the profits, that's why they weren't showing up on the bottom line.
Last year, about this time, the first big dotcom failures started to hit the news. Boo.com. Toysmart.com. The Get Big Fast mentality was not working. Five hundred 31-year-olds in Dockers discovered that just copying Jeff Bezos wasn't a business plan.
The past few weeks have felt oddly quiet at Fog Creek. We're finishing up CityDesk. I'd like to tell you all about CityDesk, but that will have to wait. I need to tell you about dog food.
Dog food?
Last month Sara Corbett told us about the Lost Boys, Sudanese refugees between 8 and 18 years old separated from their families and forced on a thousand mile march from Sudan, to Ethiopia, to Sudan, to Kenya. Half died on that trip, of hunger, thirst, alligators. A few of them were rescued and delivered to places like Fargo, North Dakota, in the middle of winter. ""Are there lions in this bush?"" one asked, riding in a car to his new home from the airport.
Peter touched my shoulder. He was holding a can of Purina dog food. ""Excuse me, Sara, but can you tell me what this is?"" Behind him, the pet food was stacked practically floor to ceiling. ""Um, that's food for our dogs,"" I answered, cringing at what that must sound like to a man who had spent the last eight years eating porridge. ""Ah, I see,"" Peter said, replacing the can on the shelf and appearing satisfied. He pushed his grocery cart a few more steps and then turned again to face me, looking quizzical. ""Tell me,"" he said, ""what is the work of dogs in this country?"" [New York Times Magazine, April 1, 2001]
Dogs. Yes, Peter. Fargo has enough food, even for dogs.
It's been a depressing year.
Oh, it started out so amusing, we all piled into B2B and B2C and P2P like a happy family getting in the Suburban for a Sunday outing to the Krispy Kreme Donut Shop. But wait, that's not even the amusing part, the amusing part was watching the worst business plans fail, as their stock went from 316 to 3/16. Take that, new economy blabbermouths! Ah, the schadenfreude. Ah, the glee, when once again, Wired Magazine proves that as soon as it puts something on the cover, that thing will be proven to be stupid and wrong within a few short months. 
 
Ooh, sorry, did you buy the Wired Index?
And with this New Economy thing, Wired really blew it, because they should have known by then what a death kiss their cover was for any technology or company or meme, after years of touting smell-o-rama and doomed game companies and how PointCast was going to replace the web, no, wait, PointCast already replaced the web, in March 1997. But they tempted fate anyway, and didn't just put the New Economy on the cover, they devoted the whole goddamn issue to the New Economy, thus condemning the NASDAQ to plummet like a sheep learning to fly. 
But joy at other's misfortune can only entertain us for so long. Now it's just getting depressing, and I know the economy is not officially in a depression, but I'm depressed, not because so many stupid startups went away, but because the zeitgeist is depressing. And now we have to eat dog food instead of Krispy Kremes.
Which is what we're doing, because life goes on. Even though everybody's walking around with their chins glued to their chests, mourning about the hours they devoted, ruining their health and love lives for the sake of stock options in SockPuppet.com, life goes on. And the product development cycle must go on, and we at Fog Creek are getting towards the part in the product development cycle where you have to eat your own dog food. So for a while we're Dog Creek Software.
Eating your own dog food is the quaint name that we in the computer industry give to the process of actually using your own product. I had forgotten how well it worked, until a month ago, I took home a build of CityDesk (thinking it was about 3 weeks from shipping) and tried to build a site with it. 
Phew! There were a few bugs that literally made it impossible for me to proceed, so I had to fix those before I could even continue. All the testing we did, meticulously pulling down every menu and seeing if it worked right, didn't uncover the showstoppers that made it impossible to do what the product was intended to allow. Trying to use the product, as a customer would, found these showstoppers in a minute.
And not just those. As I worked, not even exercising the features, just quietly trying to build a simple site, I found 45 bugs on one Sunday afternoon. And I am a lazy man, I couldn't have spent more than 2 hours on this. I didn't even try anything but the most basic functionality of the product.
Monday morning, when I got in to work, I gathered the team in the kitchen. I told them about the 45 bugs. (To be fair, many of these bugs weren't actual defects but simply things that were not as convenient as they should have been). Then I suggested that everybody build at least one serious site using CityDesk to smoke out more bugs. That's what is meant by eating your own dog food.
Here's one example of the kind of things you find.
I expect that a lot of people will try to import existing web pages into CityDesk by copying and pasting HTML code. That works fine. But when I tried to import a real live page from the New York Times, I spent a whole day patiently editing the HTML, finding all the IMG links (referring to outside pictures), downloading the pictures from the web, importing those pictures into CityDesk, and adjusting the IMG links to refer to the internal pictures. It's hard to believe, but one article on that web site contains about 65 IMG links referring to 35 different pictures, some of which are 1 pixel spacers which are very difficult to download using a web browser. And CityDesk has a funny compulsion to change the name of imported pictures internally into a canonical number, and it doesn't even have a way to find out what that number is, so the long and the short of it was that it took me one full day to import a page into CityDesk. 
It was getting a bit frustrating, so I went and weeded the garden for a while. (I don't know what we'll do to relieve stress when it's all cleaned up. Thank God we can't afford a landscaping service.) And that's when it hit me. Hey, I'm a programmer! In the time it took me to import one page and adjust the pictures, I could write a subroutine that does it automatically! In fact, it probably took me less time to write the subroutine. Now importing a page takes about half a minute, instead of one day, and is basically error-free.
Wow.
That's why you eat your own dog food.
And when Michael started importing some sites himself, he found about 10 bugs I had baked in by mistake. For example, we found web sites that use complicated names for pictures that cannot be converted to file names when you import them because they contain question marks, which are legal in URLs but not legal in file names.
Sometimes you download software and you just can't believe how bad it is, or how hard it is to accomplish the very simple tasks that the software tries to accomplish. Chances are, it's because the developers of the software don't use it.
I have an even more amusing example of failing to eat dog food. Guess what email product was used internally at Juno Online Services? [If you're just tuning in, I worked on the Juno client team for a few years].
Hmm, did you guess Juno? Since that was, uh, our product? 
No. A couple of people, including the president, used Juno at home. The other 175 of us used Microsoft Outlook.
And for good reasons! The Juno client was just not such a great email client; for two years the only thing we worked on was better ways to show ads. A lot of us thought that if we had to use the product, we would have to make it better, if only to stop our own pain. The president was very insistent that we show popup ads at six different points in time, until he got home and got six popup ads, and said, ""You know what? Maybe just two popups.""
AOL was signing up members at a furious rate, in part because it provided a better user experience than Juno, and we didn't understand that, because we didn't eat our own dog food. And we didn't eat our own dog food, because it was disgusting, and management was sufficiently dysfunctional that we simply were not allowed to fix it, and at least make it tolerable to eat.
Anyway. CityDesk is starting to look a lot better. We've fixed all those bugs, found some more, and fixed them, too. We're adding features we forgot about that became obviously necessary. And we're getting closer to shipping! Hurrah! and thankfully, we no longer have to contend with 37 companies, each with $25 million in VC, competing against us by giving away their product for free in exchange for agreeing to have a big advertisement tattooed on your forehead. In the post-new economy, everybody is trying to figure out how much they can get away with charging. There's nothing wrong with the post-new economy, if you're smart. But all the endless news about the ""dot coma"" says more about the lack of creativity of business press editors than anything else. Sorry, fuckedcompany.com, it was funny for a month or so, now it's just pathetic. We'll focus on improving our product, and we'll focus on staying in business, by listening to our customers and eating our own dog food, instead of flying all over the country trying to raise more venture capital. 
	"
https://www.joelonsoftware.com/2001/05/05/20010505/,2001/05/05,2001-05-05T00:02:02+00:00,,Joel Spolsky,News,"
	Eating your own dog food is the quaint name that we in the computer industry give to the process of actually using your own product. I had forgotten how well it worked, until a month ago, I took home a build of CityDesk (thinking it was about 3 weeks from shipping) and tried to build a site with it. What is the Work of Dogs in this Country? TechInterview Michael buried four fishermen up to their necks in the sand on the beach at low tide for keeping their fishing spot a secret from him. 
	"
https://www.joelonsoftware.com/2001/05/04/20010504/,2001/05/04,2001-05-04T00:02:01+00:00,,Joel Spolsky,News,"
	Ooh, someone tried to break into Fog Creek Software while I was here. When Michael came into work he found a window downstairs broken and a screwdriver on the floor. They must have run away when they realized I was here. Nothing was taken. The police came and searched the place, guns drawn. Very NYPD Blue. (PS: NYC police hate that show). Now we're waiting for the fingerprint people. From the ""Couldn't have happened to a nicer guy"" department Wall Street Journal: SEC Investigates EarthLink's SlatkinAmid Claims That He Bilked Investors That company is just all about honesty and integrity.
	"
https://www.joelonsoftware.com/2001/05/03/20010503/,2001/05/03,2001-05-03T00:02:00+00:00,,Joel Spolsky,News,"
	Ev has a neat idea for an application that he calls Alias Manager. It's a simple way to deal with having a team of people who are responsible for answering emails to one email alias, like the world famous president@whitehouse.gov, or the almost as famous customer-support@fogcreek.com. When I read his idea, I thought, smart Ev! We need that too! Then I realized that FogBUGZ almost does it, but not quite. It would take about $10,000 of investment to add this feature to FogBUGZ. So I thought I'd ask my readers two questions: have you seen a simple, cheap application that does this? do you need a simple, cheap application that does this? Postscript: I've gotten tons of replies. There are a lot of expensive CRM packages. That's not what I'm talking about, they are too complicated and too expensive for small business. There are also some open source things, many people mentioned rt.
	"
https://www.joelonsoftware.com/2001/06/27/20010627/,2001/06/27,2001-06-27T00:02:15+00:00,,Joel Spolsky,News,"
	Vacation I'm going on vacation, back July 17th. Emails and phone calls will be responded to slowly, if at all. CorporateGobbledygook When I go to a company's web site and it says that their product ""provides Internet-scale event routing solutions that seamlessly integrate information among Web services, applications and users,"" I want to barf. More specifically, I have no idea whatsoever why I should care, so I leave, and I don't come back. Did you know that KnowNow is ""enabling the real-time enterprise to fully leverage the Internet to drive revenue, reduce costs and enhance business relationships""? What does that mean?! Who cares? Who are the morons who write this stuff? Tell me what it does! I'm a software designer! I'm your target audience, and I can't make head or tail of it! (KnowNow is not the only company that has no ability to communicate using their home page. GrandCentral is equally inscrutable. ""Grand Central provides a Web Services Network that enables companies to connect, integrate and manage their business processes with those of their partners and customers."" Good for you. I already connect, integrate, and manage with my partners, thank you very much. If you can make it as far as the white paper, you'll see sentences like ""At a feature level, the Grand Central Network provides four main categories of functionality."" I think that means ""Grand Central has four features."" Maybe somebody thought that it didn't sound cool enough that way.) I have a feeling that both of these products are interesting and useful. But listen, bubbie: if I can't understand it, and I've been writing software for twenty years, then I don't know who will. Rohit, Halsey: you're ruining your products because you can't explain in two sentences what they do in a way which would be meaningful to the people who are going to make the purchase decision. Software Testing Eugene Vinsky has been hard at work on a web site with everything you ever wanted to know about software testing (and then some!) Check it out at SQATester.com. SmartTags With all the uproar over SmartTags it's hard to believe Microsoft is actually going to ship with them, but I've disabled them on most Fog Creek web sites just to make sure.
	"
https://www.joelonsoftware.com/2001/06/22/20010603/,2001/06/03,2001-06-22T00:02:14+00:00,,Joel Spolsky,News,"
	If you've been working in the software industry, you've probably seen zillions of good new product ideas quashed by some executive who asks, ""what if Microsoft enters this space and makes all the profits go away?"" More...
	"
https://www.joelonsoftware.com/2001/06/22/20010624/,2001/06/24,2001-06-22T00:02:13+00:00,,Joel Spolsky,News,"
	I first worked with Adam Bosworth when he was designing Microsoft Access, and I was designing the application programmability strategy that became VBA. He is an incredibly fast thinker and incessantly right. Unlike most fast-thinkers who are always right, he also knows how to listen, and if he discovers he was wrong (as he did within one hour in 1992 when I convinced him that macro languages needed to be object-oriented), he'll change his mind without emotional attachment to his old ideas. Adam set a better example for the role of Program Manager than anyone I'd ever met. Adam has designed and shipped more world-shaping software than anyone else I can think of. Borland's old Reflex relational database. Microsoft Access. ODBC. Internet Explorer's ""Trident"" editor and document object model. Soap. XML. Now a new company called Crossgain is in the works. And I'm not exaggerating when I say that one of the goals of my own company, Fog Creek Software, is to create a place where we stood a snowflake's chance in hell of getting superstars like Adam Bosworth to work. It's an ambitious goal and it's going to take a few years, but I'm confident we'll do it. In the meantime, anybody working in the software industry needs to listen to Adam, attentively. When he talks about n-tier architectures, read every word he says. If you can't follow it, ask someone to explain it to you. If he drops an acronym like WSDL that you don't understand, study it so you don't miss his points. Understand why all the six hundred demos you've seen of a SOAP service that returns stock quotes are unrealistically simplistic and don't scale up to the real world. After you read that article, think about how the fact that it's almost impossible to display a progress indicator in a web browser while the server does some 2 minute task came as close to killing the entire online travel-agency industry as Nikita Khrushchev came to destroying the world by putting missiles in Cuba. As usual Adam is incredibly right, and he's high-bandwidth, and if you can't follow what he's saying, don't apply for a job at Fog Creek! Google Searches Images ... and, typical of Google, it actually works.
	"
https://www.joelonsoftware.com/2001/06/21/20010621/,2001/06/21,2001-06-21T00:02:12+00:00,,Joel Spolsky,News,"
	It's here! My book User Interface Design for Programmers, which originally appeared in these pages, is now a dead-trees book from Apress. The printed version of the book has several bonus chapters which are not on the web version. It has lots more illustrations and it's been beautifully designed by the great folks at Apress.
	"
https://www.joelonsoftware.com/2001/06/18/20010618/,2001/06/18,2001-06-18T00:02:11+00:00,,Joel Spolsky,News,"
	You're Here! This site has moved to a new server. Change your bookmarks, links, etc. to https://www.joelonsoftware.com. The old URL will continue to work for a long, long time, but will eventually just redirect you.
	"
https://www.joelonsoftware.com/2001/06/17/20010617/,2001/06/17,2001-06-17T00:02:10+00:00,,Joel Spolsky,News,"
	Cool Toys Department I've been playing with MP3pro, a new file format that is exactly half the size of MP3s, with higher sound quality. The even neater part is that you can play MP3pro's with your old MP3 player. It sounds great. And it eliminates Windows Media's technical advantage. You can download an MP3pro encoder and player from RCA. (Remember RCA? I thought they were long gone.) News.com writes: ""None of the Big Five (record labels) are going to distribute without security,"" said Gartner analyst P.J. McNealy. ""Unless that's there, (MP3 proponents) are unlikely to get any of the Big Five."" Hello? Who cares what record companies do? One of my neighbors abandoned this cool stereo receiver. It's a Beomaster 2400 from 1980. In 1980, I really lusted after these kinds of things. So I took it home.
	"
https://www.joelonsoftware.com/2001/06/14/20010614/,2001/06/14,2001-06-14T00:02:09+00:00,,Joel Spolsky,News,"
	I know, it looks the same to you ... but this version of Joel On Software is actually running on a new server inside the Fog Creek offices. I've been having a lot of fun (!) discovering all the places in Manila where URLs are hardcoded. Even though we're going to redirect the URL joel.editthispage.com to the new computer, I'd like to get rid of as many hardcoded URLs as possible to make sure the site stays portable. There are zillions of links to static.userland.com, a server back at UserLand, which I'm manually adjusting to point to some machine inside Fog Creek.
	"
https://www.joelonsoftware.com/2001/06/14/20000614/,2000/06/14,2001-06-14T00:02:08+00:00,,Joel Spolsky,News,"
	Did you notice the cool new search box on the left? Thanks to Kishore for the idea. 
	"
https://www.joelonsoftware.com/2001/06/07/20010607/,2001/06/07,2001-06-07T00:02:07+00:00,,Joel Spolsky,News,"
	New experiment: working 9 to 5. Today I actually left work at 5 PM, not because I was done, but because I have a distinct theory that if you force yourself to leave work after 8 hours, eventually you train yourself not to waste time during the day. I just read Slack, by Tom Demarco, one of the authors of my favorite software management books, Peopleware . Demarco is a big fan of the 7.5 hour workday, which got me thinking about it again. It'll never last. Slack itself is one of those books that should have been an article. It's got one very good idea at the beginning, then it repeats some of the good ideas from Peopleware (like Lister's Law: you can't think faster, so trying to force knowledge workers to work ""faster"" in the same way you try to get Nike shoe makers to make more shoes per hour will never work.) But then Slack devolves into a typical lightweight bizniss who-moved-that-cheese kind of book about Managing Change, albeit an intelligent one, but I didn't learn much after the first couple of chapters. TechInterview: A man has two cubes on his desk. Every day he arranges both cubes so that the front faces show the current day of the month. What numbers are on the faces of the cubes to allow this? (P.S. Michael and I are going to move TechInterview to a faster server in the Fog Creek office as soon as we can. This is taking longer than expected because he is on a fishing trip and I've been leaving work at 5!)
	"
https://www.joelonsoftware.com/2001/07/31/hard-assed-bug-fixin/,Hard-assed Bug Fixin’,2001-07-31T00:14:54+00:00,2016-12-05T19:20:22+00:00,Joel Spolsky,"Rock star developer, News","
	Software quality, or the lack thereof, is something everybody loves to gripe about. Now that I have my own company I finally decided to do something about it. Over the last two weeks we stopped everything at Fog Creek to ship a new incremental version of FogBUGZ with the goal of eliminating all known bugs (there were about 30).
As a software developer, fixing bugs is a good thing. Right? Isn't it always a good thing?
No!
Fixing bugs is only important when the value of having the bug fixed exceeds the cost of the fixing it.
These things are hard, but not impossible, to measure. Let me give you an example. Suppose you operate a peanut-butter-and-jelly sandwich factory. Your factory produces 100,000 sandwiches a day. Recently, due to the introduction of some new flavors (garlic peanut butter with spicy Habanero jam), demand for your product has gone through the roof. The factory is operating full-out at 100,000 sandwiches, but the demand is probably closer to 200,000. You just can't make any more. And each sandwich earns you a profit of 15 cents. So you're losing $15,000 a day in potential earnings because you don't have enough capacity.
Building a new factory would cost way too much. You don't have the capital, and you're afraid that spicy/garlicky sandwiches are just a fad which will pass, anyway. But you're still losing that $15,000 a day.
It's a good thing you hired Jason. Jason is a fourteen year old programmer who hacked into the computers that run the factory, and believes that he has come up with a way to speed up the assembly line by a factor of 2. Something about overclocking that he heard on slashdot. And it seemed to work in a test run.
There's only one thing stopping you from rolling it out. There's a teeny tiny wee little bug that causes a sandwich to be mushed once an hour or so. Jason wants to fix the wee bug. He thinks he can fix it in three days. Do you let him fix it, or do you roll out the software in its bug-addled state?
Rolling out the software three days later will cost you $45,000 in lost profits. And it will save you, um, the cost of raw materials for 72 sandwiches. (In either case Jason will get the bug fixed three days later). Well, I don't know how much sandwiches cost on your planet, but here on Earth, they're a lot less than $625.
Where was I. Oh yeah. Sometimes it is not worth fixing a bug. Here's another bug that's not worth fixing: if you have a bug that totally crashes your program when you open gigantic files, but it only happens to your single user who has OS/2 and who, for all you know, doesn't even use large files. Well, don't fix it. Worse things have happened at sea. Similarly I've generally given up caring about people with 16 color screens or people running off-the-shelf Windows 95 with no upgrades in 7 years. People like that don't spend much money on packaged software products. Trust me.
But mostly, it's worth fixing bugs. Even if they are ""harmless"" bugs, they may reduce the reputation of your company and your product, which, in the long run, will have a significant impact on your earnings. It's hard to overcome the reputation of having a buggy product. When you do want to do that .01 release, here are some ideas for finding and fixing the right bugs: the ones that it is economically worth fixing.
Step One: Make Sure You Find Out About The Bugs.
In the case of FogBUGZ, we have two ways of doing that. First, we trap all bugs on our free demo server, capture as much information as we can, and email the whole thing to the development team. That found an awful lot of bugs, which was very cool. For example, we discovered a bunch of people who didn't enter dates where they were supposed to in the ""Fix For"" screen. We didn't even have an error message in that case, we just ""crashed"" (which, in a web app, just means you got an ugly IIS error instead of what you expected). Oops.
When I worked at Juno, we had an even cooler system in place to collect bugs ""from the field"" automatically. We installed a handler using TOOLHELP.DLL so that every time Juno crashed, it stayed alive just long enough to dump the stack into a log file before going to its grave. The next time the program connected to the Internet to send mail, it uploaded the log file. During betas, we gathered these log files, collated all the crashes, and entered them into the bug tracking database. This found literally hundreds of crashing bugs. When you have a million users, it is amazing what will crash, often because of severe low memory conditions or severely crappy computers (can you spell Packard Bell?) You could have code like this:
int foo( object& r ){ r.Blah(); return 1;}
and you would get crashes there because the r reference was NULL, even though that's completely impossible, there's no such thing as a NULL reference, C++ guarantees it, and you don't have to believe me but when you wait long enough and have millions of users and religiously collect their stack dumps, you will find crashes in places like that and you won't believe your eyes. (And you won't fix them. Cosmic rays, man. Get a new computer and this time don't install every cool shareware taskbar lint gizmo you find. Sheesh.)
The other thing we do is consider each and every tech support call to be evidence of a bug. When we take the call, we try to figure out what we could have done to eliminate it. For example, the old FogBUGZ Setup used to assume that FogBUGZ would run under the anonymous Internet user account. That was a good assumption 95% of the time, and a bad assumption 5% of the time, but every one of those 5% cases ended up in a call to our support line. So we modified Setup to prompt for an account.
Step Two: Make Sure You Get Economic Feedback
You may not be able to figure out exactly how much it's worth to fix each bug, but there's something you can do: charge the ""cost"" of tech support back to the business unit. In the early nineties there was a financial reorganization at Microsoft under which each product unit was charged for the full cost of all tech support calls. So the product units started insisting that PSS (Microsoft's tech support) provide lists of Top Ten Bugs regularly. When the development team concentrated on those, product support costs plummeted.
This is a bit in contradiction with the new trend of letting the tech support department pay for its own operation, something that most large companies do. At Juno tech support was expected to break even by charging people for tech support. By moving the economic burden of bugs onto the users themselves, you lose what limited ability you might have had to detect the damage they were causing. (Instead you get irate users who resent having to pay for your bug, who tell their friends, and you can't even measure how much that costs you. To be fair to Juno, the product itself was free, so stop yer bitchin.)
One way of resolving the two is to not charge the user when the support call was caused by a bug in your own product. Microsoft does this, and it's quite nice, and I've never paid for a call to Microsoft Instead, charge the $245 or whatever one developer incident costs these days back to the product unit. That blows away their profit completely for the product they sold you (several times over), and creates exactly the right economic incentives. Which reminds me of one reason DOS games were a terrible business... to get them to look good and run fast, you usually needed strange video drivers, and a single tech support call about the video drivers would blow away the profit you could make from 20 copies of your product, assuming Egghead and Ingram and the ad on MTV hadn't already guzzled away all your earnings.
Step Three: Figure Out What It's Worth To You To Fix Them All.
At Fog Creek Software, well, we're a tiny company (except in our own minds), and the development team just takes the tech support calls. The cost was running about 1 hour per day, which, based on our consulting rates, is somewhere around $75000 a year. We were pretty confident that we could get that down to 15 minutes a day by fixing all known bugs.
Using very sloppy numbers, here, that means that the net present value of the savings would be about $150,000. That justifies 62 days of work: if you can do it in less than 62 person-days, it's worth doing. 
Using the handy estimation feature built into FogBUGZ, we calculated that it would take 20 person-days (two people two weeks) to fix everything - that's $48,000 ""spent"" for a return of $150,000, which is a great return on investment just on the basis of the tech support savings. (Observe that you could substitute the cost of programmer's salaries and overhead instead of our consulting rate and get the same 3:1 result, since it cancels out).
I haven't even begun to count the value from having a better product, but I can start doing that, too. We had 55 crashes on the demo server during the month of July with the old code, representing 17 distinct users. You have to imagine that at least one of those people decided not to buy FogBUGZ because they thought it was buggy when they ran the demo (although I don't have real statistics for that.) In any case the lost sales was probably costing us somewhere between $7,000 and $100,000 in present value. (If you were serious enough, it wouldn't be too hard to get a real number).
Next question. Can you charge more for a less buggy product? That would add a whole bunch of value to debugging. I suspect that at the extremes, bug count does affect price, but I am hard pressed to think of an example from the world of packaged software where this has been the case.
Please Don't Beat Me Up!
Inevitably people read essays like this and come to silly conclusions, like, Joel doesn't think you should fix bugs. In fact I think that for most of the kinds of bugs that most people fix, there's a clear return on investment. But there may be an even higher monetary value to doing something other than fixing every last bug. If you have to decide between fixing the bug for OS/2 guy and adding a new feature that will sell 20,000 copies of your software to General Electric, well, sorry, OS/2 guy. And if you're dumb enough to think that it's still more important to fix OS/2 than to add the GE feature, maybe your competitors won't be and you'll be out of business.
With all that said, I'm optimistic at heart, and I believe that there is a lot of hidden value to producing very high quality products that is not very easy to capture. Your employees will be prouder. Fewer of your customers will send you back your CD in the mail after microwaving it and chopping it to bits with an ax. So I tend to err on the side of quality (indeed, we fixed every known bug in FogBUGZ, not just the big bang ones) and take pride in that, and feel confident, by the complete elimination of errors from the demo server, that we have a rock-solid product.
	"
https://www.joelonsoftware.com/2001/07/31/20010731/,2001/07/31,2001-07-31T00:02:18+00:00,,Joel Spolsky,News,"
	FogBUGZ 2.03 is shipping. This is strictly a bug-fix release in which we have fixed all known bugs. (If you're a FogBUGZ customer and you didn't get the upgrade notification by email, we probably have the wrong email for you on file. Email me at work and we'll sort it out.) Read all about our bug-fixing adventures in my latest article, Hard-assed Bug Fixin'.
	"
https://www.joelonsoftware.com/2001/07/22/20010716/,2001/07/16,2001-07-22T00:02:17+00:00,,Joel Spolsky,News,"
	I'm back! ... still trying to dig out from under a big pile o' email.
	"
https://www.joelonsoftware.com/2001/07/21/good-software-takes-ten-years-get-used-to-it/,Good Software Takes Ten Years. Get Used To it.,2001-07-21T00:15:29+00:00,2016-12-05T19:23:22+00:00,Joel Spolsky,"CEO, News","
	Have a look at this little chart:
[Source: Iris Associates]
This is a chart showing the number of installed seats of the Lotus Notes workgroup software, from the time it was introduced in 1989 through 2000. In fact when Notes 1.0 finally shipped it had been under development for five years. Notice just how dang long it took before Notes was really good enough that people started buying it. Indeed, from the first line of code written in 1984 until the hockey-stick part of the curve where things really started to turn up, about 11 years passed. During this time Ray Ozzie and his crew weren't drinking pina coladas in St Barts. They were writing code.
The reason I'm telling you this story is that it's not unusual for a serious software application. The Oracle RDBMS has been around for 22 years now. Windows NT development started 12 years ago. Microsoft Word is positively long in the tooth; I remember seeing Word 1.0 for DOS in high school (that dates me, doesn't it? It was 1983.)
To experienced software people, none of this is very surprising. You write the first version of your product, a few people use it, they might like it, but there are too many obvious missing features, performance problems, whatever, so a year later, you've got version 2.0. Everybody argues about which features are going to go into 2.0, 3.0, 4.0, because there are so many important things to do. I remember from the Excel days how many things we had that we just had to do. Pivot Tables. 3-D spreadsheets. VBA. Data access. When you finally shipped a new version to the waiting public, people fell all over themselves to buy it. Remember Windows 3.1? And it positively, absolutely needed long file names, it needed memory protection, it needed plug and play, it needed a zillion important things that we can't imagine living without, but there was no time, so those features had to wait for Windows 95.
But that's just the first ten years. After that, nobody can think of a single feature that they really need. Is there anything you need that Excel 2000 or Windows 2000 doesn't already do? With all due respect to my friends on the Office team, I can't help but feel that there hasn't been a useful new feature in Office since about 1995. Many of the so-called ""features"" added since then, like the reviled ex-paperclip and auto-document-mangling, are just annoyances and O'Reilly is doing a nice business selling books telling you how to turn them off.
So, it takes a long time to write a good program, but when it's done, it's done. Oh sure, you can crank out a new version every year or two, trying to get the upgrade revenues, but eventually people will ask: ""why fix what ain't broken?""
 
Failure to understand the ten-year rule leads to crucial business mistakes. 
Mistake number 1. The Get Big Fast syndrome. This fallacy of the Internet bubble has already been thoroughly discredited elsewhere, so I won't flog it too much. But an important observation is that the bubble companies that were trying to create software (as opposed to pet food shops) just didn't have enough time for their software to get good. My favorite example is desktop.com, which had the beginnings of something that would have been great if they had worked on it for 10 years. But the build-to-flip mentality, the huge overstaffing and overspending of the company, and the need to raise VC every ten minutes made it impossible to develop the software over 10 years. And the 1.0 version, like everything, was really morbidly awful, and nobody could imagine using it. But desktop.com 8.0 might have been seriously cool. We'll never know.
Mistake number 2. the Overhype syndrome. When you release 1.0, you might want to actually keep it kind of quiet. Let the early adopters find it. If you market it and promote it too heavily, when people see what you've actually done, they will be underwhelmed. Desktop.com is an example of this, so is Marimba, and Groove: they had so much hype on day one that people stopped in and actually looked at their 1.0 release, trying to see what all the excitement was about, but like most 1.0 products, it was about as exciting as watching grass dry. So now there are a million people running around who haven't looked at Marimba since 1996, and who think it's still a dorky list box that downloads Java applets that was thrown together in about 4 months.
Keeping 1.0 quiet means you have to be able to break even with fewer sales. And that means you need lower costs, which means fewer employees, which, in the early days of software development, is actually a really great idea, because if you can only afford 1 programmer at the beginning, the architecture is likely to be reasonably consistent and intelligent, instead of a big mishmash with dozens of conflicting ideas from hundreds of programmers that needs to be rewritten from scratch (like Netscape, according to the defenders of the decision to throw away all the source code and start over).
Mistake number 3. Believing in Internet Time. Around 1996, the New York Times first noticed that new Netscape web browser releases were coming out every six months or so, much faster than the usual 2 year upgrade cycle people were used to from companies like Microsoft. This led to the myth that there was something called ""Internet time"" in which ""business moved faster."" Which would be nice, but it wasn't true. Software was not getting created any faster, it was just getting released more often. And in the early stages of a new software product, there are so many important things to add that you can do releases every six months and still add a bunch of great features that people Gotta Have. So you do it. But you're not writing software any faster than you did before. (I will give the Internet Explorer team credit. With IE versions 3.0 and 4.0 they probably created software about ten times faster than the industry norm. This had nothing to do with the Internet and everything to do with the fact that they had a fantastic, war-hardened team that benefited from 15 years of collective experience creating commercial software at Microsoft.)
Mistake number 4. Running out of upgrade revenues when your software is done. A bit of industry lore: in the early days (late 1980s), the PC industry was growing so fast that almost all software was sold to first time users. Microsoft generally charged about $30 for an upgrade to their $500 software packages until somebody noticed that the growth from new users was running out, and too many copies were being bought as upgrades to justify the low price. Which got us to where we are today, with upgrades generally costing 50%-60% of the price of the full version and making up the majority of the sales. Now the trouble comes when you can't think of any new features, so you put in the paperclip, and then you take out the paperclip, and you try to charge people both times, and they aren't falling for it. That's when you start to wish that you had charged people for one year licenses, so you can make your product a subscription and have permission to keep taking their money even when you haven't added any new features. It's a neat accounting trick: if you sell a software package for $100, Wall Street will value that at $100. But if you can sell a one year license for $30, then you can claim that you're going to get recurring revenue of $30 for the next, say, 10 years, which is worth $200 to Wall Street. Tada! Stock price doubles! (Incidentally, that's how SAS charges for their software. They get something like 97% renewals every year.)
The trouble is that with packaged software like Microsoft's, customers won't fall for it. Microsoft has been trying to get their customers to accept subscription-based software since the early 90's, and they get massive pushback from their customers every single time. Once people got used to the idea that you ""own"" the software that you bought, and you don't have to upgrade if you don't want the new features, that can be a big problem for the software company which is trying to sell a product that is already feature complete. 
Mistake number 5. The ""We'll Ship It When It's Ready"" syndrome. Which reminds me. What the hell is going on with Mozilla? I made fun of them more than a year ago because three years had passed and the damn thing was still not out the door. There's a frequently-obsolete chart on their web site which purports to show that they now think they will ship in Q4 2001. Since they don't actually have anything like a schedule based on estimates, I'm not sure why they think this. Ah, such is the state of software development in Internet Time Land. 
But I'm getting off topic. Yes, software takes 10 years to write, and no, there is no possible way a business can survive if you don't ship anything for 10 years. By the time you discount that revenue stream from 10 years in the future to today, you get bupkis, especially since business analysts like to pretend that everything past 5 years is just ""residual value"" when they make their fabricated, fictitious spreadsheets that convince them that investing in sock puppets at a $100,000,000 valuation is a pretty good idea.
Anyway, getting good software over the course of 10 years assumes that for at least 8 of those years, you're getting good feedback from your customers, and good innovations from your competitors that you can copy, and good ideas from all the people that come to work for you because they believe that your version 1.0 is promising. You have to release early, incomplete versions - but don't overhype them or advertise them on the Super Bowl, because they're just not that good, no matter how smart you are.
Mistake number 6. Too-frequent upgrades (a.k.a. the Corel Syndrome). At the beginning, when you're adding new features and you don't have a lot of existing customers, you'll be able to release a new version every 6 months or so, and people will love you for the new features. After four or five releases like that, you have to slow down, or your existing customers will stop upgrading. They'll skip releases because they don't want the pain or expense of upgrading. Once they skip a release, they'll start to convince themselves that, hey, they don't always need the latest and greatest. I used Corel PhotoPaint 6.0 for 5 years. Yes, I know, it had all kinds of off-by-one bugs, but I knew all the off-by-one bugs and compensated by always dragging the selection one pixel to the right of where I thought it should be.
Make a ten year plan. Make sure you can survive for 10 years, because the software products that bring in a billion dollars a year all took that long. Don't get too hung up on your version 1 and don't think, for a minute, that you have any hope of reaching large markets with your first version. Good software, like wine, takes time.
	"
https://www.joelonsoftware.com/2001/07/17/20010717/,2001/07/17,2001-07-17T00:02:16+00:00,,Joel Spolsky,News,"
	""Now the trouble comes when you can't think of any new features, so you put in the paperclip, and then you take out the paperclip, and you try to charge people both times, and they aren't falling for it."" - From my latest irresponsible posting, Good Software Takes Ten Years. Get Used To It.
	"
https://www.joelonsoftware.com/2001/08/31/20010831/,2001/08/31,2001-08-31T00:02:26+00:00,,Joel Spolsky,News,"
	And You Thought You Had Source Control Problems Ray Ozzie sent me a link to a presentation given by Mark Lucovsky, a developer at Microsoft, about the Windows NT development process. 29 million lines of code. Source code takes up 50 gigabytes. Build takes 8 hours on a 4 CPU machine. 1000 machines in the ""stress test"" farm. No, they don't use SourceSafe. But I don't think CVS could handle it, either.
	"
https://www.joelonsoftware.com/2001/08/23/20010823/,2001/08/23,2001-08-23T00:02:25+00:00,,Joel Spolsky,News,"
	Ron Vogl writes: I did an internship at Microsoft in the summer of 1997, and at that time, Microsoft had two source-code control tools in use. Some groups did indeed use source-safe. The Outlook group, of which I was a temporary member, used an internal Microsoft tool called Source Library Manager, abbreviated SLM and pronounced either slim or slam depending on how you were feeling about it. SLM was command-line only, with a mix of SourceSafe- and CVS-style workings. From what I could gather from the interns in other groups, SourceSafe and SLM were used in roughly equal amounts.Yeah, I used SLM in the old days. Given how devoted Microsoft is to eating your own dog food, the fact that there are still groups that don't use SourceSafe says something about how bad that product must be. 
	"
https://www.joelonsoftware.com/2001/08/22/20010822/,2001/08/22,2001-08-22T00:02:24+00:00,,Joel Spolsky,News,"
	For today's topic, I answered some interesting questions readers have sent recently. ""What do you think are the important things students need to learn if they are to become good C++ programmers?"" ""I want to find out if there are any interesting tech companies in New York..."" ""I'd like to find out about Fog Creek's shrink-wrap strategy and results to date."" ""Does Microsoft use VSS for their projects?"" These and more... in today's installment of Ask Joel
	"
https://www.joelonsoftware.com/2001/08/15/20010815/,2001/08/15,2001-08-15T00:02:23+00:00,,Joel Spolsky,News,"
	I was interviewed by WebWord.com: ""If your software is going to be popular, you are going to have to deal with a million other things: writing manuals, creating good looking icons if you have a GUI, testing, recruiting good programmers, making a product that people want, usability testing, dealing with Norman the Cranky Tester, and about 100 other things that take up most of your time""
	"
https://www.joelonsoftware.com/2001/08/14/20010814/,2001/08/14,2001-08-14T00:02:22+00:00,,Joel Spolsky,News,"
	A study reported in the Journal of Experimental Psychology: Human Perception and Performance lends some credibility to my claim that software developers can't multitask. This study seems to be more concerned with rapid switching between two tasks, which they show incurs overhead. But I've noticed that almost universally, developers who have two major projects to work on, even if they alternate every other day, will not get as much done as if they do them sequentially. One thing I've seen time and time again is an entire team that is having trouble getting started on a new project after they've finished an old one. It can take weeks to get up to full-bore productivity on a new task again. The overhead of task switching can be huge. Typically you see individual developers overloaded with two or more projects because of severe time pressure and understaffing. Sometimes I'll come upon a software team that has a single developer ""working"" on three projects simultaneously. ""Task switching incurs overhead,"" I say. ""Why don't you have Bob do these tasks one after the other, instead of switching off during the day?"" ""Oh, we would never finish in time then. All three projects must be done within one month. Bob could never get them all done in one month if he did them one at a time."" This just proves that the schedule is completely unrealistic. Despite the fact that the multitasking dramatically reduces productivity, they're willing to do it because it obscures the schedule. It seems like each of those tasks takes about a month. Do them in sequence, and three months will elapse. Do them at the same time, and it's possible to deceive yourself that only a month will elapse. (In reality, six months will elapse and one task won't even get done.) Firewalls... More on firewalls: my latest idea is to buy an old Pentium 200 on ebay for $50, and use SmoothWall. Yeah, it's not as fun as buying $2500 worth of Sonicwall equipment, but it's sure going to be educational.
	"
https://www.joelonsoftware.com/2001/08/13/20010813/,2001/08/13,2001-08-13T00:02:21+00:00,,Joel Spolsky,News,"
	Firewalls We need a new firewall / NAT / VPN box for the office. If you know about these and could recommend one, please email me. [Update: thanks to everyone who wrote in. I think we're going with the SonicWall XPRS2. If you have any horrible experiences, please warn me!] Telemarketing Last week I got a call from MCI. ""Hi, this is your local phone company,"" they lied. ""We'd like to save you money."" ""Please take me off your list,"" I responded. ""List? I didn't put you on my list."" Now I was getting angry. I thought the law here was that they had to take you off their list if you insisted. But they refused. I hung up on them. That night, Jared told me that they are only required to respond if I use the exact words ""please put me on your do-not-call list"". Apparently the telemarketers are now being trained that unless they hear this magic phrase word for word, they should keep calling you. And call they did. Today, the same moron called me back. I told him the magic words: ""Please put me on your do-not-call list."" ""Oh, OK,"" he said. Same guy. So now I have proof that MCI actually has this insane policy, Jared is not just being paranoid. Why do they want to call me if they know it makes me angry? What kind of company would do that? It can't possibly help and can only hurt. If anyone has any insight into the messed up management process at this company that actually made them reach this decision, I'd love to hear it. If you live in New York State and don't like telemarketing calls, there is a web form you can fill out which makes it illegal for telemarketers to call you. I filled it out today. According to the web site, the next ""do not call"" directory will be published October 1 and telemarketers have until November 1 to stop calling me, or they will be subject to a $2000 fine. If enough people (and states) figure this out, maybe one day telemarketing will be worthless and nobody will bother any more.
	"
https://www.joelonsoftware.com/2001/08/08/20010808/,2001/08/08,2001-08-08T00:02:20+00:00,,Joel Spolsky,News,"
	I found a great resource for someone like me who knows how to design a software product and get it built, but doesn't know the first thing about marketing it. Luckily I found Rick Chapman. We arranged for a quick book swap - I sent him a copy of UI for Programmers, and he sent me a copy of his book, The Product Marketing Handbook for Software. I read the whole book in one weekend. This book is fantastic. It's the education you would receive if you captured a veteran of channel marketing and gave him a truth drug. Hours of nonstop, extremely useful info. What's a SPIF? Do you need a UPC? How do you get into the channel? Should you bother? What kind of deals will you have to cut to get retailers to stock and promote your software? It's a complete braindump covering just about everything you should know if you're thinking of creating shrink-wrap software. Priceless. There's a web site that goes along with it called SoftwareMarketSolution.com (I know, that's a mouthful.) Check it out, it's the Joel On Software of marketing.
	"
https://www.joelonsoftware.com/2001/08/05/20010805/,2001/08/05,2001-08-05T00:02:19+00:00,,Joel Spolsky,News,"
	VMWare Rocks I've been using VMWare for configuration testing. This is a program that lets you run multiple virtual ""computers"" in windows on your desktop. It runs on Linux or Windows NT/2000. Each virtual computer can have any Intel-compatible operating system (Any flavor of Linux, DOS, and all flavors of Windows work fine.) Each virtual computer gets its own IP address, its own hard drive, and access to the CD-ROM and floppy, and acts exactly like a real computer. You decide how much RAM to allocate to your machine. I've got a computer set up with a huge hard drive and 512 MB RAM for this purpose. It took all week, but I set up a couple of dozen operating system configurations: everything from Vanilla Windows 98 to Windows NT 4.0 to Windows 2000 to XP. I have entire domains running all on virtual machines; at one point I was running three machines at once: a domain controller, a machine with SQL Server 2000, and another machine with IIS. This allowed me to test really difficult FogBUGZ installation scenarios all on one computer. The coolest thing is that you can create ""undoable hard drives"" on your virtual machines. So every time I ran SETUP and it didn't work, with one click I could wipe out all the changes I had made to the hard drive and go back to a pristine Windows installation. (Testing on pristine computers is essential. Otherwise you may ship an installer which works perfectly on your developers' computers, because they have all kinds of goodies loaded, but which simply does not work on typical users' computers). This is such an excellent product that I think every tester, developer, and product support person should have it. It's also a great way to try out scary software (like Windows XP, Office XP, or the .NET Beta) without messing up your primary computer. It's a nice tool for product support: when a user calls up asking for help with a procedure in Windows NT 4.0, you can instantly boot up Windows NT 4.0 in a window and give them exact instructions for what to do. Finally, it's a nice way to run Linux software under Windows and vice-versa. I highly recommend it. (I do have one complaint about VMWare... every time you create a virtual hard drive, it's unpartitioned and unformatted. It took me almost three days to install an NT 4.0 system from scratch, because I had the hardest time figuring out that the NT 4.0 installer requires a FAT 16 formatted hard drive. It would be trivial for VMWare to ship some formatted ""hard drives"" on their CD-ROM). Software takes ten years in Russia too. 
	"
https://www.joelonsoftware.com/2001/09/24/20010924/,2001/09/24,2001-09-24T00:02:29+00:00,,Joel Spolsky,News,"
	News.com reports: ""Gartner remains concerned that viruses and worms will continue to attack IIS until Microsoft has released a completely rewritten release of [IIS] that is thoroughly and publicly tested....Gartner believes that this rewriting will probably not occur before the end of 2002."" Gartner seems to suffer the common but moronic fallacy that new or ""completely rewritten"" code is somehow less buggy than old code. IIS has been publically tested, for about six years now, on millions of web servers and with thousands of hackers trying to find bugs. Completely rewriting it would just introduce another set of bugs that would take another few years to find. Chances are that nobody on the current IIS team even remembers the bugs they fixed five years ago, even if they were on the team that long ago (unlikely), like the $DATA$ one and adding an extra period to the end of an ASP URL. Completely rewriting code is a big-time mistake common of immature developers with no real software experience. I would say that ""Gartner should know better"" but I don't have very high expectations of them.
	"
https://www.joelonsoftware.com/2001/09/12/20010912/,2001/09/12,2001-09-12T00:02:28+00:00,,Joel Spolsky,News,"
	Quiet day. The weather is perfect. The southern sky is still filled with white dust. I saw an old couple on the corner holding hands. They weren't going anywhere, just standing outside looking at the sky, happy to be here.
	"
https://www.joelonsoftware.com/2001/09/11/20010911/,2001/09/11,2001-09-11T00:02:27+00:00,,Joel Spolsky,News,"
	Michael and I tried to give blood, but the hospital had loud announcements on the PA saying ""keep away from the hospital, please do not mill around outside."" Volunteers told us that the blood donation centers were overloaded anyway and we should come back tonight or tomorrow. Up here on the Upper West Side, about 5 miles north of Ground Zero, I saw streams of people in business clothes walking home. I saw people planning to walk all the way up to the George Washington bridge and then across to New Jersey where they lived. All mass transit was stopped completely. The streets were very quiet around here, there was very little traffic. Many streets were completely closed to traffic. Friends in Brooklyn reported watching the buildings burn. Many people who lived in Brooklyn were stuck in Manhattan. We heard a few subways are running now. My friend Lisa had some business downtown today. When she got out of the subway, she saw all the chaos and went back down to the subway. She came to visit me uptown and is now trying to work her way home to Park Slope. (She made it. About half of the city's subway lines are running.) Jared (my boyfriend) is stuck in Connecticut for the night. He works there, in Old Greenwich, and all bridges into the city are closed, so he's spending the night with a friend from work. I'm going out to dinner now with some friends. It looks like tomorrow the city will be completely shut down, too. 8:00pm I spoke to a policeman in a restaurant. He said that 400 policemen and firemen were killed when the buildings collapsed. They were in there rescuing people. He said he will always remember the screams he heard from trapped police over the radio. (He also said that Israel was attacking Afghanistan. Police think the weirdest things.)
	"
https://www.joelonsoftware.com/2001/10/29/working-on-citydesk-part-four/,"Working on CityDesk, Part Four",2001-10-29T00:16:07+00:00,2016-12-05T19:33:29+00:00,Joel Spolsky,"Fog Creek Software, News","
	Boy, what a terrible weekend. I've come down with a cold. Fever. Runny nose. General malaise. And WININET.DLL.
WININET.DLL, you see, is a software file provided by Microsoft. It comes with Internet Explorer and with all versions of Windows since about 1996, and it was the bane of my weekend. And it illustrates a fascinating fact about how much software developers' day-to-day lives have changed in the last decade.
Here's what happened. Late on Friday afternoon I was setting up some new web servers designed to handle the increased load we're expecting when we ship CityDesk. One of the first things I did was try to use CityDesk to copy files to the new servers using the FTP protocol. We had a firewall set up that prevented FTP from going through. CityDesk froze up.
""No problem,"" I thought, ""I'll use passive-mode FTP, which can get through that firewall.""
That's when I noticed CityDesk doesn't support passive-mode FTP.
""OK, how hard can that be to implement? It's probably available as an option on the file transfer library we're using."" One checkbox and I'm done.
But ... where's the checkbox?
No mention of it in the documentation.
Searching the object file itself didn't turn up anything likely.
I checked Google Groups, formerly known as DejaNews. It's a complete archive of every UseNet discussion. This is where programmers ask each other questions about the most arcane topics. As I told Babak once: it's a big world out there. You're never the first person to have this problem.
After about five minutes searching, the conclusion was inescapable. Our file transfer library, which Microsoft gives away for free with the Visual Basic compiler, can't do passive-mode FTP.
OK, back to the drawing board. What are my choices? I wrote up a list:
Do without Passive FTP. This would make CityDesk useless to a large number of people, something I wasn't willing to do.
Purchase a commercial FTP library. Honestly, I've always had bad luck with commercial libraries, having discovered one too many times that their code quality is rarely up to the meticulous standards we set for Fog Creek. When I looked around the discussion groups where developers were discussing other FTP libraries, they always seemed to have scary bugs that I couldn't live with.
Use Microsoft's other file transfer library, the infamous WININET.DLL. This is actually what Microsoft Internet Explorer uses to transfer files, which, despite its dismal reputation, is used so widely that I thought it had to be reasonably bug free (by now, at least). Anyway, lots of programmers use WININET.DLL and if I run into trouble I'm sure to find ample discussion of the problems on DejaNews, er, Google Groups.
I thought that #3 seemed painless enough. In fact I was already using WININET.DLL somewhere else in our code to import web pages, using the HTTP protocol.
A search of Microsoft's online knowledge base revealed that you can't really do FTP with WININET.DLL from Visual Basic code; it does some complicated stuff with threads that mean that you have to call it from C or C++. I thought the easiest thing to do would be to create my own custom FTP control written in C++, which talked to WININET. I chose to use Microsoft's ATL library to create the custom control, because it makes the smallest files. ATL is the most complicated programming environment in the world, requiring a brain the size of Colorado and 10 years of solid experience to understand what's going on. I have studied ATL in depth three, maybe four times in my career and I can never remember all the bizarre template crap that's going on in there. Nobody can.
Yes, Virginia, it is possible to create a software development environment which is so difficult to use that no human being can do it. ATL and COM+ are my two favorite examples (the latter is so complicated that only one man on Earth, Don Box, actually understands everything that's going on). C++ itself comes pretty darn close. But most programmers are too macho to admit this.
Luckily, Microsoft provides some wizards with ATL which write all the hard code for you. If you want to do something unusual, you're on your own, so my motto was Nothing Unusual. No sudden moves. Just add some simple methods and events and get the hell outta there, hopefully with my brains non-exploded.
At one point, after I had written almost half the code, I discovered that one of the checkboxes that I had checked on the wizard which wrote the inscrutable ATL code for me was wrong. But once the code is written, it's written. For the life of me, I couldn't figure out what the checkbox had done and where to change it in the code. I searched MSDN (a gigabyte of documentation on programming Windows which I keep on my hard drive), the online knowledge base, and finally the entire Internet using Google, and didn't find an easy way to change it. So I created two entirely new projects using the wizard, checking the box in one case and not checking it in the other, and then ran WinDiff, which compares two entire directories listing all the differences, to find what the checkbox really changed so I could change it in my code. (Somewhere, I had to change a hardcoded number to 131473, because I wanted my controls to be visible at runtime. A classic example of why COM programming is not for humans.)
The Microsoft documentation for WinInet was pretty decent, as these things go, but not decent enough. In the page documenting FtpOpenFile, you find both of these mutually contradictory quotes:
""No file handle is returned""
""Return value: Returns a handle if successful""
Well, which is it? Empirically, it wasn't returning a file handle.
The next thing I discovered is that if there is a packet filter (a simple form of firewall) somewhere between you and the server, the code hangs trying to copy files. That's normal; it's the way of the Internet; there's nothing you can do about it. After a minute, WinInet will realize that packets are not getting through and will time out. But the user is likely to get impatient long before a minute is up and hit the Cancel button.
When you hit the Cancel button, my code tells WinInet to give up and close down the connection. But as I discovered, if you do this in one of these packet-filter situations, WinInet will simply crash, bringing your program down with it. It's clearly a bug in Microsoft's code. An exhaustive search of all my Internet sources found a couple of people reporting the same crashing behavior, but nobody had a workaround.
How can that be? I thought. Since Internet Explorer uses the exact same code, wouldn't Internet Explorer crash in the same situation?
I tried it. What I discovered is that Internet Explorer doesn't crash in this situation - it shows an hourglass and freezes for a couple of minutes, waiting for the time-out it knows it will get. This proves that Microsoft's programmers knew about this bug in WinInet and worked around it, instead of just fixing the code in the first place. Stupid stupid stupid. For the umpteenth time, I found myself dependent on a code library which had a crashing bug that was unacceptable in code I shipped. What are you supposed to do if you're the chef at Les Halles and your fishmonger is giving you smelly fish?
Another two hours of investigation and experimentation. Finally I decided that in this case, when the user hits the Cancel button, instead of freezing like Internet Explorer, I will simply hide the file transfer so it looks like the operation has been cancelled. In the background, invisible to the user, I'll wait around for the time-out to happen.
So, as I said, developers' lives have changed. All weekend I couldn't sleep. Tossing and turning in sweat-drenched sheets, I had feverish ATL nightmares. Sunday morning I got up at 3 am and coded for 4 hours just to avoid the bad dreams about Structured Exception Handling.
Ten years ago, to write code, you needed to know a programming language, and you needed to know a library of maybe 50 functions that you used regularly. And those functions worked, every time, although some of them (gets) could not be used without creating security bugs.
Today, you need to know how to work with libraries of thousands of functions, representing buggy code written by other people. You can't possibly learn them all, and the documentation is never good enough to write solid code, so you learn to use online resources like Google, DejaNews, MSDN. (I became much more productive after a coworker at Google showed me that you're better off using Google to search Microsoft's knowledge base rather than the pathetic search engine Microsoft supplies). In this new world, you're better off using common languages like Visual Basic and common libraries like WinInet, because so many other people are using them it's easier to find bug fixes and sample code on the Web. Last week, Michael added a feature to CityDesk to check the installed version of Internet Explorer. It's not hard code to write, but why bother? It only took him a few seconds to find the code, in VB, on the Web and cut and paste it.
We used to write algorithms. Now we call APIs. 
Nowadays a good programmer spends a lot of time doing defensive coding, working around other people's bugs. It's not uncommon to set up an exception handler to prevent your code from crashing when your crap library crashes.
Times have changed. Welcome to a world where the programmer who knows how to tap into other people's brains and experience using the Internet has a decisive advantage.
Working on CityDesk Part: 1 2 3 4 5 
	"
https://www.joelonsoftware.com/2001/10/29/20011029/,2001/10/29,2001-10-29T00:02:38+00:00,,Joel Spolsky,News,"
	For the umpteenth time, I found myself dependent on a code library which had a crashing bug that was unacceptable in code I shipped. What are you supposed to do if you're the chef at Les Halles and your fishmonger is giving you smelly fish? Working on CityDesk, Part Four (Tip: to search the Microsoft knowledge base using Google, add site:support.microsoft.com to your query.) Writing James Pryor is a popular young Harvard philosophy professor who shows The Matrix in class to illustrate points about Epistemology. His article Guidelines on Writing a Philosophy Paper is one of the best tutorials on any kind of writing: Pretend that your reader is lazy, stupid, and mean. He's lazy in that he doesn't want to figure out what your convoluted sentences are supposed to mean, and he doesn't want to figure out what your argument is, if it's not already obvious. He's stupid, so you have to explain everything you say to him in simple, bite-sized pieces. And he's mean, so he's not going to read your paper charitably. (For example, if something you say admits of more than one interpretation, he's going to assume you meant the less plausible thing.) I can think of no better advice for the kind of writing that programmers should be doing in designing and documenting their code.
	"
https://www.joelonsoftware.com/2001/10/23/20011023/,2001/10/23,2001-10-23T00:02:37+00:00,,Joel Spolsky,News,"
	I've been meaning to write more about the creation of CityDesk, but actually our beta is going extremely well, meaning, we're finding lots of bugs, so I've been incredibly busy. To start the beta off, we released CityDesk to about 100 testers. Most of the bug reports arrived within the first 24 hours. We gathered bugs and feedback from several sources: the CityDesk discussion group, email, a menu item we have called ""Send Beta Feedback,"" and Michael's excellent bug-catching feature (if CityDesk crashes, it offers to send a bug report to us, which goes right into FogBUGZ.) Indeed many of the bug reports we're getting now are just what we expected: configuration issues. People have funny versions of Internet Explorer. People have their computers set to display everything in large fonts. And something we were doing wrong happened to work OK in Windows 2000, but in NT 4.0, it failed. It would be almost impossible for a small company to find these kinds of bugs without beta testers. And it would have been impossible for us to handle the feedback from more than about 100 people! Next Monday, I hope, we'll release another version with almost everything fixed, this time to a larger group - about 200 more people (and of course the first 100 are welcome to download the update). The plan is that we'll have one last beta two weeks after that, putting us on schedule for releasing on or around December 1st.
	"
https://www.joelonsoftware.com/2001/10/19/10192001/,10/19/2001,2001-10-19T00:02:36+00:00,,Joel Spolsky,News,"
	Some of the nicest flash games I've ever seen.
	"
https://www.joelonsoftware.com/2001/10/17/working-on-citydesk-part-three/,"Working on CityDesk, Part Three",2001-10-17T00:15:55+00:00,2016-12-05T19:33:35+00:00,Joel Spolsky,"Fog Creek Software, News","
	Like all good hackers, I have been programming since junior high, using my dad's account on the University of New Mexico IBM 360 mainframe. But the first real computer science course I took was during the first year of college. The course covered C and assembler. It had hundreds of students, most of whom, like me, had been fooling around in Pascal or Basic since they were toddlers.
The course proceeded merrily until one day, the professor introduced pointers.
Dread.
Suddenly, the majority of the students in the class were in deep trouble. For some reason, some people just do not seem to be able to write code with pointers in it. They were born without the part of the brain that does indirection, I guess.
Since then, I've mentally divided the world into three groups. The largest group of people can't program at all. There's another, smaller group of people who can program, but not with pointers. And there's a tiny group of people who can program, even with pointers. Those elite few can even understand what it means to write CString*& in C++.
My first job at Microsoft was putting a decent scripting language into Excel. Although I was given free rein to implement whatever language I saw fit, we went with Basic for several reasons. (1) We had a Basic compiler team in house. (2) You didn't need pointers, which meant that (3) more people are comfortable using Basic than any other language. Indeed Visual Basic is the best-selling language product of all time.
Visual Basic is an extremely productive way to write code, especially GUI code. Want bold text on a dialog box? It's one click in VB. Now try doing it in MFC. You have to create a subclassed control, it's a big mess, you have to know all about LOGFONTS and Windows window subclassing and a bunch of other things and you need about three lines of code once you have the magic class.
But many VB programs are spaghetti, either because they're done as quick and dirty one-offs, or because they're written by hack programmers without training in object oriented programming, or even structured programming.
What I wondered was, what happens if you take top-notch C++ programmers who dream in pointers, and let them code in VB. What I discovered at Fog Creek was that they become super-efficient coding machines. The code looks pretty good, it's object-oriented and robust, but you don't waste time using tools that are at a level lower than you need. I've spent years writing code for C++/MFC and years writing code in Visual Basic, and let me tell you, VB is just much, much more productive. Michael and I had a good laugh today when we discovered somebody selling a beta crash-reporting product at $5000 for three months that Michael implemented in CityDesk in two days. (And we actually implemented a good part of ours in C++/ATL). And I also guarantee you that our Visual Basic code in CityDesk looks a lot better than most of the code you find written in macho languages like C++, because we're good programmers, and we write comments, and our variable names are well-chosen, and we do things the simple way, not the clever way, and so forth.
I'll go out on a limb here. In my years of experience, I have seen many language and programming fads come and go. But there's only ONE, that's right, ONE language feature I've ever seen that actually improves your productivity significantly. No, it's not object oriented programming; no, it's not intentional programming or assertions or programming by example or CASE or UML or XML or Java. The only thing that improves your programming productivity is using managed code - that is, using a language in which memory management is automatic. Java and .NET languages do this with garbage collection; VB does this with reference counting; I don't care how you do it, just let me concatenate strings without thinking about where the new bigger string will go and I'll be happy.
One of the things about Visual Basic is that it doesn't always give you access to the full repertoire of Windows goodies that you need to make a polished application. But what it does do, better than almost any other programming environment, is let you drop into C++ code (or call C APIs) when you're desperate or when you need that extra speed. For example, you can always get the HWND of a control and do native stuff to it, which is not the case in Java. As another example, a lot of the non-GUI, time-sensitive inner loops, like the word counter, in CityDesk are actually implemented in C or C++ for speed. This ability gave us the confidence to use Visual Basic even though it can't do everything and it tends to do string processing slowly. But since we're all C++ programmers, we have no fear of creating a DLL or OCX to count words, or parse script, or call a Windows API. So about 5% of CityDesk is actually in C or C++, and we'll probably move a little bit more of the code to C++ to speed up a few more inner loops.
Now, Visual Basic is not the perfect programming language. It's fairly object oriented but there are little things that you can't do with it, like have base classes with implementation reuse. It's limited to Windows. And the worst part about coding in VB is that people think you're not cool because your code doesn't have {'s and }'s. I can live with the shame if it means I'm more productive.
Philosophically, I think that C# has a bright future in the Windows GUI programming world. It's not as embarrassing as VB, and it uses the type of syntax which C/C++/Java programmers have come to love. VB programmers looking to upgrade can't upgrade painlessly to VB.NET, because there are so many major differences in the programming environment. Even Microsoft admits that you can't port from VB to VB.NET, you have to rewrite. And that's enough of a pain that many VB programmers will use this opportunity to look around at what else is out there. I think many will choose C#, because it's virtually the same language as VB.NET with slightly different syntax and vastly less stigma attached to it.
What about Java? Yes, I've used Java extensively, but unfortunately the language, the code libraries, and especially the GUI libraries are just too primitive for a commercial desktop application. I like the language and I appreciate the benefit of write-once-run-anywhere, but frankly not a lot of desktop software is sold for Sun Solaris and I think that WORA benefits Sun more than it benefits software developers, and I'm not willing to write an app that behaves in an inferior way on 95% of my customer's computers to benefit the 5% with alternate platforms. Every Java app LOOKS like a Java app, takes forever to launch, and just doesn't feel completely native. Since CityDesk's competitive advantage comes from having an excellent GUI, that's one area where I refuse to skimp.
I am virtually certain that I will now receive a million emails from lovers of tcl/tk, or Delphi, or C++ Builder, or NextStep, or Cocoa, or perl, or Python, or RealBASIC, or some other programming environment which may or may not be suitable for creating a professional Windows GUI. That's nice. I don't really want to get into a debate about language features or programming environment features - at some point, you have to stop debating and write code! I'm just trying to explain why we chose to use VB for the GUI part and C++ for time sensitive bits of code. If you do want to have a fun religious war over programming languages, please do so on the discussion group!
Working on CityDesk Part: 1 2 3 4 5 
	"
https://www.joelonsoftware.com/2001/10/17/20011017/,2001/10/17,2001-10-17T00:02:35+00:00,,Joel Spolsky,News,"
	The worst part about coding in Visual Basic is that people think you're not cool because your code doesn't have {'s and }'s. I can live with the shame if it means I'm more productive. Working on CityDesk, Part 3 PS If you've applied for the CityDesk beta, and haven't heard back, that's because we're waiting to fix a bunch of known bugs before we release to the next group of beta testers. It will make your life much easier and we won't get the same feedback twice. Discussion Board I've implemented a few more small, invisible-seeming refinements. The big news is that if you include your email address in a posting, it won't be easily harvestable by spammers.
	"
https://www.joelonsoftware.com/2001/10/16/20011016/,2001/10/16,2001-10-16T00:02:34+00:00,,Joel Spolsky,News,"
	Testing Does anybody have experience with GUI automated testing tools? I'm going to take advantage of the CityDesk beta to develop an automated test suite (so we don't keep breaking 2 things for every 1 thing we fix!) If you have any recommendations, please post them on the discussion group. It needs to support Windows apps and be the sort of thing that doesn't involve a salesperson visiting your office with a $6000 projector for the demo (in other words, not too expensive.) Snow Zillions of emails in my inbox. Big stack of bills to pay. Now I'm snowed under with all the stuff I was deferring until the beta shipped 
	"
https://www.joelonsoftware.com/2001/10/15/20011015/,2001/10/15,2001-10-15T00:02:33+00:00,,Joel Spolsky,News,"
	Server Go Boom and Spray Email Apparently every time our server went boom this morning (4 or 5 times) the stupid mailing list manager software decided it would be a nice idea to resend my notification email. If you got several copies of today's Joel on Software bulletin, I sincerely apologize and ask your forgiveness. Discussion Forums The CityDesk and Joel on Software forums are quite lively, but we've also got a relatively quiet FogBUGZ forum which is feeling lonely Fog Creek President Michael Pryor figured out a brilliant trick which makes it so that you see new topics, and topics that have followups you haven't read, in blue. If you've read the entire topic, it will be purple. And it's all done without keeping any state on the server. Server Go Boom The home-built server we've been using for fogcreek.com keeps crashing whenever the temperature goes above about 80 degrees in the server closet. Grump. I guess it's time to replace it with a real industrial strength server... I've ordered a couple of these. CityDesk Beta The CityDesk Beta has started trickling out, and within minutes we're getting bug reports from the field. Great! That's why we're doing a beta. We've been banging on this dang thing for months. We fixed 329 bugs. Then Brad W. downloads it, plays for ten seconds, and finds another. And we don't run so good on NT 4.0. (98, Me, 2000 and XP are all fine).
	"
https://www.joelonsoftware.com/2001/10/14/in-defense-of-not-invented-here-syndrome/,In Defense of Not-Invented-Here Syndrome,2001-10-14T00:15:32+00:00,2016-12-05T19:23:02+00:00,Joel Spolsky,"CEO, News","
	Time for a pop quiz.
 1. Code Reuse is:
a) Goodb) Bad
2. Reinventing the Wheel is:
a) Goodb) Bad
3. The Not-Invented-Here Syndrome is:
a) Goodb) Bad
Of course, everybody knows that you should always leverage other people's work. The correct answers are, of course, 1(a) 2(b) 3(b).
Right?
Not so fast, there!
The Not-Invented-Here Syndrome is considered a classic management pathology, in which a team refuses to use a technology that they didn't create themselves. People with NIH syndrome are obviously just being petty, refusing to do what's in the best interest of the overall organization because they can't find a way to take credit. (Right?) The Boring Business History Section at your local megabookstore is rife with stories about stupid teams that spend millions of dollars and twelve years building something they could have bought at Egghead for $9.99. And everybody who has paid any attention whatsoever to three decades of progress in computer programming knows that Reuse is the Holy Grail of all modern programming systems.
Right. Well, that's what I thought, too. So when I was the program manager in charge of the first implementation of Visual Basic for Applications, I put together a careful coalition of four, count them, four different teams at Microsoft to get custom dialog boxes in Excel VBA. The idea was complicated and fraught with interdependencies. There was a team called AFX that was working on some kind of dialog editor. Then we would use this brand new code from the OLE group which let you embed one app inside another. And the Visual Basic team would provide the programming language behind it. After a week of negotiation I got the AFX, OLE, and VB teams to agree to this in principle.
I stopped by Andrew Kwatinetz's office. He was my manager at the time and taught me everything I know. ""The Excel development team will never accept it,"" he said. ""You know their motto? 'Find the dependencies - and eliminate them.' They'll never go for something with so many dependencies.""
In-ter-est-ing. I hadn't known that. I guess that explained why Excel had its own C compiler.
By now I'm sure many of my readers are rolling on the floor laughing. ""Isn't Microsoft stupid,"" you're thinking, ""they refused to use other people's code and they even had their own compiler just for one product.""
Not so fast, big boy! The Excel team's ruggedly independent mentality also meant that they always shipped on time, their code was of uniformly high quality, and they had a compiler which, back in the 1980s, generated pcode and could therefore run unmodified on Macintosh's 68000 chip as well as Intel PCs. The pcode also made the executable file about half the size that Intel binaries would have been, which loaded faster from floppy disks and required less RAM.
""Find the dependencies - and eliminate them."" When you're working on a really, really good team with great programmers, everybody else's code, frankly, is bug-infested garbage, and nobody else knows how to ship on time. When you're a cordon bleu chef and you need fresh lavender, you grow it yourself instead of buying it in the farmers' market, because sometimes they don't have fresh lavender or they have old lavender which they pass off as fresh.
Indeed during the recent dotcom mania a bunch of quack business writers suggested that the company of the future would be totally virtual - just a trendy couple sipping Chardonnay in their living room outsourcing everything. What these hyperventilating ""visionaries"" overlooked is that the market pays for value added. Two yuppies in a living room buying an e-commerce engine from company A and selling merchandise made by company B and warehoused and shipped by company C, with customer service from company D, isn't honestly adding much value. In fact, if you've ever had to outsource a critical business function, you realize that outsourcing is hell. Without direct control over customer service, you're going to get nightmarishly bad customer service - the kind people write about in their weblogs when they tried to get someone, anyone, from some phone company to do even the most basic thing. If you outsource fulfillment, and your fulfillment partner has a different idea about what constitutes prompt delivery, your customers are not going to be happy, and there's nothing you can do about it, because it took 3 months to find a fulfillment partner in the first place, and in fact, you won't even know that your customers are unhappy, because they can't talk to you, because you've set up an outsourced customer service center with the explicit aim of not listening to your own customers. That e-commerce engine you bought? There's no way it's going to be as flexible as what Amazon does with obidos, which they wrote themselves. (And if it is, then Amazon has no advantage over their competitors who bought the same thing). And no off-the-shelf web server is going to be as blazingly fast as what Google does with their hand-coded, hand-optimized server.
This principle, unfortunately, seems to be directly in conflict with the ideal of ""code reuse good - reinventing wheel bad.""
The best advice I can offer:
If it's a core business function - do it yourself, no matter what.
Pick your core business competencies and goals, and do those in house. If you're a software company, writing excellent code is how you're going to succeed. Go ahead and outsource the company cafeteria and the CD-ROM duplication. If you're a pharmaceutical company, write software for drug research, but don't write your own accounting package. If you're a web accounting service, write your own accounting package, but don't try to create your own magazine ads. If you have customers, never outsource customer service.
If you're developing a computer game where the plot is your competitive advantage, it's OK to use a third party 3D library. But if cool 3D effects are going to be your distinguishing feature, you had better roll your own. 
The only exception to this rule, I suspect, is if your own people are more incompetent than everyone else, so whenever you try to do anything in house, it's botched up. Yes, there are plenty of places like this. If you're in one of them, I can't help you.
Discuss
	"
https://www.joelonsoftware.com/2001/10/14/20011014/,2001/10/14,2001-10-14T00:02:32+00:00,,Joel Spolsky,News,"
	Not-Invented-Here ""When you're working on a really, really good team with great programmers, everybody else's code, frankly, is bug-infested garbage, and nobody else knows how to ship on time."" In Defense of Not-Invented-Here Syndrome Discussion Board The cool new discussion board is done! Discuss The URL for the new discussion server is http://discuss.fogcreek.com/joelonsoftware . Underline Edit Boxes I like to make fun of designers who reinvent common widgets simply because they can. The big advantage of using a standard HTML edit box is consistency - more people will recognize it and know how to use it. But when you have a long form with many fields, all those lines start to look ugly, so I've gotten into the bad habit of using style sheets so that my edit boxes are just underlines, not boxes. This is ""consistent"" more with paper forms, and someone even told me he thought he was going to have to print out the page when he saw the beta application form using underlines. It probably does reduce learnability, marginally, to use underlines for edit boxes instead of boxes. But then again, they're really cool looking and I can't bear to switch them back to boxes. What's your opinion?
	"
https://www.joelonsoftware.com/2001/11/30/20011130/,2001/11/30,2001-11-30T00:02:50+00:00,,Joel Spolsky,News,"
	""Programmers should only use lower level tools for those parts of the product where they are adding the most value. For example, if you're writing a game where the 3D effects are your major selling point, you can't use an off the shelf 3D engine, you have to roll your own. But if the major selling point of your game is the story, don't waste time getting great 3D graphics - just use a library."" For your weekend reading pleasure, Rick Chapman interviewed me.
	"
https://www.joelonsoftware.com/2001/11/28/20011129/,2001/11/29,2001-11-28T00:02:49+00:00,,Joel Spolsky,News,"
	CityDesk Is Here! A few last-minute details, then - CityDesk is shipping! People can buy it! It's a great feeling after a lot of work. Time to say thank you. First and foremost, thanks to the CityDesk team who made this release happen on time. Thanks to our beta testers, for bearing with us through thick and thin and five beta releases, for trying CityDesk and building your sites with it. Thanks to our families and friends for supporting us while we worked late. Thanks to you, Joel on Software readers, for bearing with me while I stopped writing about software in the abstract and spent some time doing it. It's been an exciting period and I'm going to sleep for a few months. Do you have a T3? The starter edition of CityDesk is free. But you can't download the free version yet because our office T1 can't handle the load and it will take a while to get the software up on Tucows. In the meantime, we're looking for a volunteer with a lot of extra bandwidth who is willing to mirror the free version for a few weeks until we have a permanent server for it with lots of bandwidth. Please email me if you can do this. The SETUP is 8 MB and we are expecting thousands of downloads in the first few days - so don't volunteer unless you really have a ton of excess bandwidth that you'd be willing to donate Thanks. Cool, We Got Mentioned In Australia Sydney's IT News: ""Most of all, Spolsky wants people to want his product. He writes: 'My number one priority is to make an application that's easy to use so that people like it, so that they tell their friends about it, so that everybody buys it and we have to hire full-time employees just to slit open the envelopes and take out the cheques.'"" Actually, I think I said ""checks!""
	"
https://www.joelonsoftware.com/2001/11/27/20011127/,2001/11/27,2001-11-27T00:02:48+00:00,,Joel Spolsky,News,"
	The last few days before shipping a product should be extremely quiet, as the rate of incoming bugs approaches zero. That's where we are now. I've been putting the final touches on a new version of Fog Creek's website (you can see a sneak preview here) and taking the word ""Beta"" out of the code wherever it appears. We're likely to go live this week - exactly according to the schedule we set for ourselves six months ago.
	"
https://www.joelonsoftware.com/2001/11/22/20011122/,2001/11/22,2001-11-22T00:02:47+00:00,,Joel Spolsky,News,"
	Happy Thanksgiving! 
	"
https://www.joelonsoftware.com/2001/11/20/a-hard-drill-makes-an-easy-battle/,A Hard Drill Makes an Easy Battle,2001-11-20T00:14:55+00:00,2016-12-05T19:19:56+00:00,Joel Spolsky,"Rock star developer, News","
	I can't say enough nice things about VMWare. This program has been amazingly helpful during the last few weeks as we tried to get CityDesk to work on every known version of 32-bit Windows. I have set up dozens of virtual machines, everything from a simple DOS partition (helpful as a starting point for installing other OSs), a bunch of combinations of NT 4.0, Chinese and Hebrew Win2K (even though our program is in English and doesn't do anything fancy, we had various bugs that were revealed on these systems), assorted versions of Win 95/98/Me going all the way back to the August, 1995 release, even a small network of machines with a primary domain controller which we used for testing FogBUGZ setup.
 
Getting code to work on the entire universe of Windows machines is a lot of work. That's the real appeal of ""write once, run anywhere"" systems like Java. In theory, if you use the Java Virtual Machine, the burden is on the VM vendor to provide compatibility with all these platforms. In reality, as Java programmers learned, code is just too fragile for this to work very well. When I developed a game with Java I learned that Java's inability to guarantee exactly when threads would run (a seemingly harmless concession to the fact that CPU scheduling is basically unpredictable) actually meant that on the Macintosh, some threads got starved, um, forever, basically, until the other threads tried to do i/o in fact, which is not what I had assumed and made my game not very challenging on Macs. (This was in 1996. Don't email me with workarounds, fixes, or to say that this bug has been fixed.)
Yesterday's Bug Du Jour is an example of the kind of thing that trips people up. Michael was allocating some memory using the ancient Windows API GlobalAlloc. Later, he was calling a function GlobalSize to determine the size of that memory. On our development systems (Windows 2000) GlobalSize returns the same value as the block you allocated. Allocate 13 bytes, and GlobalSize will return 13.
We got a bug report that ""Copy and Paste don't work"" from a user with Windows 98. As you see from the screenshot above, I've got a Windows Me VM set up with VB6. Stepping through the code in the debugger I noticed the GlobalSize call, and remembered from the days of Win 95 that GlobalSize used to return the size of the actual allocated block, which was larger than you allocated and usually a multiple of 64. This led to the bug.
Now, the programmer at Microsoft who changed the behavior of GlobalSize probably thought he wasn't breaking anything. The documentation for the function ""GlobalSize"" says clearly, ""the size of a memory block may be larger than the size requested when the memory was allocated."" In fact the Microsoftee probably thought it was a minor and harmless improvement to GlobalSize to have it always return the size that you requested. Obviously any old code, that doesn't trust the return value from GlobalSize, will continue to work. So why not improve the function?
Not every programmer studies every line of the documentation for every function they use, and if the code is working, they tend to move on to something else. And it's not like everything is documented all that well - the type of minutiae that I'm talking about here rarely gets discussed in documentation. And this is where you get these issues. The rest of the world discovered this problem, long the bane of WINE programmers, when the second web browser shipped, and suddenly everybody was noticing how the bugs they had counted on to make their pages look kewl weren't there any more. As we speak zillions of HTMLers are bemoaning the fact that IE6 now adheres to the standard for what <CENTER> does to the text inside a table, and so their pages that looked left-justified look like wedding invitations in IE6.
How did we get into this mess? Larry Wall famously said, ""People understand instinctively that the best way for computer programs to communicate with each other is for each of the them to be strict in what they emit, and liberal in what they accept."" I think that the evolution of HTML has proven that this isn't such a great idea. In fact, the stricter the API is about its input, the more likely the code is going to work in funny situations. The designers of Java got it right when they decided that nothing about the Java spec should leave any choice to the compiler developers (at least, not in the gratuitous way that C did, where the size of basic data types was not fixed). A better quote comes from Russian Field Marshal Suvorov: ""A hard drill makes an easy battle."" You want your compiler and your development environment to be as strict as possible; you want it to literally generate random return values for GlobalSize so that you don't get into the habit of counting on something that won't be there everywhere; you want to use French international settings on Chinese Windows 2000 with an absurd color scheme, DVORAK keyboard, trackball, 640x480 VGA mode, and huge ugly fonts on your development system so that you remember to bake in the code that adjusts for all these things. Then your application will be buff and strong and it will laugh in the face of wimpy problems like people who use commas instead of dots as the decimal. Ha. I eat commas for breakfast, your code will say, with a Russian accent.
Anyway, this is what it takes to get software that works on hundreds of millions of computers. Those of you who develop apps that only have to run on one computer or in a controlled environment have it easy, but you're getting flabby. One of these days you'll need to get it to run on a second computer and you'll need to pull an all nighter, installing a complete development environment on that computer and debugging for two hours, before you discover that you didn't account for the possibility of spaces in the installation file path because the first computer didn't have them. 
Hopefully in the future the concept of a Virtual Machine, whether it's Java, .NET, or something else, will alleviate this pain, but we ain't there yet. For now I'm happy that with ten minutes of debugging, I can make my app work for all the people who like pink on orange text and set up Windows accordingly. We spent probably 3 weeks of work, out of a 1 year development cycle, fixing configuration bugs. A small price to pay to increase the size of our potential customer base from just US Windows 2000 to the entire universe of NT 4, 95, 98, Me, and XP, worldwide. Cool.
	"
https://www.joelonsoftware.com/2001/11/20/20011120/,2001/11/20,2001-11-20T00:02:46+00:00,,Joel Spolsky,News,"
	Larry Wall famously said, ""People understand instinctively that the best way for computer programs to communicate with each other is for each of the them to be strict in what they emit, and liberal in what they accept."" I think that the evolution of HTML has proven that this isn't such a great idea. In fact, the stricter the API is about its input, the more likely the code is going to work in funny situations. The designers of Java got it right when they decided that nothing about the Java spec should leave any choice to the compiler developers (at least, not in the gratuitous way that C did, where the size of basic data types was not fixed). A better quote comes from Russian Field Marshal Suvorov: ""A hard drill makes an easy battle."" You want your compiler and your development environment to be as strict as possible; you want it to literally generate random return values for GlobalSize so that you don't get into the habit of counting on something that won't be there everywhere; you want to use French international settings on Chinese Windows 2000 with an absurd color scheme, DVORAK keyboard, trackball, 640x480 VGA mode, and huge ugly fonts on your development system so that you remember to bake in the code that adjusts for all these things. Then your application will be buff and strong and it will laugh in the face of wimpy problems like people who use commas instead of dots as the decimal. Ha. I eat commas for breakfast, your code will say, with a Russian accent. A Hard Drill Makes an Easy Battle
	"
https://www.joelonsoftware.com/2001/11/16/20011116/,2001/11/16,2001-11-16T00:02:45+00:00,,Joel Spolsky,News,"
	I noticed that people were putting HTML tags in discussion group postings, and they didn't know what to do about URLs. So I added some tiny text below the edit box where you type your posting... not that anybody reads tiny text, but we'll see if it helps! I've long believed that tiny changes in the user interface of any kind of community software result in dramatic changes in the character of the community that you create. I noticed this way back in college, when CompuServe forums generally had two-line postings and nobody ever quoted other people, but Usenet newsgroups had lengthy postings with 21-line ASCII art signatures and 50% quoting. Usenet resulted in the ultimate pathology: people quoting an entire three page article, and inserting their tedious nitpicks between every two lines. My own discussion software does not have threading. ""Threading"" is technical jargon for a discussion feature where different people can branch in different directions by replying to replies. You end up with a tree of conversation. Most forum software has this feature and some people were rather angry that mine doesn't. I first noticed the value of one-train topics using the echo community software, which is, in all other respects, excruciatingly bad. Something interesting happens sociologically when you don't have threading: the conversation is forced along one train of thought. People feel like they can respond to the original inquiry, or they can respond to the last post, but if they want to nitpick about the third post and there are already twenty more posts after that, it's just too late. This seems to eliminate the most gratuitous trivial ""yes, I agree"" or ""you nitwit, you misspelled that"" kind of posting which makes it boring to read other forums. The other thing which eliminates them is that there's no automatic mechanism to quote other people. Sheer laziness will prevent most people from tagging on comments that aren't an interesting extension to the current thread. If you really want to set off on a tangent, you have to write something like ""I'd like to go back to what X said earlier..."" which actually makes the whole topic read more coherently. Another mechanism for eliminating trivial and uninteresting postings is the slashdot method of having moderators hide them. Theoretically, you can set your threshold high on slashdot so you only see the most interesting posts, but this gives the conversation a choppy feel when you're reading it. TechInterview Michael's TechInterview is back up and running, with its own discussion group. He's moved it from Manila to CityDesk, which allowed us to completely decommission the Manila server.
	"
https://www.joelonsoftware.com/2001/11/14/20011114/,2001/11/14,2001-11-14T00:02:44+00:00,,Joel Spolsky,News,"
	Books It's about time that I updated my crufty old list of recommended books. What books should I have up there?Ground rules: to keep this conversation on track, everybody gets to vote for ONE book, and one book only. I really want to hear what people think is the SINGLE best book on ""painless software management."" CityDesk, Part Five Now we're thanking our lucky stars that we didn't have a bunch of stupid venture capitalists forcing us to copy all the other content management companies, and we're grateful that we're not in Silicon Valley where everyone meets at Bucks and Stanford University seminars and copies each other's bad ideas, because the one thing we've heard from everybody who's tried CityDesk, consistently, is that CityDesk is the easiest content management software they've ever seen, full stop. And we got this ease-of-use because we believed certain things about software. Working on CityDesk, Part Five. Alan Cooper: ""My advice to Microsoft is to abandon the browser. The browser is a red herring; it's a dead end. The idea of having batched processing inside a very stupid program that's controlled remotely is a software architecture that was invented about 25 years ago by IBM, and was abandoned about 20 years ago because it's a bad architecture. We've gone tremendously retrograde by bringing in Web browsers... We have stepped backward in terms of user interface, capability, and the breadth of our thinking about what we could do as a civilization. The browser is a very weak and stupid program because it was written as essentially a master's thesis inside a university and as an experiment...."" Alan invented Visual Basic, which is the language we used for CityDesk, so it's no big coincidence that I agree with him so wholeheartedly. And it's true: from a UI architecture perspective, browsers are CICS + fonts. CICS is an extremely ancient interactive system used with IBM mainframe terminals. Basically, the server sends a text-mode, full-screen form down to the ""smart"" terminal. The user fills in the form and sends it back to the server. And that's about all you can do from a UI perspective. The mainframe is happy because it can basically be about as stupid as a web server: queue up all incoming requests and deal with them sequentially. The user suffers because the UI is abysmal and the programmer suffers because you can't MAKE a good UI no matter how hard you try. 
	"
https://www.joelonsoftware.com/2001/11/13/working-on-citydesk-part-five/,"Working on CityDesk, Part Five",2001-11-13T00:16:04+00:00,2016-12-05T19:33:22+00:00,Joel Spolsky,"Fog Creek Software, News","
	As promised I've been writing a series of articles about the creation of CityDesk. The primary purpose of these articles is to share the reasoning behind some of the decisions we made as a software company, and the techniques we used in developing our flagship software product. Today I want to talk about the five guiding principles that shaped the architecture.
One of the biggest decisions we made about CityDesk was to make a standalone Windows executable. With all the hubbub about web services, not to mention the noisy Internet dotcom boom we just lived through, this was a non-obvious decision. Why is CityDesk one of those old-fashioned programs you download and run, instead of, say, a web site you go to, in the style of Blogger or Atomz? Or a web server you install, like the Big Iron content management systems (Interwoven, Vignette StoryServer, etc.)?
An even more non-obvious decision was not to use XML. People who were a little bit too close to Silicon Valley groupthink looked at us like we were crazy because CityDesk is not based on XML and is not delivered through a web browser.
Now we're thanking our lucky stars that we didn't have a bunch of stupid venture capitalists forcing us to copy all the other content management companies, and we're grateful that we're not in Silicon Valley where everyone meets at Bucks and Stanford University seminars and copies each other's bad ideas, because the one thing we've heard from everybody who's tried CityDesk, consistently, is that CityDesk is the easiest content management software they've ever seen, full stop. And we got this ease-of-use because we believed certain things about software.
1. You can't do good UIs in a web browser. 
When we started building CityDesk we kept hearing one thing about Big Iron content management systems, which were all web-browser-based. Despite the fact that these systems had web-based editing interfaces and advanced workflow, we kept hearing that in real life, reporters created their content in Microsoft Word, did the workflow the old way (email), and only at the very last minute, a secretary opened the Word file and cut and pasted it into the content management system.
Why?
Because nobody wants to compose in a big TEXTAREA on an HTML page.
There are too many things that are impossible to deliver properly in a web browser. First of all, there's the latency. Even if the web server is running on your own machine, round trips still take a certain amount of time, so all web applications feel somewhat sluggish. Second, there is no decent text editing widget for web browsers. With CityDesk as a Windows program, I can give you a feature where you can drag a picture from the desktop into an article. There is no way to create that kind of user interface through the web. I can keep a word count in the corner of the screen and update it in the background whenever you stop typing. You can use Ctrl+S to save without losing your place in the document - something many writers have learned to do regularly. (Good luck creating a word processor inside a web browser that doesn't instantly lose everything, without prompting, if the user closes the browser). CityDesk has menus. Remember menus? And they work exactly like you expected them to, because the web browser doesn't have it's own menu, with a bunch of irrelevant commands, that wants to eat the Alt key. We don't have to waste any screen real estate on browser geegaws (like ""back"" buttons and spinning e-globes) that have no meaning for CityDesk. We get our own icon in the taskbar instead of looking like all the other web browsers you have open. I could go on for days about the nice UI things we can do in a Windows application that just can't be done with a web browser. In fact there's a whole chapter about it in the printed edition of my book.
""Sure,"" you say, ""you can't get as slick an app through the web, but you get ubiquity! People can go to an Internet cafe in Phuket and ..."" Yeah, OK, that sounds great for Hotmail. And in the future we will build a typical compromise-laden web interface to CityDesk for those times when you're at the beach in Thailand. In the meantime, my number one priority is to make an application that's easy to use so that people like it, so that they tell their friends about it, so that everybody buys it and we have to hire full time employees just to slit open the envelopes and take out the checks.
2. XML is a Dumb Format For Storing Data
I'm not sure why XML got so sexy. It has its advantages; it's sure a good idea for data interchange or for all those little files you need to store settings. But for real work it just can't do what a solid, multiuser, relational database can do. The next time some uninformed analyst at Gartner or Giga or Forrester tells you ""in the future, everything will be XML,"" ask them how to do ""SELECT author FROM books"" fast with XML. Hint: you can't. It has to be slow. XML is not the way to store a lot of data. Now tell me how to insert a new book at the beginning of the table without massive bitblts. Of course, I doubt if there is an analyst in one of those companies who would even understand that sentence, but that's life. In the meantime, CityDesk uses a relational database. Over and out.
3. Most People Don't Control Their Web Servers
Of all the people in the world who need to put data up on the web, only a tiny percentage of them have any control whatsoever over what software runs on their web server. We decided that CityDesk has to be an all-client application because probably 95% of the people who maintain web sites simply do not have the ability to install a content management system on their web server, even if they wanted to. We reduced the server requirements of CityDesk to (a) any web server that knows how to serve static files and (b) ftp or file copy access to that server. We think this will open up content management to a whole new universe of potential users.
4. If You Can Only Do One Platform, Do Windows.
I'd love to have a Mac version and a Linux version, but they are not good uses of limited resources. Every dollar I invest in CityDesk Windows will earn me 20 times as many sales as a dollar invested in a hypothetical Mac version. Even if you assume that Mac has a higher percentage of creative and home users, I'm still going to sell a heck of a lot more copies on Windows than I could on Mac. And that means that to do a Mac version, the cost had better be under 10% of the cost of a Windows version. Unfortunately, that's nowhere near true for CityDesk. We benefit from using libraries that are freely available on Windows (like the Jet multiuser ACID database engine and the DHTML edit control) for which there are no equivalents on the Macintosh. So if anything, a Mac port would cost more than the original Windows version. Until somebody does something about this fundamental economic truth, it's hard to justify Mac versions from a business perspective. (Incidentally, I have said time and time again, if Apple wants to save the Mac, they have to change this equation.)
And don't get me started about Linux. I don't know of anyone making money off of Linux desktop software, and without making money, I can't pay programmers and rent and buy computers and T1s. Despite romantic rhetoric, I really do need to pay the rent, so for now, you're going to have to rely on college kids and the occasional charitable big company for your Linux software.
5. Content Management Can't Require Programmers
One of the reasons Big Iron content management costs so much is the team of programmers it takes to figure out the thing and set it up. Even the free and low-cost content management systems are designed by geeks for geeks. People have said to me that there's no market for CityDesk because ""with XML and XSL it's a solved problem.""
Uh huh. Thanks. Even I can't figure out XML and XSL, and I'm pretty sharp.
We decided that everything in CityDesk has to be simple enough for web designers and HTMLers, who are not necessarily programmers. And for the end-user, even HTML is too much. To the end-user CityDesk can't be any more complicated than a WYSIWYG word processor.
The rule of thumb with ease-of-use is that if you make your program 10% easier, you'll double the potential number of users of your product. In CityDesk we made absolutely no compromises on ease of use. Sure, it's not the most powerful system out there. We'll compromise on that. And you can't update your blog from an Internet Cafe in Bali. Another compromise. But I guarantee you that any HTMLer can create CityDesk sites, and anyone who can use a word processor can manage a site that was created for them by an HTMLer, and you'll never need a programmer.
Summary
All in all we made a bunch of decisions based on a world view that, frankly, was not very popular during the Internet boom. There was a time when you couldn't get funding for a company that wasn't a web pure play. And the lemming VCs thought that they had to do what all the other VCs were doing: pure web interfaces. To which I say, Thank you! Thank you for keeping your dumb overfunded companies out of my way, because now, over here in GUI land, I can't find any real competition, and now you're not funding anyone, so it's smooth sailing for Fog Creek.
Working on CityDesk Part: 1 2 3 4 5 
	"
https://www.joelonsoftware.com/2001/11/09/20011109/,2001/11/09,2001-11-09T00:02:43+00:00,,Joel Spolsky,News,"
	Prakash wants to know ""how all of the esteemed contributors in this discussion list came across your website."" CityDesk Beta Last night at around 10 PM we fixed the last (known) bug in CityDesk Beta 2. This morning we're going to do some smoke tests and last-minute banging, and if all goes well, we'll release Beta 3 today. For this beta we found, and fixed, some of the nastiest, hairiest, scariest bugs that we thought we'd never be able to fix. A mysterious crash that couldn't be reproduced reliably. Occasional mauling of HTML code by the WYSIWYG editor, and even more occasionally completely destroying HTML code. (That bug, incidentally, was in a Microsoft library function, which we reimplemented ourselves.) Mysterious startup crashes when you're using a non-Latin1 version of Windows (Hebrew, Greek, etc.) Inability to run as a normal user on Windows NT. And we sped up incremental publishing dramatically by caching CRCs. Update, 7 PM. We managed to release Beta 3 today - four times! Scary little show-stopper bugs kept popping up. I'm praying that the rate at which show-stopper bugs keep popping up goes down dramatically so I can take the whole weekend off for a change. Fog Creek Software: ""We Make Lots of Bugs, But At Least We Fix Them!"" 
	"
https://www.joelonsoftware.com/2001/12/30/20011230/,2001/12/30,2001-12-30T00:03:01+00:00,,Joel Spolsky,News,"
	The People wanted a Made With CityDesk banner. Who am I to argue with The People? Doc says, ""When the software industry is mature, it will look a lot like the construction industry."" This is a common theme. A lot of people complain about how the creation of software suffers from all kinds of problems that mature professions (construction, civil engineering, etc) don't. The key problem is always that the software coding process doesn't seem to be reproducible and predictable. Programmers think things will take 10 weeks and then they take 20 weeks, and they have weird bugs that you would never tolerate from a bridge built by a civic engineer. Implicit in the claim that the software industry is ""immature"" is the belief that this is just because we haven't learned all the tricks yet to getting reproducible results. But this idea rests on a falsehood. The unique thing about software is that it is infinitely clonable. Once you've written a subroutine, you can call it as often as you want. This means that almost everything we do as software developers is something that has never been done before. This is very different than what construction workers do. Herman the Handyman, who just installed a tile floor for me, has probably installed hundreds of tile floors. He has to keep installing tile floors again and again as long as new tile floors are needed. We in the software industry would have long since written a Tile Floor Template Library (TFTL) and generating new tile floors would be trivial. (OK, maybe there would be six versions of the library, one for Delphi, one for perl, etc. And some sick puppy programmers like me would rewrite it. But only once, and I would use it everywhere I needed a tile floor, and I would try to convince my clients that their back lawn would look really nice with tile instead of grass.) In software, the boring problems are solved. Everything you do is on the cutting edge by definition. So by definition it is unpredictable. That's why software has more of a science nature than a construction nature.
	"
https://www.joelonsoftware.com/2001/12/26/20011226/,2001/12/26,2001-12-26T00:03:00+00:00,,Joel Spolsky,News,"
	Kevin wants to hear about people's experience with pair programming. (I'm curious too!)
	"
https://www.joelonsoftware.com/2001/12/25/getting-things-done-when-youre-only-a-grunt/,Getting Things Done When You’re Only a Grunt,2001-12-25T00:15:11+00:00,2016-12-05T19:05:58+00:00,Joel Spolsky,"New developer, News","
	This site is supposed to be about software management. But sometimes you don't have the power to create change in your organization by executive fiat. Obviously, if you're just a grunt programmer at the bottom of the totem pole, you can't exactly order people to start creating schedules or bug databases. And in fact even if you're a manager, you've probably discovered that managing developers is a lot like herding cats, only not as fun. Merely saying ""make it so"" doesn't make it so.
It can be frustrating when you're working in an organization that scores low on The Joel Test. No matter how good your code is, your coworkers write such bad code that you're embarassed to be associated with the project. Or management is making bad decisions about what code to write, so you're forced to waste your talent debugging the AS/400 version of a retirement-planning game for kids.
You could just leave, I suppose. But presumably, there's some reason you're stuck there. The stock options haven't quite vested, there's no better place to work in Podunk, or perhaps your boss is holding someone you love hostage. In any case, dealing with life on a bad team can be infuriating. But there are strategies for improving your team from the bottom, and I'd like to share a few of them.
Strategy 1 Just Do It
A lot can be done to improve the project just by one person doing it. Don't have a daily build server? Make one. Set your own machine up with a scheduled job to make builds at night and send out email results. Does it take too many steps to make the build? Write the makefile. Nobody does usability tests? Do your own hallway usability tests on the mailroom folks with a piece of paper or a VB prototype.
Strategy 2 Harness the Power of Viral Marketing
Many of the Joel Test strategies can be implemented by a single person on an uncooperative team. Some of them, if done well, will spread to the rest of the team.
For example, suppose nobody on your team can be persuaded to use a bug database. Don't let it bother you. Just keep your own. Enter bugs that you find in your own code. If you find a bug that somebody else really should fix, assign the bug to them using the bug database. If you have good bug tracking software, this will send them an email. But now, you can keep sending them emails if they don't fix the bug. Eventually, they'll see the value of bug tracking and start to use the system as it was intended. If the QA team refuses to input bugs to the bug tracking system, simply refuse to listen to bug reports through any other channel. About the three-thousdandth time that you say to people, ""listen, I'd love to fix that, but I'm going to forget. Can you enter a bug in the system?"" they'll start using the database.
Nobody on your team wants to use source control? Create your own CVS repository, on your own hard drive if necessary. Even without cooperation, you can check your code in independently from everybody else's. Then when they have problems that source control can solve (someone accidentally types rm * ~ instead of rm *~), they'll come to you for help. Eventually, people will realize that they can have their own checkouts, too.
Strategy 3 Create a Pocket of Excellence
The team won't make schedules? Or specs? Write your own. Nobody's going to complain if you take a day or two to write a minimal spec and schedule for the work you're about to do.
Get better people into the team. Get involved in hiring and interviewing, and recruit good candidates to join the team.
Find the people who are willing to improve and capable of it, and get them on your side. Even on poor teams, you're likely to have some smart people who just don't have the experience to create great code. Help them out. Set them up to learn. Read their code checkins. If they do something stupid, don't send them a snooty email explaining what's stupid about their checkins. That will just make them angry and defensive. Instead, innocently report the bug that you know is the result of the checkin. Let them figure out what's causing it. When they find the bug for themselves, they'll remember that lesson a lot better.
Strategy 4 Neutralize The Bozos
Even the best teams can have a bozo or two. The frustrating part about having bad programmers on your team is when their bad code breaks your good code, or good programmers have to spend time cleaning up after the bad programmers.
As a grunt, your goal is damage-minimization, a.k.a. containment. At some point, one of these geniuses will spend two weeks writing a bit of code that is so unbelievably bad that it can never work. You're tempted to spend the fifteen minutes that it takes to rewrite the thing correctly from scratch. Resist the temptation. You've got a perfect opportunity to neutralize this moron for several months. Just keep reporting bugs against their code. They will have no choice but to keep slogging away at it for months until you can't find any more bugs. Those are months in which they can't do any damage anywhere else.
Strategy 5 Get Away From Interruptions
All happy work environments are alike (private offices, quiet working conditions, excellent tools, few interruptions and even fewer large meetings). All unhappy work environments are unhappy in their own way.
The bad news is that changing the working environment is almost impossible in virtually any company. Long term leases may mean that even the CEO can't do anything about it. That's why so few software developers get private offices. This hurts their companies in at least two ways. First, it makes it harder to recruit top notch developers, who will prefer the firm that gives them cushier conditions (all else being equal). Second, the level of interruptions can dramatically reduce the productivity of developers, who find it impossible to get into the zone and stay in it for any length of time.
Look for ways to get out of this environment. Take a laptop to the company cafeteria, where there are lots of tables that are empty most of the day (and nobody can find you). Book a conference room for the whole day and write code there, and make it clear through the preponderance of checkins just how much more work you get done when you're in a room by yourself. The next time there's a crunch on and your manager asks you what you need to Get This Done By Tomorrow, you know what to say. They'll find you an office for the day. And pretty soon they'll start wondering what they can do to keep that productive thing going year round.
Come into work late and leave late. Those hours after the rest of the company goes home can be the most productive. Or, if you're on a team of developers who regularly come in late, get into work at 9 am. You'll do more work in the two hours before other people come in and start bothering you than you do in the rest of the day.
Don't keep your email or IM client running. Check your email every hour, if you want, but don't keep it running.
Strategy 6 Become Invaluable
None of these strategies work if you're not really an excellent contributor. If you don't write good code, and lots of it, you're just going to be resented for messing around with bug databases when you ""should be"" writing code. There's nothing more deadly to your career than having a reputation of being so concerned with process that you don't accomplish anything.
Once, when I started a new job as a grunt programmer at a new company, I discovered that the company was running somewhere around 2 on the Joel Test, and I was determined to fix it. But I also knew that making a good first impression was crucial. So I allocated the first seven hours of every day to just writing code, as was expected of me. There's nothing like a flurry of checkins to make you look good to the rest of the development team. But I reserved another hour every afternoon before going home to improving the process. I used that time to fix things that made it hard to debug our product. I set up a daily build and a bug database. I fixed all the longstanding annoyances that made development difficult. I wrote specs for the work that I was doing during the day. I wrote a document explaining step-by-step how to create a development machine from scratch. I thoroughly documented an important internal language which had been undocumented. Slowly, the process got better and better. Nobody but me (and my team, when I was put in charge of one) ever did schedules or specs, but other than that we hit about 10 on the Joel Test.
You can make things better, even when you're not in charge, but you have to be Caesar's Wife: above suspicion. Otherwise you'll make enemies as you go along.
Any other ideas?
	"
https://www.joelonsoftware.com/2001/12/25/20011225/,2001/12/25,2001-12-25T00:02:59+00:00,,Joel Spolsky,News,"
	This site is supposed to be about software management. But sometimes you don't have the power to create change in your organization by executive fiat. Obviously, if you're just a grunt programmer at the bottom of the totem pole, you can't exactly order people to start creating schedules or bug databases. And in fact even if you're a manager, you've probably discovered that managing developers is a lot like herding cats, only not as fun. Merely saying ""make it so"" doesn't make it so. Getting Things Done When You're Only a Grunt WhatCounts Replaces Mailman I used to use mailman to send the notification email to the 7568 subscribers who signed up. It had some problems. The biggest one was that every email that went out had to be exactly the same, and there was no way to include a recipient's email address in the text of the outgoing message. This made it a pain to unsubscribe people who didn't quite know why they were subscribed (usually they had an old email address forwarding to their current address). In fact I'm embarassed to admit that under the old system the only way to unsubscribe people was for me to go through all the unsubscribe messages and remove people manually. Why I put up with this for so long is completely beyond me. Thanks to David Geller at WhatCounts, I have a new system to manage the notification email. Every outgoing message will automatically have a custom return address on the WhatCounts server and a custom link you can click to unsubscribe. I hope this will make list management, finally, a totally painless process. The only problem with the new system is that if you receive one of my notifications and reply to it, I never see the reply. WhatCounts will assume it's a bounce or an unsubscribe request and deal with it appropriately. If you want to contact me you have to send email, rather than just replying to the message.
	"
https://www.joelonsoftware.com/2001/12/19/20011219/,2001/12/19,2001-12-19T00:02:58+00:00,,Joel Spolsky,News,"
	I'm still working my way through a pile of books I bought with the purpose of updating my list of recommended books. One of these days I'll get to the bottom of the pile and update the recommended list. All in good time! FogBUGZ 3.0 Development The FogBUGZ 3.0 development process is in full swing now. One of our first priorities is to refactor and clean up some of the code. There were a bunch of places with duplicated or almost-duplicated code; our logic wasn't cleanly separated from the UI; the HTML we generated was based on ancient browsers. It's the kind of project that would tempt a lesser programmer to ""throw it out and start from scratch."" Instead, we're going through the code one file at a time, cutting and pasting blocks, scrubbing the HTML (to use fully-XHTML valid code with all formatting isolated style sheets), and creating new classes for underlying logic that used to be scattered all over the place. In the ideal world, when you refactor, you simply apply almost mechanical transformations to an existing code base that can be clearly understood to have no effect on the correctness of the code. The simplest example I can think of is changing ""if not x then A else B"" to ""if x then B else A"". You know that you can always do such a thing without breaking the code, and if it's a little clearer to read, it's a safe fix. Here's a typical thing that happens. As I go through the code, I'll find some SQL statement in the middle of some HTML. So I create a class and give it a method that executes the SQL statement, and call that method from the HTML. I'll start with the old SQL code and move it into my new class unchanged. Then I'll look at that class for opportunities to apply more simple, bite-sized transformations that make it cleaner or faster. In the principle of eating our own dogfood, all daily changes go up on our internal bug database right away. Because we're refactoring rather than starting from scratch, at any given time we always have a working version of FogBUGZ checked into CVS. In the worst scenario, we've introduced a small bug. The best time to refactor is at the beginning of a development cycle. That gives you the maximum amount of time to catch any bugs that you introduced accidentally. In the ideal world, we would have strong unit tests so that we could convince ourselves that nothing was broken that used to work. As we applied transformations, the unit tests would tell us automatically if we had broken anything and we could probably stay at zero bugs throughout the process. This is one of the valuable principles of Extreme Programming. We haven't created unit tests yet, because all the HTML->XHTML+CSS cleanup that we're doing makes FogBUGZ's ""correct"" output a rapidly moving target. As the output stablizes, we'll build unit tests. We did not follow the XP principle of writing unit tests first, because it is so much easier to (a) write the code (b) hand-check the HTML that it produced (c) use that HTML as the basis for the unit test. If you do things in the XP order you have to figure out character-by-character what your output HTML is supposed to look like in advance, which strikes me as mind-numbingly tedious and a serious waste of time.
	"
https://www.joelonsoftware.com/2001/12/16/20011216/,2001/12/16,2001-12-16T00:02:57+00:00,,Joel Spolsky,News,"
	Razib Kahn: ""So I finally gave up and created a shopping system exactly like amazon.com, and the e-mails stopped at a screeching halt.""
	"
https://www.joelonsoftware.com/2001/12/15/humane-programming/,Humane Programming,2001-12-15T00:02:56+00:00,,Joel Spolsky,"Software designer, News","
	Lazy programmers who didn't read about how users don't read anything:
Most decent web programmers can always figure out how to design an interaction that won't fail if you hit back or reload. These techniques are even older than cookies.
Having three paragraphs of text telling you not to hit back or reload isn't going to help, because people won't read it.
The programmer who wrote this screen admits that 10% of users ""forget this warning."" It's not because they forgot. It's because humans are fallable and we're used to hitting refresh when the screen is messed up, and we're used to hitting back when we realize we went forward too soon. Don't argue with me, Yahoo, when you're the ones quoting statistics to prove it!
The main purpose of this screen seems to be so that users blame themselves when they hit reload and find themselves blown back to step one. Oh darn! I'm so stupid! say the users. Yes, that's what happens. Watch any usability test where the product is failing - the users inevitably blame ""their own stupidity."" Better that 100,000 users should feel stupid than one programmer admit he didn't do a very good job. 
Don't let anyone tell you that as a programmer you don't have to make moral or ethical decisions. Every time you decide that making users feel stupid is better than fixing your code, you're making an ethical decision.
	"
https://www.joelonsoftware.com/2001/12/13/20011213/,2001/12/13,2001-12-13T00:02:55+00:00,,Joel Spolsky,News,"
	Michael asks: ""I'm interested in anyone's ideas on either good or bad interface issues that they've seen while buying things. Remember that I'm selling software, so order tracking and fulfillment don't really exist..."" I have really smart readers. Wow. Google now has 20 years of Usenet online. You can entertain yourself with some scary stuff from my past. my first post - this was rather a difficult trick because Penn didn't officially allow undergrads to post to Usenet in those days (so I transferred out!) (April 1988) my first Internet lecture - more than a decade before Joel on Software I had things to say. Not very interesting things though. (August 1988) my first contribution to Open Source (September 1988) my first software released under GPL (November 1988) - now the Slashdot kiddies have to shut up; I was writing GPLed software before they were born, bwa ha ha! I was writing Macintosh code way back then, too. (August 1993) First post from New York (September 1994)
	"
https://www.joelonsoftware.com/2001/12/12/20011212/,2001/12/12,2001-12-12T00:02:54+00:00,,Joel Spolsky,News,"
	Back to Basics. Wax on, wax off.
	"
https://www.joelonsoftware.com/2001/12/11/back-to-basics/,Back to Basics,2001-12-11T00:14:51+00:00,2017-11-30T18:39:08+00:00,Joel Spolsky,"Rock star developer, News","
	We spend a lot of time on this site talking about exciting Big Picture Stuff like .NET versus Java, XML strategy, Lock-In, competitive strategy, software design, architecture, and so forth. All this stuff is a layer cake, in a way. At the top layer, you've got software strategy. Below that, we think about architectures like .NET, and below that, individual products: software development products like Java or platforms like Windows.
Go lower on the cake, please. DLLs? Objects? Functions? No! Lower! At some point you're thinking about lines of code written in programming languages.
Still not low enough. Today I want to think about CPUs. A little bit of silicon moving bytes around. Pretend you are a beginning programmer. Tear away all that knowledge you've built up about programming, software, management, and get back to the lowest level Von Neumann fundamental stuff. Wipe J2EE out of your mind for a moment. Think Bytes.
Why are we doing this? I think that some of the biggest mistakes people make even at the highest architectural levels come from having a weak or broken understanding of a few simple things at the very lowest levels. You've built a marvelous palace but the foundation is a mess. Instead of a nice cement slab, you've got rubble down there. So the palace looks nice but occasionally the bathtub slides across the bathroom floor and you have no idea what's going on.
So today, take a deep breath. Walk with me, please, through a little exercise which will be conducted using the C programming language.
Remember the way strings work in C: they consist of a bunch of bytes followed by a null character, which has the value 0. This has two obvious implications:
There is no way to know where the string ends (that is, the string length) without moving through it, looking for the null character at the end.
Your string can't have any zeros in it. So you can't store an arbitrary binary blob like a JPEG picture in a C string.
Why do C strings work this way? It's because the PDP-7 microprocessor, on which UNIX and the C programming language were invented, had an ASCIZ string type. ASCIZ meant ""ASCII with a Z (zero) at the end.""
Is this the only way to store strings? No, in fact, it's one of the worst ways to store strings. For non-trivial programs, APIs, operating systems, class libraries, you should avoid ASCIZ strings like the plague. Why?
Let's start by writing a version of the code for strcat, the function which appends one string to another.
void strcat( char* dest, char* src )
{
 while (*dest) dest++;
 while (*dest++ = *src++);
}
Study the code a bit and see what we're doing here. First, we're walking through the first string looking for its null-terminator. When we find it, we walk through the second string, copying one character at a time onto the first string.
This kind of string handling and string concatenation was good enough for Kernighan and Ritchie, but it has its problems. Here's a problem. Suppose you have a bunch of names that you want to append together in one big string:
char bigString[1000]; /* I never know how much to allocate */
bigString[0] = '\0';
strcat(bigString,""John, "");
strcat(bigString,""Paul, "");
strcat(bigString,""George, "");
strcat(bigString,""Joel "");
This works, right? Yes. And it looks nice and clean.
What is its performance characteristic? Is it as fast as it could be? Does it scale well? If we had a million strings to append, would this be a good way to do it?
No. This code uses the Shlemiel the painter's algorithm. Who is Shlemiel? He's the guy in this joke:
Shlemiel gets a job as a street painter, painting the dotted lines down the middle of the road. On the first day he takes a can of paint out to the road and finishes 300 yards of the road. ""That's pretty good!"" says his boss, ""you're a fast worker!"" and pays him a kopeck.
The next day Shlemiel only gets 150 yards done. ""Well, that's not nearly as good as yesterday, but you're still a fast worker. 150 yards is respectable,"" and pays him a kopeck.
The next day Shlemiel paints 30 yards of the road. ""Only 30!"" shouts his boss. ""That's unacceptable! On the first day you did ten times that much work! What's going on?""
""I can't help it,"" says Shlemiel. ""Every day I get farther and farther away from the paint can!""
(For extra credit, what are the real numbers?) This lame joke illustrates exactly what's going on when you use strcat like I just did. Since the first part of strcat has to scan through the destination string every time, looking for that dang null terminator again and again, this function is much slower than it needs to be and doesn't scale well at all. Lots of code you use every day has this problem. Many file systems are implemented in a way that it's a bad idea to put too many files in one directory, because performance starts to drop off dramatically when you get thousands of items in one directory. Try opening an overstuffed Windows recycle bin to see this in action - it takes hours to show up, which is clearly not linear in the number of files it contains. There must be a Shlemiel the Painter's Algorithm in there somewhere. Whenever something seems like it should have linear performance but it seems to have n-squared performance, look for hidden Shlemiels. They are often hidden by your libraries. Looking at a column of strcats or a strcat in a loop doesn't exactly shout out ""n-squared,"" but that is what's happening.
How do we fix this? A few smart C programmers implemented their own mystrcat as follows:
char* mystrcat( char* dest, char* src )
{
 while (*dest) dest++;
 while (*dest++ = *src++);
 return --dest;
}
What have we done here? At very little extra cost we're returning a pointer to the end of the new, longer string. That way the code that calls this function can decide to append further without rescanning the string:
char bigString[1000]; /* I never know how much to allocate */
char *p = bigString;
bigString[0] = '\0';
p = mystrcat(p,""John, "");
p = mystrcat(p,""Paul, "");
p = mystrcat(p,""George, "");
p = mystrcat(p,""Joel "");
This is, of course, linear in performance, not n-squared, so it doesn't suffer from degradation when you have a lot of stuff to concatenate.
The designers of Pascal were aware of this problem and ""fixed"" it by storing a byte count in the first byte of the string. These are called Pascal Strings. They can contain zeros and are not null terminated. Because a byte can only store numbers between 0 and 255, Pascal strings are limited to 255 bytes in length, but because they are not null terminated they occupy the same amount of memory as ASCIZ strings. The great thing about Pascal strings is that you never have to have a loop just to figure out the length of your string. Finding the length of a string in Pascal is one assembly instruction instead of a whole loop. It is monumentally faster.
The old Macintosh operating system used Pascal strings everywhere. Many C programmers on other platforms used Pascal strings for speed. Excel uses Pascal strings internally which is why strings in many places in Excel are limited to 255 bytes, and it's also one reason Excel is blazingly fast.
For a long time, if you wanted to put a Pascal string literal in your C code, you had to write:
char* str = ""\006Hello!"";
Yep, you had to count the bytes by hand, yourself, and hardcode it into the first byte of your string. Lazy programmers would do this, and have slow programs:
char* str = ""*Hello!"";
str[0] = strlen(str) - 1;
Notice in this case you've got a string that is null terminated (the compiler did that) as well as a Pascal string. I used to call these fucked strings because it's easier than calling them null terminated pascal strings but this is a rated-G channel so you will have use the longer name.
I elided an important issue earlier. Remember this line of code?
char bigString[1000]; /* I never know how much to allocate */
Since we're looking at the bits today I shouldn't have ignored this. I should have done this correctly: figured out how many bytes I needed and allocated the right amount of memory.
Shouldn't I have?
Because otherwise, you see, a clever hacker will read my code and notice that I'm only allocating 1000 bytes and hoping it will be enough, and they'll find some clever way to trick me into strcatting a 1100 byte string into my 1000 bytes of memory, thus overwriting the stack frame and changing the return address so that when this function returns, it executes some code which the hacker himself wrote. This is what they're talking about when they say that a particular program has a buffer overflow susceptibility. It was the number one cause of hacks and worms in the olden days before Microsoft Outlook made hacking easy enough for teenagers to do.
OK, so all those programmers are just lame-asses. They should have figured out how much memory to allocate.
But really, C does not make this easy on you. Let's go back to my Beatles example:
char bigString[1000]; /* I never know how much to allocate */
char *p = bigString;
bigString[0] = '\0';
p = mystrcat(p,""John, "");
p = mystrcat(p,""Paul, "");
p = mystrcat(p,""George, "");
p = mystrcat(p,""Joel "");
How much should we allocate? Let's try doing this The Right Way.
char* bigString;
int i = 0;
i = strlen(""John, "")
+ strlen(""Paul, "")
+ strlen(""George, "")
+ strlen(""Joel "");
bigString = (char*) malloc (i + 1);
/* remember space for null terminator! */
...
My eyes glazeth over. You're probably about ready to change the channel already. I don't blame you, but bear with me because it gets really interesting.
We have to scan through all the strings once just figuring out how big they are, then we scan through them again concatenating. At least if you use Pascal strings the strlen operation is fast. Maybe we can write a version of strcat that reallocates memory for us.
That opens another whole can of worms: memory allocators. Do you know how malloc works? The nature of malloc is that it has a long linked list of available blocks of memory called the free chain. When you call malloc, it walks the linked list looking for a block of memory that is big enough for your request. Then it cuts that block into two blocks - one the size you asked for, the other with the extra bytes, and gives you the block you asked for, and puts the leftover block (if any) back into the linked list. When you call free, it adds the block you freed onto the free chain. Eventually, the free chain gets chopped up into little pieces and you ask for a big piece and there are no big pieces available the size you want. So malloc calls a timeout and starts rummaging around the free chain, sorting things out, and merging adjacent small free blocks into larger blocks. This takes 3 1/2 days. The end result of all this mess is that the performance characteristic of malloc is that it's never very fast (it always walks the free chain), and sometimes, unpredictably, it's shockingly slow while it cleans up. (This is, incidentally, the same performance characteristic of garbage collected systems, surprise surprise, so all the claims people make about how garbage collection imposes a performance penalty are not entirely true, since typical malloc implementations had the same kind of performance penalty, albeit milder.)
Smart programmers minimize the potential distruption of malloc by always allocating blocks of memory that are powers of 2 in size. You know, 4 bytes, 8 bytes, 16 bytes, 18446744073709551616 bytes, etc. For reasons that should be intuitive to anyone who plays with Lego, this minimizes the amount of weird fragmentation that goes on in the free chain. Although it may seem like this wastes space, it is also easy to see how it never wastes more than 50% of the space. So your program uses no more than twice as much memory as it needs to, which is not that big a deal.
Suppose you wrote a smart strcat function that reallocates the destination buffer automatically. Should it always reallocate it to the exact size needed? My teacher and mentor Stan Eisenstat suggests that when you call realloc, you should always double the size of memory that was previously allocated. That means that you never have to call realloc more than lg n times, which has decent performance characteristics even for huge strings, and you never waste more than 50% of your memory.
Anyway. Life just gets messier and messier down here in byte-land. Aren't you glad you don't have to write in C anymore? We have all these great languages like Perl and Java and VB and XSLT that never make you think of anything like this, they just deal with it, somehow. But occasionally, the plumbing infrastructure sticks up in the middle of the living room, and we have to think about whether to use a String class or a StringBuilder class, or some such distinction, because the compiler is still not smart enough to understand everything about what we're trying to accomplish and is trying to help us not write inadvertent Shlemiel the Painter algorithms.
Last week I wrote that you can't implement the SQL statement SELECT author FROM books fast when your data is stored in XML. Just in case everybody didn't understand what I was talking about, and now that we've been rolling around in the CPU all day, this assertion might make more sense.
How does a relational database implement SELECT author FROM books? In a relational database, every row in a table (e.g. the books table) is exactly the same length in bytes, and every fields is always at a fixed offset from the beginning of the row. So, for example, if each record in the books table is 100 bytes long, and the author field is at offset 23, then there are authors stored at byte 23, 123, 223, 323, etc. What is the code to move to the next record in the result of this query? Basically, it's this:
pointer += 100;
One CPU instruction. Faaaaaaaaaast.
Now lets look at the books table in XML.
<?xml blah blah>
<books>
<book>
<title>UI Design for Programmers</title>
<author>Joel Spolsky</author>
</book>
<book>
<title>The Chop Suey Club</title>
<author>Bruce Weber</author>
</book>
</books>
Quick question. What is the code to move to the next record?
Uh...
At this point a good programmer would say, well, let's parse the XML into a tree in memory so that we can operate on it reasonably quickly. The amount of work that has to be done here by the CPU to SELECT author FROM books will bore you absolutely to tears. As every compiler writer knows, lexing and parsing are the slowest part of compiling. Suffice it to say that it involves a lot of string stuff, which we discovered is slow, and a lot of memory allocation stuff, which we discovered is slow, as we lex, parse, and build an abstract syntax tree in memory. That assumes that you have enough memory to load the whole thing at once. With relational databases, the performance of moving from record to record is fixed and is, in fact, one CPU instruction. That's very much by design. And thanks to memory mapped files you only have to load the pages of disk that you are actually going to use. With XML, if you preparse, the performance of moving from record to record is fixed but there's a huge startup time, and if you don't preparse, the performance of moving from record to record varies based on the length of the record before it and is still hundreds of CPU instructions long.
What this means to me is that you can't use XML if you need performance and have lots of data. If you have a little bit of data, or if what you're doing doesn't have to be fast, XML is a fine format. And if you really want the best of both worlds, you have to come up with a way to store metadata next to your XML, something like Pascal strings' byte count, which give you hints about where things are in the file so that you don't have to parse and scan for them. But of course then you can't use text editors to edit the file because that messes up the metadata, so it's not really XML anymore.
For those three gracious members of my audience who are still with me at this point, I hope you've learned something or rethought something. I hope that thinking about boring first-year computer-science stuff like how strcat and malloc actually work has given you new tools to think about the latest, top level, strategic and architectural decisions that you make in dealing with technologies like XML. For homework, think about why Transmeta chips will always feel sluggish. Or why the original HTML spec for TABLES was so badly designed that large tables on web pages can't be shown quickly to people with modems. Or about why COM is so dang fast but not when you're crossing process boundaries. Or about why the NT guys put the display driver into kernelspace instead of userspace.
These are all things that require you to think about bytes, and they affect the big top-level decisions we make in all kinds of architecture and strategy. This is why my view of teaching is that first year CS students need to start at the basics, using C and building their way up from the CPU. I am actually physically disgusted that so many computer science programs think that Java is a good introductory language, because it's ""easy"" and you don't get confused with all that boring string/malloc stuff but you can learn cool OOP stuff which will make your big programs ever so modular. This is a pedagogical disaster waiting to happen. Generations of graduates are descending on us and creating Shlemiel The Painter algorithms right and left and they don't even realize it, since they fundamentally have no idea that strings are, at a very deep level, difficult, even if you can't quite see that in your perl script. If you want to teach somebody something well, you have to start at the very lowest level. It's like Karate Kid. Wax On, Wax Off. Wax On, Wax Off. Do that for three weeks. Then Knocking The Other Kid's Head off is easy.
	"
https://www.joelonsoftware.com/2002/01/31/20020131/,2002/01/31,2002-01-31T00:03:08+00:00,,Joel Spolsky,News,"
	This is one of those days where I could write a comment that says: maybe it's easier to do this at eval time.We could tag the foreach onto the malkovitch. and it would actually make sense. What is Six Degrees? When software companies say that ""their capital assets go home every night,"" they are serious. Dead serious. And when Quark goes down in flames because the bean-counters pushed out the experienced developers and hired new, cheaper ones 10 time zones away, there will be a great case study in Harvard Business Review to prove it. There are not a lot of software companies to work for in Denver. So when the key designers of QuarkXPress 5.0 got sick of being treated like interchangable code slaves, they started their own shop and quickly sold it to a smart Vancouver-based company that wrote them a blank check and let them stay in their hometown. What they came up with is nothing short of a breakthrough in the field of personal knowledge management, an effervescent field that has not quite made it onto the radar of the buzzword maniacs. Six Degrees is gonna be Google for the desktop. Everywhere I look I see people blabbing about how they're going to crack the knowledge management nut. It's like 7 years ago when everybody was making a search engine. But only Larry and Sergey figured out the formula to make search actually work, and only Mark, David, Cameron and Zach figured out the formula for to make knowledge management actually work. This is cool stuff. Ship it already, dammit, I need it yesterday!
	"
https://www.joelonsoftware.com/2002/01/24/20020124/,2002/01/24,2002-01-24T00:03:07+00:00,,Joel Spolsky,News,"
	Rub-a-dub-dub One reason people are tempted to rewrite their entire code base from scratch is that the original code base wasn't designed for what it's doing. It was designed as a prototype, an experiment, a learning exercise, a way to go from zero to IPO in nine months, or a one-off demo. And now it has grown into a big mess that's fragile and impossible to add code to, and everybody's whiny, and the old programmers quit in despair and the new ones that are brought in can't make head or tail of the code so they somehow convince management to give up and start over while Microsoft takes over their business. Today let me tell you a story about what they could have done instead. New Web Shop for Fog Creek Software We got sick of paying the 13.9% transaction charge that Digibuy is charging us for every software download, and we needed more control over our commerce server so that we could run a proper affiliate program. So we got our own merchant account and rolled our own software for it. It's been fun, and the transaction cost should be down to about 2.5%. Patching Code? I wanted to use .RTPatch for the upcoming CityDesk service pack, but it costs $5000 for one license. Yipes. That's a lot to pay for what computer scientists call [Aho75]. Can anybody suggest an alternative?
	"
https://www.joelonsoftware.com/2002/01/23/rub-a-dub-dub/,Rub a dub dub,2002-01-23T00:15:59+00:00,2016-12-05T19:33:12+00:00,Joel Spolsky,"Fog Creek Software, News","
	One reason people are tempted to rewrite their entire code base from scratch is that the original code base wasn't designed for what it's doing. It was designed as a prototype, an experiment, a learning exercise, a way to go from zero to IPO in nine months, or a one-off demo. And now it has grown into a big mess that's fragile and impossible to add code to, and everybody's whiny, and the old programmers quit in despair and the new ones that are brought in can't make head or tail of the code so they somehow convince management to give up and start over while Microsoft takes over their business. Today let me tell you a story about what they could have done instead.
FogBUGZ started out six years ago as an experiment to teach myself ASP programming. Pretty soon it became an in-house bug tracking system. It got embellished almost daily with features that people needed until it was good enough that it no longer justified any more work.
Various friends asked me if they could use FogBUGZ at their companies. The trouble was, it had too many hardcoded things that made it a pain to run anywhere other than on the original computer where it was deployed. I had used a bunch of SQL Server stored procedures, which meant that you needed SQL Server to run FogBUGZ, which was expensive and overkill for some of the two person teams that wanted to run it. And so on. So I would tell my friends, ""gosh, for $5000 in consulting fees, I'll spend a couple of days and clean up the code so you can run it on your server using Access instead of SQL Server."" Generally, my friends thought this was too expensive.
After this happened a few times I had a revelation - if I could sell the same program to, say, three people, I could charge $2000 and come out ahead. Or thirty people for $200. Software is neat like that. So in late 2000, Michael sat down, ported the code so that it worked on Access or SQL Server, pulled all the site-specific stuff out into a header file, and we started selling the thing. I didn't really expect much to come of it.
In those days, I thought, golly, there are zillions of bug tracking packages out there. Every programmer has written a dinky bug tracking package. Why would anyone buy ours? I knew one thing: programmers who start businesses often have the bad habit of thinking everybody else is a programmer just like them and wants the same stuff as them, and so they have an unhealthy tendency to start businesses that sell programming tools. That's why you see so many scrawny companies hawking source-code-generating geegaws, error catching and emailing geegaws, debugging geegaws, syntax-coloring editing tchotchkes, ftping baubles, and, ahem, bug tracking packages. All kinds of stuff that only a programmer could love. I had no intention of falling into that trap!
Of course, nothing ever works out exactly as planned. FogBUGZ was popular. Really popular. It accounts for a significant chunk of Fog Creek's revenue and sales are growing steadily. The People won't stop buying it.
So we did version 2.0. This was an attempt to add some of the most obviously needed features. While David worked on version 2.0 we honestly didn't think it was worth that much effort, so he tended to do things in what you might call an ""expedient"" fashion rather than, say, an ""elegant"" fashion. Certain, ahem, design issues in the original code were allowed to fester. There were two complete sets of nearly identical code for drawing the main bug-editing page. SQL statements were scattered throughout the HTML hither and yon, to and fro, pho and ton. Our HTML was creaky and designed for those ancient browsers that were so buggy they could crash loading about:blank.
Yeah, it worked brilliantly, we've been at zero known bugs for a while now. But inside, the code was, to use the technical term, a ""big mess."" Adding new features was a hemorrhoid. To add one field to the central bug table would probably require 50 modifications, and you'd still be finding places you forgot to modify long after you bought your first family carplane for those weekend trips to your beach house on Mars.
A lesser company, perhaps one run by an executive from the express-package-delivery business, might have decided to scrap the code and start over. 
Did I mention that I don't believe in starting from scratch? I guess I talk about that a lot.
Anyway, instead of starting from scratch, I decided it was worth three weeks of my life to completely scrub the code. Rub a dub dub. In the spirit of refactoring, I set out a few rules for this exercise.
No New Features, not even small ones, would be added.
At any time, with any check in, the code would still work perfectly.
All I would do is logical transformations - the kinds of things that are almost mechanical and which you can convince yourself immediately will not change the behavior of the code.
I went through each source file, one at a time, top to bottom, looking at code, thinking about how it could be better structured, and making simple changes. Here are some of the kinds of things I did during these three weeks:
Changed all HTML to xhtml. For example, <BR> became <br />, all attributes were quoted, all nested tags were matched up, and all pages were validated.
Removed all formatting (<FONT> tags etc.) and put everything in a CSS style sheet.
Removed all SQL statements from the presentation code and indeed all program logic (what the marketing types like to call ""business rules""). This stuff went into classes which were not really designed - I simply added methods lazily as I discovered a need for them. (Somewhere, someone with a big stack of 4x6 cards is sharpening their pencil to poke my eyes out. What do you mean you didn't design your classes?)
Found repeated blocks of code and created classes, functions, or methods to eliminate the repetition. Broke up large functions into multiple smaller ones.
Removed all remaining English language text from the main code and isolated that in a single file for easy internationalization.
Restructured the ASP site so there is a single entry point instead of lots of different files. This makes it very easy to do things that used to be hard, for example, now we can display input error messages in the very form where the invalid input occurred, something which should be easy if you lay things out right, but I hadn't laid things out right when I was learning ASP programming way back when.
Over three weeks the code got better and better internally. To the end user, not too much changed. Some fonts are a little nicer thanks to CSS. I could have stopped at any point, because at any given time I had 100% working code (and I uploaded every checkin to our live internal FogBUGZ server to make sure). And in fact I never really had to think very hard, and I never had to design a thing, because all I was doing was simple, logical transformations. Occassionally I would encounter a weird nugget in the code. These nuggets were usually bug fixes that had been implemented over the years. Luckily I could keep the bug fix intact. In many of these cases, I realized that had I started from scratch, I would have made the same bug all over again, and may not have noticed it for months or years.
I'm basically done now. It took, as planned, three weeks. Almost every line of code is different now. Yep, I looked at every line of code, and changed most of them. The structure is completely different. All the bug-tracking functionality is completely separate from the HTML UI functionality.
Here are all the good things about my code scrubbing activity:
It took vastly less time than a complete rewrite. Let's assume (based on how long it took us to get this far with FogBUGZ) that a complete rewrite would have taken a year. Well, that means I saved 49 weeks of work. Those 49 weeks represent knowledge in the design of the code that I preserved intact. I never had to think, ""oh, I need a new line here."" I just had to change <BR> to <br /> mindlessly and move on. I didn't have to figure out how to get multipart working for file uploads. It works. Just tidy it up a bit.
I didn't introduce any new bugs. A couple of tiny ones, of course, probably got through. But I was never doing the types of things that cause bugs.
I could have stopped and shipped at any time if necessary.
The schedule was entirely predictable. After a week of this, you can calculate exactly how many lines of code you clean in an hour, and get a darn good estimate for the rest of the project. Try that, Mozilla river-drawing people.
The code is now much more amenable to new features. We'll probably earn back the three weeks with the first new major feature we implement.
Much of the literature on refactoring is attributable to Martin Fowler, although of course the principles of code cleanups have been well known to programmers for years. An interesting new area is refactoring tools, which is just a fancy word for programs that do some of this stuff automatically. We're a long way from having all the good tools we need - in most programming environments you can't even do a simple transformation like changing the name of a variable (and having all the references to it change automatically). But it's getting better, and if you want to start one of those scrawny companies hawking programming tool geegaws, or make a useful contribution to open source, the field is wide open.
	"
https://www.joelonsoftware.com/2002/01/11/20020111/,2002/01/11,2002-01-11T00:03:06+00:00,,Joel Spolsky,News,"
	Darren: CityDesk First Impressions
Dave: Blogger of The Year
Software Market Solution: Content Management Software for the Rest of Us
	"
https://www.joelonsoftware.com/2002/01/10/20020110/,2002/01/10,2002-01-10T00:03:05+00:00,,Joel Spolsky,News,"
	 Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Dave Malkovitch 
	"
https://www.joelonsoftware.com/2002/01/08/20020108/,2002/01/08,2002-01-08T00:03:04+00:00,,Joel Spolsky,News,"
	New on the Fog Creek web site: CityDesk for Geeks. Dave Thomas 1932-2002 Dave Thomas, the founder of Wendy's, passed away today. Appearing in hundreds of commercials, he gave his hamburger chain a friendly, down-home feel. ""Mr. Thomas came to stand for the products he peddled because he was perceived as standing behind them, as if a curious customer could peek inside the kitchen at a Wendy's restaurant and perhaps find Mr. Thomas keeping a watchful eye on the cook at the grill,"" wrote Stuart Elliot in the New York Times. He taught us that nobody, given the choice, prefers to buy from a faceless megacorporation.
	"
https://www.joelonsoftware.com/2002/01/06/fire-and-motion/,Fire And Motion,2002-01-06T00:15:23+00:00,2016-12-05T19:22:44+00:00,Joel Spolsky,"Top 10, CEO, News","
	Sometimes I just can't get anything done.
Sure, I come into the office, putter around, check my email every ten seconds, read the web, even do a few brainless tasks like paying the American Express bill. But getting back into the flow of writing code just doesn't happen.
These bouts of unproductiveness usually last for a day or two. But there have been times in my career as a developer when I went for weeks at a time without being able to get anything done. As they say, I'm not in flow. I'm not in the zone. I'm not anywhere.
Everybody has mood swings; for some people they are mild, for others, they can be more pronounced or even dysfunctional. And the unproductive periods do seem to correlate somewhat with gloomier moods.
It makes me think of those researchers who say that basically people can't control what they eat, so any attempt to diet is bound to be short term and they will always yoyo back to their natural weight. Maybe as a software developer I really can't control when I'm productive, and I just have to take the slow times with the fast times and hope that they average out to enough lines of code to make me employable.
 
 
What drives me crazy is that ever since my first job I've realized that as a developer, I usually average about two or three hours a day of productive coding. When I had a summer internship at Microsoft, a fellow intern told me he was actually only going into work from 12 to 5 every day. Five hours, minus lunch, and his team loved him because he still managed to get a lot more done than average. I've found the same thing to be true. I feel a little bit guilty when I see how hard everybody else seems to be working, and I get about two or three quality hours in a day, and still I've always been one of the most productive members of the team. That's probably why when Peopleware and XP insist on eliminating overtime and working strictly 40 hour weeks, they do so secure in the knowledge that this won't reduce a team's output.
But it's not the days when I ""only"" get two hours of work done that worry me. It's the days when I can't do anything.
I've thought about this a lot. I tried to remember the time when I got the most work done in my career. It was probably when Microsoft moved me into a beautiful, plush new office with large picture windows overlooking a pretty stone courtyard full of cherry trees in bloom. Everything was clicking. For months I worked nonstop grinding out the detailed specification for Excel Basic - a monumental ream of paper going into incredible detail covering a gigantic object model and programming environment. I literally never stopped. When I had to go to Boston for MacWorld I took a laptop with me, and documented the Window class sitting on a pleasant terrace at HBS.
Once you get into flow it's not too hard to keep going. Many of my days go like this: (1) get into work (2) check email, read the web, etc. (3) decide that I might as well have lunch before getting to work (4) get back from lunch (5) check email, read the web, etc. (6) finally decide that I've got to get started (7) check email, read the web, etc. (8) decide again that I really have to get started (9) launch the damn editor and (10) write code nonstop until I don't realize that it's already 7:30 pm.
Somewhere between step 8 and step 9 there seems to be a bug, because I can't always make it across that chasm. For me, just getting started is the only hard thing. An object at rest tends to remain at rest. There's something incredible heavy in my brain that is extremely hard to get up to speed, but once it's rolling at full speed, it takes no effort to keep it going. Like a bicycle decked out for a cross-country, self-supported bike trip - when you first start riding a bike with all that gear, it's hard to believe how much work it takes to get rolling, but once you are rolling, it feels just as easy as riding a bike without any gear.
Maybe this is the key to productivity: just getting started. Maybe when pair programming works it works because when you schedule a pair programming session with your buddy, you force each other to get started.
When I was an Israeli paratrooper a general stopped by to give us a little speech about strategy. In infantry battles, he told us, there is only one strategy: Fire and Motion. You move towards the enemy while firing your weapon. The firing forces him to keep his head down so he can't fire at you. (That's what the soldiers mean when they shout ""cover me."" It means, ""fire at our enemy so he has to duck and can't fire at me while I run across this street, here."" It works.) The motion allows you to conquer territory and get closer to your enemy, where your shots are much more likely to hit their target. If you're not moving, the enemy gets to decide what happens, which is not a good thing. If you're not firing, the enemy will fire at you, pinning you down.
I remembered this for a long time. I noticed how almost every kind of military strategy, from air force dogfights to large scale naval maneuvers, is based on the idea of Fire and Motion. It took me another fifteen years to realize that the principle of Fire and Motion is how you get things done in life. You have to move forward a little bit, every day. It doesn't matter if your code is lame and buggy and nobody wants it. If you are moving forward, writing code and fixing bugs constantly, time is on your side. Watch out when your competition fires at you. Do they just want to force you to keep busy reacting to their volleys, so you can't move forward?
Think of the history of data access strategies to come out of Microsoft. ODBC, RDO, DAO, ADO, OLEDB, now ADO.NET - All New! Are these technological imperatives? The result of an incompetent design group that needs to reinvent data access every goddamn year? (That's probably it, actually.) But the end result is just cover fire. The competition has no choice but to spend all their time porting and keeping up, time that they can't spend writing new features. Look closely at the software landscape. The companies that do well are the ones who rely least on big companies and don't have to spend all their cycles catching up and reimplementing and fixing bugs that crop up only on Windows XP. The companies who stumble are the ones who spend too much time reading tea leaves to figure out the future direction of Microsoft. People get worried about .NET and decide to rewrite their whole architecture for .NET because they think they have to. Microsoft is shooting at you, and it's just cover fire so that they can move forward and you can't, because this is how the game is played, Bubby. Are you going to support Hailstorm? SOAP? RDF? Are you supporting it because your customers need it, or because someone is firing at you and you feel like you have to respond? The sales teams of the big companies understand cover fire. They go into their customers and say, ""OK, you don't have to buy from us. Buy from the best vendor. But make sure that you get a product that supports (XML / SOAP / CDE / J2EE) because otherwise you'll be Locked In The Trunk."" Then when the little companies try to sell into that account, all they hear is obedient CTOs parrotting ""Do you have J2EE?"" And they have to waste all their time building in J2EE even if it doesn't really make any sales, and gives them no opportunity to distinguish themselves. It's a checkbox feature - you do it because you need the checkbox saying you have it, but nobody will use it or needs it. And it's cover fire.
Fire and Motion, for small companies like mine, means two things. You have to have time on your side, and you have to move forward every day. Sooner or later you will win. All I managed to do yesterday is improve the color scheme in FogBUGZ just a little bit. That's OK. It's getting better all the time. Every day our software is better and better and we have more and more customers and that's all that matters. Until we're a company the size of Oracle, we don't have to think about grand strategies. We just have to come in every morning and somehow, launch the editor.
 Discuss 
	"
https://www.joelonsoftware.com/2002/01/06/20020106/,2002/01/06,2002-01-06T00:03:03+00:00,,Joel Spolsky,News,"
	Many of my days go like this: (1) get into work (2) check email, read the web, etc. (3) decide that I might as well have lunch before getting to work (4) get back from lunch (5) check email, read the web, etc. (6) finally decide that I've got to get started (7) check email, read the web, etc. (8) decide again that I really have to get started (9) launch the damn editor and (10) write code nonstop until I don't realize that it's already 7:30 pm. Somewhere between step 8 and step 9 there seems to be a bug, because I can't always make it across that chasm. Fire And Motion
	"
https://www.joelonsoftware.com/2002/01/02/20020102/,2002/01/02,2002-01-02T00:03:02+00:00,,Joel Spolsky,News,"
	Happy new year! Petter Hesselberg reviews my book.
	"
https://www.joelonsoftware.com/2002/02/25/20020225/,2002/02/25,2002-02-25T00:03:14+00:00,,Joel Spolsky,News,"
	Ev reviews UI for Programmers. Thanks!
	"
https://www.joelonsoftware.com/2002/02/14/20020209/,2002/02/09,2002-02-14T00:03:13+00:00,,Joel Spolsky,News,"
	""I don't know what's wrong with my development team,"" the CEO thinks to himself. ""Things were going so well when we started this project. For the first couple of weeks, the team cranked like crazy and got a great prototype working. But since then, things seem to have slowed to a crawl. They're just not working hard any more."" He chooses a Callaway Titanium Driver and sends the caddy to fetch an ice-cold lemonade. ""Maybe if I fire a couple of laggards that'll light a fire under them!"" The Iceberg Secret, Revealed
	"
https://www.joelonsoftware.com/2002/02/13/the-iceberg-secret-revealed/,"The Iceberg Secret, Revealed",2002-02-13T00:14:34+00:00,2016-12-05T19:11:40+00:00,Joel Spolsky,"Top 10, Software designer, News","
	""I don't know what's wrong with my development team,"" the CEO thinks to himself. ""Things were going so well when we started this project. For the first couple of weeks, the team cranked like crazy and got a great prototype working. But since then, things seem to have slowed to a crawl. They're just not working hard any more."" He chooses a Callaway Titanium Driver and sends the caddy to fetch an ice-cold lemonade. ""Maybe if I fire a couple of laggards that'll light a fire under them!""
Meanwhile, of course, the development team has no idea that anything's wrong. In fact, nothing is wrong. They're right on schedule. 
Don't let this happen to you! I'm going to let you in on a little secret about those non-technical management types that will make your life a million times easier. It's real simple. Once you know my secret, you'll never have trouble working with non-technical managers again (unless you get into an argument over the coefficient of restitution of their golf clubs).
It's pretty clear that programmers think in one language, and MBAs think in another. I've been thinking about the problem of communication in software management for a while, because it's pretty clear to me that the power and rewards accrue to those rare individuals who know how to translate between Programmerese and MBAese.
 
Since I started working in the software industry, almost all the software I've worked on has been what might be called ""speculative"" software. That is, the software is not being built for a particular customer - it's being built in hopes that zillions of people will buy it. But many software developers don't have that luxury. They may be consultants developing a project for a single client, or they may be in-house programmers working on a complicated corporate whatsit for Accounting (or whatever it is you in-house programmers do; it's rather mysterious to me).
Have you ever noticed that on these custom projects, the single most common cause of overruns, failures, and general miserableness always boils down to, basically, ""the (insert expletive here) customer didn't know what they wanted?""
Here are three versions of the same pathology:
""The damn customer kept changing his mind. First he wanted Client/Server. Then he read about XML in Delta Airlines Inflight Magazine and decided he had to have XML. Now we're rewriting the thing to use fleets of small Lego Mindstorms Robots.""
""We built it exactly the way they wanted. The contract specified the whole thing down to the smallest detail. We delivered exactly what the contract said. But when we delivered it, they were crestfallen.""
""Our miserable sales person agreed to a fixed price contract to build what was basically unspecified, and the customer's lawyers were sharp enough to get a clause in the contract that they don't have to pay us until 'acceptance by customer,' so we had to put a team of nine developers on their project for two years and only got paid $800.""
If there's one thing every junior consultant needs to have injected into their head with a heavy duty 2500 RPM DeWalt Drill, it's this: Customers Don't Know What They Want. Stop Expecting Customers to Know What They Want. It's just never going to happen. Get over it.
Instead, assume that you're going to have to build something anyway, and the customer is going to have to like it, but they're going to be a little bit surprised. YOU have to do the research. YOU have to figure out a design that solves the problem that the customer has in a pleasing way.
Put yourself in their shoes. Imagine that you've just made $100,000,000 selling your company to Yahoo!, and you've decided that it's about time to renovate your kitchen. So you hire an expert architect with instructions to make it ""as cool as Will and Grace's Kitchen."" You have no idea how to accomplish this. You don't know that you want a Viking stove and a Subzero refrigerator - these are not words in your vocabulary. You want the architect to do something good, that's why you hired him.
The Extreme Programming folks say that the solution to this is to get the customer in the room and involve them in the design process every step of the way, as a member of the development team. This is, I think, a bit too ""extreme."" It's as if my architect made me show up while they were designing the kitchen and asked me to provide input on every little detail. It's boring for me, if I wanted to be an architect I would have become an architect.
Anyway, you don't really want a customer on your team, do you? The customer-nominee is just as likely to wind up being some poor dweeb from Accounts Payable who got sent to work with the programmers because he was the slowest worker over there and they would barely notice his absence. And you're just going to spend all your design time explaining things in words of one syllable.
Assume that your customers don't know what they want. Design it yourself, based on your understanding of the domain. If you need to spend some time learning about the domain or if you need a domain expert to help you, that's fine, but the design of the software is your job. If you do your domain homework and create a good UI, the customer will be pleased.
Now, I promised to tell you a secret about translating between the language of the customers (or nontechnical managers) of your software and the language of programmers.
You know how an iceberg is 90% underwater? Well, most software is like that too - there's a pretty user interface that takes about 10% of the work, and then 90% of the programming work is under the covers. And if you take into account the fact that about half of your time is spent fixing bugs, the UI only takes 5% of the work. And if you limit yourself to the visual part of the UI, the pixels, what you would see in PowerPoint, now we're talking less than 1%.
That's not the secret. The secret is that People Who Aren't Programmers Do Not Understand This. 
There are some very, very important corollaries to the Iceberg Secret.
Important Corollary One. If you show a nonprogrammer a screen which has a user interface that is 90% worse, they will think that the program is 90% worse. 
I learned this lesson as a consultant, when I did a demo of a major web-based project for a client's executive team. The project was almost 100% code complete. We were still waiting for the graphic designer to choose fonts and colors and draw the cool 3-D tabs. In the meantime, we just used plain fonts and black and white, there was a bunch of ugly wasted space on the screen, basically it didn't look very good at all. But 100% of the functionality was there and was doing some pretty amazing stuff.
What happened during the demo? The clients spent the entire meeting griping about the graphical appearance of the screen. They weren't even talking about the UI. Just the graphical appearance. ""It just doesn't look slick,"" complained their project manager. That's all they could think about. We couldn't get them to think about the actual functionality. Obviously fixing the graphic design took about one day. It was almost as if they thought they had hired painters.
Important Corollary Two. If you show a nonprogrammer a screen which has a user interface which is 100% beautiful, they will think the program is almost done.
People who aren't programmers are just looking at the screen and seeing some pixels. And if the pixels look like they make up a program which does something, they think ""oh, gosh, how much harder could it be to make it actually work?""
The big risk here is that if you mock up the UI first, presumably so you can get some conversations going with the customer, then everybody's going to think you're almost done. And then when you spend the next year working ""under the covers,"" so to speak, nobody will really see what you're doing and they'll think it's nothing.
Important Corollary Three. The dotcom that has the cool, polished looking web site and about four web pages will get a higher valuation than the highly functional dotcom with 3700 years of archives and a default grey background.
Oh, wait, dotcoms aren't worth anything any more. Never mind.
Important Corollary Four. When politics demands that various nontechnical managers or customers ""sign off"" on a project, give them several versions of the graphic design to choose from.
Vary the placement of some things, change the look and feel and fonts, move the logo and make it bigger or smaller. Let them feel important by giving them non-crucial lipstick-on-a-chicken stuff to muck around with. They can't do much damage to your schedule here. A good interior decorator is constantly bringing their client swatches and samples and stuff to choose from. But they would never discuss dishwasher placement with the client. It goes next to the sink, no matter what the client wants. There's no sense wasting time arguing about where the dishwasher goes, it has to go next to the sink, don't even bring it up; let the clients get their design kicks doing some harmless thing like changing their mind 200 times about whether to use Italian Granite or Mexican Tiles or Norwegian wood butcher-block for the countertops.
Important Corollary Five. When you're showing off, the only thing that matters is the screen shot. Make it 100% beautiful.
Don't, for a minute, think that you can get away with asking anybody to imagine how cool this would be. Don't think that they're looking at the functionality. They're not. They want to see pretty pixels.
Steve Jobs understands this. Oh boy does he understand this. Engineers at Apple have learned to do things that make for great screen shots, like the gorgeous new 1024x1024 icons in the dock, even if they waste valuable real estate. And the Linux desktop crowd goes crazy about semitransparent xterms, which make for good screenshots but are usually annoying to use. Every time Gnome or KDE announces a new release I go straight to the screenshots and say, ""oh, they changed the planet from Jupiter to Saturn. Cool."" Never mind what they really did.
Remember the CEO at the beginning of this article? He was unhappy because his team had showed him great PowerPoints at the beginning - mockups, created in Photoshop, not even VB. And now that they're actually getting stuff done under the covers, it looks like they're not doing anything.
What can you do about this? Once you understand the Iceberg Secret, it's easy to work with it. Understand that any demos you do in a darkened room with a projector are going to be all about pixels. If you can, build your UI in such a way that unfinished parts look unfinished. For example, use scrawls for the icons on the toolbar until the functionality is there. As you're building your web service, you may want to consider actually leaving out features from the home page until those features are built. That way people can watch the home page go from 3 commands to 20 commands as more things get built. 
More importantly, make sure you control what people think about the schedule. Provide a detailed schedule in Excel format. Every week, send out self-congratulatory email talking about how you've moved from 32% complete to 35% complete and are on track to ship on December 25th. Make sure that the actual facts dominate any thinking about whether the project is moving forward at the right speed. And don't let your boss use Callaway Titanium Drivers, I don't care how much you want him to win, the USGA has banned them and it's just not fair.
 
Discuss
 
	"
https://www.joelonsoftware.com/2002/02/08/20020208/,2002/02/08,2002-02-08T00:03:12+00:00,,Joel Spolsky,News,"
	Now that ArsDigita is gone, I think we can officially declare the Internet Exuberance era, which opened with Travels with Samantha, officially closed. Even though the tendency is to blame it on the VCs, who replaced an exciting, charismatic and visionary founder with grey, grey, grey, the truth is that the Internet consulting market was totally wiped out more than a year ago and there's no reason for AD to have been exempted. Fog Creek only survived because we started the company late enough in the game that we never had time to build much of a consulting business, and we never open sourced the crown jewels so we had something to sell. By the way, have you noticed how often companies officially sell themselves off (probably for pennies) rather than simply liquidate? That's just to make the executives' bios look better. They can say on their resume, ""I was the CxO of ArsDigita which was later sold to Red Hat"" instead of saying ""I managed to turn $40 million of VC and a profitable company into a heaping pile of mineral-encrusted fish tanks."" Red Hat is a part of the Greylock Keiretsu, too. And even though nobody ever got the Ferrari, it sure made a big splash, didn't it. TV: Oops, they forgot to tell me that they actually wanted me to be in San Francisco for this interview. So it will be rescheduled. Whew!
	"
https://www.joelonsoftware.com/2002/02/07/20020207/,2002/02/07,2002-02-07T00:03:11+00:00,,Joel Spolsky,News,"
	Watch Joel live on TechTV: Friday 7 p.m. Eastern.
	"
https://www.joelonsoftware.com/2002/02/06/20020206/,2002/02/06,2002-02-06T00:03:10+00:00,,Joel Spolsky,News,"
	TechInterview: ""I have a black triangle, a white triangle, a black circle and a white circle..."" These classic problems are reported in [Shafir 1994]. Read it if you can get your hands on it. The interesting thing for us as programmers is that certain types of logical thinking are inherently hard. In particular, most people will stop working through a problem when they get to a disjunction, that is, a point on the decision tree where you need more information. This becomes especially interesting when you don't actually need the information because the result would be the same in any case. But there is something that makes most people unwilling to go past uncertainty points in problem solving anyway. Good programmers usually overcome this problem. It's a critical skill in debugging - we don't want to waste time investigating areas that could not possibly cause the bug. This might be one of those interesting brain-properties that distinguishes great programmers from everyone else. Shafir, Eldar. (1994): Uncertainty and the difficulty of thinking through disjunctions. Cognition, 50, 403-430. (Reprinted in J. Mehler & S. Franck (Eds.), Cognition on Cognition, Cambridge, MA: MIT Press, 1995.) 
	"
https://www.joelonsoftware.com/2002/02/04/20020204/,2002/02/04,2002-02-04T00:03:09+00:00,,Joel Spolsky,News,"
	CityDesk Users: There's nothing worse than upgrading to a supposed ""bug fix"" release that makes your stuff stop working...
	"
https://www.joelonsoftware.com/2002/03/20/20020320/,2002/03/20,2002-03-20T00:03:20+00:00,,Joel Spolsky,News,"
	Today I'm learning ADO.NET. Am I crazy, or is this a step backwards? Adam Fisk: Lose the Joel-Worship! It's true. I get email from people on development teams who appear to be in some kind of big fight over something, and they are hitting each other over the head with various quotes from me, instead of thinking for themselves, and now they want me to adjudicate, as if I know the first thing about their problems or their world. I haven't yet written the article that says that if you can't think for yourself, no amount of ""methodology"" is going to save you.
	"
https://www.joelonsoftware.com/2002/03/18/20020318/,2002/03/18,2002-03-18T00:03:19+00:00,,Joel Spolsky,News,"
	Sydney Morning Herald: ""Countless managers of small to medium sites have wondered how to cross the chasm from hand-built pages to a true content management system. Now a product called CityDesk provides the best answer yet."" (Reprinted here) From the Flogging of Dead Horses departmentRick Chapman interviewed me again... no, I still don't think you should rewrite large software products from the ground up. Not even Outlook.
	"
https://www.joelonsoftware.com/2002/03/14/20020314/,2002/03/14,2002-03-14T00:03:18+00:00,,Joel Spolsky,News,"
	Three months after the original version, Fog Creek Software shipped a new version of CityDesk today, a free service pack release that fixes about 100 bugs and adds some spiffy new features that people were clamoring for. The biggest complaint about CityDesk was that it generated weird URL names (which actually surprised me, because most other content management systems do the same). So we fixed that. We added a few easy features that I think will go a long way. And we fixed all known bugs - many of which we found out about because CityDesk catches most crashes and transmits crucial crash info to us. What's New in SP1
	"
https://www.joelonsoftware.com/2002/03/13/20020313/,2002/03/13,2002-03-13T00:03:17+00:00,,Joel Spolsky,News,"
	As promised (months ago!) I've completely revamped my list of recommended books. I've always wanted this to be a ""programmers bookshelf"" listing the books that I think every software developer should read. So I removed some books, good ones but not crucial ones, and I added a bunch of books, and came up with 19 must-read books (plus 2 books if you want to become a programmer). Visit the new Book Reviews page. 
	"
https://www.joelonsoftware.com/2002/03/11/20020311/,2002/03/11,2002-03-11T00:03:16+00:00,,Joel Spolsky,News,"
	My publisher sent me a couple of new books today which might be of some interest to this crowd: Herding Cats: A Primer for Programmers who Lead ProgrammersJ. Hank RainwaterThe Career Programmer: Guerilla Tactics for an Imperfect WorldChristopher DuncanI haven't read them yet. Let me know what you think - do they deserve a place in the hall of fame?
	"
https://www.joelonsoftware.com/2002/03/05/20020305/,2002/03/05,2002-03-05T00:03:15+00:00,,Joel Spolsky,News,"
	The combination of nothing-is-as-simple-as-it-seems and reduce-risk can only lead you to one conclusion: You have to design things before you implement them.
	"
https://www.joelonsoftware.com/2002/03/04/nothing-is-as-simple-as-it-seems/,Nothing is as Simple as it Seems,2002-03-04T00:14:41+00:00,2019-04-22T14:32:34+00:00,Joel Spolsky,"Software designer, News","
	We had a little usability problem in CityDesk.
Here was the problem: you could import files from the web using a menu command (""Import Web Page""). And you could import files from a disk into CityDesk by dragging them with the mouse. But there was no menu command to import files from a disk. So either people didn't discover that it was possible, or people tried to use the Import Web Page feature to import from disk, which didn't work right.
I thought that it would be easy to fix with a two page wizard. Roughly speaking, page one of the wizard would ask you ""Where do you want to import from?"" If you chose ""disk,"" page two would prompt you for a file. If you chose ""web,"" page two would prompt you for a URL.
I almost started implementing this, but something stopped me, and instead, I started to write a mini-spec. Here's the spec, in its entirety:
Page One
Where do you want to import from? (Disk/Web)
Page Two (Disk)
Standard File/Open dialog
Page Two (Web)
URL prompt with mini-web-browser
Suddenly something occurred to me. Can you put the Windows standard file open dialog, which is usually supplied in toto by the OS, into a wizard?
Hmm.
I investigated. Yes, you can, but it's no fun and takes a few hours of work. How could I make this not be a wizard? I rewrote the spec:
Two Menu Items:
1) Import Web Page From Internet -> Pops Up URL Dialog
2) Import Web Page From Disk -> Pops Up File Open Dialog
Much better. Three minutes of design work saved me hours of coding.
If you've spent more than 20 minutes of your life writing code, you've probably discovered a good rule of thumb by now: nothing is as simple as it seems.
Something as simple as copying a file is full of perils. What if the first argument is a directory? What if the second argument is a file? What if a file with the same name already exists in the destination? What if you don't have write permission?
What if the copy fails in the middle? What if the destination is on a remote machine which is available, but which requires authentication to continue? What if the files are large and the link is slow and you need to show a progress indicator? What if the transfer speed slows down to almost zero... when do you give up and return an error message?
A good way to interview candidates for testing jobs is to give them a simple operation and ask them to enumerate all the things that can possibly go wrong. A classic Microsoft test interview question: how do you test the File Open dialog box? A good tester will be able to rattle off several dozen weird things to test (""file is deleted by another user between the time it is listed in the box and the time you select it and click Open"").
OK, so we have one axiom: nothing is as simple as it seems.
There's another axiom in software engineering, which is, always try to reduce risk. One particularly important piece of risk to avoid is schedule risk, when something takes longer than expected. Schedule risk is bad because your boss yells at you, which makes you unhappy. If that's not enough motivation for you, the economic reason why schedule risk is bad is because you decided to do a feature based on information that it would take 1 week. Now that you realize that it has taken 20 weeks to accomplish, that decision might well have been wrong. Perhaps if you knew it was going to take 20 weeks, you would have made a different decision. The more wrong decisions you make, the more likely all those tote bags with your company logo will end up in the liquidator's warehouse while your ex-CEO mopes that ""what sucks is, we weren't even successful enough to get mentioned on f***edcompany.com when we shut down!""
The combination of nothing-is-as-simple-as-it-seems and reduce-risk can only lead you to one conclusion:
You have to design things before you implement them.
I'm sorry to disappoint you. Yeah, I know, you read Kent Beck and now you think it's OK to not design things before you implement them. Sorry, it's not OK. You can not change things in code ""just as easily"" as you could change them in the design documents. People say this all the time and it's wrong. ""We use high-level tools these days, like Java and XML. We can change things in minutes in the code. Why not design it in code?"" My friend, you can put wheels on your mama but that doesn't make her a bus, and if you think you can refactor your wrongly-implemented file-copy function to make it preemptive rather than threaded as quickly as I could write that sentence, you're in deep denial.
Anyway, I don't think Extreme Programming really advocates zero design. They just say ""don't do any more design than needed,"" which is fine. But that's not what people hear. Most programmers are looking for any excuse they can find not to do basic design before implementing features. So they latch onto the ""no-design"" idea like flies in a bug zapper. Dzzzzzzt! It's one of those weird forms of laziness where you end up doing more work than you would have done otherwise. I'm too lazy to design the feature on paper first, so I just write some code, and then it's not right, so I have to fix it, and I spend more time than I would have otherwise. Or, more commonly, I write some code, and then it's not right, but it's too late, and my product is inferior and I spend until the end of time making up excuses for why it ""has to be that way."" It's just sloppy and unprofessional.
When Linus Torvalds bashes design, he's talking about huge systems, which have to evolve, or they become Multics. He's not talking about your File Copy code. And when you consider that he had a pretty clear road map of exactly where he was going, it's no wonder Linus doesn't see much value in design. Don't fall for it. Chances are it doesn't apply to you. And anyway, Linus is much smarter than we are, so things that work for him don't work for us normal people.
Incremental design and implementation is good. Frequent releases are fine (although for shrink-wrapped or mass market software, it drives customers crazy, never a good idea - instead do frequent internal milestones.) Too much formality in design is a waste of time - I've never seen a project benefit from mindless flowcharting or UMLing or CRCing or whatever the flavor-du-jour is. And those huge 10 million lines-of-code behemoth systems Linus is talking about should evolve, because humans don't really know how to design software on that scale.
But when you sit down to write File Copy, or when you sit down to plan the features of the next release of your software, you gotta design. Don't let the sirens persuade you otherwise.
Come argue with me about this in person at the Cutter Summit, April 29-May 1st, in Cambridge, MA, where I'll be on a panel with Tom DeMarco, Kent Beck, and others.
	"
https://www.joelonsoftware.com/2002/04/30/20020430/,2002/04/30,2002-04-30T00:03:31+00:00,,Joel Spolsky,News,"
	Today at lunch I finally got a chance to do something I've been waiting for ten years to do: I sat down with Tom DeMarco to talk about office space. I've been a strong believer in private offices for developers, something which Tom advocates in his bestseller Peopleware. I asked him about how pair programming can be reconciled with private offices; I imagined that a buzzing room full of developers working in pairs would be too distracting an environment to get into flow and stay there. Tom said that groups of people who work in the same style on the same kinds of tasks will not distract each other. Programmers working on the same project would not distract each other; a room full of sales reps who spend most of the day on the phone don't distract each other; etc. You get in trouble, though, when you put a programmer in a room with the sales reps. We generally agreed that if you keep the noise level down and keep the outside interruptions away, it's OK to have an open space floorplan for your development team. That said, if you're doing pair programming, you're not going to spend more than 3-4 hours a day working with your code buddy. For all the other things you do (phone conversations, design discussions at the whiteboard, etc.) it's nice to have private offices. And when you're trying to recruit superstar programmers they will expect a plush private office. (Just try and get Tom Cruise to make your movie if he doesn't get his own dressing room.) So now I'm envisioning the ideal development interior plan as one where programmers have private offices but they meet in labs with their buddies to get production programming done. No email, phones, or non-programmers would be allowed in the labs. All the non-programming work you do - design, negotiation, scheduling, reading, thinking, and Tetris - could be done in your private office. World's Worst Misinterpretation of The Mythical Man Month When I read this article by Scott Rosenberg for Salon, I thought it was a complete misapplication of the Mythical Man Month. Reviewing a large body of existing code to find security problems is easily divided up among huge teams of people, and should not suffer from any of the Mythical Man Month problems. The article is just flat-out wrong. The nice thing about being at the Cutter Summit is that I can ask Mark Seiden, one of the world's foremost experts on computer security, if I'm crazy. ""You're right,"" he said, ""it doesn't apply. There are no interdependencies to speak of.""
	"
https://www.joelonsoftware.com/2002/04/28/20020428/,2002/04/28,2002-04-28T00:03:30+00:00,,Joel Spolsky,News,"
	Ah good; free high speed Internet access in my hotel room. Extreme Programming One of the things that I thought made Extreme Programming inappropriate for shrinkwrapped software was the fact that XP calls for frequent iterations, which is usually interpreted to mean frequent releases. With shrinkwrapped mass market software, you just can't do that. Tech support would become completely impossible if some customers were using Windows May 15, 1998 while other customers had Windows May 16th (Second Release), 1998. There are similar problems with embedded software. You really can't rerelease the embedded software that runs your BMW engine every day or every week. Talking to Kent Beck about this today, he pointed out that the simple solution is to do frequent iterations but only release on a longer schedule. Thinking more about this, I think we might move to a model at Fog Creek where a select group of volunteer customers receive very frequent releases in exchange for providing very frequent feedback, while the rest of the world gets far less frequent releases. The nice thing about this is that we can design something, implement it, and realize that the design was wrong and then be able to change it without having to maintain backwards compatibility with the old, ""wrong"" design (CityDesk customers following the whole URL naming convention switcheroo will understand what I'm talking about, here.) Some other notable Beck quotes: ""The fundamental project management question is: we're halfway through, are we halfway done?"" And on the topic of rolling out XP to a large organization: ""It's not divide and conquer, it's conquer and divide."" Get your XP teams working right first, then split them and add new people to each half. Building a consistent culture for code development requires that everyone is on the same page. Add people too fast, and you'll find yourself with lots of different cultures, which creates conflict, inconsistency, and problems at the edges.
	"
https://www.joelonsoftware.com/2002/04/27/20020427/,2002/04/27,2002-04-27T00:03:29+00:00,,Joel Spolsky,News,"
	The New York Times: ""Things are so needlessly complex because featuritis sells products,"" Dr. Tenner said. ""People buy them for a feeling of control, then complain that they are so hard to manage. But show them something simple and rugged, and most of them will call it boring."" Featuritis sells products, but choices reduce usability. The really great designs are the ones that appear to eliminate a choice. You know you're doing your job as a designer when you figure out a way to take a complicated feature and make it simpler. Windows NT has a complete two-way folder synchronization feature hidden behind a single menu checkbox ""Make Available Offline."" Sometime around 1992, the Excel developers managed to reduce the sorting feature to a single click - this actually took a lot of work internally, because it has to figure out which column to sort, where the table really is, and whether there are row headings that shouldn't be sorted. Today I'm writing JavaScript client code to make bug editing a little bit smarter in FogBUGZ, which will completely eliminate the Move command for moving bugs from project to project (because you'll be able to just edit the bug to change the project). This takes more code and more validation and I have to make sure it works even if the browser doesn't support JavaScript. It usually takes a lot more code to make a simpler interface.
	"
https://www.joelonsoftware.com/2002/04/26/20020426/,2002/04/26,2002-04-26T00:03:28+00:00,,Joel Spolsky,News,"
	I'll be at the Cutter Summit this week.
	"
https://www.joelonsoftware.com/2002/04/25/20020425/,2002/04/25,2002-04-25T00:03:27+00:00,,Joel Spolsky,News,"
	 There's a lot of SOAP backlash these days. For example Paul Prescod is moping about how SOAP is so much more complicated and less efficient than what he calls XML/HTTP/URI. Everything he says is factually correct, but his conclusion is a bit off the mark. Yes, SOAP is more complicated than URIs with XML responses, but only if you are the kind of person who hand codes your web services calls. The point of SOAP is that you use higher level languages to call it and to implement it and then it's easier and better and typesafe and all that good stuff. Many things in SOAP are there to make it easier. WSDL is there so that I can type ""google"" followed by a dot and immediately get a little intellisense popup telling me what methods I can call. Then I can choose doGoogleSearch from the popup list and get intellisense again prompting me for all the arguments, and I can get little wavy red underlines in my editor if I pass a string where a long was expected. This is all stuff that makes the API easier to use. The claim that SOAP is bad because the wire format is ugly and hard is like claiming nobody should use Pentiums because their instruction sets are so much more complicated than the instruction set for the 8086. Yeah, it's true, but we have compilers that take care of that, and lo and behold, all those complicated hard things like rings and virtual memory actually make it easier for the many who use compilers at the expense of the few who write compilers. I think most of the criticism of SOAP can be traced back to a few grumpy language vendors who don't feel like doing the hard work to support it (especially WSDL), or are still living in the archaic land of variants, not intellisense, so they can't really figure out how to do WSDL. Ten years ago, we used variants extensively in our scripting languages (ExcelVBA, JavaScript, perl) because the kinds of novice programmers who were getting their feet wet didn't understand types, and even experienced programmers knocking off quick-and-dirty scripts didn't want to bother with types. Today, when you have a strongly typed language, a good type library (IDL, WSDL, Java reflection) documenting your classes, and an IDE that knows how to show you that type library as you code (i.e. Intellisense), it's even easier to use types than variants, so the trend is away from variant-bound scripting languages (VBScript, PHP, perl) towards typed code (C#, JSP). Prescod's most valuable point is the performance issue, which happens to matter for Google because they have thousands of servers, but it doesn't matter as much for 99.99% of the web services that are going to be deployed in the real world. (Assuming the post-Web-Services-Hype-backlash doesn't kill us all before then...) The real problem with SOAP is that it's a completely inadequate remoting system. It doesn't have events (which makes it useless for large classes of applications). It doesn't support references (ditto). It has about 10 years to go before it gets to where CORBA and DCOM were 10 years ago. And we're supposed to be all excited about this because we can sneak through the firewall. Gee, I wonder what the firewall vendors are working on these days? As soon as they're done, we're even further back than we started. Actually... The real problem with SOAP is that it's the poster boy for Web Services, which are just the next step in a long line of technologies that has been way overhyped by bored trade rag editors and conference organizers and web pundits. You know that something is overhyped when every stupid VC funded startup feels compelled to change their strategy to get behind the latest flavor of the day. Look at poor KnowNow; with all the hype about Web Services they confused their already muddled and misunderstood message by trying to jump on that bandwagon ... but the Hype Kingmakers at InfoWorld were not falling for it! No Sirree! KnowNow was officially scolded for not being real Web Services. Attention, young startups: the trouble with jumping on InfoWorld's fake hype bandwagons is that by the time you get there with real products, you'll be smacked in the face by the Tyrannosaurus Rex tail backlash. It's like the VCs who watched the Lycos IPO and suddenly decided to fund portals. By the time the products came to market, Lycos was over and long gone and everybody was ridiculing portals. Just watch, I predict within three weeks InfoWorld runs out of ideas for Web Services stories and has to run a big spread on how Web Services were ""overhyped"" and now CTOs are ""revolting"" against ""vaporware.""
	"
https://www.joelonsoftware.com/2002/04/19/20020419/,2002/04/19,2002-04-19T00:03:26+00:00,,Joel Spolsky,News,"
	I've been having a lot of fun developing The Fog Creek Control Panel with ASP.Net. It's a web page that allows us to track critical business data in real time. I can see things like how many people are registering the CityDesk starter edition, how many affiliate applications need to be processed, how many bug reports have arrived from customers (2 so far today), and so on. This morning I added two features: one gets detailed order information for any purchase in our database, and the other lists open purchase orders people have placed with us. Elapsed time to implement both features: 20 minutes. To be fair not everything about .NET is peaches and cream. Here are a few steps backwards I've noticed so far: the IDE is amazingly sluggish on my PIII/600 laptop. (Speaking of which, why the heck can't I get a Thinkpad X-series with a 1.7 GHz P4M already? Does anybody know of any ultralight notebooks with this chip?) since destructors aren't called when an object drops out of scope, if you have a SqlConnection object, you positively have to remember to close it because you can't wait for the garbage collector to come around. I suppose this limitation of GCs has been argued to death when Java came around, and it's not a big deal, but it is a step backwards that 20 MB runtime is a real showstopper. Yes, this is an advantage to Delphi. I'm starting to suspect that Microsoft doesn't care - they are perfectly happy to have a development environment that is excellent for internal/corporate applications, where they don't compete, but borderline useless for shipping, commercial, shrinkwrap, where they do compete. 
	"
https://www.joelonsoftware.com/2002/04/12/20020412/,2002/04/12,2002-04-12T00:03:25+00:00,,Joel Spolsky,News,"
	Whitelist spam filters are probably the last hope for dealing with spam in a meaningful way, and I can tell that people are starting to use them - the last notification email I sent out resulted in a few replies saying ""please respond to this message with blahblah in the subject line if you want me to read it"" which is what the whitelist programs bounce back. I can't really process all of these bounces manually; my mailing lists are managed by a professional service provider (Whatcounts; recommended). The moral of the story is that if you have a whitelist filter, please make sure that *@whatcounts.com is allowed or you won't get the mailing list. Also, all mailing list messages will always contain [JoelOnSoftware] in the subject line. Open Source and Usability Matthew Thomas, a Mozilla contributor, wrote something interesting about why free software usability tends to suck. Coupons are Fun We just implemented coupons for our web shop. Nifty. Here's a treat for the weekend: enter MISSPIGGY in the coupon box to get CityDesk Home Edition for $59 instead of $79. Expires April 15th. (The serious point of coupons is that they let you try different offers on different people and figure out which ones are the most profitable. For example we could send 1000 people a coupon for $20 off, and 1000 people a coupon for $40 off, and compare the response rates).
	"
https://www.joelonsoftware.com/2002/04/11/20020411/,2002/04/11,2002-04-11T00:03:24+00:00,,Joel Spolsky,News,"
	According to the New York Times, Microsoft has pretty much abandoned their plans to centralize everyone's personal data. The plan, a version of Passport on steroids called Hailstorm, never had a chance, for three reasons. First and foremost, Microsoft could never get any other company to go along with it. Partially this is because nobody trusts Microsoft any more; more significantly, it's because there's no real benefit to the other companies. Second, consumers weren't about to trust Microsoft with all their juicy personal data. There was just too much of an uproar. And finally, as in now becomes clear, this was Rick Belluzzo's pet project, and, as anyone could have told Rick, Microsoft doesn't really like executives brought in from outside, even though they keep bringing them in. Moving to .Net I wrote up our current thoughts about moving to .NET at Fog Creek.
	"
https://www.joelonsoftware.com/2002/04/10/20020410/,2002/04/10,2002-04-10T00:03:23+00:00,,Joel Spolsky,News,"
	Guerrilla Marketing For reasons that are explained in today's ship date article, my company's current marketing efforts are focused on low profile, word-of-mouth marketing, not Superbowl ads. As a company founded by programmers, it's no surprise that a lot of what we do for sales and marketing is done by writing code, not by making phone calls or hiring ad agencies! In that spirit Michael has finished setting up an affiliate program for Fog Creek Software. A little ASP code, some database magic, three thousand pages of lawyer-approved legalese, and hey presto! an automatic sales program that costs very little. If you have a web site, you can link to CityDesk or FogBUGZ and earn 15% any time someone buys our software through your link. We also decided to actually allow you to link to Joel on Software and TechInterview with the affiliate program. A lot of people hear about our software through these sites. So web sites that would link to JoelOnSoftware anyway can make money if anyone they refer eventually buys software from us (it works using a 30-day cookie). To get the new program off to a good start, I'm going to raise the commission to 20% for anyone who signs up by Friday. And if you make your first sale before May 1st, we'll boost your commission to 25% permanently. You could make almost $500 if someone you refer to us buys a single FogBUGZ site license. Today's Article: Picking Ship Dates One of the best reasons to make a detailed schedule is because it gives you an excuse to cut features. If there's no way to make the ship date and implement Bob's Singalong MP3 Chat feature, it's easy to cut that feature without making Bob feel bad. But - how do you pick a ship date? 
	"
https://www.joelonsoftware.com/2002/04/09/picking-a-ship-date/,Picking a Ship Date,2002-04-09T00:15:43+00:00,2016-12-05T19:32:08+00:00,Joel Spolsky,"News, Program manager","
	One of the best reasons to make a detailed schedule is because it gives you an excuse to cut features. If there's no way to make the ship date and implement Bob's Singalong MP3 Chat feature, it's easy to cut that feature without making Bob feel bad.
So my basic rule for software release cycles is:
Set a ship date, which might as well be arbitrary
Make a list of features and sort them out by priority
Cut low-priority features every time you slip so as to make the date.
If you do this well, you'll soon discover that you don't regret the features that you cut. They're usually kind of dumb. If they were so important, you can do them next time. It's like editing. If you ever want to write a brilliant 750 word essay, start by writing a 1500 word essay and then edit.
One way to screw this up, by the way, is forgetting to do features in order of priority. If you aren't careful, your programmers are going to do features in order of fun, and you won't be able to ship or cut features because all the programmers were busy writing Karaoke Recalc before they even got the menus to work, and now here it is, six months after the day you wanted to ship, and you have one hell of an easter egg but no functionality.
So the obvious question is: how do you pick a ship date?
It's conceivable that you have outside constraints. The stock market is switching from fractions to decimals on such-and-such a date, and if you haven't got the new software ready, your firm will be forced out of business and you personally will be taken out behind the loading docks and shot in the head. Or maybe a new version of the Linux kernel is coming out soon with yet another all-new system to implement packet filtering; all your customers are getting it; and your existing application won't run on it. OK, for those people, your ship date is easy to figure out. You can stop reading this article now. Go cook a nice dinner for your loved ones. 
Bye, now!
But how should the rest of us pick a ship date?
There are three approaches you could take.
Frequent Small Releases. This is the Extreme Programming approach, and is most appropriate for small-team projects with a small number of customers, such as in-house IT development.
Every 12 to 18 months. This is typical of shrinkwrapped software products, desktop applications, etc., where you have larger teams and thousands or millions of customers.
Every 3-5 years. This is typical of huge software systems and platforms that are worlds unto themselves. Operating systems, .Net, Oracle, and for some reason Mozilla fall into this category. They often have thousands of developers (VS.Net had 50 people on the installer team) and enormously complex interactions to other shipping software which can't be allowed to break.
Here are some of the things you need to think about when deciding how often to release software.
Short releases get customer feedback fast. Sometimes the best way to work with a customer is to show them code, let them try it out, and immediately incorporate their feedback into a build which you give them the very next day. You won't waste a year developing a complicated system with lots of features that nobody uses, because you'll be so busy doing things that customers are requesting right now. If you have a small number of customers, prefer frequent small releases. The size of each release should be the minimum chunk that does something useful.
Several years ago I was assigned to develop a web content management system for MTV. The requirements called for a database-backed system with templates, and a complete workflow system that allowed unpaid MTV stringers at colleges across the country to input information about clubs, record stores, radio stations, and concerts. ""How are you building the site now?"" I asked.
""Oh, we just do it all manually with BBEdit,"" they told me. ""Sure, there are thousands of pages, but BBEdit has a really good global-find-and-replace function...""
I figured the whole system would take six months to deliver. ""But let me suggest something else. Let's get the templating stuff working first. I can get you that in 3 months and it will save tons of manual work right away. Once that's working we'll start in on the workflow component; in the meantime you can continue to do workflow with email.""
They agreed. It sounded like a great idea. Guess what? Once I delivered the templating feature, they realized that they didn't really need workflow that much. And the templating turned out to be useful for lots of other web sites which didn't need workflow, either. So we never built workflow, saving three months which I used to enhance the templating feature which turned out to be more useful.
 
Some types of customers don't appreciate being ""guinea pigs"" in this fashion. Generally, people who buy off-the-shelf software don't want to be part of a Grand Development Experiment; they want something that anticipates their needs. As a customer, the only thing better than getting feature requests done quickly is getting them instantaneously because they're already in the product, because it was designed thoughtfully and extensively usability- and beta-tested before being inflicted on the world. If you have (or want) a large number of paying customers, prefer less frequent releases.
If you ship an anemic commercial program just to get something out the door so you can ""start listening to customers,"" what you'll hear those customers saying is ""it doesn't do very much,"" which you might think is OK. Hey, it's 1.0. But then if you release 2.0 four months later, everybody's going to think, ""That feeble program? What am I, supposed to keep evaluating it every four months just to see if it's gotten better yet?!"" And in fact five years down the line, people will still remember their first impression of 1.0, and it will be almost impossible to get them to reevaluate. Think about what happened to poor Marimba. They launched their company with infinite VC in the days of hyper-Java-hype, having lured the key developers from the Java team at Sun. They had a CEO, Kim Polese, who was brilliant at public relations; when she was marketing Java she had Danny Hillis making speeches about how Java was the next step in human evolution; George Gilder wrote these breathless articles about how Java was going to completely upturn the very nature of human civilization. Compared to Java, we were to believe, monotheism, for example, was just a wee blip. Polese is that good. So when Marimba Castanet launched it probably had more unearned hype than any product in history, but the developers had only been working on it for a total of ... four months. We all downloaded it and discovered that - tada! - it was a list box that downloaded software. (What do you expect from four months of development?) Big whoop. The disappointment was so thick you could cut it with butter. And here it is, six years later, ask anybody what Castanet is and they'll tell you it's a list box that downloads software. Hardly anyone bothered to reevaluate it, and Marimba has had six years to write code; I'm sure it's just the coolest thing now but, honestly, who has time to find out? Let me tell you a little secret: our strategy for CityDesk is to avoid massive PR until 2.0 is out. That's the version that we want everybody on earth to get their first impressions from. In the meantime we'll do quiet guerilla marketing, and anybody who finds it will discover that it's a completely spiffy program that solves a lot of problems, but Arnold Toynbee won't have to rewrite anything.
With most commercial software, you'll discover that the process of designing, prototyping, integrating, fixing bugs, running a full alpha and beta cycles, creating documentation, and so forth takes 6-9 months. In fact if you try to do a full release every year, you only have time for about 3 months worth of new code development. Software that is upgraded annually usually doesn't feel like it has enough new features to justify the upgrade. (Corel PhotoPaint and Intuit Quickbooks are particularly egregious examples of this; they have a new ""major"" version every year which is rarely worth buying). As a result many people have learned by now to skip every other release. You don't want your customers getting in that habit. If you stretch out your schedule to 15 or 18 months between releases, you get 6 months of new features instead of 3 months worth, which makes your upgrade a lot more compelling.
OK, if 15 months is so good, wouldn't 24 months be better? Maybe. Some companies can get away with it, if they are major leaders in their category. PhotoShop seems to get away with it. But as soon as an application starts to feel old, people stop buying it because they are expecting that new version Any Day Now. This can cause serious cash flow problems for a software business. And of course you may have competitors nipping at your heels.
For large platform software - operating systems, compilers, web browsers, DBMSs - the hardest part of the development process is maintaining compatibility with thousands or millions of existing applications or hardware. When a new version of Windows comes out, you very rarely hear about backwards compatibility problems. The only way they can achieve this is with insane amounts of testing that make the construction of the Panama Canal seem like a weekend do-it-yourself project. Given the typical 3 year cycle between major Windows releases, almost all of that time is spent in the boring integration and testing phase, not writing new features. Releasing new versions any more often than that is just not realistic. And it would drive people crazy. Third party software and hardware developers would simply revolt if they had to test against lots of little incremental releases of an operating system. For Systems With Millions of Customers and Millions of Integration Points, Prefer Rare Releases. You can do it like Apache: one release at the beginning of the Internet Bubble, and one release at the end. Perfect.
If you have a lot of validation and unit tests, and if you write your software carefully, you may get to the point where any daily build is almost high enough quality to ship. This is certainly something to strive for. Even if you're planning the next release for three years from now, the competitive landscape may suddenly change and there may be a good reason to do a quick interim release to react to a competitor. When your wife is about to give birth, it's not really a good idea to take apart your car's engine. Instead build a new one on the side and don't hook it up until it's perfect. 
But don't overestimate what you can accomplish by keeping high quality daily builds. Even if you are permanently at zero bugs, if your software has to run In The Wild, you're never going to find all the compatibility bugs and Windows 95 bugs and It-Doesn't-Work-With-Large-Fonts-Turned-On bugs until you do a few betas, and there is no realistic way to do a beta cycle in less than 8 weeks.
One final thought. If your software is delivered as a service over the web, like ebay or PayPal, theoretically there's nothing to stop you from frequent small releases, but this might not be the best thing to do. Remember the cardinal rule of usability: an application is usable if it behaves the way that the user expected it to behave. If you keep changing things around every week, it won't be so predictable, so it won't be so usable. (And don't think you can get around this by having one of those annoying screens with a paragraph of text saying Warning! The UI has changed! Nobody reads those.) From a usability perspective a better approach would probably be less frequent releases that include a bunch of changes all at once, where you make an effort to change the visuals of the whole site so that it all looks weird and users intuit that things have changed a lot and they have to be careful.
	"
https://www.joelonsoftware.com/2002/05/16/20020516/,2002/05/16,2002-05-16T00:03:38+00:00,,Joel Spolsky,News,"
	James Ladd: ""Have any of you integrated a software license management solution into your product?"" (We're rolling our own for Fog Creek's products.)
	"
https://www.joelonsoftware.com/2002/05/13/20020513/,2002/05/13,2002-05-13T00:03:37+00:00,,Joel Spolsky,News,"
	RealNames is going out of business. They deserve it. It was just a dumb scam to try and establish yet another Verisign-like monopoly on everybody else's trademarks. And it was a ""boil the ocean"" business plan, one which required everybody on earth to go along with their stupid scheme. And Keith Teare's public crybabying is really quite unprofessional, albeit fun to read. Now if New.net would kindly just go away. Why anybody would pay actual money, the stuff that can be used to purchase valuable goods and services, for a domain name that is only visible to a fraction of the Internet is completely beyond my comprehension. Another scam hoping to prey on stupid businesses?
	"
https://www.joelonsoftware.com/2002/05/10/20020510/,2002/05/10,2002-05-10T00:03:36+00:00,,Joel Spolsky,News,"
	Jim Highsmith has a great idea for figuring out the big picture of the products you build: ""design the box.""
	"
https://www.joelonsoftware.com/2002/05/08/20020508/,2002/05/08,2002-05-08T00:03:35+00:00,,Joel Spolsky,News,"
	Bertrand Meyer provides a far better analysis than I did about multiple languages in .NET in this month's Software Development Magazine. ""Of course, the [.NET] languages involved have their own models, which may differ significantly from the .NET object model. That's to be expected: Otherwise, they wouldn't really be different languages, just a different syntax and minor variations on a single language theme. To a certain extent, this characterization could be applied to C# and Visual Basic .NET; one may claim that these two are, deep down, just one language, now that VB has become an OO language. But it's definitely incorrect if we consider the entire set of .NET language players."" He goes on to point out that ""Managed C++ is very close to C#, in spite of what the default Microsoft descriptions would have you believe."" And I'm sure when Java.NET comes out it will be too.
	"
https://www.joelonsoftware.com/2002/05/07/20020507/,2002/05/07,2002-05-07T00:03:34+00:00,,Joel Spolsky,News,"
	Five Worlds: not all software development is the same.
PS. There is a large grey area between internal, consultingware, and shrinkwrap - the three worlds are often a continuum. Often products start out as internal products, then the business guys have the bright idea of selling it to other companies, but it is so brittle and makes so many assumptions about its environment that it takes weeks to install it at other customers' sites, which is how consultingware is born. (cf. Vignette StoryServer which started as c|net's inhouse content management system and now costs millions to get running.) Theoretically the software should then migrate towards shrinkwrap as the customer base grows, with increasing emphasis on ease of installation, but these companies get so addicted to their consulting revenue they don't see any benefit in making it easier to use off-the-shelf. And many internal developers have no prior experience with making software run in the wild, so it doesn't.
	"
https://www.joelonsoftware.com/2002/05/06/five-worlds/,Five Worlds,2002-05-06T00:14:58+00:00,2016-12-05T19:19:20+00:00,Joel Spolsky,"Rock star developer, News","
	Something important is almost never mentioned in all the literature about programming and software development, and as a result we sometimes misunderstand each other.
You're a software developer. Me too. But we may not have the same goals and requirements. In fact there are several different worlds of software development, and different rules apply to different worlds.
You read a book about UML modeling, and nowhere does it say that it doesn't make sense for programming device drivers. Or you read an article saying that ""the 20MB runtime [required for .NET] is a NON issue"" and it doesn't mention the obvious: if you're trying to write code for a 32KB ROM on a pager it very much is an issue!
I think there are five worlds here, sometimes intersecting, often not. The five are:
Shrinkwrap
Internal
Embedded
Games
Throwaway
When you read the latest book about Extreme Programming, or one of Steve McConnell's excellent books, or Joel on Software, or Software Development magazine, you see a lot of claims about how to do software development, but you hardly ever see any mention of what kind of development they're talking about, which is unfortunate, because sometimes you need to do things differently in different worlds.
Let's go over the categories briefly.
Shrinkwrap is software that needs to be used ""in the wild"" by a large number of people. It may be actually wrapped in cellophane and sold at CompUSA, or it may be downloaded over the Internet. It may be commercial or shareware or open source or GNU or whatever - the main point here is software that will be installed and used by thousands or millions of people.
Shrinkwrap has special problems which derive from two special properties:
Since it has so many users who often have alternatives, the user interface needs to be easier than average in order to achieve success.
Since it runs on so many computers, the code must be unusually resilient to variations between computers. Last week someone emailed me about a bug in CityDesk which only appears in Polish Windows, because of the way that operating system uses Right-Alt to enter special characters. We tested Windows 95, 95OSR2, 98, 98SE, Me, NT 4.0, Win 2000, and Win XP. We tested with IE 5.01, 5.5, or 6.0 installed. We tested US, Spanish, French, Hebrew, and Chinese Windows. But we hadn't quite gotten around to Polish yet.
There are three major variations of shrinkwrap. Open Source software is often developed without anyone getting paid to develop it, which changes the dynamics a lot. For example, things that are not considered ""fun"" often don't get done in an all-volunteer team, and, as Matthew Thomas points out eloquently, this can hurt usability. Development is much more likely to be geographically dispersed, which results in a radically different quality of team communication. It's rare in the open source world to have a face to face conversation around a whiteboard drawing boxes and arrows, so the kind of design decisions which benefit from drawing boxes and arrows are usually decided poorly on such projects. As a result geographically dispersed teams have done far better at cloning existing software where little or no design is required.
Consultingware is a variant of shrinkwrap which requires so much customization and installation that you need an army of consultants to install it, at outrageous cost. CRM and CMS packages often fall in this category. One gets the feeling that they don't actually do anything, they are just an excuse to get an army of consultants in the door billing at $300/hour. Although consultingware is disguised as shrinkwrap, the high cost of an implementation means this is really more like internal software. 
Commercial web based software such as Salesforce.com or even the more garden variety eBay still needs to be easy to use and run on many browsers. Although the developers have the luxury of (at least) some control over the ""deployment"" environment - the computers in the data center - they have to deal with a wide variety of web browsers and a large number of users so I consider this basically a variation of shrinkwrap.
Internal software only has to work in one situation on one company's computers. This makes it a lot easier to develop. You can make lots of assumptions about the environment under which it will run. You can require a particular version of Internet Explorer, or Microsoft Office, or Windows. If you need a graph, let Excel build it for you; everybody in our department has Excel. (But try that with a shrinkwrap package and you eliminate half of your potential customers.)
Here usability is a lower priority, because a limited number of people need to use the software, and they don't have any choice in the matter, and they will just have to deal with it. Speed of development is more important. Because the value of the development effort is spread over only one company, the amount of development resources that can be justified is significantly less. Microsoft can afford to spend $500,000,000 developing an operating system that's only worth about $80 to the average person. But when Detroit Edison develops an energy trading platform, that investment must make sense for a single company. To get a reasonable ROI you can't spend as much as you would on shrinkwrap. So sadly lots of internal software sucks pretty badly. 
Embedded Software has the unique property that it goes in a piece of hardware and in almost every case can never be updated. This is a whole different world, here. The quality requirements are much higher, because there are no second chances. You may be dealing with a processor that runs dramatically more slowly than the typical desktop processor, so you may spend a lot of time optimizing. Fast code is more important than elegant code. The input and output devices available to you may be limited. The GPS system in the car I rented last week had such pathetic I/O that the usability was dismal. Have you ever tried to input an address on one of these things? They displayed a ""keyboard"" on screen and you had to use the directional arrows to choose letters from five small matrices of 9 letters each. (Follow the link for more illustrations of this UI. The GPS in my own car has a touch screen which makes the UI dramatically better. But I digress).
Games are unique for two reasons. First, the economics of game development are hit-oriented. Some games are hits, many more games are failures, and if you want to make money on game software you recognize this and make sure that you have a portfolio of games so that the blockbuster hit makes up for the losses on the failures. This is more like movies than software.
The bigger issue with the development of games is that there's only one version. Once your users have played through Duke Nukem 3D, they are not going to upgrade to Duke Nukem 3.1D just to get some bug fixes and new weapons. With some exceptions, once somebody has played the game to the end, it's boring to play it again. So games have the same quality requirements as embedded software and an incredible financial imperative to get it right the first time. Shrinkwrap developers have the luxury of knowing that if 1.0 doesn't meet people's needs and doesn't sell, maybe 2.0 will.
Finally Throwaway code is code that you create temporarily solely for the purpose of obtaining something else, which you never need to use again once you obtain that thing. For example, you might write a little shell script that massages an input file that you got into the format you need it for some other purpose, and this is a one time operation.
There are probably other kinds of software development that I'm forgetting.
Here's an important thing to know. Whenever you read one of those books about programming methodologies written by a full time software development guru/consultant, you can rest assured that they are talking about internal, corporate software development. Not shrinkwrapped software, not embedded software, and certainly not games. Why? Because corporations are the people who hire these gurus. They're paying the bill. (Trust me, id software is not about to hire Ed Yourdon to talk about structured analysis.)
Last week Kent Beck made a claim that you don't really need bug tracking databases when you're doing Extreme Programming, because the combination of pair programming (with persistent code review) and test driven development (guaranteeing 100% code coverage of the automated tests) means you hardly ever have bugs. That didn't sound right to me. I looked in our own bug tracking database here at Fog Creek to see what kinds of bugs were keeping it busy.
Lo and behold, I discovered that very few of the bugs in there would have been discovered with pair programming or test driven development. Many of our ""bugs"" are really what XP calls stories - basically, just feature requests. We're using the bug tracking system as a way of remembering, prioritizing, and managing all the little improvements and big features we want to implement.
A lot of the other bugs were only discovered after much use in the field. The Polish keyboard thing. There's no way pair programming was going to find that. And logical mistakes that never occurred to us in the way that different features work together. The larger and more complex a program, the more interactions between the features that you don't think about. A particular unlikely sequence of characters ({${?, if you must know) that confuses the lexer. Some ftp servers produce an error when you delete a file that doesn't exist (our ftp server does not complain so this never occurred to us.)
I carefully studied every bug. Out of 106 bugs we fixed for the service pack release of CityDesk, exactly 5 of them could have been prevented through pair programming or test driven design. We actually had more bugs that we knew about and thought weren't important (only to be corrected by our customers!) than bugs that could have been caught by XP methods.
But Kent is right, for other types of development. For most corporate development applications, none of these things would be considered a bug. Program crashes on invalid input? Run it again, and this time watch your {${?'s! And we only have One Kind of FTP server and nobody in the whole company uses Polish Windows.
Most things in software development are the same no matter what kind of project you're working on, but not everything. When somebody tells you about methodology, think about how it applies to the work you're doing. Think about where the person is coming from. Steve McConnell, Steve Maguire, and I all come from a very narrow corner: the world of mass market shrinkwrap spreadsheet applications written in Redmond, Washington. As such we have higher bars for ease of use and lower bars for bugs. Most of the other methodology gurus make their living doing consulting for in house corporate development, and that's what they're talking about. In any case, we should all be able to learn something from each other.
	"
https://www.joelonsoftware.com/2002/05/06/20020506/,2002/05/06,2002-05-06T00:03:33+00:00,,Joel Spolsky,News,"
	Why Religious Wars are Stupid Yesterday I made what I thought was a lightweight claim about how the ""choice"" of languages in .NET is not as much of a choice as you might think. Some people assume that this means I am against .NET, or I'm ""clueless,"" because I don't understand the productivity benefit of managed code. OK, they didn't read what I wrote less than a month ago praising the productivity of .NET. Of course, when I wrote that, some people assumed it meant I was for .NET, and dug up an old article from two years ago in which I complained that an early white paper on .NET didn't say anything. (It was true, the white paper didn't, and .NET didn't ship for 2 years). So I'm a hypocrite because I used to be against .NET and now I'm for .NET. Anything as complicated as .NET is bound to have many positive aspects and many negative aspects. Duh. The stupid thing about religious wars is when one person says, ""you don't get as much language choice as you think"" and the other person says, ""you are clueless, because you're 4-6x more productive!"" What a waste of time. The World Is Complicated. Get Used To It. Some people can't. Look at how angry Michel gets because I point out that (a) features sell products and (b) choices reduce usability. So? The whole point of design is that you have different goals that you need to resolve. Want to design a trashcan for street corner? You have to make it light so it can be emptied easily. You have to make it heavy so it won't blow away. You have to make it big so it will hold lots of trash and the trash won't blow out. You have to make it small so it won't take up too much space. You have to make it easy to throw trash in so people don't miss and litter. You have to make it hard for trash to get out so when it's windy the street doesn't litter itself. Design is all about making hard choices and, hopefully, sometimes, hitting upon elegant solutions that solve conflicting goals. But when you can't solve conflicting goals, you have to be smart enough to decide which goal to solve, and not just be a lazy punter and pretend that adding a checkbox to the options dialog will solve it. Boom Don't use Verisign. They suck, and there's no reason to use them. I've been using register.com for domain names (although namebargain.com is cheaper and run by register.com with the same excellent interface) and Commercelock, also run by register.com, for digital certificates. Commercelock is actually provided by Baltimore Technologies which charges a heck of a lot more for exactly the same thing.
	"
https://www.joelonsoftware.com/2002/05/05/20020505/,2002/05/05,2002-05-05T00:03:32+00:00,,Joel Spolsky,News,"
	Why do developers choose one programming language over another for a given task? Sometimes I choose raw C when I need blazing speed. When I want something that will run on Windows with as small a distribution as possible, I often choose C++ with MFC statically linked. When we need a GUI that will run on Mac, Windows, and Linux, a common choice is Java (although the GUI will not be perfect, it will work.) For rapid GUI development and really smooth UIs, I like Visual Basic, but I know that I'm going to have to pay the price in the size of the distributable and the fact that I'll be locked into Windows. For a command-line tool that must run on any UNIX machine and doesn't need to be fast, perl is a good choice. If you have to run inside a web browser, JavaScript is the really the only choice. In a SQL stored procedure, you usually get to choose between one vendor's proprietary SQL derivative or go home. What's the Point? But I hardly ever choose a language based on syntax. Yeah, I prefer the {}; languages (C/C++/C#/Java). And I have lots of opinions as to what makes a ""good"" syntax. But I wouldn't accept a 20 MB runtime just to get semicolons. Which makes me wonder a bit about .NET's cross-language strategy. The idea is, choose any language you want, there are zillions, and they all work the same way. VB.NET and C#.NET are virtually identical except for tiny syntactic differences. And other languages that want to be part of the .NET world need to support at least a core set of features and types or they won't be able to Play Well With Others. But how do I develop a UNIX command line utility in .NET? How do I develop a tiny Windows EXE in less than 16K in .NET? It seems like .NET gives us a ""choice"" of languages precisely where we couldn't care less about it - in the syntax.
	"
https://www.joelonsoftware.com/2002/06/25/20020625/,2002/06/25,2002-06-25T00:03:45+00:00,,Joel Spolsky,News,"
	Chinese (Simplified) and Hungarian versions of Joel on Software are now live!
	"
https://www.joelonsoftware.com/2002/06/19/20020619/,2002/06/19,2002-06-19T00:03:44+00:00,,Joel Spolsky,News,"
	Joel on Software in Dutch and Indonesian!
	"
https://www.joelonsoftware.com/2002/06/16/20020616/,2002/06/16,2002-06-16T00:03:43+00:00,,Joel Spolsky,News,"
	In thinking about the microeconomic principle of complements, I noticed something interesting about open source software, which is this: most of the companies spending big money to develop open source software are doing it because it's a good business strategy for them, not because they suddenly stopped believing in capitalism and fell in love with freedom-as-in-speech. Strategy Letter V explains.
	"
https://www.joelonsoftware.com/2002/06/15/20020615/,2002/06/15,2002-06-15T00:03:42+00:00,,Joel Spolsky,News,"
	The translation of Joel on Software has 110 volunteers so far translating into 29 languages. (But isn't there anyone out there who can do Navajo?) The first two articles have come in from the copy editors, so today I am pleased to announce the Swedish and Italian versions of Joel on Software. I made a new CityDesk file to hold all the multilingual versions of the site. CityDesk has pretty extensive multilingual support that was designed to make it easy to support a site in multiple languages, but I've never been able to try it out until today. It took me about 2 hours to create and publish the multilingual site with the first two articles. Adding a language should take a couple of minutes (I just have to copy in a set of standard glossary for things like ""Joel on Software"" which translators are providing for me). Adding a newly translated article is usually as simple as cutting and pasting from the email that the copy editor sends me. So far I haven't done any languages which require right-to-left text or interesting character sets like Hindi and Cyrillic.
	"
https://www.joelonsoftware.com/2002/06/12/strategy-letter-v/,Strategy Letter V,2002-06-12T00:15:36+00:00,2016-12-05T19:22:22+00:00,Joel Spolsky,"CEO, News","
	When I was in college I took two intro economics courses: macroeconomics and microeconomics. Macro was full of theories like ""low unemployment causes inflation"" that never quite stood up to reality. But the micro stuff was both cool and useful. It was full of interesting concepts about the relationships between supply and demand that really did work. For example, if you have a competitor who lowers their prices, the demand for your product will go down unless you match them.
In today's episode, I'll show how one of those concepts explains a lot about some familiar computer companies. Along the way, I noticed something interesting about open source software, which is this: most of the companies spending big money to develop open source software are doing it because it's a good business strategy for them, not because they suddenly stopped believing in capitalism and fell in love with freedom-as-in-speech.
Every product in the marketplace has substitutes and complements. A substitute is another product you might buy if the first product is too expensive. Chicken is a substitute for beef. If you're a chicken farmer and the price of beef goes up, the people will want more chicken, and you will sell more.
A complement is a product that you usually buy together with another product. Gas and cars are complements. Computer hardware is a classic complement of computer operating systems. And babysitters are a complement of dinner at fine restaurants. In a small town, when the local five star restaurant has a two-for-one Valentine's day special, the local babysitters double their rates. (Actually, the nine-year-olds get roped into early service.)
All else being equal, demand for a product increases when the prices of its complements decrease.
Let me repeat that because you might have dozed off, and it's important. Demand for a product increases when the prices of its complements decrease. For example, if flights to Miami become cheaper, demand for hotel rooms in Miami goes up - because more people are flying to Miami and need a room. When computers become cheaper, more people buy them, and they all need operating systems, so demand for operating systems goes up, which means the price of operating systems can go up.
At this point, it's pretty common for people to try to confuse things by saying, ""aha! But Linux is FREE!"" OK. First of all, when an economist considers price, they consider the total price, including some intangible things like the time it takes to set up, reeducate everyone, and convert existing processes. All the things that we like to call ""total cost of ownership.""
Secondly, by using the free-as-in-beer argument, these advocates try to believe that they are not subject to the rules of economics because they've got a nice zero they can multiply everything by. Here's an example. When Slashdot asked Linux developer Moshe Bar if future Linux kernels would be compatible with existing device drivers, he said that they didn't need to. ""Proprietary software goes at the tariff of US$ 50-200 per line of debugged code. No such price applies to OpenSource software."" Moshe goes on to claim that it's OK for every Linux kernel revision to make all existing drivers obsolete, because the cost of rewriting all those existing drivers is zero. This is completely wrong. He's basically claiming that spending a small amount of programming time making the kernel backwards compatible is equivalent to spending a huge amount of programming time rewriting every driver, because both numbers are multiplied by their ""cost,"" which he believes to be zero. This is a prima facie fallacy. The thousands or millions of developer hours it takes to revise every existing device driver are going to have to come at the expense of something. And until that's done, Linux will be once again handicapped in the marketplace because it doesn't support existing hardware. Wouldn't it be better to use all that ""zero cost"" effort making Gnome better? Or supporting new hardware?
Debugged code is NOT free, whether proprietary or open source. Even if you don't pay cash dollars for it, it has opportunity cost, and it has time cost. There is a finite amount of volunteer programming talent available for open source work, and each open source project competes with each other open source project for the same limited programming resource, and only the sexiest projects really have more volunteer developers than they can use. To summarize, I'm not very impressed by people who try to prove wild economic things about free-as-in-beer software, because they're just getting divide-by-zero errors as far as I'm concerned.
Open source is not exempt from the laws of gravity or economics. We saw this with Eazel, ArsDigita, The Company Formerly Known as VA Linux and a lot of other attempts. But something is still going on which very few people in the open source world really understand: a lot of very large public companies, with responsibilities to maximize shareholder value, are investing a lot of money in supporting open source software, usually by paying large teams of programmers to work on it. And that's what the principle of complements explains.
Once again: demand for a product increases when the price of its complements decreases. In general, a company's strategic interest is going to be to get the price of their complements as low as possible. The lowest theoretically sustainable price would be the ""commodity price"" - the price that arises when you have a bunch of competitors offering indistinguishable goods. So:
Smart companies try to commoditize their products' complements.
If you can do this, demand for your product will increase and you will be able to charge more and make more.
When IBM designed the PC architecture, they used off-the-shelf parts instead of custom parts, and they carefully documented the interfaces between the parts in the (revolutionary) IBM-PC Technical Reference Manual. Why? So that other manufacturers could join the party. As long as you match the interface, you can be used in PCs. IBM's goal was to commoditize the add-in market, which is a complement of the PC market, and they did this quite successfully. Within a short time scrillions of companies sprung up offering memory cards, hard drives, graphics cards, printers, etc. Cheap add-ins meant more demand for PCs.
When IBM licensed the operating system PC-DOS from Microsoft, Microsoft was very careful not to sell an exclusive license. This made it possible for Microsoft to license the same thing to Compaq and the other hundreds of OEMs who had legally cloned the IBM PC using IBM's own documentation. Microsoft's goal was to commoditize the PC market. Very soon the PC itself was basically a commodity, with ever decreasing prices, consistently increasing power, and fierce margins that make it extremely hard to make a profit. The low prices, of course, increase demand. Increased demand for PCs meant increased demand for their complement, MS-DOS. All else being equal, the greater the demand for a product, the more money it makes for you. And that's why Bill Gates can buy Sweden and you can't.
This year Microsoft's trying to do it again: their new game console, the XBox, uses commodity PC hardware instead of custom parts. The theory (explained in this book) was that commodity hardware gets cheaper every year, so the XBox could ride down the prices. Unfortunately it seems to have backfired: apparently commodity PC hardware has already been squeezed down to commodity prices, and so the price of making an XBox isn't declining as fast as Microsoft would like. The other part of Microsoft's XBox strategy was to use DirectX, a graphics library that can be used to write code that runs on all kinds of video chips. The goal here is to make the video chip a commodity, to lower its price, so that more games are sold, where the real profits occur. And why don't the video chip vendors of the world try to commoditize the games, somehow? That' s a lot harder. If the game Halo is selling like crazy, it doesn't really have any substitutes. You're not going to go to the movie theatre to see Star Wars: Attack of the Clones and decide instead that you would be satisfied with a Woody Allen movie. They may both be great movies, but they're not perfect substitutes. Now: who would you rather be, a game publisher or a video chip vendor?
Commoditize your complements.
Understanding this strategy actually goes a long, long way in explaining why many commercial companies are making big contributions to open source. Let's go over these.
Headline: IBM Spends Millions to Develop Open Source Software.
Myth: They're doing this because Lou Gerstner read the GNU Manifesto and decided he doesn't actually like capitalism.
Reality: They're doing this because IBM is becoming an IT consulting company. IT consulting is a complement of enterprise software. Thus IBM needs to commoditize enterprise software, and the best way to do this is by supporting open source. Lo and behold, their consulting division is winning big with this strategy.
Headline: Netscape Open Sources Their Web Browser.
Myth: They're doing this to get free source code contributions from people in cybercafes in New Zealand.
Reality: They're doing this to commoditize the web browser.
This has been Netscape's strategy from day one. Have a look at the very first Netscape press release: the browser is ""freeware."" Netscape gave away the browser so they could make money on servers. Browsers and servers are classic complements. The cheaper the browsers, the more servers you sell. This was never as true as it was in October 1994. (Netscape was actually surprised when MCI came in the door and dumped so much money in their laps that they realized they could make money off of the browser, too. This wasn't required by the business plan.)
When Netscape released Mozilla as Open Source, it was because they saw an opportunity to lower the cost of developing the browser. So they could get the commodity benefits at a lower cost.
Later AOL/Time Warner acquired Netscape. The server software, which was supposed to be the beneficiary of commodity browsers, wasn't doing all that well, and was jettisoned. Now: why would AOL/Time Warner continue to invest anything in open source?
AOL/Time Warner is an entertainment company. Entertainment companies are the complement of entertainment delivery platforms of all types, including web browsers. This giant conglomerate's strategic interest is to make entertainment delivery - web browsers - a commodity for which nobody can charge money.
My argument is a little bit tortured by the fact that Internet Explorer is free-as-in-beer. Microsoft wanted to make web browsers a commodity, too, so they can sell desktop and server operating systems. They went a step further and delivered a collection of components which anyone could use to throw together a web browser. Neoplanet, AOL, and Juno used these components to build their own web browsers. Given that IE is free, what is the incentive for Netscape to make the browser ""even cheaper""? It's a preemptive move. They need to prevent Microsoft getting a complete monopoly in web browsers, even free web browsers, because that would theoretically give Microsoft an opportunity to increase the cost of web browsing in other ways - say, by increasing the price of Windows.
(My argument is even more shaky because it's pretty clear that Netscape in the days of Barksdale didn't exactly know what it was doing. A more likely explanation for what Netscape did is that upper management was technologically inept, and they had no choice but to go along with whatever scheme the developers came up with. The developers were hackers, not economists, and only coincidentally came up with a scheme which serves their strategy. But let's give them the benefit of the doubt.)
Headline: Transmeta Hires Linus, Pays Him To Hack on Linux.
Myth: They just did it to get publicity. Would you have heard of Transmeta otherwise?
Reality: Transmeta is a CPU company. The natural complement of a CPU is an operating system. Transmeta wants OSs to be a commodity.
Headline: Sun and HP Pay Ximian To Hack on Gnome.
Myth: Sun and HP are supporting free software because they like Bazaars, not Cathedrals.
Reality: Sun and HP are hardware companies. They make boxen. In order to make money on the desktop, they need for windowing systems, which are a complement of desktop computers, to be a commodity. Why don't they take the money they're paying Ximian and use it to develop a proprietary windowing system? They tried this (Sun had NeWS and HP had New Wave), but these are really hardware companies at heart with pretty crude software skills, and they need windowing systems to be a cheap commodity, not a proprietary advantage which they have to pay for. So they hired the nice guys at Ximian to do this for the same reason that Sun bought Star Office and open sourced it: to commoditize software and make more money on hardware.
Headline: Sun Develops Java; New ""Bytecode"" System Means Write Once, Run Anywhere.
The bytecode idea is not new - programmers have always tried to make their code run on as many machines as possible. (That's how you commoditize your complement). For years Microsoft had its own p-code compiler and portable windowing layer which let Excel run on Mac, Windows, and OS/2, and on Motorola, Intel, Alpha, MIPS and PowerPC chips. Quark has a layer which runs Macintosh code on Windows. The C programming language is best described as a hardware-independent assembler language. It's not a new idea to software developers.
If you can run your software anywhere, that makes hardware more of a commodity. As hardware prices go down, the market expands, driving more demand for software (and leaving customers with extra money to spend on software which can now be more expensive.)
Sun's enthusiasm for WORA is, um, strange, because Sun is a hardware company. Making hardware a commodity is the last thing they want to do.
Oooooooooooooooooooooops!
Sun is the loose cannon of the computer industry. Unable to see past their raging fear and loathing of Microsoft, they adopt strategies based on anger rather than self-interest. Sun's two strategies are (a) make software a commodity by promoting and developing free software (Star Office, Linux, Apache, Gnome, etc), and (b) make hardware a commodity by promoting Java, with its bytecode architecture and WORA. OK, Sun, pop quiz: when the music stops, where are you going to sit down? Without proprietary advantages in hardware or software, you're going to have to take the commodity price, which barely covers the cost of cheap factories in Guadalajara, not your cushy offices in Silicon Valley.
""But Joel!"" Jared says. ""Sun is trying to commoditize the operating system, like Transmeta, not the hardware."" Maybe, but the fact that Java bytecode also commoditizes the hardware is some pretty significant collateral damage to sustain.
An important thing you notice from all these examples is that it's easy for software to commoditize hardware (you just write a little hardware abstraction layer, like Windows NT's HAL, which is a tiny piece of code), but it's incredibly hard for hardware to commoditize software. Software is not interchangable, as the StarOffice marketing team is learning. Even when the price is zero, the cost of switching from Microsoft Office is non-zero. Until the switching cost becomes zero, desktop office software is not truly a commodity. And even the smallest differences can make two software packages a pain to switch between. Despite the fact that Mozilla has all the features I want and I'd love to use it if only to avoid the whack-a-mole pop-up-ad game, I'm too used to hitting Alt+D to go to the address bar. So sue me. One tiny difference and you lose your commodity status. But I've pulled hard drives out of IBM computers and slammed them into Dell computers and, boom, the system comes up perfectly and runs as if it were still in the old computer.
Amos Michelson, the CEO of Creo, told me that every employee in his firm is required to take a course in what he calls ""economic thinking."" Great idea. Even simple concepts in basic microeconomics go a long way to understanding some of the fundamental shifts going on today.
 
	"
https://www.joelonsoftware.com/2002/06/10/20020610/,2002/06/10,2002-06-10T00:03:41+00:00,,Joel Spolsky,News,"
	So far I've got volunteers for 22 languages - cool! The articles are starting to come in. Everything will be reviewed by a second copy editor before I post it. If you are fluent in a language other than English and would like to help out, there are still lots of great opportunities. If you only have a small amount of time, why not copy edit a single article? (Copy editing basically means proofread it, correct any spelling or grammar mistakes, and rewrite anything that is not written clearly enough.) If you have more time, you can translate an article or two. Pick your favorite. If you're really ambitious, you can sign up for the 4-part Painless Functional Specifications (still available in most languages) or the 9 chapter UI For Programmers, available in every language except French and Spanish.
	"
https://www.joelonsoftware.com/2002/06/07/20020607/,2002/06/07,2002-06-07T00:03:40+00:00,,Joel Spolsky,News,"
	Wow! 15 languages already!
	"
https://www.joelonsoftware.com/2002/06/06/20020606/,2002/06/06,2002-06-06T00:03:39+00:00,,Joel Spolsky,News,"
	Volunteers Wanted It would be nice to get Joel on Software translated to as many languages as possible. I'm looking for volunteers to translate. You can do as little or as much as you want to any language you want. I also need volunteer copy editors who can edit the translations as they come in. More Info 
	"
https://www.joelonsoftware.com/2002/07/30/20020730/,2002/07/30,2002-07-30T00:03:50+00:00,,Joel Spolsky,News,"
	I'm Back! Spent a loverly 9 days in England, now back in sweltering NYC. If you catch me using Britishicisms please make me stop. Remote Control Through Firewalls Here's the problem: we sell FogBUGZ, a server product that runs on NT. It comes with a SETUP program that works fine 95% of the time, but occasionally something goes wrong and we get a tech support call. If we could somehow remote-control our customers' computers, it would take us about 3 minutes to get FogBUGZ up and running. Instead we have to try to tell them what to do over the phone, without seeing what's going on, which can take an hour or more. There are plenty of remote control programs (PC Anywhere, VNC, NT Terminal Services, etc.) but they all seem to have two problems: a complicated install for the server, often requiring the original NT CD and a reboot, and they act as traditional servers, listening on a port, which doesn't work behind firewalls. What I would love to have is a version of the VNC server that ran as an ActiveX control. Then I could tell my clients to go to a web page and allow the control to run. We would also need a reflector that lived outside their firewall. Does anyone have a good solution to this problem? Update: we're going to try using TightVNC (a compressing version of VNC) in ""listen"" mode, which allows the server to connect to the client instead of vice-versa, thus solving the firewall problem. To run the TightVNC Server only requires two files so the setup is relatively painless. Spam Escalation When I first installed SpamAssassin a couple of months ago, it worked great, catching about 99% of spam with only the occasional false positive (usually an automated emails generated by ecommerce sites). It was too good to last; today about 25% of the spam I receive is getting through again. It's really obvious that spammers are working around the SpamAssassin rules. SpamAssassin has one major design flaw: whenever it decides to flag a message as spam, it includes a detailed reason why, with exact scores. There's even a web page which might as well be titled Evading SpamAssassin. It takes about 5 minutes for a spammer to figure out how to avoid the filters. Update: Chris Thompson advises me to keep SpamAssassin up to date. I'm not sure what's to stop spammers from keeping their versions of SpamAssassin up to date, though...
	"
https://www.joelonsoftware.com/2002/07/19/20020719/,2002/07/19,2002-07-19T00:03:49+00:00,,Joel Spolsky,News,"
	Vacation I will be away from July 19 - July 29 on vacation. My new policy is that I don't check email or the web while I'm on vacation. Translators: check out the latest version of the Language Signup page which represents my current opinion of what everyone is doing and where they are up to. If everyone does what they promised, we'll have at least 210 translated articles in 38 languages.
	"
https://www.joelonsoftware.com/2002/07/18/20020718/,2002/07/18,2002-07-18T00:03:48+00:00,,Joel Spolsky,News,"
	Listen.com wins I've subscribed to listen.com, a.k.a. Rhapsody. For about $100 a year you get unlimited music, legally. They don't have absolutely everything, but they do have the five major labels and there's really tons of stuff to listen to. One day I played every recorded work by Cat Stevens. Now I'm working through Gary Numan and Orchestra Manouevres in the Dark. Oh, wait, there's the new Tori Amos CD. Click! The UI is much better than anything Napster/KaZaa/Gnutella had, it's especially easy to find new things to listen to because everything is nicely cross-indexed and reviewed. If you can't figure out what to play, you can listen to a preprogrammed radio station, fast forwarding through any songs that bore you, and when you find something you like you can listen to the whole album, other recordings by the same artist, recordings by artists who influenced that artist, and on and on. The service works extremely well. Songs start playing in seconds and get downloaded quickly in the background; unlike the streaming services there are never ""hiccups."" (To be fair, I'm using a T1 at work from Savvis which is extremely reliable). Finally, the recording industry (under extreme duress) has given us a reasonable way to pay for digital music. Yes, things are missing (Madonna!) but that doesn't mean it's not worth $100 a year for access to 15,000 good albums. Cool new stuff Dave's Google whatchamacallit keeps getting better and better. It's the command line for the world wide web. It shows the time and date when idling, so you can turn off your toolbar clock and save real estate. There are zillions of command line options now. I use it to find articles on Joel on Software ... type ""joel schedules!"" (the ! means ""I'm feeling lucky"") and the article pops up in a new window.
	"
https://www.joelonsoftware.com/2002/07/16/20020716/,2002/07/16,2002-07-16T00:03:47+00:00,,Joel Spolsky,News,"
	Steven Den Beste wrote an amusing analysis of the extreme cognitive dissonance it takes to be a Mac fanatic. ""The hardcore Mac faithful seem to believe just before each MacWorld that this is going to be the time that the Steve finally announces the killer product which is going to rock the PC heathen back on their heels and begins the great exodus from the dark side into the grace of Steve's love.""
	"
https://www.joelonsoftware.com/2002/07/15/20020715/,2002/07/15,2002-07-15T00:03:46+00:00,,Joel Spolsky,News,"
	Measurement ""Thank you for calling Amazon.com, may I help you?"" Then - Click! You're cut off. That's annoying. You just waited 10 minutes to get through to a human and you mysteriously got disconnected right away. Or is it mysterious? According to Mike Daisey, Amazon rated their customer service representatives based on the number of calls taken per hour. The best way to get your performance rating up was to hang up on customers, thus increasing the number of calls you can take every hour. An aberration, you say? When Jeff Weitzen took over Gateway, he instituted a new policy to save money on customer service calls. ""Reps who spent more than 13 minutes talking to a customer didn't get their monthly bonuses,"" writes Katrina Brooker (Business 2.0, April 2001). ""As a result, workers began doing just about anything to get customers off the phone: pretending the line wasn't working, hanging up, or often-at great expense-sending them new parts or computers. Not surprisingly, Gateway's customer satisfaction rates, once the best in the industry, fell below average."" It seems like any time you try to measure the performance of knowledge workers, things rapidly disintegrate, and you get what Robert D. Austin calls measurement dysfunction. His book Measuring and Managing Performance in Organizations is an excellent and thorough survey of the subject. Managers like to implement measurement systems, and they like to tie compensation to performance based on these measurement systems. But in the absence of 100% supervision, workers have an incentive to ""work to the measurement,"" concerning themselves solely with the measurement and not with the actual value or quality of their work. Software organizations tend to reward programmers who (a) write lots of code and (b) fix lots of bugs. The best way to get ahead in an organization like this is to check in lots of buggy code and fix it all, rather than taking the extra time to get it right in the first place. When you try to fix this problem by penalizing programmers for creating bugs, you create a perverse incentive for them to hide their bugs or not tell the testers about new code they wrote in hopes that fewer bugs will be found. You can't win. Fortune 500 CEOs are usually compensated with base salary plus stock options. The stock options are often worth tens or hundreds of millions of dollars, which makes the base pay almost inconsequential. As a result CEOs do everything they can to inflate the price of the stock, even if it comes at the cost of bankrupting or ruining the company (as we're seeing again and again in the headlines this month.) They'll do this even if the stock only goes up temporarily, and then sell at the peak. Compensation committees are slow to respond, but their latest brilliant idea is to require the executive to hold the stock until they leave the company. Terrific. Now the incentive is to inflate the price of the stock temporarily and then quit. You can't win, again. Don't take my word for it, read Austin's book and you'll understand why this measurement dysfunction is inevitable when you can't completely supervise workers (which is almost always). I've long claimed that incentive pay isn't such a hot idea, even if you could measure who was doing a good job and who wasn't, but Austin reinforces this by showing that you can't even measure performance, so incentive pay is even less likely to work. 
	"
https://www.joelonsoftware.com/2002/08/30/platforms/,Platforms,2002-08-30T00:15:31+00:00,2016-12-05T19:22:00+00:00,Joel Spolsky,"CEO, News","
	Most software developers, including Fog Creek Software, are perfectly happy just to write software applications. You know, programs that do something or solve some particular problem. But the brave among us want to change the world more significantly, and they choose to work on platforms: big giant slabs of software that don't quite do anything out of the box, but which enable a whole world of new and interesting applications. So they write operating systems, or DBMSs, or language runtimes like Java, and they hope to attract independent software developers to create the great new applications that their platforms enable.
Almost by definition, an operating system is a platform. Many platforms live on top of operating systems, such as the Java Runtime. And don't forget that Windows didn't start out as an OS, it started out as a program you ran on DOS which (out of the box) didn't do much of anything, but enabled software developers to create GUI applications for inexpensive Intel boxes.
It's really, really important to figure out if your product is a platform or not, because platforms need to be marketed in a very different way to be successful. That's because a platform needs to appeal to developers first and foremost, not end users.
I just had the good fortune to read an advance copy of Rick Chapman's excellent new book on stupidity in the software industry. (Prediction: best seller). Being an analytical kind of guy, I look for common themes. One of the biggest themes in software industry failures is a platform vendor that didn't understand that they were a platform vendor, so they alienated their key constituency: the developers.
Example: NetWare took so long to release reasonable tools for creating NLMs that when Unix and Windows NT came along with superior and cheaper development tools, they swept away the mindshare of server software developers.
Example: Apple has spent decades making life miserable for their developers. Every new OS for almost 20 years required tweaks and changes to application code. If you got too successful, Apple competed against you (although sometimes they had a hand puppet called Claris compete against you so they could pretend it wasn't them.)
Example: Developing software for OS/2 1.0 required an investment of $3000 for the SDK, and you had to write all your own printer drivers if printing was important for you. Printing was important, so OS/2 had no applications.
But the counter-examples are just as interesting:
Example: The first versions of Windows included a freely redistributable runtime so that if you wrote a Windows application, you could sell it to anyone with DOS, you weren't limited to the few weirdo dorks (me!) who bought Windows 1.0.
Example: Despite the mistakes that Sun made with Java, the runtime was always free and good Java tools were cheap or free, too. No other development platform became so predominant so quickly (even Visual Basic, the top selling computer language of all time, took years to ramp up.)
If you want a platform to be successful, you need massive adoption, and that means you need developers to develop for it. The best way to kill a platform is to make it hard for developers to build on it. Most of the time, this happens because platform companies either don't know that they have a platform (they think it's an application) or they get greedy (they want all the revenue for themselves.)
Greedy platform companies can't stand the idea of all kinds of unwashed riffraff making money off of their platform, so they make it darn near impossible for anyone to develop for it. Probably the most spectacular failure illustrating this was IBM's PS/2, with its huge portfolio of proprietary technologies, such as the new Microchannel architecture designed to insure that only IBM could make expansion cards. This is, of course, monumentally shortsighted. Nobody wanted PS/2s because, uh, add-in cards weren't available and they were too expensive when they were. As a platform vendor, you're only as successful as the people who build on you.
A more subtle problem is when platform vendors don't think they have a platform, they think they have an application. To illustrate this I'm once again going to have to pick on Groove.
""Why do you keep picking on Groove, Joel?"" Three reasons:
They have an interesting architecture that provides important platform functionality which I could really use in my own products, 
They make it impossible (or at least unrealistic) for ISVs to build on their platform, thus dooming themselves to oblivion, either out of greed or because they think Groove is an application, not a platform, 
and Groove inventor Ray Ozzie has a weblog, so he can answer me if he thinks I'm off the mark. (He did.)
Here's how I noticed the Groove problem. I've got a product, CityDesk, for simple desktop web content management. Weblogs, company sites, small organizations, etc. - people who need content management but can't afford the big systems, don't control a server anywhere, or just can't be bothered to mess with installing perl scripts on a server.
As a 1.0 product we've got our share of weaknesses. One of the big ones is that people want to collaborate on CityDesk sites over the Internet. A reasonable request. For the next major release, we have to do something about this limitation. Basically, we've got two choices. The traditional choice would be to do something client-server: make a CityDesk server you can install somewhere so that everyone can collaborate.
But another choice, which would maintain CityDesk's benefit of not requiring anything on the server, would be to use a secure peer-to-peer architecture. Something exactly like what Groove provides.
So I thought of porting CityDesk to Groove. Then I noticed that
there is no free Groove runtime. Every single one of my customers would have to buy Groove. 
nobody has Groove yet.
That doomed the Groove idea from the start. I talked to some of the Groove ""partners"" who allegedly are developing software for Groove. ""Was the Groove relationship worth anything?"" I asked. ""HA!"" they said. ""We paid $1500 and in exchange we get less than 10 clickthroughs a month from their web page. A waste of money. We couldn't even get Groove to share their customer lists with us.""
This is not the kind of platform I want to develop for. Yet, technologically, it is exactly the kind of platform I want to develop for, but it's controlled by a greedy (or clueless) company that is going to choke off their own oxygen - the compelling applications on top of Groove. Ray Ozzie is going nuts about how cool weblogs are - where's the weblog application for Groove? Who's going to write one? Evan Williams, creator of Blogger? Even Blogger Pro is only $35 a year and that doesn't go very far to paying for a $99 Groove single user license.
What would happen if the Groove runtime were free? Follow the arc of Windows. It started out with a free runtime that let you run one GUI application at a time. Eventually, many people bought the full version to get the benefits of Windows file management, cut and paste between Windows applications, etc. Then Windows 3.0 came out and was so popular and had so many applications that it was bundled with every PC. Today Windows is like the television tax in Britain. Everybody pays it except the developer - when you're writing software for Windows, it doesn't cost one extra cent. In fact at no time in the history of Windows did developers ever have to worry about the cost of Windows itself.
Anybody who ever tried to sell software components (ActiveX controls, beans, etc.) knows that you have to have a royalty-free runtime or no developer will touch you with a 10 foot pole. Microsoft even lets you redistribute Jet, a complete relational database engine that is 9/10ths of Microsoft Access, for free. Heck, it's preinstalled on Windows 2000.
If Groove wants to be a successful platform, they need to do the same thing. A free Groove redistributable would mean that hundreds of applications would spring up which would get the runtime spread far and wide. Many of those users would see the value in buying a full version of Groove with built in collaboration features. Groove services like the hosted reflectors would have a much larger potential audience.
Of course, they can continue down the path of Notes, assuming that the only way to sell software is to wow CEOs with cool Powerpoints and sell $1,000,000 corporate shelfware licenses. Eventually, this made some real money for Lotus, because Notes had one compelling application - email - built in. But imagine if the Notes runtime had been free. If Notes had a software industry sitting on top of it way back in the 80s, some dormroom startup might have made a compelling hypertext application for it instead and preempted the Web. The dreams of huge public Notes networks might have come true. Notes would be as common on PCs as Solitaire. Today it's just Another Email System, one without much of a future.
I keep picking on Groove, but only because there's something interesting in there, one of the few technologies that's interesting enough to care about. Yes, the Groove engineers are architecture astronauts. That's OK. They're building architecture. But they're positioning it like an application and I don't think Groove will be successful if they do that. Someone else will come along with a P2P architecture and sell it like a component, or make it an open source library (yes, I'm aware of JXTA), and that's what software developers will use.
	"
https://www.joelonsoftware.com/2002/08/30/20020830/,2002/08/30,2002-08-30T00:03:56+00:00,,Joel Spolsky,News,"
	If you want a platform to be successful, you need massive adoption, and that means you need developers to develop for it. The best way to kill a platform is to make it hard for developers to build on it. Most of the time, this happens because platform companies either don't know that they have a platform (they think it's an application) or they get greedy (they want all the revenue for themselves.) Platforms
	"
https://www.joelonsoftware.com/2002/08/25/20020825/,2002/08/25,2002-08-25T00:03:55+00:00,,Joel Spolsky,News,"
	The Mozilla folks are doing their post-mortems. Peter Trudelle: ""At the time Netscape created mozilla.org and open sourced its codebase (3/31/98), we were not aware of any models on how to do large-scale UI design and development in open source. Netscape itself had a history of strong, innovative UI design, but had been steadily cutting back, with some budget decisions being made by managers who privately considered UI design little more than eye candy sprinkled on at the end of a release."" Matthew Thomas responds: ""Why my behavior tends to suck."" It's very frustrating doing any kind of design work, architectural or UI, with a dispersed group of volunteers. Things which Matthew could have persuaded someone in person at a whiteboard in five minutes took hours of typing into Bugzilla, accompanied by no end of useless interjections from the world at large who made most UI bug reports look like slashdot threads with the filter set to -1. There just isn't enough bandwidth to do good design when a team is geographically dispersed. I'm not saying it can't be done at all, but the results are vastly better when the entire team is physically in the same location. I'm convinced of this, and will never agree to do software development with a dispersed team.
	"
https://www.joelonsoftware.com/2002/08/19/20020819/,2002/08/19,2002-08-19T00:03:54+00:00,,Joel Spolsky,News,"
	CNet catches up: ""Microsoft's public handling of .Net could stand as a case study in what not to do in a high-profile marketing campaign."" I wrote about this two years ago in an oft-misinterpreted article. My beef was that .NET was just marketing gone crazy, it wasn't a criticism of any particular piece of technology that got the .NET moniker stuck on it. And I also claimed that .NET was not revolutionary, but rather a new name for things that were under development anyway, although in retrospect I'm pretty impressed by just what a big step forward the languages and development tools took. Jakob Nielsen, nattering nabob of negativity, writes: ""Tiny text tyrannizes users..."" (hear, hear!) CityDesk News: ""What Jakob is really complaining about is that Windows versions of IE do not give the user the ability to change the font size when the designer has specified an exact pixel size using CSS."" Christian made an awesome CityDesk demo for us using Flash in exchange for an Aeron chair. Tell me what you think.
	"
https://www.joelonsoftware.com/2002/08/15/20020815/,2002/08/15,2002-08-15T00:03:53+00:00,,Joel Spolsky,News,"
	Over the last couple of days I've been implementing a new & improved online trial for our bug tracking system, FogBUGZ. Rather than post CityDesk news here, where it will surely bore those few remaining non-CityDesk-users to tears, I'm starting a new CityDesk News site.
	"
https://www.joelonsoftware.com/2002/08/13/20020813/,2002/08/13,2002-08-13T00:03:52+00:00,,Joel Spolsky,News,"
	Daily Builds I've been preaching the value of daily builds for a while now. Of course, they prevent any one developer from screwing up the rest of the team by checking in something which breaks the build, which makes them crucial for teams with more than about 1 person. Even on teams of 1, daily builds give you a way to track down weird bugs that seemed to have slipped in a while ago by binary searching through the historical builds. (What the heck?! It never did that before! Did it?) And more crucially, by giving you a canonical way to build ""the final bits"" from raw checkouts, you can be confident that you never forget some crucial step when you release a new version. Last week Robert French emailed me to ask if there are any good tools for making daily builds on Windows. We've been using a product called FinalBuilder since last December, and in fact it is so good that in addition to daily builds we've pretty much started using it instead of scripts for routine system administration stuff for us (like moving files around for backup purposes, etc.) I highly recommend it. Vincent Parrett over at Atozed Software has agreed to sell FinalBuilder exclusively to Joel on Software readers at $100 off (it's $199 instead of $299), but only until August 31st so hurry up and get some.
	"
https://www.joelonsoftware.com/2002/08/05/20020805/,2002/08/05,2002-08-05T00:03:51+00:00,,Joel Spolsky,News,"
	Science fiction writer Bruce Sterling on open source: ""'Don't like it? Hey, just reconfigure it yourself, don't bother me!' It's the Hippie Squat Model of software architecture. 'If I want to paint the doors and floors bright blue and put the toilet right into the kitchen, why not?' It's very offensive to user sensibilities and it is as ugly as a sack full of penguin guts.""We sent off our first batch of affiliate payment checks. Yes, people are making money linking to Joel on Software. I hadn't even noticed it, but CityDesk got mentioned in the New York Times a couple of weeks ago.
	"
https://www.joelonsoftware.com/2002/09/25/20020925/,2002/09/25,2002-09-25T00:04:06+00:00,,Joel Spolsky,News,"
	Eddie Kessler describes programming at Napster. Ray Ozzie has more on platforms. ""Finding the 'right' price point for a software platform is critical."" To me this sounds like a fancy way of saying, ""I groove all that stuff about how platforms need to be cheap and ubiquitous, but I can't bring myself to do it."" The price, Ray says, ""must be high enough both 1) to maintain a perception of value in the platform, and 2) to create significant margins well before ubiquity is assured so that the ecosystem is assured of the platform's ultimate viability."" What he doesn't mention: if you lower the price on the only product you're selling, you have a revenue hit, which will not make your investors happy, and you may run out of money and have to close. But that must be what he's thinking.
	"
https://www.joelonsoftware.com/2002/09/19/20020919/,2002/09/19,2002-09-19T00:04:05+00:00,,Joel Spolsky,News,"
	Dave Winer continues the Platform theme: ""If you're lucky enough to get a gazillion dollars invested behind your ideas, never say no to a developer."" General Magic had a platform they tried to position as an application. (Getting a gazillion dollars didn't help them much, either.) I've created a new discussion group for .NET programming questions. (Why?) Let's hope it doesn't turn into this.
	"
https://www.joelonsoftware.com/2002/09/18/20020918/,2002/09/18,2002-09-18T00:04:04+00:00,,Joel Spolsky,News,"
	Orlando Sentinel: ""After investing $273 million, NASA is canceling a cutting-edge launch-control computer system for the space shuttle that is over budget, behind schedule and too expensive to operate."" (A few paragraphs later) ""The CLCS program began in 1997 as an effort to upgrade KSC's 1970s-vintage system."" Here's my question. In the 1970s, computers didn't have much memory. An expensive mainframe from that era couldn't have had more than a megabyte or so of core memory. It seems to me as if the most complex piece software that could possibly be run on such systems would pale in comparison to the complexity of the software in a modern CDMA cellular phone, also about a megabyte in Assembler code. (I know, somebody's going to tell me about how mission critical this stuff is, and how lives depend on it, but heavens, $273 million dollars?) The question is, why are NASA, the FAA, etc. still running these ancient systems, and why have so many quarter billion dollar projects failed to replace them? Jeez, they didn't even have relational databases in those days, to say nothing about structured program, GUI development tools, and books by Kent Beck. Recreating those old systems with modern tools would probably be a weekend Visual Basic/Access project. OK, I'm exaggerating a little. But if the problem is that you can't even get parts (vacuum tubes, no doubt) for the old system, you don't need a zillion dollar Big Science project: you need a four week project writing a CPU emulator for that old mainframe that runs on PCs. OK, maybe now we won't be subject to all those annoying lectures about how great SEI Level 5 is because the shuttle uses it. Flipping back and forth between today's news and that old FastCompany hagiography will keep you entertained for hours! Ged Byrne points out that it was actually a different system that used SEI Level 5. Copy Editors Needed! I have a few articles which have already been translated, but are waiting for someone to edit them and do a final check before I post them. If you would like to volunteer to edit some articles in any of these languages, please let me know: Farsi, Hungarian, Italian, Portuguese (Portugal), Ukrainian.
	"
https://www.joelonsoftware.com/2002/09/17/20020917/,2002/09/17,2002-09-17T00:04:03+00:00,,Joel Spolsky,News,"
	Jakob Nielsen on Offshore Usability: ""To save costs, some companies are outsourcing Web projects to countries with cheap labor. Unfortunately, these countries lack strong usability traditions and their developers have limited access - if any - to good usability data from the target users."" Offshore usability is a specific case of the general ""offshore design"" problem. Put simply, software teams are not successful when design or management are done in a different physical location than programming. Once I actually had a job where I was in New York, my direct manager was in Singapore, his manager was in Hyderabad, and if I needed any management input I had literally no choice but to go to the CEO because at least he was awake during the same hours as I was. You can't get things done like this. A good project team relies on hundreds of small interactions a day. Here in the Fog Creek offices, we have 10 small conversations about FogBUGZ 3.0 development every day. What I don't understand is people who think it's OK to move the developers ten time zones away from their managers and expect good results. Those same people would scream bloody murder if you told them that you were going to send the whole management team to Bangalore or Beijing.
	"
https://www.joelonsoftware.com/2002/09/13/20020913/,2002/09/13,2002-09-13T00:04:02+00:00,,Joel Spolsky,News,"
	John Robb has an interesting perspective on trust-based, targetted advertising based on his experiences at Gomez during the heady days of the Internet gold rush. Nobody believes advertisements any more. There's a lot of evidence that advertising just doesn't work, no matter how targetted, so if you have a product to sell you have no choice but to get into the editorial side, where consumers' defenses are lowered. Product placements are one example of this. There is an unfortunate tragedy of the commons, here. When advertising first rose to prominence, advertisements did work. We hadn't built up our immunities yet. As more and more advertisers used the opportunity of the medium to lie, we learned not to trust advertisements. But we still trust editorial. And once editorial gets polluted by desperate marketers using PR instead of advertising to promote their message, nobody will believe it either.
	"
https://www.joelonsoftware.com/2002/09/12/20020912/,2002/09/12,2002-09-12T00:04:01+00:00,,Joel Spolsky,News,"
	We're trying to decide if FogBUGZ 3.0 should support custom fields. Historically, I am opposed to custom fields in principle, because they get abused. People add so many fields to their bug databases to capture everything they think might be important that entering a bug is like applying to Harvard. End result: people don't enter bugs, which is much, much worse than not capturing all that information. You can always ""page fault"" to get the information if the original report forgot it. Rather than having a field in every bug where you enter the version numbers of every DLL on your machine (this is an actual customer request), information which is likely to be relevant only for a tiny percentage of bugs, why not just have the programmer-assignee look at the bug first, and if they think it might be dll-version-related, only then bounce the bug back to the originator asking for the DLL info? Similarly, it's always tempting to add a field in which you ask for the OS version in which the bug occurred. This sounds logical, but trust me: adding fields like this is guaranteed to do one thing and one thing only: reduce the number of bug reports that get into the system in the first place. Only a small percentage of bugs are really OS dependant and you can always include that info in the text description of the bug if it happens to be relevant. (But then how do you search for, say, all bugs which only happen on Windows 98SE? Aha! You can't. Ever. Even with the custom field. Because not every bug has been regressed on every version of every operating system, so this search doesn't make sense in the first place. The info wasn't captured. Do a full text search for 98SE and you'll find some of them. Life is imperfect.) Life would be more perfect if every bug report included megabytes of information - a complete dump of every byte on the hard drive and in RAM on the computer in question and while you're at it, a photograph of the tester's workspace. But the goal of a bug tracking database is to keep track of bugs, which, all else being equal, takes priority over making it easy to find them. I have heard countless stories of development teams where the bug tracking package was so high-ceremony that people were afraid to enter bugs in the system, because they didn't know what all those fields were. The real bug-""tracking"" happened in email, post-its, and hallway conversations. Great. A pretty common question we get on the customer service line is, ""does FogBUGZ support custom fields?"" Rather than giving our usual answer (""no. on purpose."") over the last few weeks I've been saying, ""can you please tell me what fields you would need? We're trying to decide whether to implement that feature in 3.0 and we want to know why people need it."" The interesting thing is, almost all of the fields people ask for are already in FogBUGZ, and the other ones, in my educated opinion, shouldn't be fields. And in fact, our existing customers are certainly happy without custom fields. One of our biggest site licenses was sold to a semiconductor company, and I myself wanted to add a custom field for them to keep track of versions of the circuit design, but I didn't, and they never needed it (even though they had been keeping track of it with the old bug tracking package which had custom fields), and they are happy and keep buying more site licenses. But the dilemma for us is that many customers are evaluating bug tracking software and they consider the lack of custom fields to be a major weakness in our product. ""Gosh, even Filemaker has custom fields."" Righto. It's true. And who am I to tell my customers they are wrong? One person who I was talking to yesterday would have used a custom field for something that we already have a built-in field for. This would have made their database confusing and inconsistent and would have definitely caused more problems than it solved. But it's still rude of me to tell customers that we don't have that feature for their own good, even though it usually is, and we're losing some sales because of it. Sigh. I guess we could have a custom fields feature but hide it and make it so hard to use that people don't use it. At least we won't lose any sales 
	"
https://www.joelonsoftware.com/2002/09/11/20020911/,2002/09/11,2002-09-11T00:04:00+00:00,,Joel Spolsky,News,"
	9/11 In Memoriam. 
	"
https://www.joelonsoftware.com/2002/09/10/20020910/,2002/09/10,2002-09-10T00:03:59+00:00,,Joel Spolsky,News,"
	Daniel Berlinger has noticed that Mac software shops are starting to move to OS X-only development. This makes sense, for two reasons. First, most people who pay for software have new computers. So while OS X may only have a small fraction of the installed base, it has the majority of the population of people who are opening their wallets. Second, if OS X isn't successful, the Mac is over. It's not like System 9 is getting any more popular. Then again, there are very few conditions under which it is actually the right business decision to develop software for the Macintosh. Developing for the Mac is not a whole lot different than creating a web site that only works on Netscape. (Given the market share of Macs (about 3.5%) and the market share of Netscape (about 3.4%), that is not a silly comparison.) Robb Beal wrote: ""Try this test. Go to a venture firm, angel, or big company with a Mac OS X product/concept/prototype. Do they consider the fact that it's a Mac application a net plus? (No.)"" Well duh. Your product would have to appeal to 25 times more Mac users [as a percentage] than Windows users just to break even. In other words, if your Windows product appeals to 1 in 100 Windows users, you have to appeal to 25 in 100 Mac users to make the same amount of money. Now, you may want to make an emotional appeal to developing for the Mac. That's fine. If you like Macs and you're doing it for fun, more power to ya. But as long as we're talking investment, you have to tell me why you're going to get 25 times as many users. Maybe there's less competition in your category on the Mac; maybe you're in a niche like graphics where it seems like Macs dominate (they don't, it just seems that way because the elite graphics people in big American cities use Macs); maybe your product can't sell to mixed environments unless it runs everywhere. But if you want to make an investment in Mac software be prepared to demonstrate how you're going to overcome that magic 25 multiplier.
	"
https://www.joelonsoftware.com/2002/09/04/20020904/,2002/09/04,2002-09-04T00:03:58+00:00,,Joel Spolsky,News,"
	A bunch of people asked me what I meant when I referred to Rick Chapman's upcoming book on stupidity in the software industry. The book has not been published yet; I just read his manuscript so that I can write the foreword (being something of a stupidity maven, myself). As soon as it comes out you can be sure I'll let you know, since it's a great book. I keep forgetting to link to TopCoder.com. What a cool idea, online programming competitions!
	"
https://www.joelonsoftware.com/2002/09/03/20020903/,2002/09/03,2002-09-03T00:03:57+00:00,,Joel Spolsky,News,"
	Ray Ozzie replies. Another nail in the frequently-nailed coffin of Napster. Here's something I don't understand. Ignore the Napster legal history for a moment. Let's talk about software development. About two years ago, Napster and Bertlesmann announced that they would deliver a version of Napster that would charge money and only provide music legally. Now, it seems like they ran out of money before they could even deliver that. What I don't understand, exactly, is why they couldn't build this thing that sells Bertlesmann music with two whole years of work and a whole team of developers? When Fanning had built the original thing in three months? (Then again, the story here sounds incredibly familiar. One guy builds version 1 in a few months and then a team of 15 can't build version 2 for years and years. Tell me you haven't seen that movie before.)
	"
https://www.joelonsoftware.com/2002/10/30/20021030/,2002/10/30,2002-10-30T00:04:18+00:00,,Joel Spolsky,News,"
	Fun with sample bugs: ""I would just like to say that Programmer Longhair's attitude is quite inappropriate..."" 
	"
https://www.joelonsoftware.com/2002/10/28/20021028/,2002/10/28,2002-10-28T00:04:17+00:00,,Joel Spolsky,News,"
	Countdown to FogBUGZ 3.0. We're supposed to ship on November 4th, which is less than a week away. All that's left is the new marketing stuff for the website, a couple of small bug fixes, and some improvements to the online store so we can sell support contracts and upgrades online.
	"
https://www.joelonsoftware.com/2002/10/23/20021023/,2002/10/23,2002-10-23T00:04:16+00:00,,Joel Spolsky,News,"
	Where are they now? A couple of years ago, I posted a list of the big Silicon Alley companies and how their stocks had plummeted. Silicon Alley was the term used for New York City's ephemeral dot com industry which lasted for maybe four years before collapsing under the weight of its own overhype. I thought it might be interesting to revisit those companies and see what has happened since. Company 2 yrs Ago Today Juno Online Services 2.69 4.16 TheGlobe.com 0.55 0.06 iTurf 1.09 0.00 Priceline 6.78 1.85 Register.com 7.88 3.52 IVillage 3.00 0.87 24/7 Media 6.00 0.30 Razorfish 5.47 0.05 Agency.com 11.94 3.35 TheStreet.com 3.50 2.22 EarthWeb 9.50 0.32 Doubleclick 24.69 6.05 about.com 22.88 4.26 Footnotes: The ""today"" column represents how much money you would have if you bought a share back then and held onto it. Many corporate entities have changed. Juno is now a part of United Online. TheGlobe still owns two tiny gaming web sites. iTurf is vanished but your share might have been worth a few pennies when the shareholders sued the management of the typographically challenged company dELiAs*cOm, which merged with it and shut it down. The only reason Agency.com is worth so much is that your share was bought for cash by a big advertising agency before it could go any lower. EarthWeb, which had started out as a Big List of Java Applets in the days when something like that was amusing, changed their name to Dice and dumped the old EarthWeb web site onto retro ubercontent superportal internet.com. Now they're just a job-listing board. And about.com was acquired by a big Old Media company which hasn't done so well, either. Thankfully I personally own only stock index funds, no individual stocks in public companies. Personally the most interesting thing is that my old company, Juno Online Services, has actually been a great investment during a horrible 2 years. Probably because the old management has been completely replaced. My leaving probably helped a bit, in fact, shortly after I left the stock surged momentarily to about $80 in celebration.
	"
https://www.joelonsoftware.com/2002/10/21/20021021/,2002/10/21,2002-10-21T00:04:15+00:00,,Joel Spolsky,News,"
	VNC: Yes, I know about TightVNC. It's faster than VNC but nowhere near as fast and usable as Terminal Services. Other people peeked in their server logs and saw .NET CLR penetration at around 6 - 8%. Some very consumer oriented sites are seeing even less (2-3%). RSS: after much interesting discussion, the conclusion is the best way to reduce this bandwidth is already a part of the HTTP spec, and needs to be implemented by the aggregators. Kudos to Dave Winer who implemented it this weekend in Radio Userland. Hopefully other aggregators will soon get with the program - specifically NetNewsWire and FeedReader who are the most popular and thus the biggest problem. Presumably their customers don't want to waste bandwidth, either, so it's in their best interests. (And I don't want to have to hide the feed from bandwidth hogging user agents.) I shall now shut up about this topic because I know it's excruciatingly boring to the rest of the world. Update 10/22: NetNewsWire fixed it. Good work Brent!
	"
https://www.joelonsoftware.com/2002/10/19/20021019/,2002/10/19,2002-10-19T00:04:14+00:00,,Joel Spolsky,News,"
	Stuff Here's some stuff I'm thinking about, in no particular order. VNC vs. Windows Terminal Services We regularly use two pieces of software to access Windows computers remotely. Windows Terminal Services from Microsoft (now called ""Remote Desktop"" in Windows XP, and also marketed by Citrix) is one of them; the other is WinVNC which is an open source project that originated at AT&T in Cambridge, England. If you have a choice in the matter, Windows Terminal Services is much, much better, for two reasons. First, it is incredibly fast, because the wire protocol is closer to the Windows GDI layer. You can remotely access a Windows computer over a modem quite comfortably, which surprised the heck out of me. By comparison, VNC's network protocol basically consists of transmitting blocks of changed pixels across the wire. So for example when a string is written to the screen, Terminal Services won't transmit much more than the string itself, letting the client find the font and do all the rendering. VNC would have to first detect that a part of the screen had changed, and then transmit a compressed bitmap across the wire. And smooth scrolling works perfectly and feels smooth when you use Terminal Sevices, even over a slow connection. VNC just messes up the screen. Empirically, it's a lot faster and that makes all the difference in the quality of the experience. Second big reason. VNC for some reason does not transmit Shift+Arrow keys. The shift gets lost. OK, it's a little bug, but VNC made me notice that I frequently correct typing errors with Shift+Ctrl+Left (select previous word) and then I type over it. VNC doesn't transmit this. As a result it is incredibly painful for me to type long text messages over VNC. Third big reason. No matter how much I play with the settings, there are too many cases where VNC forgets to transmit a particular ""damaged"" region of the screen to the client. The two most common cases I've found are when you right-click to get a popup menu - the menu appears on the server but is not transmitted to the client so you think something is wrong - and when you scroll in an application that uses smooth scrolling, the screen gets all messed up. It reminds me of Unix, 1987 when your friends would write messages on your tty (old-school IM) and you had to hit Ctrl+L to get Emacs to clean up the screen. The biggest disadvantage of Windows Terminal Services is that the server has to be a Windows machine. (There are all kinds of clients.) This is not a big deal for me; our Linux machines are servers and ssh is fine. If I really had to do GUI stuff with Linux servers I would just use Exceed or something, but I haven't needed that for years. AMD Hammer vs. Intel Itanium Intel's throw-it-all-away-and-start-over Itanium CPU project is turning out to be the Ishtar of the CPU world: way over budget, years late, and terrible. I have heard that running in 32-bit ""backwards compatible"" mode (required for 99.999% of the software that exists) it is about as fast as a Pentium II/366. Maybe one tenth the performance of the fastest Pentium 4. Meanwhile, AMD couldn't afford to start from scratch, so their new Hammer CPU should be able to run 32 bit code just as fast as a 32 bit processor. Beginning to see a theme? AMD is not really shipping yet, so it's not over until it's over, but I'm betting it will shake out to have been a major mistake that Intel designed a new chip from scratch rather than extend the Pentium 4 with 64 bit features. Maybe some of my readers who follow the CPU world more closely can weigh in. Meanwhile, back in Throw It All Away Land... It may turn out to be the case that one of the biggest benefits to come out of the Mozilla project is XUL, which seems to be one of the first solid frameworks for true GUI portability (WORA). Basically, you design your interface in XML, glue the events together with some JavaScript, and call binary XPCOM classes (virtually the same as Microsoft COM classes) when you need to do something fast in C++ that doesn't need a UI. And UI's never need to be that fast, so this is a good division of labor. Theoretically, you get cross-platform Nirvana. And thanks a lot of hard work all the little platform-specific touches (like Alt+Space N to minimize a window) are finally right, which is one of the biggest weaknesses of previous efforts at WORA like AWT and Swing. If I had to start developing a new commercial app I would seriously look at XUL. But Joel, You Said Netscape Was Stupid... They were. They shouldn't have rewritten from scratch. They should have done this all in steps. Big chunky steps, fine, but steps. For example, they could have rebuilt the rendering engine - without touching any of the other stuff - as a first step. Then ship. Was there anything wrong with the networking library? I don't think there was. Even if there was, OK. So, fix it. One step at a time. Then ship. Then implement XUL and start converting some of the dialogs to XUL as another step. Then ship. Then port the existing UI - port, not rewrite - in XUL. Rather than argue about what the dialogs should have in them, you just recreate the existing dialogs exactly as is, only this time in XUL. Get that working. Ship. Then decide if it's worth changing the dialog. Is it? Ok, Ship again. Yes, getting from a messy architecture to a nice architecture costs time, but it doesn't cost as much as starting from scratch did. Over the period of time between Netscape 4 and Mozilla 1 they could have had three releases and still be where they are now. No, way ahead. And we'd have a real browser ecology instead of monoculture. Being virtually out of the market for 4 years was a catastrophe for Netscape's browser market share and handed Microsoft a huge monopoly, and they don't need another monopoly. (Some people think it is entirely Microsoft's anticompetitive practices that got them 90% market share in the browser market. I just don't buy that. People used IE instead of Netscape 4.0 over the last four years because they liked it better, not because they were tricked into it or because it was installed on their desktop by default. Give people some credit.) None of this means that Mozilla is not a good work of engineering and XUL may well be a real benefit to Apple and Linux, because application developers finally have a way to deliver to all three platforms for perhaps 110% of the cost of Windows alone. Server Logs I spent some time studying the Joel on Software server logs today. Here are some of the things I wanted to find out. Do people have the .NET runtime? I'm trying to figure out when we can afford to port CityDesk to .NET without alienating all the download.com people who download CityDesk, try it, like it, and give me money. Of regular Joel on Software readers, it seems like 32% have the .NET runtime. This seems really high to me compared to the population as a whole. We're software developers. I really don't know why anyone but a software developer would have the .NET runtime now; it doesn't come with any popular software. So my data isn't that useful. If someone has access to the server logs of a more mainstream website, tell me what kind of ratio you're seeing. Does anyone care about the RSS feed? About 12% of the IP addresses that came to Joel on Software yesterday came to get rss.xml. That's more than I would have thought, but it was a slow news day. I would expect when I actually post a long new article, I would get the same number of RSS clients but way more normal web browser hits. I was also surprised to see that Ranchero NetNewsWire, created by former UserLand employee Brent Simmons, is more than twice as popular as his ex-boss's product Radio (377 subscribers for NNW, 163 for Radio.) Most of the RSS subscribers are whacking me every hour, which is actually costing me cash money in excess bandwidth charges. How can I set it up so they only visit once a day? Is this an RSS option? I rarely post more than once or twice a day. Maybe I should change the RSS feed to just include headlines with links.
	"
https://www.joelonsoftware.com/2002/10/18/20021018/,2002/10/18,2002-10-18T00:04:13+00:00,,Joel Spolsky,News,"
	Sneak preview: New in FogBUGZ 3.0. We're still on schedule to ship the new version on November 4th. And no, we didn't get rid of the cute orangutan. Daniel Berlinger reviews 3.0. ""If you aren't already using a bug/feature database, and if you'd like to improve your customer service, project tracking, efficiency and more-purchase FogBugz.""
	"
https://www.joelonsoftware.com/2002/10/17/20021017/,2002/10/17,2002-10-17T00:04:12+00:00,,Joel Spolsky,News,"
	Thanks to Mike Gunderloy for a nice review of my book: ""I'm sure someone has written the thousand-page tome about usability, but I'll take this one instead.""
Burningbird: ""Why the blues, PHP, the other languages asked. All the languages that is but C, because all C ever said was 'bite me', being a rude language and hard to live with, but still respected because it was such a good worker.""
Herbert Meyer in the National Review: ""Our intelligence services failed because their leaders and their top-level analysts just weren't smart enough to figure things out early enough to make a difference. They had lots of energy and dedication, to be sure. What they didn't have enough of, was brains.""
	"
https://www.joelonsoftware.com/2002/10/16/20021016/,2002/10/16,2002-10-16T00:04:11+00:00,,Joel Spolsky,News,"
	I spent the day catching up on the Joel on Software translation effort. There are new articles online in Danish, Dutch, French, German, Hungarian, Indonesian, Japanese, Korean, Portuguese (Brazilian and Iberian), and Romanian. As my faithful volunteers have learned it sometimes takes me a week to respond to their email; I usually let all the translation-related email pile up and then work through it once a week. Right now there are a few articles stuck in the queue because they don't have a copy editor - if you can edit in Farsi, Portuguese (Portugal), Russian, Spanish, or Turkish, please let me know!
	"
https://www.joelonsoftware.com/2002/10/09/20021009/,2002/10/09,2002-10-09T00:04:10+00:00,,Joel Spolsky,News,"
	Ah! Danny Goodman has released the new version of Dynamic HTML. It's been a few years since the first edition, which is still the best reference on HTML despite being severely out of date. The new edition is 1400 packed pages that actually tells you what web browsers that are actually in use actually do, which makes it invaluable. It has been brought up to date with all the latest browsers and the newest HTML specs. If you're working with HTML in any way, shape, or form, this book is an absolute requirement.
	"
https://www.joelonsoftware.com/2002/10/08/20021008/,2002/10/08,2002-10-08T00:04:09+00:00,,Joel Spolsky,News,"
	Feedback from my posting about FogBUGZ Setup fell into four categories. ""Why make Setup reversable? Instead you should collect all the information from the user and make all the changes in one batch at the end."" There are a couple of things to understand here. First of all, even if you do everything in one batch at the end, there's always a possibility that some step in the middle of the batch will fail, and in that case, a well-behaved setup program will back out the steps that were already done. There are well over 100 error messages in the string table for FogBUGZ Setup so the number of things that can fail is not insignificant. Second, it's not nice to tell people about an error in their input three pages after they made the mistake. For example, early in the FogBUGZ setup process we prompt you to create an account for FogBUGZ to use: The account creation could fail for a myriad of reasons, none of which can be predicted before trying to create the account. For example, the password might not conform to the system password policy. And different national versions of Windows NT have different rules about accented letters in passwords (betcha didn't know that!). It's better to tell the user about this problem right away so they can correct their input rather than having a message come up during the long install process later, forcing the user to back up and fix it. And even if you force the user to back up and fix it, you still have to undo the first part of the work that you did before creating the account, otherwise you've left their system in an indeterminate state. In any case I need to write code to create the account and delete the account in case something later fails; I might as well call that code on this page of the wizard where I can display a useful error message. And what are the kinds of things that need to be reversable? Well, in order to upgrade FogBUGZ without requiring a reboot (and we never, ever require a reboot), we have to shut down a couple of processes that might have been keeping FogBUGZ files pinned down, such as IIS (Microsoft's web server). So part one of the batch is ""Stop IIS."" Now if part 2 fails for some reason, it would be extremely rude to leave IIS not running. And anyway, it's not like I don't need to write the code for ""Start IIS"" for the end of the batch. So the code to rollback ""Stop IIS"" is already written. No big deal, I just need to call it at the right place. I think one reason that people think you should ""gather all the info and then do all the work"" is because with very large installation programs that are very slow, this is a polite way to waste less of the user's time. Indeed even FogBUGZ setup does 95% of its work at the very end. But the ""create account"" operation is so fast, that principle simply doesn't apply here. Even our 95% of the work phase takes well under a minute, most of which is spent waiting for IIS to stop and start. ""Why did you use VC++/MFC? Surely an advanced intelligence such as yourself has admitted by now that Delphi is more productive."" First of all, leave your language religious fanaticism at the Usenet door. Somehow I managed to figure out in high school that language advocacy and religious arguments are unbelievably boring. Secondly, even if Delphi were more productive, the only pertinent question, since I am writing the code, is what is more productive for Joel Spolsky. And I don't know Delphi at all, but I know Win32, MFC, and VC++ really, really well. So while I might not outcode a good Delphi programmer, I would definitely outcode a completely inexperienced Delphi programmer (which is me), certainly over a short 4 week project. Third, many of the things I needed to do in this setup program are things like ""grant the Logon as Service privilege to an account."" This is rare enough that the only way to find out how to do this is to search the Microsoft knowlege base and the web in general. When you search the web in general for how to do fancy things with Windows NT, what you find is about 75% C code, maybe 20% VB code, and 5% everything else. Yes, I know, I could translate the C code into Delphi (assuming I was a sophisticated Delphi programmer, not a completely inexperienced Delphi programmer), but that costs as much productivity as I would supposedly gain from your supposedly more productive programming language. And fourth, I already had about 30% of the code I needed for Setup in MFC format: from FogBUGZ 2.0 Setup, and a library I've been using for years to make wizards. ""Why make Setup at all? You already have your customers' money. Good Setup programs don't increase sales."" This was actually the smartest question and made me think the hardest. I came up with three reasons: Decreased tech support cost. This setup program will pay for itself over the life of the code. Delight my customers. When I'm trying to get them to upgrade to 4.0, I want them to remember how painless the 3.0 installation was, so they won't hesitate because they are afraid to upgrade. I'm still using an old version of SpamAssassin that is becoming increasingly ineffective, even though I know the new version is much better, because I just can't bear the thought of another morning wasted. The very memory of the first SpamAssassin installation - all the little SSH windows, some su'ed, trying to scroll through man pages and Google Groups, accidentally hitting Ctrl+Z in Emacs to undo and having it suspend, trying to guess why we can't get the MTA to run procmail, sorry it's too much. If SpamAssassin was making money off of upgraders they would have lost my business because they don't have a SETUP program. Win reviews. Software reviewers always cast about for some kind of standardized way to rate software, even when they are comparing apples and oranges and planets and 17th century philosophers. They always have a meaningless list of things to review which can be applied to PC games, mainframe databases, web site auction software, and DNA sequencing software. And Setup is always on their list. A single flaw in setup is guaranteed to be mentioned in every review because every reviewer will see it and say ""Aha!"" ""How can we make WISE better?"" Kudos to the product manager of WISE Installation System for calling me up and listening to my litany of all the reasons his product wasn't adequate for typical IIS/ASP/SQL applications.
	"
https://www.joelonsoftware.com/2002/11/28/20021128/,2002/11/28,2002-11-28T00:04:26+00:00,,Joel Spolsky,News,"
	 
	"
https://www.joelonsoftware.com/2002/11/25/20021125/,2002/11/25,2002-11-25T00:04:25+00:00,,Joel Spolsky,News,"
	Lots of new Spanish translations today.
	"
https://www.joelonsoftware.com/2002/11/19/20021119/,2002/11/19,2002-11-19T00:04:24+00:00,,Joel Spolsky,News,"
	Good Books A few months ago I read The Goal, by Eliyahu M. Goldratt, mainly because it has become extremely popular at business schools, and it looked fun. It was interesting, and fun. I didn't understand how the book's theory, called the Theory of Constraints, could possibly be applied to software development, but it was still interesting enough, and I figured if I ever found myself running a factory again, it would be helpful. Last week I discovered his newer book, Critical Chain. This book applies the Theory of Constraints, introduced in The Goal, to project management, and it seems to really make sense. Lets say you're creating Painless Software Schedules. Most people's intuition is to come up with conservative, padded estimates for each task, but they still find that their schedules always slip. Goldratt shows that the slip is precisely because we pad the estimates for each step, which leads to three problems: ""Student Syndrome"" - no matter how long you give students to work on something, they will start the night before. Phil Greenspun noticed this: ""The first term that we taught 6.916, we gave the students one week to do Problem Set 1. It was pretty tough and some of them worked all night the last two nights. Having watched them still at their terminals when we left the lab at 4:00 am, we wanted to be kinder and gentler the next semester. So we gave them two weeks to do the same homework assignment. The first week went by. The students were working on other classes, playing sports on the lawn, going out with friends. They didn't start working on the problem set until a few days before it was due and ended up in the lab all night just as before."" Multitasking, which, as I discuss, makes the lead time for each step dramatically longer, and the fact that delays accumulate, while advances do not (for example, if you have finished this week's work on Friday morning, chances are you will waste time on Friday afternoon rather than starting the next week's work. But if you don't make it on time, you'll still leave at 5 o'clock on Friday, accumulating a delay.) Goldratt's solution is to choose task estimates that are not padded: each individual task's estimate should be exactly in the middle of the probability curve, so there is a 50% chance you will finish early and a 50% chance you will be late. You should move all the padding to the end of the project (or milestone) where it won't do any harm. I can't do justice to an entire book in this short post, but if you're doing any kind of project scheduling or management, I highly recommend that you read both books (read The Goal first no matter what you do, both because it's more entertaining, and because it teaches you the foundation you need for Critical Chain).
	"
https://www.joelonsoftware.com/2002/11/14/20021114/,2002/11/14,2002-11-14T00:04:23+00:00,,Joel Spolsky,News,"
	Bad Spam Filters
Spam is getting worse and worse. My incoming spam ratio is well over 50% by now. SpamAssassin catches and tags most of it; these are automatically shuttled into a ""Spam"" folder. About once a week, it takes me 15 seconds to make sure there's nothing important in there and throw it out.
On the other hand, overzealous system administrators are causing serious damage to the connectivity of the Internet by imposing draconian spam filters. The Joel on Software mailing list is operated by a legitimate email delivery company with strong anti spam policies; it is double-opt-in, of course. Increasingly, emails sent to the mailing list are getting bounced - not tagged - before they even get to the users. In the last half hour, five people tried to sign up, but the confirmation email didn't even get to them. Apparently my mailing list provider's IP address is now blacklisted by SpamCop. OK, fair enough. But if you or your ISP is using a spam filter that bounces mail, you're going to lose stuff that you didn't want to lose. So don't do it. Use tagging systems instead - have the spam filter add a tag like ""***SPAM***"" to the subject line, and let your email client shuttle these off to another folder.
 
Here's what I'd like to see: a system that delivers an email for one cent. Nobody has to use it, but if you want to get your messages through, you pay one cent and the system delivers it for you. Every spam filtering system on earth can safely whitelist all email that comes from the one cent server, because no spammer can afford the penny times the 19 million messages they send. I would use it for all my email. You could even give 3/4s of a cent to the recipient as a credit to use for sending their own mail, keeping the 1/4 cent to pay for the servers. Eventually, if it caught on, you wouldn't need a spam filter: just put all the free email in a suspect folder, and check it once a week in case some old school holdouts insist on sending you email without paying.
	"
https://www.joelonsoftware.com/2002/11/13/20021113/,2002/11/13,2002-11-13T00:04:22+00:00,,Joel Spolsky,News,"
	Joel on Software in Russian is now live with the first 7 articles. Many thanks to Alexander Bashkov, Alexander Shirshov, Alexey Simonov, Dmitriy Mayorov, Marat Zborovskiy, Marianna Evseeva, Michael Zukerman, Petr Gladkikh, Sergey Kalmakov, Simon Hawkin, and Yury Udovichenko who translated and edited these articles. More are on the way!
	"
https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/,The Law of Leaky Abstractions,2002-11-11T00:15:03+00:00,2018-10-05T13:57:35+00:00,Joel Spolsky,"Top 10, Rock star developer, News","
	There's a key piece of magic in the engineering of the Internet which you rely on every single day. It happens in the TCP protocol, one of the fundamental building blocks of the Internet.
TCP is a way to transmit data that is reliable. By this I mean: if you send a message over a network using TCP, it will arrive, and it won't be garbled or corrupted.
We use TCP for many things like fetching web pages and sending email. The reliability of TCP is why every email arrives in letter-perfect condition. Even if it's just some dumb spam.
By comparison, there is another method of transmitting data called IP which is unreliable. Nobody promises that your data will arrive, and it might get messed up before it arrives. If you send a bunch of messages with IP, don't be surprised if only half of them arrive, and some of those are in a different order than the order in which they were sent, and some of them have been replaced by alternate messages, perhaps containing pictures of adorable baby orangutans, or more likely just a lot of unreadable garbage that looks like that spam you get in a foreign language.
Here's the magic part: TCP is built on top of IP. In other words, TCP is obliged to somehow send data reliably using only an unreliable tool.
To illustrate why this is magic, consider the following morally equivalent, though somewhat ludicrous, scenario from the real world.
Imagine that we had a way of sending actors from Broadway to Hollywood that involved putting them in cars and driving them across the country. Some of these cars crashed, killing the poor actors. Sometimes the actors got drunk on the way and shaved their heads or got nasal tattoos, thus becoming too ugly to work in Hollywood, and frequently the actors arrived in a different order than they had set out, because they all took different routes. Now imagine a new service called Hollywood Express, which delivered actors to Hollywood, guaranteeing that they would (a) arrive (b) in order (c) in perfect condition. The magic part is that Hollywood Express doesn't have any method of delivering the actors, other than the unreliable method of putting them in cars and driving them across the country. Hollywood Express works by checking that each actor arrives in perfect condition, and, if he doesn't, calling up the home office and requesting that the actor's identical twin be sent instead. If the actors arrive in the wrong order Hollywood Express rearranges them. If a large UFO on its way to Area 51 crashes on the highway in Nevada, rendering it impassable, all the actors that went that way are rerouted via Arizona and Hollywood Express doesn't even tell the movie directors in California what happened. To them, it just looks like the actors are arriving a little bit more slowly than usual, and they never even hear about the UFO crash.
That is, approximately, the magic of TCP. It is what computer scientists like to call an abstraction: a simplification of something much more complicated that is going on under the covers. As it turns out, a lot of computer programming consists of building abstractions. What is a string library? It's a way to pretend that computers can manipulate strings just as easily as they can manipulate numbers. What is a file system? It's a way to pretend that a hard drive isn't really a bunch of spinning magnetic platters that can store bits at certain locations, but rather a hierarchical system of folders-within-folders containing individual files that in turn consist of one or more strings of bytes.
Back to TCP. Earlier for the sake of simplicity I told a little fib, and some of you have steam coming out of your ears by now because this fib is driving you crazy. I said that TCP guarantees that your message will arrive. It doesn't, actually. If your pet snake has chewed through the network cable leading to your computer, and no IP packets can get through, then TCP can't do anything about it and your message doesn't arrive. If you were curt with the system administrators in your company and they punished you by plugging you into an overloaded hub, only some of your IP packets will get through, and TCP will work, but everything will be really slow.
This is what I call a leaky abstraction. TCP attempts to provide a complete abstraction of an underlying unreliable network, but sometimes, the network leaks through the abstraction and you feel the things that the abstraction can't quite protect you from. This is but one example of what I've dubbed the Law of Leaky Abstractions:
All non-trivial abstractions, to some degree, are leaky.
Abstractions fail. Sometimes a little, sometimes a lot. There's leakage. Things go wrong. It happens all over the place when you have abstractions. Here are some examples.
Something as simple as iterating over a large two-dimensional array can have radically different performance if you do it horizontally rather than vertically, depending on the ""grain of the wood"" - one direction may result in vastly more page faults than the other direction, and page faults are slow. Even assembly programmers are supposed to be allowed to pretend that they have a big flat address space, but virtual memory means it's really just an abstraction, which leaks when there's a page fault and certain memory fetches take way more nanoseconds than other memory fetches.
The SQL language is meant to abstract away the procedural steps that are needed to query a database, instead allowing you to define merely what you want and let the database figure out the procedural steps to query it. But in some cases, certain SQL queries are thousands of times slower than other logically equivalent queries. A famous example of this is that some SQL servers are dramatically faster if you specify ""where a=b and b=c and a=c"" than if you only specify ""where a=b and b=c"" even though the result set is the same. You're not supposed to have to care about the procedure, only the specification. But sometimes the abstraction leaks and causes horrible performance and you have to break out the query plan analyzer and study what it did wrong, and figure out how to make your query run faster.
Even though network libraries like NFS and SMB let you treat files on remote machines ""as if"" they were local, sometimes the connection becomes very slow or goes down, and the file stops acting like it was local, and as a programmer you have to write code to deal with this. The abstraction of ""remote file is the same as local file"" leaks. Here's a concrete example for Unix sysadmins. If you put users' home directories on NFS-mounted drives (one abstraction), and your users create .forward files to forward all their email somewhere else (another abstraction), and the NFS server goes down while new email is arriving, the messages will not be forwarded because the .forward file will not be found. The leak in the abstraction actually caused a few messages to be dropped on the floor.
C++ string classes are supposed to let you pretend that strings are first-class data. They try to abstract away the fact that strings are hard and let you act as if they were as easy as integers. Almost all C++ string classes overload the + operator so you can write s + ""bar"" to concatenate. But you know what? No matter how hard they try, there is no C++ string class on Earth that will let you type ""foo"" + ""bar"", because string literals in C++ are always char*'s, never strings. The abstraction has sprung a leak that the language doesn't let you plug. (Amusingly, the history of the evolution of C++ over time can be described as a history of trying to plug the leaks in the string abstraction. Why they couldn't just add a native string class to the language itself eludes me at the moment.)
And you can't drive as fast when it's raining, even though your car has windshield wipers and headlights and a roof and a heater, all of which protect you from caring about the fact that it's raining (they abstract away the weather), but lo, you have to worry about hydroplaning (or aquaplaning in England) and sometimes the rain is so strong you can't see very far ahead so you go slower in the rain, because the weather can never be completely abstracted away, because of the law of leaky abstractions.
One reason the law of leaky abstractions is problematic is that it means that abstractions do not really simplify our lives as much as they were meant to. When I'm training someone to be a C++ programmer, it would be nice if I never had to teach them about char*'s and pointer arithmetic. It would be nice if I could go straight to STL strings. But one day they'll write the code ""foo"" + ""bar"", and truly bizarre things will happen, and then I'll have to stop and teach them all about char*'s anyway. Or one day they'll be trying to call a Windows API function that is documented as having an OUT LPTSTR argument and they won't be able to understand how to call it until they learn about char*'s, and pointers, and Unicode, and wchar_t's, and the TCHAR header files, and all that stuff that leaks up.
In teaching someone about COM programming, it would be nice if I could just teach them how to use the Visual Studio wizards and all the code generation features, but if anything goes wrong, they will not have the vaguest idea what happened or how to debug it and recover from it. I'm going to have to teach them all about IUnknown and CLSIDs and ProgIDS and ... oh, the humanity!
In teaching someone about ASP.NET programming, it would be nice if I could just teach them that they can double-click on things and then write code that runs on the server when the user clicks on those things. Indeed ASP.NET abstracts away the difference between writing the HTML code to handle clicking on a hyperlink (<a>) and the code to handle clicking on a button. Problem: the ASP.NET designers needed to hide the fact that in HTML, there's no way to submit a form from a hyperlink. They do this by generating a few lines of JavaScript and attaching an onclick handler to the hyperlink. The abstraction leaks, though. If the end-user has JavaScript disabled, the ASP.NET application doesn't work correctly, and if the programmer doesn't understand what ASP.NET was abstracting away, they simply won't have any clue what is wrong.
The law of leaky abstractions means that whenever somebody comes up with a wizzy new code-generation tool that is supposed to make us all ever-so-efficient, you hear a lot of people saying ""learn how to do it manually first, then use the wizzy tool to save time."" Code generation tools which pretend to abstract out something, like all abstractions, leak, and the only way to deal with the leaks competently is to learn about how the abstractions work and what they are abstracting. So the abstractions save us time working, but they don't save us time learning.
And all this means that paradoxically, even as we have higher and higher level programming tools with better and better abstractions, becoming a proficient programmer is getting harder and harder.
During my first Microsoft internship, I wrote string libraries to run on the Macintosh. A typical assignment: write a version of strcat that returns a pointer to the end of the new string. A few lines of C code. Everything I did was right from K&R - one thin book about the C programming language.
Today, to work on CityDesk, I need to know Visual Basic, COM, ATL, C++, InnoSetup, Internet Explorer internals, regular expressions, DOM, HTML, CSS, and XML. All high level tools compared to the old K&R stuff, but I still have to know the K&R stuff or I'm toast.
Ten years ago, we might have imagined that new programming paradigms would have made programming easier by now. Indeed, the abstractions we've created over the years do allow us to deal with new orders of complexity in software development that we didn't have to deal with ten or fifteen years ago, like GUI programming and network programming. And while these great tools, like modern OO forms-based languages, let us get a lot of work done incredibly quickly, suddenly one day we need to figure out a problem where the abstraction leaked, and it takes 2 weeks. And when you need to hire a programmer to do mostly VB programming, it's not good enough to hire a VB programmer, because they will get completely stuck in tar every time the VB abstraction leaks.
The Law of Leaky Abstractions is dragging us down.
	"
https://www.joelonsoftware.com/2002/11/11/20021111/,2002/11/11,2002-11-11T00:04:21+00:00,,Joel Spolsky,News,"
	Abstractions fail. Sometimes a little, sometimes a lot. There's leakage. Things go wrong. It happens all over the place when you have abstractions, and it's dragging us down. Read all about it in my latest feature article: The Law of Leaky Abstractions.
	"
https://www.joelonsoftware.com/2002/11/08/20021108/,2002/11/08,2002-11-08T00:04:20+00:00,,Joel Spolsky,News,"
	I thought that I'd be relaxing this week, after shipping FogBUGZ 3.0 on Monday. I figured I'd come in late, spend a couple of hours posting some articles I have backlogged for Joel on Software, catch up on the translation effort, and maybe take off the afternoons to see movies. Murphy had other plans. The number of users trying the free online version of FogBUGZ surged to unheard of levels, and the server didn't handle it very well, necessitating a last-minute rearchitecting of the way the trial server creates private databases. Hopefully that is fully in place now and the trial server should be rock solid. In a perfect world, should we have load-tested the trial server before going live? It seems like ""best practices,"" right? Maybe not. Let's assume load testing costs 4 engineer days which seems about right to me. Fixing the server to handle the code actually did cost 4 engineer days. I need a table. COST do load testing don't load test server OK 4 days 0 days server NOT OK 8 days 4 daysIf we have no information about whether the server is going to survive the load, i.e., there is a 50% chance it will fail, the expected cost with load testing is 6 days as opposed to 2 days without load testing. Hmm, cheaper not to load test. That is, unless the cost of failure is higher than 4 days work. The actual cost of failure was that some people couldn't get into their trial databases for about an hour before we noticed and kicked the server. Probably no big deal; worth 4 engineer days. I may have drawn the wrong conclusion; maybe one of those people who lost interest was considering a site license for 300,000 IBM employees. But still, you need some kind of economic model to decide where to spend your limited resources. You can't make sensible decisions reliably by saying things like ""load testing is a no-brainer"" or ""the server will probably survive."" Those are emotional brain droppings, not analysis. And in the long run we scientists will win. At Fog Creek we do calculations like this all the time. For example, a lot of our internal utilities and databases are really pretty buggy. The bugginess causes pain, but fixing the bugginess would cost us actual money. It's not worth spending an engineering day to fix a problem that wastes 30 seconds of someone's time once a month. This only applies to software for internal consumption. With the software that we sell, those tiny incremental improvements are the whole reason our software is better and can compete in the marketplace. In other words: with internal software, there are steeply diminishing marginal returns as you fix smaller and smaller bugs, so it is economically rational for internal software systems to be somewhat buggy, as long as they get the job done. After that bug fixes become deadweight. With commercial software in highly competitive markets (like software project tracking) virtually all your competitive advantage comes from fixing smaller and smaller bugs to attain a higher level of quality. That's one of the big differences between those two worlds. FogBUGZ sales are through the roof, which is nice, of course, but it means that the usual 5% of people with weird configuration issues who need help are taking up a lot more time than usual. And no matter how perfect your SETUP or your web site, you always get phone calls from potential customers who just want to chat with a human for 10 minutes and then they'll buy. OK. All in all, it's been busy and hectic when I was hoping for a quiet week. Ah well.
	"
https://www.joelonsoftware.com/2002/11/04/20021104/,2002/11/04,2002-11-04T00:04:19+00:00,,Joel Spolsky,News,"
	FogBUGZ 3.0 is now shipping! This is a really huge upgrade; FogBUGZ moves up from being a simple bug tracking package to a rather robust management system that handles the entire development process. One big theme of FogBUGZ 3.0 was ""listen to your customers."" If you use FogBUGZ you can get feedback from your customers via email or the web. You can even add a menu item to send feedback in your application, or catch crashes from the field and submit them directly into FogBUGZ like we do with CityDesk. Customer suggestions can become feature items, prioritized and tracked alongside other development tasks. Here at Fog Creek we started using the email integration component to handle all customer service email that comes into the company. Instead of using a lame single-user email client like Outlook, we now have a web interface that shows everybody messages as they come in, which anyone can assign, track, and prioritize just like bugs. And a complete record of every customer email interaction is kept in FogBUGZ for all to see, so anybody in the company can pick up the thread of a conversation with a customer. If your company-wide email aliases (""info@little-hope-inn.com"") are causing problems, you should look at FogBUGZ, even if you don't use it for bug tracking at all. Inspired by the Extreme Programming idea of prioritized user stories, FogBUGZ lets you maintain lists of features, ideas, bugs, keep them prioritized at all times, and always work off the top of your list. If 3x5 cards or big whiteboards don't cut it for you, FogBUGZ is a great way to do Extreme Programming. (Read about how the Six Degrees team did it.) I'm also happy to say that FogBUGZ does not have certain features that seem sensible but which experience shows reduce the overall effectiveness of the product. I've already talked about custom fields, which are dangerous if used inappropriately, but there are some other things that FogBUGZ intentionally does not do. For example, inspired by software testing guru Cem Kaner and of course Dr. Deming, FogBUGZ does not provide individual performance metrics for people. If you want a report for which programmer makes the most bugs, or the infamous ""which programmer has the most bugs that they allegedly 'fixed' reopened by testing because they were not really fixed,"" FogBUGZ won't give it to you. Why? Because as soon as you start measuring people and compensating people based on things like this, they are going to start optimizing their behavior to optimize these numbers, and not in the way you intended. Every bug report becomes an argument. Programmers insist on recategorizing bugs as ""features."" Or they refuse to check in code until the performance review period is over. Testers are afraid to enter bugs - why antagonize programmers? And pretty soon, the measurements give you what you ""wanted"": the number of bugs in the bug tracking system goes down to zero. Of course, there are just as many bugs in the code, those are an inevitable part of writing software, they're just not being tracked. And the bug tracking software, hijacked as an HR crutch, becomes worthless for what it was intended for. We long ago decided that to make FogBUGZ successful, it needs to reflect and enforce as much as we know about good software development practices. That's why I'm very proud of the product we released today. Check it out, there's a free online demo. If you buy the software this month we're giving out free copies of Mary Romero Sweeney's great book. And if you're using any other bug tracking method - commercial, open source, or Excel files on a server - we'll let you take 30% off as a competitive upgrade.
	"
https://www.joelonsoftware.com/2002/12/24/20021224/,2002/12/24,2002-12-24T00:04:28+00:00,,Joel Spolsky,News,"
	Planning for 2003 It has gotten supernaturally quiet. Everyone but me is on vacation, for some reason. Here's a look ahead at some of the things that Fog Creek Software, and Joel on Software, will be doing next year. Programmer's Paradise is one of the largest mail-order retailers of computer software, and they're trying to make their catalog more interesting by including feature articles of interest to software developers. So over the next year, I'll be writing a monthly column for them: the first printed version of Joel on Software. The best way to make sure you don't miss an article is to subscribe to the printed catalog, it's free (unfortunately, they only sell to North America, so the catalog is only available if you have a mailing address in the US or Canada). Of course, I'll publish articles here too. I think I've already told you everything I know, so most of what I'll write about during 2003 will be rampant speculation, disguised as hard facts! The best way to avoid missing any new articles is to sign up for the mailing list (at the bottom of any page on the site). This results in one or two emails a month when there's significant new content on the site, and zero spam. I've been working on a second book. The first book I wrote was an expansion on all the user interface design stuff on this site; it consisted of about 50% more material than the site itself. The second book, now under construction, was intended to include all the management stuff (basically, everything else on this site). As I cut and paste articles I'm discovering that I've learned a lot over time and some of the older articles need some revision. So it's taking longer to get this book out than I expected. But I hope it happens in 2003. Early next year, I'm going to move the Joel on Software web server to a new home. I've ordered a new server from Dell (it will be a 2U rackmount Xeon with dual RAID-1 drives), and the Canadian networking company Peer 1 Networks has graciously offered to provide colocation space and bandwidth for free. If you need colocation or Internet connectivity, consider Peer 1 (and tell them I sent you!). I'll write more about this when I install everything. The townhouse where Fog Creek has its offices will be undergoing renovation, so we're looking for new office space. Our goals: easy commute to the Upper West Side (of New York City), windowed private offices (not easy to find in this city), and cool. I don't have a technical description of cool. ""I know it when I see it."" Real estate people keep showing me these interior offices that are completely closed off, without even a view of windows in the distance. I ask them how they would feel about living in an apartment where the bedroom didn't have a window. ""You would freak out, right?"" And that's for a room you're going to sleep in, at night. For a room where you spend the day it's obviously non-negotiable. The most important goal for us as a software company next year is to ship a series of new releases of CityDesk. The primary goal is to provide answers to the people who have said to us: ""I like CityDesk, but I can't use it for my application because x."" For example: ""I like CityDesk, but my site appears in Japanese and English, and there are a few places where CityDesk doesn't preserve Unicode properly."" Or, ""I like CityDesk, but I need more flexibility in scripting so that I can do x, y, and z with my site automatically."" Overcoming these x's is the easiest way to improve sales. The great thing about having customers and listening to them is that we get this kind of information, and we don't have to speculate about what features would be neat,and we don't do things just because some programmer thinks they would be fun. Read Strategy Letter III to see what I mean. (By the way, we've already got a Unicode version of CityDesk ""in the lab"" which is how I publish all the translations, but it's not quite ready for prime time.) It's no secret that the direction FogBUGZ is going is to become a better tool for communicating with customers. It's already the best way for a small team or company to handle incoming email, and we're getting more and more non-programming customers who simply use it to make sure customer email gets handled by the right person. But the other thing I'd like to see happen with FogBUGZ is to commoditize our complements. We can do this by making sure it works with more databases, especially open source ones, instead of requiring Microsoft SQL Server, which costs an arm and a leg. (Actually the current version also works with Microsoft Jet, which is free, but can wheeze with large bug databases.) In the other direction, FogBUGZ needs to handle more of the development process: schedules, specs, etc. Anyway, thanks for reading Joel on Software, and have a great new year.
	"
https://www.joelonsoftware.com/2002/12/11/lord-palmerston-on-programming/,Lord Palmerston on Programming,2002-12-11T00:15:26+00:00,2016-12-05T19:12:25+00:00,Joel Spolsky,"Tech lead, News","
	There was a time when if you read one book by Peter Norton, you literally knew everything there was to know about programming the IBM-PC. Over the last 20 years, programmers around the world have been hard at work building abstraction upon abstraction on top of the IBM-PC to make it easier to program and more powerful.
But the law of leaky abstractions means that even as they built the abstractions that are supposed to make programming easier, the sheer amount of stuff you have to know to be a great programmer is expanding all the time.
Becoming proficient, really proficient, in just one programming world takes years. Sure, lots of bright teenagers learn Delphi one week and Python the next week and Perl the next week and think they are proficient. Yet they don't have the foggiest clue how much they're missing.
I've been working with ASP and VBScript since it first came out. VBScript is the dinkiest language on earth and ASP programming consists of learning about 5 classes, only two of which you use very often. And only now do I finally feel like I know the best way to architect an ASP/VBScript application. I finally think I know where the best place to put database access code is, the best way to use ADO to get recordsets, the best way to separate HTML and code, etc. And I finally use regexps instead of one-off string manipulation functions. Only last week, I learned how to get COM objects out of memory so you can recompile them (without restarting the whole web server).
Fog Creek is too small to have specialists, so when I needed to write a really good installer for FogBUGZ, our ASP/VBScript based product, I drew on several years of C++/MFC experience, and years of experience with Windows APIs, and good Corel PhotoPaint skills to create a neat picture in the corner of the wizard. Then to get FogBUGZ to work perfectly with Unicode, I had to write a little ActiveX control using C++ and ATL, which drew upon years of C++ and COM experience and a week or so learning about character encodings when I implemented that code in CityDesk.
So when we had a weird NT 4.0-only bug, it took me 3 minutes to debug, because I knew how to use VMWare, and I had a clean NT 4.0 machine set up in VMWare, and I knew how to do remote debugging with Visual C++, and I knew to look in the EAX register to get the return value from a function. Someone who was new to this all might have taken an hour or more to debug the same problem, but I already knew a tremendous amount of ""stuff"" that I've been learning, basically, since 1982 when I got my first IBM-PC and that Norton book.
Leaky abstractions mean that we live with a hockey stick learning curve: you can learn 90% of what you use day by day with a week of learning. But the other 10% might take you a couple of years catching up. That's where the really experienced programmers will shine over the people who say ""whatever you want me to do, I can just pick up the book and learn how to do it."" If you're building a team, it's OK to have a lot of less experienced programmers cranking out big blocks of code using the abstract tools, but the team is not going to work if you don't have some really experienced members to do the really hard stuff.
There are a lot of programming worlds, each of which requires a tremendous amount of knowledge for real proficiency. Here are the three I personally know best:
MFC/C++/Windows
VBScript/ASP
Visual Basic
All, basically, what you would call Windows programming. Yes, I've written Unix code and Java code, but not very much. My proficiency in Windows programming comes from knowing not just the basic technologies but also the whole supporting infrastructure. So, I claim, I'm really good at Windows programming because I also know COM, ATL, C++, 80x86 Assembler, Windows APIs, IDispatch (OLE Automation), HTML, the DOM, the Internet Explorer object model, Windows NT and Windows 95 internals, LAN Manager and NT networking, including security (ACEs, ACLs, and all that stuff), SQL and SQL Server, Jet and Access, JavaScript, XML, and a few other cheerful facts about the square of the hypotenuse. When I can't get the StrConv function in VB to do what I want, I bang out an COM control so I can drop into C++ with ATL and call the MLang functions without dropping a beat. It took me years to get to this point.
There are lots of other programming worlds. There's the world of people developing for BEA Weblogic who know J2EE, Oracle, and all kinds of Java things that I don't even know enough about to enumerate. There are hard core Macintosh developers who know CodeWarrior, MPW, Toolbox programming in System 6 through X, Cocoa, Carbon, and even nice obsolete things like OpenDoc that don't help any more.
Very few people, though, know more than one or two worlds, because there's just so much to learn that unless you have to work in one of these worlds for more than a couple of years, you don't really grok it all.
But learn you must. 
People get kind of miffed when they go on job interviews and get rejected because, for example, they don't have Win32 (or J2EE, or Mac programming, or whatever) experience. Or they get annoyed because idiot recruiters, who would not know an MSMQ if it bit them in the tailbone, call them up and ask if they ""have 5 years MSMQ.""
Until you've done Windows programming for a while, you may think that Win32 is just a library, like any other library, you'll read the book and learn it and call it when you need to. You might think that basic programming, say, your expert C++ skills, are the 90% and all the APIs are the 10% fluff you can catch up on in a few weeks. To these people I humbly suggest: times have changed. The ratio has reversed.
Very few people get to work on low level C algorithms that just move bytes around any more. Most of us spend all our time these days calling APIs, not moving bytes. Someone who is a fantastic C++ coder with no API experience only knows about 10% of what you use every day writing code that runs on an API. When the economy is doing well, this doesn't matter. You still get jobs, and employers pay the cost of your getting up to speed on the platform. But when the economy is a mess and 600 people apply for every job opening, employers have the luxury of choosing programmers who are already experts at the platform in question. Like programmers who can name four ways to FTP a file from Visual Basic code and the pros and cons of each.
The huge surface area of all these worlds of programming leads to pointless flame wars over whose world is better. Here's a smug comment somebody anonymously made on my discussion board: 
""Just one more reason why I'm glad to be living in the 'free world.' Free as in speech (almost) and freedom from pandering to things like setup programs and the registry - just to name a few."" 
I think this person was trying to say that in the Linux world they don't write setup programs. Well, I hate to disappoint you, but you have something just as complicated: imake, make, config files, and all that stuff, and when you're done, you still distribute applications with a 20KB INSTALL file full of witty instructions like ""You're going to need zlib"" (what's that?) or ""This may take a while. Go get some runts."" (Runts are a kind of candy, I think.) And the registry - instead of one big organized hive of name/value pairs, you have a thousand different file formats, one per application, with .whateverrc and foo.conf files living all over the place. And emacs wants you to learn how to program lisp if you're going to change settings, and each shell wants you to learn its personal dialect of shell script programming if you want to change settings, and on and on.
People who only know one world get really smarmy, and every time they hear about the complications in the other world, it makes them think that their world doesn't have complications. But they do. You've just moved beyond them because you are proficient in them. These worlds are just too big and complicated to compare any more. Lord Palmerston: ""The Schleswig-Holstein question is so complicated, only three men in Europe have ever understood it. One was Prince Albert, who is dead. The second was a German professor who became mad. I am the third and I have forgotten all about it."" The software worlds are so huge and complicated and multifaceted that when I see otherwise intelligent people writing blog entries saying something vacuous like ""Microsoft is bad at operating systems,"" frankly, they just look dumb. Imagine trying to summarize millions of lines of code with hundreds of major feature areas created by thousands of programmers over a decade or two, where no one person can begin to understand even a large portion of it. I'm not even defending Microsoft, I'm just saying that big handwavy generalizations made from a position of deep ignorance is one of the biggest wastes of time on the net today.
Frequent readers, by now, have noticed that I've been thinking of the problem of how one might deliver an application on Linux, Macintosh, and Windows without paying disproportionately for the Linux and Macintosh versions. For this you need some kind of cross-platform library. 
Java attempted this but Sun didn't grok GUIs well enough to deliver really slick native-feeling applications. Like the space alien in Star Trek watching Earth through a telescope, they knew exactly what human food was supposed to look like but they didn't realize it was supposed to taste like something. Java apps have menus in the right places but there are all these keyboard things that don't work the same way as every other Windows app and their tabbed dialogs look a little scary. And there is no way, no matter how hard you try, to make their menubars look exactly like Excel's menubars. Why? Because Java doesn't give you a very good way to drop down to the native facilities whenever the abstraction fails. When you're programming in AWT, you can't figure out the HWND of a window, you can't call the Microsoft APIs, and you certainly can't intercept WM_PAINT and do it differently. And Sun made it plenty clear that if you tried to do that, you weren't Pure. You were Polluted, and to hell with you.
After a number of highly publicized failures to build GUIs with Java (e.g. Corel's Java Office suite and Netscape's Javagator), enough people know to stay away from this world. Eclipse built their own windowing library from the ground up using native widgets just so they could write Java code that had a reasonably native look and feel.
The Mozilla engineers decided to address the cross platform problem with their own invention called XUL. So far, I'm impressed. Mozilla finally got to the point where it tastes like real food. Even my favorite bugaboo, Alt+Space N to minimize a window, works in Mozilla; it took them long enough but they did it.
Mitch Kapor, who founded Lotus and created 123, decided for his next application to go with something called wxWindows and wxPython for cross platform support.
Which is better, XUL, Eclipse's SWT, or wxWindows? I don't know. They are all such huge worlds that I couldn't really evaluate them and tell. It's not enough to read the tutorials. You have to sweat and bleed with the thing for a year or two before you really know it's good enough or realize that no matter how hard you try you can't make your UI taste like real food. Unfortunately, for most projects, you have to decide on which world to use before you can write the first line of code, which is precisely the moment when you have the least information. At a previous job we had to live with some pretty bad architecture because the first programmers used the project to teach themselves C++ and Windows programming at the same time. Some of the oldest code was written without any comprehension of event-driven programming. The core string class (of course, we had our own string class) was a textbook example of all the mistakes you could make in designing a C++ class. Eventually we cleaned up and refactored a lot of that old code but it haunted us for a while.
So for now, my advice is this: don't start a new project without at least one architect with several years of solid experience in the language, classes, APIs, and platforms you're building on. If you have a choice of platforms, use the one your team has the most skills with, even if it's not the trendiest or nominally the most productive. And when you're designing abstractions or programming tools, go the extra mile to make them leak proof.
	"
https://www.joelonsoftware.com/2002/12/11/20021211/,2002/12/11,2002-12-11T00:04:27+00:00,,Joel Spolsky,News,"
	Lord Palmerston: ""The Schleswig-Holstein question is so complicated, only three men in Europe have ever understood it. One was Prince Albert, who is dead. The second was a German professor who became mad. I am the third and I have forgotten all about it."" Programming has gotten too hard.
	"
https://www.joelonsoftware.com/2003/01/28/20030128/,2003/01/28,2003-01-28T00:04:35+00:00,,Joel Spolsky,News,"
	Binary Search Debugging Something we had done since the last release of CityDesk somehow caused our publish times to increase by about 100%; on a particular large site we use for stress testing it had gone from about a minute to about two minutes. The first thing I tried was a profiler: Compuware DevPartner Studio. Indeed this showed me where a lot of bottlenecks are; that data will be useful to speed up our publish times even more, but I really wanted to find the specific bug that I thought we had introduced which was slowing us down. The next thing I tried was a method I learned from Gabi at Juno: the old binary search method. Before we started work on this release, publishing took 1'04"". Today it takes 1'57"". So I started checking out old versions of the source from CVS by date, rebuilding, and timing how long publishing took with each day's build. Here's what I found: As of May 1: 1'57""As of April 1: 1'05""As of April 15: 1'05""As of April 22: 1'06""As of April 26: 1'58""As of April 24: 1'05""As of April 25: 1'05"" Aha! Now all I had to do was run WinDiff to compare the source tree from April 25th and April 26th, and I discovered four things that were changed that day, one of which was a function that DevPartner had told me was kind of slow, anyway. Within minutes I found the culprit - that function was originally written to cache its results because it's often called with the same inputs, and I had inadvertently changed the cache key in one place and not another, so we were getting 100% misses instead of 99% hits. Solved! Total elapsed time to find this bug: about an hour. If your source code is much bigger than CityDesk, builds and checkouts may be slow. This is as good a reason as any to keep all your old daily builds around.
	"
https://www.joelonsoftware.com/2003/01/25/20030125/,2003/01/25,2003-01-25T00:04:34+00:00,,Joel Spolsky,News,"
	A week of Murphy's Law gone wild. Chapter One. The Linux server hosting our CVS repository (all our source code) fails. No big deal, it is automatically mirrored (using rdist) to a remote location. It takes a few hours to compress and transmit the mirrored data. We discover that we forgot the option to rdist that removes deleted files, so the mirror isn't perfect: it includes files that were deleted. These have to be manually removed. When this is all done I decide to check out the whole source tree from scratch and compare it to what I already have, as a final sanity check. But I don't have enough disk space on my laptop to do this. Time to upgrade. I order a 60 GB laptop hard drive and a PCMCIA/harddrive connector that is supposed to allow you to clone the old hard drive on the new one. This process takes something like 6 hours and fails when it is 50% complete, instructing me to ""run scandisk."" Which takes a couple of hours. Start another copy. 6 hours more. At 50%, it fails again. Only now, the original hard drive is toast taking my entire life with it. It takes a couple of hours fiddling around, putting the drive into different computers, etc., to discover that it is indeed lost. OK, not too big a deal, we have daily backups (NetBackup Pro). I put the new 60 GB drive into the laptop, format it, and install Windows XP Pro. I instruct NetBackup Pro to restore that machine to its pre-crash state. I'll lose a day of work, but it was a day in which I hardly got anything done, anyway. A day of email was lost so if you sent me something this week and I didn't respond, resend. NetBackup Pro works for a few hours. I go home, to let it finish overnight. In the morning the system is completely toast and won't even boot. I hypothesize that it must be because I tried to restore a Win2K image on top of an XP Pro OS. So I start again, this time installing Win 2K (format hard drive: 1 hour; install Win 2K: 1 hour; then install the NetBackup Pro Client). And I start the restore again. Five hours later, it's only halfway done, and I go home. The next morning, the system doesn't quite boot, it blue-screens, but a half hour of fiddling around with Safe Mode and I get it to boot happily. And behold, everything is restored, except, for some reason, a few files which I let Windows encrypt for me (using EFS) are inaccessible. This has something to do with public keys and certificates. When you restore a file that was encrypted I guess you can't read it. I still haven't found the solution to this. If you know how to fix this I will be forever indebted to you. [1/26: I fixed this problem after a few hours of tearing out my hair.] Lesson Learned: This is not the first time that a hard drive failure has led to a series of other problems that wound up wasting days and days of work. Notice that I had a very respectable backup strategy, everything was backed up daily, offsite. In fact I believe this is the third time that a hard drive failure has led to a series of mishaps that wasted days. Conclusion: backups aren't good enough. I want RAID mirroring from now on. When a drive dies I want to spend 15 minutes putting in a new drive and resume working exactly where I left off. New policy: all non-laptops at Fog Creek will have RAID mirroring. Chapter Two. Did you notice that our web server was down? On Friday around noon a fire in a local Verizon switch knocked out all our phone lines and our Internet connectivity. Verizon got the phone lines working in a couple of hours, but the T1 was a bit more problematic. We purchased the T1 from SAVVIS, which, in turn, hired MCI to run the local loop, which is now called WorldCom, and of course Worldcom doesn't actually run any loops, God forbid they should get their hands dirty, they just buy the local loop from Verizon. So from Friday at noon until Saturday at midnight, Michael and I, working as a tag team, call Savvis every hour or so to see what's going on. We're pushing on Savvis, who, occassionally, push on Worldcom, who have decided that some kind of SQL Server DDOS attack can be blamed for everything, so they kind of ignore Savvis, who don't tell us that Worldcom is ignoring them, and we push on Savvis again, and they push on Worldcom again, and around the third time Worldcom agrees to call Verizon who send out a tech who fixes the thing. Honestly, it's like pushing on string. Just like the last time Savvis made our T1 go down for a day, the technical problem was relatively trivial and could have been diagnosed and fixed in minutes if we weren't dealing with so many idiot companies. Lesson Learned: When you're buying a service from a company that's just outsourcing that service, one level deep, it's difficult to get decent customer service. When there are two levels of oursourcing, it's nearly impossible. Much as I hate to encourage monopolistic local telcos, the only thing worse than dealing with a local telco directly is dealing with another idiot bureaucratic company who themselves have no choice but to deal with the local telco. Our next office space will be wired by Verizon DSL, thank you very much. Incidentally, none of you would have noticed this outage at all if Dell had delivered our damn server on time. We were supposed to be up and running in a nice Peer1 highly redundant secure colocation facility a month ago. See previous rant. Did I mention that I have a fever? I always get sick when things are going wrong. Chapter Three. For the thousandth time, the heat on the fourth floor of the Fog Creek brownstone is out. Heat is supplied by hot water pipes running through the walls. These pipes were frozen solid. How did they get a chance to freeze? Oh, that's because the furnace went off last week, because it was installed by an idiot moron, probably unlicensed, who put in a 25 foot long horizontal chimney segment which prevents ventilation and has, so far, hospitalized one tenant and caused the furnace to switch off dozens of times. Finally someone at the heating company admitted that it was possible to install a draft inducer forcing the chimney to ventilate, which they did, but not before the hot water pipes had frozen. Of course, the pipes are inadequately insulated due to another incompetent in the New York City construction trade, but this wouldn't have mattered if the furnace had kept running. Lesson Learned: Weak systems may appear perfectly healthy until neighboring systems break down. People with allergies and back problems may go for months without suffering from either one, but suddenly an attack of hayfever makes them sneeze hard enough to throw out their back. You see this in systems administration all the time. Use these opportunities to fix all the problems at once. Get RAID on all your PCs and do backups, and don't use EFS and always get hard drives that are way too large so you'll never have to stop to upgrade them, and double check the command line options to rdist. Install the draft inducer and insulate the pipes. Move your important servers to a secure colo facility and switch the office T1 to Verizon.
	"
https://www.joelonsoftware.com/2003/01/16/20030116/,2003/01/16,2003-01-16T00:04:33+00:00,,Joel Spolsky,News,"
	When Apple releases a new product, they tend to surprise the heck out of people, even the devoted Apple-watchers who have spent the last few months riffling through garbage dumpsters at One Infinite Loop. Microsoft, on the other hand, can't stop talking about products that are mere glimmers in someone's eye. Testers outside the company were using .NET for years before it finally shipped. So, which is right? Should you talk endlessly about your products under development, in hopes of building buzz, or should you hold off until you've got something ready to go? Mouth Wide Shut
	"
https://www.joelonsoftware.com/2003/01/15/mouth-wide-shut/,Mouth Wide Shut,2003-01-15T00:14:28+00:00,2016-12-05T19:36:01+00:00,Joel Spolsky,"Product manager, News","
	When Apple releases a new product, they tend to surprise the heck out of people, even the devoted Apple-watchers who have spent the last few months riffling through garbage dumpsters at One Infinite Loop.
Microsoft, on the other hand, can't stop talking about products that are mere glimmers in someone's eye. Testers outside the company were using .NET for years before it finally shipped.
So, which is right? Should you talk endlessly about your products under development, in hopes of building buzz, or should you hold off until you've got something ready to go? 
Fog Creek's default policy so far has been Absolute Radio Silence. At times, I've considered changing that policy. After all, why not open up our complete development process to the world, let everybody peek in the windows and see what's going on? There's nothing to hide!
In my personal life, I have a policy lifted from Marlon Brando, playing a mob boss in The Freshman: ""Every word I say, by definition, is a promise."" The best way to avoid breaking promises is not to make any, and that's as good a reason as I need not to talk about future versions of our products. There are four other reasons for this in software development.
Competition. I'm not overly paranoid about competition, but as soon as you have competition that's paying attention to what you do, if you discuss features that haven't shipped yet, you're handing them an opportunity. If you keep your mouth shut until you ship, you will be guaranteed at least half a year without competition before everyone else matches that cool new feature.
Underpromise and overdeliver. When you tell a customer or potential customer you're going to add a feature, they will inevitably imagine that the feature will do all kinds of things that it may not actually do. When you tell someone about the upcoming clam steaming feature, no matter how careful you are to delimit what it actually does, they will inevitably spin elaborate fantasies about how it cures baldness and warts and has a telepathic user interface. When you finally deliver something, they are bound to be disappointed. This can only hurt.
Flexibility. If you want to keep your promises, you can't talk about upcoming features and release dates unless you're willing to lock into them. This may eliminate flexibility that you need later when Murphy strikes. And if you don't keep your promises, you've ruined something that's very hard to get back: your reputation.
Simplicity. If your policy is Radio Silence, every employee understands it and can follow it. If your policy is in any way complicated, nobody is sure what to do and things leak.
Doesn't advance buzz and publicity help? I don't know. A little, but not as much as nonadvance publicity. I'm inclined to think that publicity that comes out when you can't actually buy the product is 90% wasted. Remember that incredibly big burst of Segway publicity about a year ago? With Jeff Bezos and Steve Jobs talking about how ""IT"" was going to revolutionize the entire universe? Cities would be reconfigured. OK, so, we all talked about the Segway, but nobody could buy one, so it's not clear that it was publicity well-spent. And it certainly seems like the same amount of publicity would have helped more if it appeared when every Walmart has Segways in stock.
One purported advantage of talking about your products under development is to get early feedback. But honestly, you don't need feedback from the entire world. Look at the poor Chandler guys; they started talking about their product before any design was done and immediately got buried under such a deluge of feedback just managing it all was impossible. Now everybody thinks Chandler is going to be All Things to Everybody. Quite a lot to live up to. I've found that you can get just as good feedback from a few hundred carefully selected customers. The other 800,000 people that send you suggestions might be sending good suggestions, but you already heard them, so they aren't adding value. (By the way, Chandler did exactly the right thing, since they are an open source project. They don't care if competitors use their ideas, and at this stage it's worth sifting through everybody's crazy feature requests if that's the price of attracting more volunteers to write the code.)
A lot of times customers and potential customers come to me and say, ""FogBUGZ (or CityDesk) is almost perfect for my needs. But I need a salad spinner. When are you going to have a salad spinner? Will the next release have a salad spinner?"" To these people I have to say, ""I don't know. We might, or we might not. If you really can't live without a salad spinner, I'm afraid you'll have to go somewhere else."" OK, maybe we lose a sale or two by refusing to indulge in the vaporware habit. I'm a patient man, and Fog Creek is profitable so I don't need the cash. Next year we'll have salad spinners, and I won't lose the sale. It's better than selling you something that doesn't fit your needs and having you get pissed off at me, or getting a reputation as being unable to deliver.
	"
https://www.joelonsoftware.com/2003/01/15/20030115/,2003/01/15,2003-01-15T00:04:32+00:00,,Joel Spolsky,News,"
	Local Optimization, or, The Trouble With Dell One of my core beliefs is that if you pick some aspect of your business to optimize, and focus only on that one number, you tend to ruin other parts of the business that you're not measuring as carefully, resulting in a local optimization that actually harms your business as a whole. Dell Computer is a great case in point. In books and magazine articles (see also the January Business 2.0) they brag endlessly about how low their inventory is. Everybody at Dell knows that what makes Mr. Dell happy is reducing the inventory to a bare minimum. Inventory, he says, costs money, especially in the fast moving computer industry where a part on a shelf has a half life of 6 months. Unfortunately, the dirty little secret about Dell is that all they have really done is push the pain of inventory up to their suppliers and down to their customers. Their suppliers end up building big warehouses right next to the Dell plants where they keep the inventory, which gets reflected in the cost of the goods that Dell consumes. And every time there's a little hiccup in supplies, Dell customers just don't get their products. I ordered a new server from them more than a month ago and every week, the day the server is supposed to ship, I get an automated email telling me that my order is delayed by another week and there's nothing they can do about it. Today the email said that the server will ship January 21 (originally promised January 7th). I called Dell to ask what was holding up my server. ""It looks like it's the CPU,"" the rep told me. ""It's those Xeons."" ""OK, do you have any different CPUs you could put in? Maybe a faster or slower Xeon?"" ""Let me check that for you, sir. Nope, there are no Xeons available until January 30th."" ""None? At any speed?"" I asked, incredulously. Somehow I don't believe that Dell can't get a single Xeon until next month. ""No sir."" ""How about a Pentium 4?"" I know that the server I'm buying used to come with Pentium 4s. ""No, we don't make those servers with Pentium 4s any more."" Sounds to me like they don't make those servers at all. When you need a computer right away, you can't call Dell: even when everything is working perfectly they have to build the computer for you and it takes a week or two to get it. Compare that to, say, PCConnection, which can overnight a new IBM or HP server to you and you get it the next day, and Dell is at a significant competitive disadvantage. Combine that with the fact that the no-margin-of-error inventory model means that every hiccup in the supply chain automatically results in an angry customer, and you have a pretty serious liability that probably hurts Dell a lot more than not carrying a few days of inventory helps them. But Michael Dell never told his employees to optimize for customer satisfaction or to optimize for delivery time, he told them to optimize for inventory velocity and nothing else, and that is what he got.
	"
https://www.joelonsoftware.com/2003/01/09/20030109/,2003/01/09,2003-01-09T00:04:31+00:00,,Joel Spolsky,News,"
	I've spent most of the week pounding the pavement, looking at new office space for Fog Creek. We're focusing on a neighborhood in New York called the Garment District, which used to be the home to thousands of small clothing factories, many of whom are still there, but they're slowly getting pushed out of business and the old factories are being gentrified with architects, designers, modeling agencies, photographers, and of course software companies taking over, putting in nice new windows and polished wood floors, replacing the rows of sewing machines with laptop computers, and paying double the rent. It's great to be a creditworthy tenant looking for office space; there's so much empty office space in New York that landlords are falling over themselves to do good deals. Clay Shirky: ""Two years and hundreds of millions of dollars later, FedEx pulled the plug on ZapMail, allowing it to vanish without a trace. And the story of ZapMail's collapse holds a crucial lesson for the telephone companies today."" Excellent. Clay has hit the nail right on the head; everybody's looking for the huge business opportunities around 802.11 and VoIP and they probably aren't really there.
	"
https://www.joelonsoftware.com/2003/01/03/20030103/,2003/01/03,2003-01-03T00:04:30+00:00,,Joel Spolsky,News,"
	I posted a bit of internal documentation that is likely to be of interest only to people using VB6 with DAO database access. It describes the entity classes that we're implementing as we refactor CityDesk, in order to isolate database access code and provide a clean, super-easy interface to database tables. CityDesk Entity Classes. Yesterday I switched over the CityDesk setup from InnoSetup to My Inno Setup Extensions. Advantages: Pascal scripting, which we don't need but might, and conditional compilations, which allow me to use a single source setup script for the main setup and the upgrade. Inspired by Dr. Motulsky I eliminated three unnecessary steps from setup, for example, the stupid screen that might as well just say, ""OK, we realize you just clicked next, please click next again now, thank you."" (The famous ""ready to install"" screen that nobody reads.)
	"
https://www.joelonsoftware.com/2003/01/02/20030102/,2003/01/02,2003-01-02T00:04:29+00:00,,Joel Spolsky,News,"
	""With TDD, you create an automated test first, and only then write the minimal amount of code that you can get away with to satisfy that test. Every time someone finds a new bug, it gets added to the fully automated test suite. Then the programmer writes the minimal amount of code to make the new test pass (which makes the bug go away)."" -From Test Driving Test Driven Development, a column I've written that will appear in the next issue of STQE Magazine. More paper! You can't read it online, but the nice folks at STQE have offered 15% off the usual subscription price for Joel on Software readers. Bookmark this: DLL Help is a complete database of every DLL Microsoft has ever shipped, and which versions of which product it shipped with. I'm trying to figure out which of the 7 versions of scrrun.dll in the wild is causing problems for the occasional CityDesk user. A good introduction to Dr. Deming's philosophy of management: Four Days with Dr. Deming summarizes the four day seminars Deming used to give to business leaders. Key insight: you can't improve your team's performance just by picking some numeric measurement and then rewarding or punishing people to optimize it. Problem one: the variability in the measurement may be caused by a broken system that only management can change, not by individual performance. Problem two: people may optimize locally to improve that one measurement, even at the cost of hurting the performance of the company as a whole. If you're in a rut constantly trying to figure out how to rejigger your employees' incentive systems, this book will get you out of it.
	"
https://www.joelonsoftware.com/2003/02/28/20030228/,2003/02/28,2003-02-28T00:04:41+00:00,,Joel Spolsky,News,"
	The social scientist Ray Oldenburg talks about how humans need a third place, besides work and home, to meet with friends, have a beer, discuss the events of the day, and enjoy some human interaction. Coffee shops, bars, hair salons, beer gardens, pool halls, clubs, and other hangouts are as vital as factories, schools and apartments [""The Great Good Place"", 1989]. But capitalist society has been eroding those third places, and society is left impoverished. In ""Bowling Alone,"" Robert Putnam brings forth, in riveting and well-documented detail, reams of evidence that American society has all but lost its third places. Over the last 25 years, Americans ""belong to fewer organizations that meet, know our neighbors less, meet with friends less frequently, and even socialize with our families less often."" [2000] For too many people, life consists of going to work, then going home and watching TV. Work-TV-Sleep-Work-TV-Sleep. It seems to me that the phenomenon is far more acute among software developers, especially in places like Silicon Valley and the suburbs of Seattle. People graduate from college, move across country to a new place where they don't know anyone, and end up working 12 hour days basically out of loneliness. So it's no surprise that so many programmers, desperate for a little human contact, flock to online communities - chat rooms, discussion forums, open source projects, and Ultima Online. In creating community software, we are, to some extent, trying to create a third place. And like any other architecture project, the design decisions we make are crucial. Make a bar too loud, and people won't be able to have conversations. That makes for a very different kind of place than a coffee shop. Make a coffee shop without very many chairs, as Starbucks does, and people will carry their coffee back to their lonely rooms, instead of staying around and socializing like they do in the fantasy TV coffeehouse of ""Friends,"" a program we watch because an ersatz third place is less painful than none at all. In software, as in architecture, design decisions are just as important to the type of community that develops or fails to develop. When you make something easy, people do it more often. When you make something hard, people do it less often. In this way you can gently encourage people to behave in certain ways which determine the character and quality of the community. Will it feel friendly? Is there thick conversation, a European salon full of intellectuals with interesting ideas? Or is the place deserted, with a few dirty advertising leaflets lying around on the floor that nobody has bothered to pick up? - Excerpted from my latest article, ""Building Communities with Software,"" which will only be sent to email subscribers. Please subscribe now to receive the article, which will be sent out on Monday morning.
	"
https://www.joelonsoftware.com/2003/02/25/20030225/,2003/02/25,2003-02-25T00:04:40+00:00,,Joel Spolsky,News,"
	The discussion forum for this site generates a lot of questions and commentary. As I said when I launched it, it's a bit of an experiment. Although it may seem simple, there are a lot of subtle design decisions and magic-behind-the-scenes in hopes of improving the quality of discussion that takes place there. So far, it has mostly worked. Later this week I'll write an essay explaining everything, but because it's full of Heisenberg effects, the essay won't appear on this web site, it will only go out via email to email subscribers. You can subscribe here or at the bottom of any page on my site: Email: Don't worry, you can unsubscribe at any time; every email I send includes a single-click unsubscribe link. I will never sell your email address. Subscribe by Friday to be sure to get the essay. Once again - the essay will not appear on the web and will be copyright so I'll ask you not to forward the email around. It's an exclusive benefit for email subscribers.
	"
https://www.joelonsoftware.com/2003/02/14/20030214/,2003/02/14,2003-02-14T00:04:39+00:00,,Joel Spolsky,News,"
	Due to the poor sound quality of the previous CityDesk online demo, I decided to invest in a real studio quality microphone instead of using one of those cheap computer headset/mike combinations. It took me a while to figure out what I needed. The mike itself is a Shure SM58, probably one of the most popular professional microphones in use today and generally available for about $100. I bought the Mic from Sam Ash on 48th street, hoping that they would be able to get me the right combination of cables and adapters I needed to plug this thing into a standard sound card. The stoner DJ sales dude sounded very confident but he didn't tell me that I needed a preamp, and he gave me the wrong kind of cables. If you're trying to do this yourself, here's exactly what I have: the Shure SM58 microphone A basic desk stand. The clip part that connects the mike to the stand comes with the mike. a 3' mic cable (it only needs to reach the preamp). I bought a CBI LowZ Microphone Cable from Zzounds. A preamp. This boosts the level of the microphone to something that is called ""Line Level"" which is what a computer sound card needs. I got an M-Audio AudioBuddy from Zzounds. To connect the preamp to the sound card, you need a cable with a 1/4"" stereo phone jack on one end and a 1/8"" stereo ""mini"" phone jack on the other end. I assembled this out of two cables which I bought at my neighborhood Radio Shack. For some reason the professional music stores like Sam Ash and Zzounds think it is beneath their dignity to stock any parts with 1/8"" jacks, but that is what your sound card needs. The sound quality is really quite a bit better. Here are two MP3s, before (with the computer mike) and after (with the professional mike).
	"
https://www.joelonsoftware.com/2003/02/05/20030205/,2003/02/05,2003-02-05T00:04:38+00:00,,Joel Spolsky,News,"
	Dave asks: ""When I get Slashdotted we get about 5000 reads. I've noticed that number is about what some Manila and Radio sites have gotten when they were Slashdotted. Now, according to Joel Spolsky he gets about 400,000 reads from a Slashdot link, about 80 times the flow. Now here's the question. Why?"" Actually, I said 500,000, not 400,000, and I was referring to hits, not ""reads."" I'm not sure what a read is, but a hit is a single file served by the web server. Even the simplest page on this site consists of four files: the header GIF, the Made with CityDesk GIF, the CityDesk logo, and the article itself. Articles with pictures have a lot more. The number of page views we get, which only counts HTML files, is about 120,000 on ""slashdot days."" Since the average day has about 30,000 page views, only 90,000 are ""extra."" Still a lot more than Manila sites, but not 80 times the flow. Another difference is that I almost always get slashdotted on a day when I release a new article. This is coincidentally the same day I send email to 16,000 subscribers telling them about the new article. And on average a few dozen webloggers will link to me on the same day, bringing in their traffic as well. Some percentage of those people say, ""Aha! This precisely proves my point!"" and forward the URL to their boss or underling to hit them over the head with it. ""See? Nya!"" So there's always a multiplier effect. Finally, Joel on Software has enough old content that many new visitors stay a while and click around. That accounts for a lot of the extra traffic on Slashdot days.
	"
https://www.joelonsoftware.com/2003/02/04/20030204/,2003/02/04,2003-02-04T00:04:37+00:00,,Joel Spolsky,News,"
	I've moved Joel on Software to a new server, at a colocation facility operated by Peer 1 Network. In the process of finding a new home and getting it up and running I've learned quite a bit about how web hosting works, so I thought I'd describe a bit of it here and in the process provide a glimpse Behind The Scenes.
	"
https://www.joelonsoftware.com/2003/02/03/new-server-at-peer-1-network/,New Server at Peer 1 Network,2003-02-03T00:16:05+00:00,2016-12-05T19:33:03+00:00,Joel Spolsky,"Fog Creek Software, News","
	I've moved Joel on Software to a new server, at a colocation facility operated by Peer 1 Network. In the process of finding a new home and getting it up and running I've learned quite a bit about how web hosting works, so I thought I'd describe a bit of it here and in the process provide a glimpse Behind The Scenes.
The Fog Creek office is connected to the Internet via a single T1, which provides 1.5 Mbps of bandwidth. That's 1.5 megabits per second, the equivalent of 24 phone lines.
The T1 was provided by Savvis. The cost fluctuates depending on usage but it generally costs us something just over $1000 a month. 
We had originally decided to use a T1 instead of the much cheaper alternatives (like DSL or cable modems) because T1 lines had a reputation for reliability. We ran all our servers (Fog Creek, Joel on Software, TechInterview.org) from the office because we needed a fast Internet connection to the office anyway, so why pay again for hosting? That was the theory, at least.
But the T1 turned out to be not as reliable as we thought. We had a lot of short outages, from seconds to an hour, and twice in the last year we had outages of a day or more. In both cases, the ISP did not fix them nearly as quickly as we thought they should have been able to. Although our ISP was Savvis Communications, the segment of T1 from our office to the nearest Savvis location (called the ""local loop"") was actually provided by Worldcom. And in fact Worldcom didn't actually provide it, they just resold a Verizon T1 under their own name. So when something went wrong with the Verizon line, we had to convince Savvis to convince Worldcom to convince Verizon to fix it. Somehow this was like pushing on a string. Outsourcing is problematic that way: when everything works perfectly, you don't notice, but when things go wrong, it's much harder to get them fixed.
You may be wondering if a single server connected to a T1 was enough for all the traffic this site gets, about 100,000 hits a day, more like 500,000 when I write a new article or get mentioned on slashdot. The short answer is, it was fine. Since I publish the site using CityDesk which simply generates a bunch of plain HTML files, the server doesn't have to do anything tricky like generate each page from a database on the fly.
Anyway, we're about to move to a new office, so a decision had to be made about whether to take the T1 with us, or do something else. The long outages convinced me we needed a real colocation facility. ""Colocation"" means that you pay someone with a room with extremely high speed Internet access, usually redundant, to let you put your own computer on a shelf in that room. A good colocation facility, or ""colo"" as they're called, also has great air conditioning, a big generator to provide power if the lights go out, and huge batteries to keep the whole thing running during the few minutes it takes to get the generator started up. It also has a lot better security than average, all kinds of exciting fire extinguishing equipment, and locked cages to keep one company's servers from being tampered with by another company that uses the same colo.
""Colocation"" is not the same as ""web hosting."" Typically a web host will host your web site on their own servers. They administer the servers; you just put your files up and they serve them. Whereas colo means you buy and install and administer your own server hardware. We chose colocation for a number of reasons, but primarily because it gives us the flexibility to run any software we want.
If you're in the market for colocation, especially in a major metropolitan area, you probably have quite a few choices. By the way, there's no reason you have to get colocation in the same city where you're located - you can just build a server and then ship it to the colo. The colo's engineers put it on the rack for you, plug it into power and the net, and turn it on. 
A quick google search came up with a list of about eight companies that offered colocation in New York, so I called them all for price quotes. For the most part, the quote is based on how much space you need, how much bandwidth you need, and possibly how much power you need. There may be some other charges for things like IP addresses, but those are nickels 'n' dimes. Space is measured in racks. A single rack is about 6 or 7 feet high and always exactly 19 inches wide. You might rent a half rack or quarter rack if you have less equipment. If you only have one or two machines, you'll see things quoted in U's. One U is about 1.75 inches and represents the vertical distance from one set of screw holes to the next set on a rack; virtually all equipment that is intended to be mounted on a rack is a round multiple of 1U in height. The thinnest servers are 1U pizza-boxes. Our new server, a Dell 2650, is 2U in height; I chose this model because it had room for 5 hot-swappable hard drives. Hot swappable means you can plug them in and pull them out while the computer is running, so we can add some more storage without turning off the server and messing around with screwdrivers.
There are different schemes for paying for bandwidth. The most common, called capped bandwidth, is simply to pay for the bandwidth that's available. For example, you might get 1 Mbps of bandwidth capped, and you can use all of it or none of it and pay the same amount. The network administrator will program the router to cap your usage at that amount.
Another common system is where they set you up with a ton of bandwidth, but you only pay for the 95% percentile of the actual bandwidth used. That means that they sample how much bandwidth you're using every ten minutes over the course of a month. At the end of the month, they throw away the top 5% of all the samples, and charge you based on the maximum bandwidth you used during the other 95% of the time. This method means if you have a really big spurt in usage for a few minutes you won't have to pay for it. This is what's called ""burstable bandwidth.""
Anyway, I've been running this server for a while, so I had a pretty good idea of how much bandwidth it was going to need, and I had picked out a nice 2U server, so I took this info to the eight colocation providers I found for quotes. What I found clustered into three groups:
high end snobs, who told me they never do less than full racks, and I couldn't afford their services. These were usually companies from the Dot Com days that built ridiculously fancy offices and have marble bathrooms in their colos and named gigantic sports stadiums after themselves, and are now in bankrupcy court. When they would quote me a price, it was in the range of $1000 to $1500 a month.
reasonable small companies who had grown slowly and carefully, with slightly grimy colo facilities because they didn't waste money on trivial stuff that doesn't contribute to the bottom line like sweeping the floors or being polite to potential customers. They usually wanted $400 or $500. But luckily there was a third group, consisting of,
Peer 1 Network, a super friendly Canadian company that took one look at Joel on Software and said, ""hey, nice site, we'll host it for free for ya."" OK, I like free.
I liked just about everything I saw about Peer 1. They have just built a spiffy new facility in New York which connects to their cross-Canadian backbone. A Google search convinced me that their customers were all happy campers. And if you ever get a choice of whether to deal with Canadians or New Yorkers, I know it's unpatriotic of me to say this, but, go with the Canadians. Peer 1 is a small enough company that they care about your business, something which the giant bankrupt telcos don't. And they had a really smart network engineer working out of the New York colo who took the time to teach me a lot of the things I would know if I were a real network administrator as opposed to a software developer pretending to be a network administrator.
I got the Dell delivered straight to Peer 1's facility which is down the block from the New York Stock Exchange. When it arrived, Michael and I grabbed the Win2K CD-ROM and took the subway downtown to set it up. Most servers run ""headless,"" that is, without a keyboard or monitor, so Peer 1 had a keyboard, monitor, and mouse on a rolling trolley available for our use so we could set up the system. (You can see the temporary wires in the picture at right.) We installed Windows 2000 and got it completely up to date with patches before connecting it to the live Internet. The server has two separate power supplies and two power cables in case one fails or falls out. The dual power cables also means that if you need to move the server or plug it in somewhere else, you can do this using extension cords without ever turning the machine off.
It had three separate ethernet jacks: you use one of them for remote administration. The remote administration jack is really quite neat. This is a little computer with its own network jack which lives inside the big computer. Even if the main computer is off or hung, I can connect to the administration computer over the Internet using a web browser and tell it to reboot or turn on the main computer. Slick!
Peer 1 only gave us a single Internet drop in our cage - just a regular Cat 5 ethernet cable - so I ran out to J&R Computer World and bought a $35 Linksys 5 port switch so we could hook up all three network jacks.
One last step before connecting to the Internet: we turned on packet filters to block all incoming connections except for traffic from the Fog Creek office.
Once we got the computer on the net, we tried www.google.com, which redirected immediately to www.google.ca. Cool! They think we're in Canada! Our work done, we locked up the cage and came back to the Fog Creek office. Since then, everything we need to do with this machine can be done over the net, using Windows' built-in Terminal Services. This feels exactly like sitting at the machine. With any luck, it will be years until I visit this computer again.
	"
https://www.joelonsoftware.com/2003/02/03/20030203/,2003/02/03,2003-02-03T00:04:36+00:00,,Joel Spolsky,News,"
	New Column I just got the March copy of the Programmer's Paradise catalog, which contains the first installment of my new column, a review of VMware, on page 11. ""By the twentieth time I'd installed Windows 2000, I could do it in my sleep, even though I don't know a word of Chinese."" The only way to read the column is to get the catalog, which you can do for free here. I've already written the next two columns for the catalog: a review of ERwin and an article about user interface design. Also in the pipeline: reviews of LeadTools, Camtasia Studio, and DevPartner Studio. Unlike most software reviewers who write for the magazines, who spend just enough time with a the product to get 750 words worth, I plan to review things that we actually use on a daily basis here at Fog Creek and talk about how we use them. Commoditize Your Complements Remember when I wrote that ""smart companies try to commoditize their products' complements?"" We decided to take some of our own advice, here, so as of today, FogBUGZ can be run on top of MySQL, which is free, in addition to Microsoft SQL Server, which is expensive. We also support two more source code control systems: CVSNT and Visual SourceSafe.
	"
https://www.joelonsoftware.com/2003/03/28/finding-an-office-in-new-york-city/,Finding an Office in New York City,2003-03-28T00:15:49+00:00,2016-12-05T19:32:53+00:00,Joel Spolsky,"Fog Creek Software, News","
	This may be, possibly, the most off-topic article I've ever done here. But I try to write only about things I know about, and, recently, I learned a lot more about commercial real estate than I ever imagined I would need to know.
Old Fog Creek Office, E. 31 st.My company, Fog Creek Software, is relocating. There's nothing wrong with the brownstone we're in, it's just a tiringly long commute. Basically, we're moving because of William Whyte's rule: virtually all corporate relocations involve a move to a location which is closer to the CEO's home than the old location. Whyte discovered this principle after an extensive study of Fortune 500 companies that left New York City for the suburbs in the 1950s and 1960s. They always had big, complicated Relocation Committees which carefully studied all the options and chose, coincidentally I'm sure, to move to within half a mile of the CEO's home in Danbury, Connecticut. Whyte also showed that these companies all tanked after the relocation. With, I believe, but one exception, companies that left New York City to be closer to the CEO's house in Connecticut or Westchester had dismal stock performance compared to companies that stayed in Manhattan.
The dismal stock performance probably came from the fact that when you relocate more than a couple of miles, some employees' lives would be too disrupted to make the move, so you lose a lot of employees, and all the institutional knowledge, skill, and experience that comes with those employees. While I was working at Viacom one of their companies, Blockbuster, decided to move from Florida to Texas after they hired a new CEO who lived in - Texas! What a coincidence! Only a small portion of the employees made the move. For years and years the business press watched agog as Blockbuster made mistake after inexcusable mistake, re-trying all kinds of ideas that had failed only two years earlier.
But I digress. We're not losing any employees and we're just moving across town, to a location that is an easy walk from every subway line in NYC and three mega commuter hubs, bringing us within easy commuting distance for 17,000,000 potential employees.
Temporary Space and Incubators
Step one in finding an office in New York: allow nine months. I am not kidding about this. It will take about two months to find the space, a month to negotiate, two months to sign the lease, a month for your architect to design the build out and three months for construction. If you run out of time on your old lease, chances are (look closely) you have a clause in there which doubles or triples your rent if you stay past the end. This is called the overhang and next time you negotiate a lease, you'll remember to negotiate a lower overhang.
Nine months. You may think you can shorten that by taking pre-built space. The problem: there's hardly anything pre-built in the office market in New York. Almost everything you see is going to be either completely raw, or it's going to be a weird warren of dark rabbit offices with inexplicable bars between certain rooms, filthy carpet, and disgusting yellow-stained acoustic tiles.
What there is, if you have to move tomorrow, is temporary executive suites. These are the things you see advertised in the newspaper that say ""Move Tomorrow! Plans from $100 a month!"" What the ad doesn't say is that the $100 a month is for a mailbox only, with everything else a la carte. If you really want an office in one of these executive suites you're going to pay through the nose: about five to ten times as much as comparable office space. It's like living in a hotel instead of living in an apartment, or flying Concorde to London. Yeah, it's convenient, but is it really $10,000 a month convenient? Still, all the executive suites in the city are full, usually an honor roll of venture-capital backed companies working hard on keeping their cash burn up to respectable levels to impress the investors. This is because normal landlords hate venture capital funded companies. The few landlords in New York that rented to VC startups during the dotcom boom have learned never to do that again. Here's why: venture funded companies only have enough cash to last a few months or at most a year, after which they have to raise another round. If they don't raise the round, they close. Probably 80% of these companies close within a year. The way most leases are written, a landlord literally loses money if the tenant leaves after a year. If you're venture funded, and your VC won't sign a five year lease for you, you may be stuck paying the Rich Tax, paying $200 per foot (per year) to be in executive suites when the market rent is $20 - $30.
Another option is the so-called incubators. In New York City, we have TechSpace, EEmerge, Kickstart, and probably a few others. I am sort of surprised these places survived the dotcom bust, but they did, and they've lost their arrogance. They no longer act like VCs, they don't care about your business plan any more, and they don't want 5% of your pathetic worthless stock, they just want to get paid. They won't even kick you out after 3 months any more.
Incubators are a terrible place for programmers, because they took the baby chick metaphor a bit too far. The scientific geniuses that built these places actually think that the closer you shove people together the warmer they will be and thus the faster they will grow. What you get at the incubators is a room the size of your bedroom with desks around the outer wall where you can cram 16 people, all for about three thousand bucks a month. Oh, you wanted a window? Make it four thousand. Incubators are a smidgen cheaper, per square foot, than the executive office space, but they are just not an acceptable long-term solution.
Normal Office Space
A quick survey of normal office space.
First, it's usually not built, and if it is, somebody has probably been using it. If the walls are configured to your liking, you may be able to paint and recarpet it (about $7 per square foot) and move in. Otherwise you're going to have to do construction. Plan on this costing $50 per square foot. So if it's a 3000 square foot office, expect to spend $150,000 on the construction. I know, this sounds like a lot. While you are looking for offices, brokers will tell you that you can construct an office for less than $50 a square foot. They are lying to make the deal. Do not fall for it. The only way to pay less is if a lot of the work is already done (on our office, the demolition, ceiling, sprinklers, air conditioner, bathrooms, and finished floors were all done, so we're hoping to spend $25/ft on construction.)
Update, Feb. 2006: Construction costs are up a lot in the city. Plan on $75/sq ft for a very minimal buildout. I'm serious. We did construction for about $30 in 2003, but that was with an incompetant contractor who did terrible work, took forever, and lost his shirt on the deal because he had underbid.
In today's market, you can usually get the landlord to pay for some of this, probably $10 to $25 a foot. They will want receipts and stuff and they will only want to pay for walls and air conditioning ducts, not Aerons and plasma TV screens. Some landlords will also offer to do the construction themselves for you. If you take them up on it, you'll get the cheapest possible construction and it won't be very nicely designed, so you may be better off hiring your own architect and contractor.
In the office space market in the US, offices are categorized as Class A, B, or C. Class A means new, top-of-the-line construction. In New York, that means one thing only: modern steel and glass high rises. Anything else is not Class A. A classic old skyscraper from 1913 designed by Cass Gilbert with incredible detailing, beautiful gargoyles, a complete renovation from top to bottom and everything is spotless and new is still not a Class A building, even if it's nicer than most Class A buildings.
Class B and Class C don't mean anything, there's no formal definition, so nobody bothers to use these terms in the city any more. There's Class A and there's Everything Else.
For the purposes of high tech startups, unless you need a whole floor of a skyscraper, forget about Class A. It's not that you can't afford it, it's that they are not going to subdivide floors for you. These buildings are leased 10 floors at a time.
That leaves you with a wide variety of old buildings, often loft buildings, in various stages of renovation. The best ones have been recently renovated, the elevators are new, everything is spick-and-span and the lobby is nice if not glorious. The worst ones have a spanish deli as the lobby, the (one) elevator is manual and operated by a scary old man, and there are still a lot of clothing factories in the building operating heavy machinery that goes bonk bonk bonk all day long. Almost all of these buildings are family owned, although they might be managed by one of the large real estate management companies like Newmark or GVA Williams.
What If I Really, Really Don't Want to Build?
There are a few buildings which cater to small tenants where the offices are basically built out and at most you'll need paint and carpet. The Graybar Building near Grand Central, the Fisk Building near Columbus Circle, and the hugely unpopular Empire State Building. Graybar and Fisk always have spaces available on short notice at ""market rents,"" about 50% - 100% more than you'll pay for raw space in the Garment District or Wall Street but reasonable for their neighborhoods. Graybar is a funny ghost town building, right on top of Grand Central; it's full of offices of just-retired lawyers who live in Connecticut and can't quite let go, so they keep an office in the Graybar building, but then they never really go there.
Do You Need A Broker?
In the commercial market, brokers are paid by the landlord. Usually something like 6% of the total value of the lease over its entire term. This is a lot of money for a little bit of work. So as soon as you let it be known that you are looking for office space, you will have brokers falling all over you.
You have the option of using a tenant's broker. A good tenant's broker does all the legwork for you, looking at lots of spaces to find one and then showing you only the best options to choose from. The trouble is, there are hardly any good tenant's brokers. Most of them are just too lazy. The will tell you to meet them at Starbucks at 10:00 am, and they'll bring a printout they made at 9:45 that you could have gotten online (more about that in a moment), and they'll make you walk around with them while they get their act together and discover that these spaces don't really exist.
Tenant's brokers will tell you that they have the inside track on office space that isn't listed, especially sublets. The best ones will, but only the very best ones. Most of them are just making the same printouts you can get yourself.
Bottom line: you don't really need a tenant's broker to show you spaces. OK, the other thing the tenant's brokers will tell you is that they represent you, not the landlord, so they will have your interests in mind. This is vaguely true, but they're still getting paid by the landlord, and they still make more money if you overpay, so it's hard to trust them. If you're worried about landlord sharks taking advantage of you, stop worrying about that. Why? Because you'll have a good lawyer on your side when you sign the lease. You need a lawyer to review your lease anyway, that's your real protection from the landlord, not a broker who gets paid by landlords.
Are there disadvantages to having a tenant's broker? There are two. First, you may have to sign an exclusive. In today's market, with vacancies skyrocketing and no new tenants, you should flatly refuse. There's no reason to sign an exclusive. Just promise the broker that if you take a space which they showed you first, you will see to it that they get their commission.
The other disadvantage is that if a tenant's broker finds you a space and you take it, they will be splitting the commission between the tenant's broker and the landlord's broker. That means the landlord's broker only gets half the commission. That means, all else being equal, that the landlord's broker would rather do those deals where they get the whole commission, when they have a choice. That means that if you're competing for space with another potential tenant, and that tenant has his own broker and you don't, then the landlord's broker is going to like you much more... twice as much, in fact. Although theoretically it's up to the owner of the building to decide whom to rent to, you can bet that the landlord's broker will find ways to make the owner like you more.
Update, Feb. 2006: I've been told that many landlord's brokers are salaried employees on the staff of the building management company who couldn't care less and don't really work on commission. So for larger space (10,000 square feet or more) it probably won't hurt to hire a good tenant's broker and sign a three-month exclusive, but make sure you've got a really good broker who will do the footwork to earn their commission.
How Do I Find a Space Without a Broker?
Easy as pie.
First, do searches on two websites, which overlap some but not entirely in their listings: CityFeet and MrOfficeSpace.
Next, check the Sunday New York Times. (Not online. The online version just redirects you to CityFeet, which has a superset of the print classifieds). Circle everything that looks appropriate.
If you want cheaper, artsy space, check the Village Voice.
Avoid two things: ads that sound like executive office spaces, and ads that are just pitches for brokers disguised as listings. You can identify these because they don't give any details about the space, like the address. If the address is not in the listing, don't bother responding, it's almost certainly a broker who is fishing for potential tenants. He'll tell you to meet him at Starbucks at 10:00 am where he'll show up with exactly the same list you printed out from MrOfficeSpace.
Next step: do not call the broker in the listing. Yes, they can show you the space, but you don't need them yet. First go to the building in the listing and see if you like the building. Check out the lobby. Read the list of tenants to see if they're mostly software companies, architects, and graphic designers, or if they're mostly clothing factories, importers, and methadone clinics. Check out the neighborhood. In the bad buildings, people get into the elevators talking to themselves. In the good buildings, people appear to get into the elevators talking to themselves, but they have a tiny earphone, so it's totally different, they're just on the phone.
Like the building? Here's the next step, for which you should be reasonably well dressed. Go into the building's service entrance and ask to speak to the super. Tell the super you're looking for office space and you want to see the space in his building. He will show it to you. In better buildings, he may ask for a business card. That's all there is to it.
Now, if you like the space, call the broker.
""What would have happened,"" you may ask, ""if I had just called the number in the ad?"" Well, nothing terrible. The broker would have met you in the building lobby, and then he would have asked to see the super, and the super would have shown you the space. You see, the super has the keys and knows how to drive that cool manual elevator that goes to the floors where the fancy automatic elevators don't stop because there are no tenants there.
At this point, if you don't like the space, the broker will offer to show you a zillion other spaces. If he's smart he'll have the MrOfficeSpace printout that you also have. It doesn't hurt to walk around with him and look at spaces, he may know the neighborhood and be able to give you the gossip. It's worth spending some time talking to all the brokers you meet. Ask them what buildings have nice owners, and what buildings have nasty owners. They will lie a little bit about the buildings in which they have an interest, but if you keep asking and average the results you'll eventually learn the reputations of the landlords in the neighborhood.
How Do I Know If I Like The Space?
I kept looking at spaces, not particularly knowing if I liked anything or not, and one nice broker said to me: ""Don't worry. When you find the right place for you, you'll know it."" And he was right. The next day I walked into a place that was beautiful: natural light on three sides, a great renovated building, beautiful new wood floors; instead of taking notes I just wrote ""incredibobble"" in my notebook. That's the place you want. If it doesn't happen keep looking.
Gotchas to watch out for:
If there are windows, figure out what might happen that would block your views. If the building is next to an empty lot or a ""taxpayer"" (one story building), as soon as the economy gets better, a building might go up there and it might block your view.
Check out the bathrooms. Some buildings have really gross bathrooms and people forget to look at them.
Sit quietly in the space for a few minutes and listen to all the noises. Are there factories nearby? Noisy people upstairs banging around? A noise you don't notice when you're walking around talking to a broker may be torture when you're trying to concentrate on writing code.
Make sure the building has 24/7 access. Some buildings in New York actually close.
How are you going to get air conditioning? Is there something in place or will you have to install it? When you install it will it block your only window?
Are there enough elevators? Older buildings with only one or two elevators can mean really long, irritating waits.
How Big A Space Do I Need?
Space is measured in RSF: rentable square feet. This is a number that bears only a fleeting relationship to the actual size of the space. I have seen spaces that are 1000 RSF which are the same size as spaces that are 3000 RSF.
How could this be, you ask?
Well, you don't want to know. Officially you get RSF by taking the total size of the space and multiplying it by the building's loss factor. That's a made up number which they multiply the size of the space by, just because they can get away with it. It's supposed to account for all the shared areas, like the basement, the elevator shafts (counted once for each floor of course), the exterior walls, the interior walls, the bathrooms, the lobby, the Starbucks next to the lobby, the staircases, the fire escapes, and the owner's house in Queens including pool and garden.
Meaning - RSF is pretty useless. When they quote a price, it will always be quoted in dollars per square foot per year. Multiply by the size and divide by 12 to get your monthly rent, and this is the only figure you care about. Sign a lease based on the cost, not the square feet, or they'll ""recalculate"" their loss factor the next year and raise your rent.
This makes it sort of hard to search for office space, and it's one reason you have to look at lots of spaces (and bring a tape measure.) If you calculated that you're going to need about 2000 square feet, look for places advertised between 1000 and 3000.
Hidden Charges
Find out about all the charges you're going to have to pay. There are a couple of ways New York buildings especially like to stick it to you.
Some buildings don't have separate electric meters for each space. Since they don't know how much electricity you're using, they just have to charge you based on the assumption that you are operating a 100,000 watt radio station with Times Square lighting. They'll charge you something like $3 per square foot per year which is way more than you would spend if you had your own meter.
Some buildings make up things and put them in the lease. ""Tenant shall pay $200 per month to maintain the decorative steel trim on the building,"" my lease said. Hmm. Damn building doesn't even have a steel trim. I made them take it out.
Escalations are another big issue. If the rent is x for the first year, it's going to be x times the escalation in the second year, and so on. This amount should be agreed upon and not based on some weird fabricated thing like ""tenant's prorated share of the owner's increased expenses from operating the building."" I don't care about the owner's expenses and I'm not paying for the owner to pass along the cost of his 2003 Buick LeSabre to me. Some buildings have a uniquely Manhattan corruption called ""Porter's Wage."" This means that every year, when they renegotiate the contract with the Porter's Union, the percentage that those salaries goes up by is the percentage escalation that the tenants pay in rent. The theory was that a porter's wage was correlated with the overall inflation in the cost of operating a building, but in reality buildings don't have porters any more, and for some reason the porters they don't have would get really huge salaries, if they had jobs, but they don't, and the tenants are still paying for it.
Another thing the landlord will want to pass on to you is your share of the increase in property taxes. This is reasonably standard. They will even bill you for any money they spent ""lobbying"" (paying bribes) to get their property taxes reduced. Slimy but common.
How Do I Negotiate The Lease?
Theoretically, everything is negotiable. Practically, you're going to negotiate these big items:
monthly rent.
months of free rent at the beginning (these days it's not uncommon to get one month for each year of the lease, and even a couple more months while construction is going on)
landlord's contribution to buildout
length of the lease
For the purpose of negotiations, there are a few things you can pretend to care about which you can later swap to get a better deal:
pretend that you want 100% of the profit from a sublet. They won't give it to you, they'll give you 50%, which is actually better for you because it gives them an incentive to allow the sublet in the first place, and you can swap this for something else.
pretend that you don't want to pay a security deposit.
pretend that you want zero overhang, so your rent doesn't go up if you overstay your lease.
You may think you want to sign as short a lease as possible, because it ""leaves your options open."" Actually you're probably better off with a longer lease, for lots of reasons.
Landlords like long leases, so they'll like you more if you sign a long lease, and you can get a better deal.
Rents are super low now. If rents go up, your lease becomes worth cash money.
If you grow out of the space, the landlord will let you out of the lease if you take another space elsewhere from the same landlord.
If you go bankrupt or close, the landlord is not really going to be able to get anything out of you. If you're incorporated and the corporation signs the lease, you're not personally liable. At worst, the landlord will ask the company's officers to personally sign a good guy guarantee. This says that you will be personally responsible for the rent but only until the premises are vacated.
If you need less space, you can probably sublet. You might lose some money on the sublet but you'll probably make money. The landlord will help himself to half of your net profits from subletting.
You'll get more free months at the beginning with a longer lease.
You'll be able to negotiate more money for construction with a longer lease.
The broker will get more money, so he'll be more eager to make the deal happen.
All in all, there's no reason to be unduly scared of long leases. You can start by asking for a three or five year lease, agree on the months of free rent and construction money, and then ask them how much more free rent and money they'll give you if you take a seven year lease. (Logically, this should be proportional - doubling the length of the lease should double the free stuff).
There are thousands of good books on negotiating in general and even a bunch of books on negotiating leases. Read two or three if you've never done this before. Never, ever go into negotiations unless you have a good alternative. You should have two or three options you like and want before you try to negotiate.
After you negotiate the big items, get a proposed lease from the landlord and let your lawyer negotiate all the little details to his lawyerly heart's content.
Do I Need a Lawyer?
Absolutely. First of all, the errors-and-omissions insurance you carry (you do have errors and omissions insurance, right?) requires you to have a lawyer review any contracts you sign. But it's a great idea anyway.
I found a lawyer who works for another landlord. He spends most of his days in court trying to evict tenants. I thought he would be perfect to protect me from the likes of - him. And he was. As he was reading through a lease, he said to me, ""OK, this paragraph, I really like this clause, I think I'm going to steal it and use it in my own contracts."" Pause. He reaches for a red pen and crosses out the paragraph. ""But you're not signing it."" This guy was great. He knew that the standard phrase in the lease where it talks about leaving the space in ""broom clean condition"" was a classic way to avoid returning the deposit. ""Sure, it was clean,"" the owner says, ""but it wasn't broom clean. Prove to me that it was broom clean."" We crossed out ""broom"" and wrote ""reasonably."" You Need A Good Lawyer For This.
Here's another reason you need a lawyer. The lawyer can say to the landlord, ""Whaddaya mean if we're 3 days late on the rent we get evicted? We want the right to be 15 days late!"" When your lawyer says this, no offense is taken. He's just the lawyer. But if you, the tenant, try to say it, the landlord will say, ""What, are you planning to be late on the rent?""
Oh, It's All Too Hard!
I know. I know. And it has nothing to do with writing software. But as soon as you sign the lease, you can hire an architect and start talking about the fun stuff, like where the pool table goes.
Other Links
TenantWise has a lot of great articles about all this stuff, although you have to register to read it all, it's worth it.
Crains New York Business covers the commercial real estate beat like no other publication. Read it for a few months before you need office space, especially pay attention to the boring stories about deals, so you know what the market is like and negotiate from a position of knowledge.
Read the last few months of news at CityFeet, too.
Discuss your experience on the Joel on Software New Yorker's Forum.
	"
https://www.joelonsoftware.com/2003/03/28/20030328/,2003/03/28,2003-03-28T00:04:48+00:00,,Joel Spolsky,News,"
	Basically, we're moving because of William Whyte's rule: virtually all corporate relocations involve a move to a location which is closer to the CEO's home than the old location. Whyte discovered this principle after an extensive study of Fortune 500 companies that left New York City for the suburbs in the 1950s and 1960s. They always had big, complicated Relocation Committees which carefully studied all the options and chose, coincidentally I'm sure, to move to within half a mile of the CEO's home in Danbury, Connecticut. Whyte also showed that these companies all tanked after the relocation. This may be, possibly, the most off-topic article I've ever done here. But I try to write only about things I know about, and, recently, I learned a lot more about commercial real estate than I ever imagined I would need to know... Oh, good, TechInterview is back!
	"
https://www.joelonsoftware.com/2003/03/26/20030326/,2003/03/26,2003-03-26T00:04:47+00:00,,Joel Spolsky,News,"
	Not bad: about four hours of work to implement a picture editor with crop, resize, rotate, undo, and save. It did take about four hours yesterday to figure out which OCX/DLL files I need to ship and make sure that SETUP included them, and I spent an hour last night reading the documentation to get a better idea for what I have to do.
	"
https://www.joelonsoftware.com/2003/03/24/20030324/,2003/03/24,2003-03-24T00:04:46+00:00,,Joel Spolsky,News,"
	A couple of the monthly columns I've been doing for the Programmer's Paradise catalog are now on the web: a review of VMWare and a column on data modeling with ERwin. Coming up: a five minute introduction to user interface design, and a look at my experience using the profiler in CompuWare's DevPartner Studio to speed up CityDesk. 750 words doesn't give me much of a chance to really review things in depth, but I do have a policy for writing reviews: I only review products that I actually want to use in my daily work at Fog Creek. Unlike trade magazine reviewers, I still spend about 50% of my time doing software development, and I'm happy to try the latest toys if I think they will help. For example, this week I'm going to try to implement a basic image editor into CityDesk using LeadTools. In other news, we have signed the lease for our new office space, and the architect came up with a groovy floorplan with parallelogram offices.
	"
https://www.joelonsoftware.com/2003/03/23/20030323/,2003/03/23,2003-03-23T00:04:45+00:00,,Joel Spolsky,News,"
	I finally got around to adding bidirection text support to CityDesk, so today I can launch Hebrew and Farsi editions of Joel on Software, bringing the total language count up to 24.
	"
https://www.joelonsoftware.com/2003/03/14/20030314/,2003/03/14,2003-03-14T00:04:44+00:00,,Joel Spolsky,News,"
	AngryCoder: ""FogBUGZ is very well designed, and virtually bug free. Frankly, if you are in the market for a defect tracking solution, you can't do much better than FogBUGZ. It is by far the best solution on the market right now, and is also very attractively priced."" Thanks! Joseph Jones, who wrote the review, didn't like the perceived lack of customizability in FogBUGZ. I hear ya. This was one of those agonizing decisions for us. It's a tradeoff between implementing features that make the sale, versus implementing features that, we think, will make people who use our software love it, which helps in the long term. At the time it was discussed in depth here on Joel on Software. Take, for example, a typical report a bug tracking package gives you that shows you the number of bugs generated per day per programmer. Typical bad managers will use that tool to punish programmers with high bug counts or reward programmers with low bug counts. As a result, every time a tester tries to enter a bug, the programmer will argue about it. ""That's not really a bug."" ""Please don't enter it, I'll fix it on the side for you."" Eventually the bug tracking system subverts itself. That's not FogBUGZ's fault, but there you have it. Nobody wants to use it, they never upgrade, they don't buy more licenses when they get more programmers, and we lose the potential word of mouth. The current system, in which we expect FogBUGZ users to have enlightened development processes, makes us miss out on initial sales but it makes our existing customers happier. And they tell friends, and they buy more and more licences, and all is good. We've found that anyone who has been using FogBUGZ and moves on to a new job that doesn't have bug tracking will recommend FogBUGZ at their new job, which is one reason our sales are up by about 200% since last year. But this is all, to some extent, speculation. I can't prove anything here. Design decisions are hard that way.
	"
https://www.joelonsoftware.com/2003/03/07/20030307/,2003/03/07,2003-03-07T00:04:43+00:00,,Joel Spolsky,News,"
	I just got back from inspecting the new Fog Creek Office, a sunny loft in the shmatta district, with the architect. It's going to make a really nice office when we're finished building it out, with private offices, a living room area, kitchenette, and, budget permitting, a pool table and plasma TV. Here's what I told the architect: private windowed offices are non-negotiable we need three times as many power outlets as anyone would think. I'm sick of power strips. I have ten things plugged in right at my desk. I specified 4 outlets every foot, is that absurd? I want to be able to pull my own lan, telephone, fiber, and cable TV wires. Even if they're exposed. 
	"
https://www.joelonsoftware.com/2003/03/03/building-communities-with-software/,Building Communities with Software,2003-03-03T00:14:32+00:00,2016-12-05T19:10:49+00:00,Joel Spolsky,"Software designer, News","
	The social scientist Ray Oldenburg talks about how humans need a third place, besides work and home, to meet with friends, have a beer, discuss the events of the day, and enjoy some human interaction. Coffee shops, bars, hair salons, beer gardens, pool halls, clubs, and other hangouts are as vital as factories, schools and apartments [""The Great Good Place"", 1989]. But capitalist society has been eroding those third places, and society is left impoverished. In ""Bowling Alone,"" Robert Putnam brings forth, in riveting and well-documented detail, reams of evidence that American society has all but lost its third places. Over the last 25 years, Americans ""belong to fewer organizations that meet, know our neighbors less, meet with friends less frequently, and even socialize with our families less often."" [2000] For too many people, life consists of going to work, then going home and watching TV. Work-TV-Sleep-Work-TV-Sleep. It seems to me that the phenomenon is far more acute among software developers, especially in places like Silicon Valley and the suburbs of Seattle. People graduate from college, move across country to a new place where they don't know anyone, and end up working 12 hour days basically out of loneliness.
So it's no surprise that so many programmers, desperate for a little human contact, flock to online communities - chat rooms, discussion forums, open source projects, and Ultima Online. In creating community software, we are, to some extent, trying to create a third place. And like any other architecture project, the design decisions we make are crucial. Make a bar too loud, and people won't be able to have conversations. That makes for a very different kind of place than a coffee shop. Make a coffee shop without very many chairs, as Starbucks does, and people will carry their coffee back to their lonely rooms, instead of staying around and socializing like they do in the fantasy TV coffeehouse of ""Friends,"" a program we watch because an ersatz third place is less painful than none at all.
In software, as in architecture, design decisions are just as important to the type of community that develops or fails to develop. When you make something easy, people do it more often. When you make something hard, people do it less often. In this way you can gently encourage people to behave in certain ways which determine the character and quality of the community. Will it feel friendly? Is there thick conversation, a European salon full of intellectuals with interesting ideas? Or is the place deserted, with a few dirty advertising leaflets lying around on the floor that nobody has bothered to pick up?
Look at a few online communities and you'll instantly notice the different social atmosphere. Look more closely, and you'll see this variation is most often a byproduct of software design decisions.
On Usenet, threads last for months and months and go off onto so many tangents that you never know where they've been. Whenever a newbie stumbles by and asks a germane question, the old timers shout him down and tell him to read the FAQ. Quoting, with the "">"" symbol, is a disease that makes it impossible to read any single thread without boring yourself to death by re-reading the whole history of a chain of argument which you just read in the original, seconds ago, again and again and again. Shlemiel the Painter reading.
On IRC, you can't own your nickname and you can't own a channel - once the last person leaves a room, anyone can take it over. That's the way the software works. The social result was that it was often impossible to find your friends when you came back the next day, because someone else might have locked you out of your chatroom and your friends might have been forced to choose different nicknames. The only way to prevent gay bashers in Perth, Australia from taking over gay chat channels when the boys went to sleep was to create a software robot to hang around 24 hours a day and guard the channel. Many IRC participants put more effort into complicated bot-wars, attempts to take over channels, and general tomfoolery than actually having a conversation, often ruining things for the rest of us.
On most investment discussion boards, it's practically impossible to follow a thread from beginning to end, because every post is its own page, which makes for a lot of banner ad inventory, but the latency in reading a conversation will eventually drive you nuts. The huge amount of flashing commercial crap on all four sides of the conversation makes you feel like you were trying to make friends in Times Square, but the neon lights keep demanding all the attention.
On Slashdot, every thread has hundreds of replies, many of which are identical, so the conversation there feels insipid and stupid. In a moment I'll reveal why Slashdot has so many identical replies and the Joel on Software forum doesn't.
And on FuckedCompany.com, the discussion board is completely, utterly worthless; the vast majority of posts consist of irrelevant profanity and general abusiveness and it feels like a fraternity rudeness contest, without any fraternity.
So, we have discovered the primary axiom of online communities: 
Small software implementation details result in big differences in the way the community develops, behaves, and feels.
IRC users organize themselves around bot warfare because the software doesn't let you reserve a channel. Usenet threads are massively redundant because the original Usenet reader, ""rn,"" designed for 300 baud modems, never shows you old posts, only new ones, so if you want to nitpick about something someone said, you had to quote them or your nitpick won't make sense.
With that in mind, I'd like to answer the most common questions about the Joel on Software forum, why it was designed the way it was designed, how that makes it work, and how it could be improved.
Q. Why is the software so dang simplistic?
A. In the early days of the Joel on Software forum, achieving a critical mass to get the conversation off the ground was important to prevent the empty restaurant phenomenon (nobody goes into an empty restaurant, they'll always go into the full one next door even if it's totally rubbish.) Thus a design goal was to eliminate impediments to posting. That's why there's no registration and there are literally no features, so there's nothing to learn.
The business goal of the software that runs the forum was to provide tech support for Fog Creek's products. That's what paid for the development. To achieve that goal, nothing was more important than making the software super simple so that anyone could be comfortable using it. Everything about how the forum works is incredibly obvious. I don't know of anyone who hasn't been able to figure out how to use it immediately.
Q. Could you make a feature where I check a box that says ""email me if somebody replies to my post?""
A. This one feature, so easy to implement and thus so tempting to programmers, is the best way to kill dead any young forum. Implement this feature and you may never get to critical mass. Philip Greenspun's LUSENET has this feature and you can watch it sapping the life out of young discussion groups.
Why?
What happens is that people go to the group to ask a question. If you offer the ""notify me"" checkbox, these people will post their question, check the box, and never come back. They'll just read the replies in their mailbox. The end.
If you eliminate the checkbox, people are left with no choice but to check back every once in a while. And while they're checking back, they might read another post which looks interesting. And they might have something to contribute to that post. And in the critical early days when you're trying to get the discussion group to take off, you've increased the ""stickiness"" and you've got more people hanging around, which helps achieve critical mass a lot quicker.
Q. OK, but can't you at least have branching? If someone gets off on a tangent, that should be its own branch which you can follow or go back to the main branch.
A. Branching is very logical to a programmer's mind but it doesn't correspond to the way conversations take place in the real world. Branched discussions are disjointed to follow and distracting. You know what I find distracting? When I'm trying to do something on my bank's web site and the site is so slow I can't remember what I'm doing from one click to the next. That reminds me of a joke. Three old ladies talking. Lady 1: ""I'm so forgetful the other day I was on the steps to my apartment with a bag, and I couldn't remember if I was taking out the trash or going upstairs with the groceries."" Lady 2: ""I'm so forgetful I was in my car in the driveway and I couldn't remember if I was coming home or going to shul."" Lady 3: ""Thank God, I still have my memory, clear as a bell, knock on wood. (knock knock knock). Come in, door's open!"" Branching makes discussions get off track, and reading a thread that is branched is discombobulating and unnatural. Better to force people to start a new topic if they want to get off topic. Which reminds me... 
Q. Your list of topics is sorted wrong. It should put the topic with the most recent reply first, rather than listing them based on the time of the original post.
A. It could do that; that's what many web-based forums do. But when you do that certain topics tend to float near the top forever, because people will be willing to argue about H1B visas, or what's wrong with Computer Science in college, until the end of the universe. Every day 100 new people arrive in the forum for the first time, and they start at the top of the list, and they dive into that topic with gusto.
The way I do it has two advantages. One, topics rapidly go away, so conversation remains relatively interesting. Eventually people have to just stop arguing about a given point.
Two, the order of topics on the home page is stable, so it's easier to find a topic again that you were interested in because it stays in the same place relative to its neighbors.
Q. Why don't you have some kind of system so I can see what posts I've already read?
A. We have the best system that can be implemented in a distributed, scalable fashion: we let everyone's browser keep track of it. Web browsers will change the color of the links you've already visited from blue to purple. So all we have to do is subtly change the URL for each topic to include the number of replies available; that way when there are additional replies the post will appear in the ""unread"" color again.
Anything more elaborate than this would be harder to build and would needlessly complicate the UI.
Q. The damn ""reply"" link is all the way at the bottom. This is a usability annoyance because you have to scroll all the way to the bottom.
A. This is intentional. I would prefer that you read all the posts before you reply, otherwise you may post something which is repetitive or which sounds disjointed coming after the previous last post. Of course, I can't physically grab your eyeballs and move them from left to right, forcing you to read the entire thread before letting you post, but if I put a ""reply"" link anywhere but the bottom of the page that would positively encourage people to spew their little gems before they've read what's already there. This is why Slashdot topics have 500 replies but only 17 interesting replies, and it's why nobody likes to read Slashdot discussions: they sound like a classroom full of children all shouting out the same answer at the same time. (""ha ha ... Bill Gates! That's an oxymoron!"")
Q. The damn ""Start a New Topic"" link is all the way at the bottom...
A. Uh huh, same thing.
Q. Why don't you show people their posts to confirm them before you post them? Then people wouldn't make mistakes and typos.
A. Empirically, that is not true. Not only is it not true, it's the opposite of true.
Part one: when you have a confirmation step, most people just click past it. Very few people reread their post carefully. If they wanted to reread their post carefully, they could have done it while they were editing it, but they are bored by their post already, it's yesterday's newspaper, they are ready to move on.
Part two: the lack of the confirmation step actually makes people more cautious. It's like those studies they did that showed that it's safer, on twisty mountain roads, to remove the crash barrier, because it makes people scared and so they drive more carefully, and any way, that little flimsy aluminum crash barrier ain't gonna stop a 2 ton SUV moving at 50 mph from flying off the cliff. You're better off, statistically, just scaring the bejesus out of drivers so they creep along at 2 miles per hour around the hairpins.
Q. Why don't you show me the post I'm replying to, while I compose my reply?
A. Because that will tempt you to quote a part of it in your own reply. Anything I can do to reduce the amount of quoting will increase the fluidity of the conversation, making topics interesting to read. Whenever someone quotes something from above, the person who reads the topic has to read the same thing twice in a row, which is pointless and automatically guaranteed to be boring.
Sometimes people still try to quote things, usually because they are replying to something from three posts ago, or because they're mindlessly nitpicking and they need to rebut 12 separate points. These are not bad people, they're just programmers, and programming requires you to dot every i and cross every t, so you get into a frame of mind where you can't leave any argument unanswered any more than you would ignore an error from your compiler. But I'll be damned if I make it EASY on you. I'm almost tempted to try to find a way to show posts as images so you can't cut and paste them. If you really need to reply to something from three posts ago, kindly take a moment to compose a decent English sentence (""When Fred said blah, he must not have considered...""), don't litter the place with your <<<>>>s.
Q. Why do posts disappear sometimes?
A. The forum is moderated. That means that a few people have the magick powah to delete a post. If the post they delete is the first one in a thread, the thread itself appears deleted because there's no way to get to it.
Q. But that's censorship!
A. No, it's picking up the garbage in the park. If we didn't do it, the signal to noise ratio would change dramatically for the worse. People post spam and get rich schemes, people post antisemitic comments about me, people post nonsense that doesn't make any sense. Some idealistic youngsters may imagine a totally uncensored world as one in which the free exchange of intelligent ideas raises everyone's IQ, an idealized Oxford Debate Society or Speakers' Corner. I am pragmatic and understand that a totally uncensored world just looks like your inbox: 80% spam, advertising, and fraud, rapidly driving away the few interesting people.
If you are looking for a place to express yourself in which there will be no moderation, my advice to you would be to (a) create a new forum and (b) make it popular. [Apologies to Larry Wall].
Q. How do you decide what to delete?
A. First of all, I remove radically off-topic posts or posts which, in my opinion, are only of interest to a very small number of people. If something is not about the same general topics as Joel on Software is about, it may be interesting as all heck to certain people but it's not likely to interest the majority of people who came to my site to hear about software development.
My policy in the past has been that ""off topic"" includes any discussion of the forum itself, its design or usability. There's a slightly different reason for this, almost another axiom. Every forum, mailing list, discussion group, and BBS will, all else being equal, lapse into conversations about the forum itself every week or two. Literally once a week somebody strolls in and announces his list of improvements to the forum software which he demands be made right away. And then somebody says, ""look buddy you're not paying for it Joel's doing us a favor get lost."" And somebody else says ""Joel's not doing this out of the goodness of his heart it's marketing for Fog Creek."" And it's just SOOOO BORING because it happens EVERY WEEK. It's like talking about the weather when you have nothing else to talk about. It may be exciting to the new person who just appeared on the board but it is only barely about software development, so, as Strong Bad says, ""DELETED"". Unfortunately what I have learned is that trying to get people to stop talking about the forum is like trying to stop a river. But please, if you're reading this article and you want to discuss it on the forum, please, please, do me a huge favor, and resist the urge.
We will delete posts which are personal, ad hominem attacks on non public personalities. I better define that. Ad hominem means it is an attack on the individual, rather than on his ideas. If you say ""that is a stupid idea because..."" it's OK. If you say ""you are stupid"" then it's an ad hominem attack. If it's vicious or uncivil or libelous, I delete it. There's one exception: because the Joel on Software forum is the best place to criticize Joel, vicious or uncivil posts about Joel are allowed to stand but only if they contain some tiny sliver of a useful argument or idea.
I automatically delete posts which comment on the spelling or grammar of a previous poster. We'll be talking about interviews and someone will say, ""It's a wonder you can get a job with spelling like that."" It's just super boring to talk about other people's spelling. SUPER, SUPER boring.
Q. Why don't you just post the rules instead of leaving it as a mystery?
A. The other day I was taking the train from the Newark Airport back to Manhattan. Besides being in general disrepair, the only thing to read was a large sign that explained very sternly and in great detail that if you misbehaved, you would be put off the train at the next stop and the police would be summoned. And I thought, 99.99999% of the people who read that sign ain't gonna be misbehavin', and the misbehavors couldn't care less what the sign says. So the net result of the sign is to make honest citizens feel like they're being accused of something, and it doesn't deter the sociopaths at all, and it just reminds the good citizens of New Jersey endlessly that they're in Newark, Crime Capital, where sociopaths get on the train and do Unpleasant Things and Make a Scene and have to be Put Off and the Police Summoned.
Almost everyone on the Joel on Software forum, somehow, was born with the part of the brain that tells them that it's not civilized to post vicious personal attacks, or to post questions about learning French on a software forum, or to conduct an argument by criticizing someone's spelling. And the other .01% don't care about the rules. So posting rules is just a way to insult the majority of the law-abiding citizens and it doesn't deter the morons who think their own poo smells delicious and nothing they post could possibly be against the rules.
When you address troublemakers in public, everyone else thinks you're paranoid or feels angry at being scolded when they did nothing wrong. It's like being in grade school again, and one idiot-child has broken a window, and now everyone has to sit there listening to the teacher giving the whole class a stern lecture on why you mustn't break windows. So any public discussion of why a particular post got deleted, for example, is taboo.
Q. Instead of deleting posts, why don't you have a moderation scheme, where people vote on how much they like a post, and people can choose how high the vote has to be before they read it?
A. This is, of course, how Slashdot works, and I'll bet you 50% of the people who read Slashdot regularly have never figured it out.
There are three things I don't like about this. One: it's more UI complication, a feature that people need to learn how to use. Two: it creates such complicated politics that it make the Byzantine Empire look like 3rd grade school government. And three: when you read Slashdot with the filters turned up high enough that you only see the interesting posts, the narrative is completely lost. You just get a bunch of random disjointed statements with no context.
Q. Why don't you have a registration scheme to eliminate rude posters?
A. As I explained earlier, the goal of the forum is to make it easy to post. (Remember, the software was written for tech support.) Registration schemes eliminate at least 90% of the people who might have posted, and in a tech support scenario, those 90% are going to call my toll free number.
Besides, I don't think registration would help. If somebody is being abusive, it doesn't help to ban them, they can trivially reregister. The idea of improving the community by requiring registration is an old one, and it's appropriate, I think, for the Echo/Well type of conferences where you're creating a network of people as much as you're discussing a topic, and you charge people cash money to belong.
But requiring registration does NOT improve the quality of the conversation or the average quality of the participants. If you look closely at the signal-to-noise ratio on the Joel on Software forum, you might start to notice that the noisiest people (i.e. the people who post the most words while contributing the fewest ideas) are often the long time, hard core members who visit the forum every ten minutes. These are the people who feel the need to chime in with a ""I agree with that"" and replies to Every Single Topic even when they haven't got an original thought to contribute. And they would certainly register.
Q. Any plans for the future?
A. Working on the software for the discussion forum is not a priority for me or my company: it's good enough, it works, it has created an interesting place to talk about hard computer management problems and get ideas from some of the smartest people in the world. And I've got too many better things to work on. Somebody else can create the next big leap in usability for discussion forums.
I just created a New York City forum, to see if geographically based forums encourage people to get to know each other in person as well as online. In my experience, regionally- based communities cause the community to take a giant leap from a simple website to a real society, a true third place.
Creating community, in any case, is a noble goal, because it's sorely missing for so many of us. Let's keep plugging away at it.
	"
https://www.joelonsoftware.com/2003/03/03/20030303/,2003/03/03,2003-03-03T00:04:42+00:00,,Joel Spolsky,News,"
	My latest article, ""Building Communities with Software,"" was sent to email subscribers earlier today. If you did not get it and expected to get it, you're probably having problems with overenthusiastic spam filters. I got lots of bounces, mostly from Fortune 500 type companies, rejecting the message, because of ""inappropriate content"" or because their automatic filters had decided it was spam. Some of them complained about ""taboo,"" other's complained about ""hard core."" Most didn't tell me. Such is the state of email today. If you did not get the article and you want it, you can read a shorter, sanitized version online. But it still contains the word ""taboo"" so if that offends you you may want to avert your eyes!
	"
https://www.joelonsoftware.com/2003/04/28/20030428/,2003/04/28,2003-04-28T00:04:53+00:00,,Joel Spolsky,News,"
	Eric Sink analyzes all the leaky abstractions he just used to create Vault, SourceGear's new source control system, written in .NET. ""I've used Java extensively, and I loved the productivity gains we got during the beginning and middle of the development cycle. But things got ugly at the end. All those layers of abstraction started contributing to our bug list. I've been involved in a couple of projects which completely failed because Java was chosen.... This success stands as a testimony to how incredible .NET really is."" William Poundstone, who wrote an excellent book on game theory, has a new book about Microsoft interview questions, ""How Would You Move Mount Fuji? Microsoft's Cult of the Puzzle""
	"
https://www.joelonsoftware.com/2003/04/22/20030422/,2003/04/22,2003-04-22T00:04:52+00:00,,Joel Spolsky,News,"
	This week, both InformationWeek and Baseline have feature stories about new technology at Delta Air Lines, so it's a good opportunity to benchmark Baseline, a new IT magazine from Ziff Davis, to its old school press-release republishing counterparts. The difference: while the InformationWeek article is just a poor rewrite of bland warmed-over press releases and vague generalizations, the Baseline article is detailed, interesting, and specific. For example Baseline noticed that Delta's new information system crashed for two hours at the worst time possible: when I was in New Orleans trying to reschedule my flight home during last month's blizzard. InformationWeek didn't mention the outage. In fact the whole Baseline article looks like it was written by an investigative journalist. It's about time the industry press got its act together. Go for the free subscription, it's worth it.
	"
https://www.joelonsoftware.com/2003/04/21/20030421/,2003/04/21,2003-04-21T00:04:51+00:00,,Joel Spolsky,News,"
	Chandler Release 0.1 is out. See what all the fuss is about, almost. Larry Seltzer wants to throw out SMTP and start over. I have to support that. If the European Union can change the money that 300 million people use all on one day, we can change our email protocol. Let's find a protocol with decent authentication and with micropayments to make spam uneconomical, and let's set a deadline, maybe two years in the future, when SMTP will simply be turned off. Everybody will know it's coming, just like Y2K, and everybody will have to be ready. A couple of new books worth checking out: Waltzing With Bears: Managing Risk on Software Projects. The latest book from the heroes of Peopleware, Tom Demarco and Timothy Lister. Makes a brave case that the person (or company, or team) who is responsible for risk management is the person who is going to pay the price when things go wrong. Waltzing With Bears kicks off with an excellent analysis of the famous ""failure"" of software engineering that delayed the opening of the new Denver airport, framing it as a failure of risk management. In fact when you look a bit more closely at the software project itself, it's pretty clear that the software team was expected to perform the impossible, and the project as a whole had no way to recover from a slip in a typically over-optimistic software schedule. Speed Up Your Site: Web Site Optimization by Andrew King. A well written and very thorough treatise on what you can do to reduce download times and speed up web sites. Yes, putting your whole HTML page on one line can really help. No-Collar: The Humane Workplace and Its Hidden Costs, by Andrew Ross. A big disappointment. I think the original book was not exciting enough so the publisher tried to present it as a critique of informal, humane workplaces. The ""hidden cost,"" they want us to believe, of pleasant, diverse workplaces seems to be that they shut down and you lose your job. I know, it doesn't make any sense. The author wanted to write a book about cool dotcoms, but they all imploded, and he was stuck trying to claim that they imploded because they tried to have a humane workplace, without really believing it himself, so it comes out a big mess. Most of the book, though, is an interesting look inside two of the Aeron-infested workplaces of the fin-de-siecle, presenting a picture of young and diverse liberal arts majors jammed in a big room together playing loud music and patting themselves on the back for having such cool unjobs. Rather than focusing on the business stories behind Razorfish and 360hiphop.com, which we've presumably heard, this book tries to look at the work environment itself. Unfortunately it's written in a current-events American Studies tone rather than as an ethnography, which is too bad, because some anthropological skills would have made this a million times more interesting (and useful, to those of us that are trying to create humane workspaces while creating successful businesses).
	"
https://www.joelonsoftware.com/2003/04/18/20030418/,2003/04/18,2003-04-18T00:04:50+00:00,,Joel Spolsky,News,"
	Bob at Wise Solutions emailed to remind me that the Wise Installation System has patching built in, and costs less than InstallShield plus vBuild. He also pointed out that Wise for Windows Installer now has a ton of features for server setups: user account creation, IIS administration, and SQL Server administration... basically they implemented my entire wish list from working on the FogBUGZ 3.0 installer. Good work! Some people on the forum expressed concern with the concept of distributing upgrade patches rather than complete copies of changed files. I can see why they are concerned, but I think they are underestimating the tools that are out there. These tools check the version of each file on the user's machine and also compute a hash function to make sure that the file is not corrupted. If the file is corrupted, they automatically download the whole thing. Using patching technology saves a lot of bandwidth, even for the first-time installer, because a lot of the bytes you're distributing may be system files and runtimes that users already have. For example, we need to redistribute things like the Microsoft C Runtime (MSVCRT) which almost everyone already has, just because there may exist a few Windows machines in the wild which don't have it. For consumer software which may well be downloaded over a modem, this makes a big difference. For now, Michael convinced me to stick with the tried-and-true Inno Setup for the next release of CityDesk. The bandwidth savings don't quite justify the effort of switching installers.
	"
https://www.joelonsoftware.com/2003/04/16/20030416/,2003/04/16,2003-04-16T00:04:49+00:00,,Joel Spolsky,News,"
	A question for tech writers: why does every technical manual and book include a section at the beginning on ""conventions used in this document,"" full of ridiculous and useless tips like, ""Tips are indicated by a lightbulb icon in the margin""? Is it because you're paid by the word? To steal a joke from Mr. Bunny's Guide to ActiveX, I would like to announce that ""the familiar dot (.) symbol from Internet addresses shall be used on this website to denote the end of a sentence."" Incremental Installation Last year I was designing the upgrade installer for CityDesk. I was considering RTPatch but it was really expensive (disproportionate to what we would spend in bandwidth), so we just made an upgrader that reinstalls full copies of every file that had changed. At the time RTPatch was $5000 for a license, and their salesman called me up to give me a hard time for contradicting myself. After all, step 9 in the Joel Test is using ""the best tools that money can buy."" ""Touche,"" I said, and hung up. Now there's competition. A little Israeli company, Red Bend Software, has a product called vBuild, which is tightly integrated with InstallShield Professional (the non-Windows MSI version of InstallShield). vBuild is about $2500 and RTPatch has come down to $2750. Still pricey but starting to seem worth it. Today I'm going to try converting CityDesk's setup from InnoSetup, which is excellent and free, to InstallShield, which is decent and expensive, just to take advantage of vBuild.
	"
https://www.joelonsoftware.com/2003/05/16/20030516/,2003/05/16,2003-05-16T00:04:54+00:00,,Joel Spolsky,News,"
	 Years ago, the Excel team was trying to figure out if it would be a good idea to allow users to drag and drop cells using the mouse. They had a couple of interns ""whip up a prototype"" suitable for usability testing, using the cutting edge Visual Basic 1.0. Building the prototype took all summer, because it had to duplicate so much of Excel's real functionality or you couldn't do a real usability test. The conclusion of the usability test? Yes, it was a good feature! The programmer in charge spent maybe a week and completely implemented the drag and drop feature. The joke is, of course, that the whole point of creating a prototype is to ""save time."" A year later, another top-secret Microsoft team built a complete prototype for a new user interface using the cutting edge product Asymetrix Toolbook (good lord, it's hard to believe that thing survived). This prototype took something like a year to build. The real product: Microsoft Bob, the PCjr of the software world. Another wasted prototype. I've basically given up on software prototypes. If the prototype can do everything the product can do, it might as well be the product, and if it can't, it's not much use. Luckily, there's a much better idea: paper prototypes, which neatly solve this problem and the iceberg problem in one fell swoop. Even luckier, Carolyn Snyder has just written a great new book, Paper Prototyping, on the subject. This is an essential reference for anyone designing user interfaces, and it's well written to boot.
	"
https://www.joelonsoftware.com/2003/06/20/20/,20,2003-06-20T00:05:05+00:00,,Joel Spolsky,News,"
	Jason Fried likes this dialog from OmniWeb 4.5 : I have to disagree. I think it's a nice feature that shouldn't be advertising itself, it should just happen automatically and silently. It's a permanent redirect, that's what it means, and designers of web browsers know that a lot better than users, so why should users be inflicted with the need to make a complicated decision about something they don't understand as well as the software designers? Especially in the form of a modal dialog that interrupts whatever the user is trying to accomplish. Unnecessary UIs like this that pop up to brag about a cool feature the developer implemented are a little bit obnoxious. Too many software developers just can't bring themselves to implement completely invisible features. They need to show off about what a great feature they just implemented, even at the cost of confusing people. Really great UI design disappears. It's a matter of taking away, not adding. Is this dialog any better than the Windows Help Find Setup Wizard?
	"
https://www.joelonsoftware.com/2003/06/19/19/,19,2003-06-19T00:05:04+00:00,,Joel Spolsky,News,"
	For devotees of the arsDigita soap opera, another insider's view. Much overlooked in the fact that incompetent VCs destroyed the company was the fact that demand for the company's product (Internet consulting) had plummeted. From Aaron Swartz's devastatingly funny parody of Tufte's latest: PowerPoint is standard... ...but bad. Why? 
	"
https://www.joelonsoftware.com/2003/06/16/17/,17,2003-06-16T00:05:03+00:00,,Joel Spolsky,News,"
	 Does anyone have any experience with the quality of the IP*Works components? (Discuss)
	"
https://www.joelonsoftware.com/2003/06/16/16/,16,2003-06-16T00:05:02+00:00,,Joel Spolsky,News,"
	Scoop: Salam Pax has a photo blog.
	"
https://www.joelonsoftware.com/2003/06/15/15/,15,2003-06-15T00:05:01+00:00,,Joel Spolsky,News,"
	Construction has finally begun on the new Fog Creek office. Remember how I said you should start looking for an office nine months before you need it? Make that ten.Beware National News Magazines Claiming Cycles Are Permanent Fortune writes, ""Professionals have never had a tougher time finding a job. It's not just the economy; the rules of the game are changing."" This is, quite frankly, no different than four years ago during the ""New Economy"" bullshit when they were blabbing about a new, permanently high level for stock prices as if there would never be business cycles again. It's just bullshit. The economy is cyclical and has been for hundreds of years. In fact the sure sign that things are about to change is when the conventional wisdom becomes, ""things will never change."" Cover Letters Here's some advice for people writing cover letters. Don't take any of the standard career-services-office advice for writing cover letters, or your cover letter will look exactly like everyone else's cover letter. If you write one of those ""I work great on teams but am also a strong independent worker"" cover letters, your cover letter will look just like everyone else's, and you won't stand out. The way to stand out is to write a letter that reflects your unique personality and highlights the reasons why you want to work at the place to which you are applying. 95% of the cover letters I receive do not include anything about Fog Creek and show no sign that they have been customized in any way for the job in question. This sends a signal that you are simply spamming your resume to hundreds of jobs, which, in turn, sends a signal that you are both desperate and not willing to work very hard. Here's the thing: the very best candidates have come to realize that they have a choice of where to work, and when they apply for a job, they are applying because there's something intriguing about that particular job, not because they'll take any work that comes along. And you can see it in their cover letters. For example, if I were to see something like ""I'm happy where I am, but I've always wanted to move to New York and if Fog Creek is anything like you describe it on your website, it sounds like a great place"" you would sound a lot more desirable than someone who writes, ""You will find that I am a very hard worker."" If you make your cover letter interesting, make it personal, and drop hints that you have choices in the world, you will sound more like one of the top 1% candidates. By the way, we received something like eighty applications for our opening. Probably 50% of those people were qualified and at least ten of them were great. I won't say more because we're still in the interviewing stage.
	"
https://www.joelonsoftware.com/2003/06/11/11/,11,2003-06-11T00:05:00+00:00,,Joel Spolsky,News,"
	Fog Creek is hiring a Support Engineer. (This position has been filled.)
	"
https://www.joelonsoftware.com/2003/06/07/07/,07,2003-06-07T00:04:59+00:00,,Joel Spolsky,News,"
	Steve Pavlina has written up some great business tips for shareware and games developers. Steven Den Beste: ""Citydesk cannot be beaten."" [Well, not without knowing the cheat codes.] Ellen Ullman's new book The Bug is a terrific novel about a programmer coming unravelled because of a killer bug nicknamed The Jester which seems to only appear at the worst possible times. Highly recommended. (There's a bug in the book, too, probably left in as a reward for real programmers. I don't want to spoil it for you so I'll describe it in an HTML comment right here.)
	"
https://www.joelonsoftware.com/2003/06/05/05/,05,2003-06-05T00:04:58+00:00,,Joel Spolsky,News,"
	Joi Ito on No Shop Agreements: ""[I]f you decide that you like each other and REALLY want to work together but that it will take a lot of work before the actual transaction happens, a no-shop allows both parties to focus on building the business."" John Ludwig: ""I don't think I've ever heard anyone at our firm telling a startup to spend more, faster."" Zimran Ahmed: ""...those 'sure things' that Joel mentions exist more often in the mind of the entrepreneur than in reality."" Eric Sink : ""... most VC firms don't have much to offer people who want to build solid, long-lived companies."" 
	"
https://www.joelonsoftware.com/2003/06/04/news-2/,News,2003-06-04T00:04:57+00:00,,Joel Spolsky,News,"
	There are certain fundamental assumptions about doing business in the VC world that make venture capital a bad fit with entrepreneurship. And since it's the entrepreneurs who create the businesses that the VCs fund, this is a major problem.
Fixing Venture Capital
Meanwhile, some corrections
Yesterday I said about VMWare that ""everything runs emulated."" This was not correct. Keith Adams of VMWare informs me ""VMware's core technology is an x86 virtual machine monitor, not an emulator. The vast majority of guest instructions are run not by our software, but by the nice, fast x86 hardware our users have already paid for. It's only when the guest does something ""supervisor-ish"" that we step in, and emulate an instruction or so at a time... We have a non-trivial CPU overhead, but it's workload-dependent, and nowhere near as bad as if we were an emulator.""
On the topic of AOL using Gecko in their client, I have heard from more than one inside source that this was a decision made by AOLTW management in New York because they were afraid AOL customers would complain if the AOL browser didn't display every web page perfectly. Given how long AOL went with their own substandard browser that was the joke of the Internet industry, I can understand their sensitivity to this issue, but it seems like they've swung a bit too far in the other direction. AOL is using the Gecko client on other platforms like OS X.
	"
https://www.joelonsoftware.com/2003/06/03/fixing-venture-capital/,Fixing Venture Capital,2003-06-03T00:15:06+00:00,2016-12-05T19:39:35+00:00,Joel Spolsky,"Startup founder, News","
	Many software companies these days are built using some form of venture capital. But the VC industry has been hurting lately. A lot of investments in dotcoms turned out to be spectacular flameouts. As a result, VCs are becoming ever more selective about where to put their money. To get funded these days, it's not enough to be a pet shop on the web. Nope! You have to be a pet shop on the web with 802.11b wireless hotspots, or your business plan is going right in the dumpster.
The formerly secretive world of VC has become a bit more transparent, of late. VCs like Joi Ito, Andrew Anker, David Hornik, and Naval Ravikant have created weblogs which are a great source of insight into their thought process. That dotcom thing resulted in three great books by company founders that look deep inside the process of early stage financing (see footnote). But as I read this stuff, as a founder of a company, I can't help but think that there's something wrong with the VC model as it exists today. Almost every page of these books makes me say, ""yep, that's why Fog Creek doesn't want venture capital."" There are certain fundamental assumptions about doing business in the VC world that make venture capital a bad fit with entrepreneurship. And since it's the entrepreneurs who create the businesses that the VCs fund, this is a major problem. Here's my perspective on that, from a company founder's point of view.
 When people ask me if they should seek venture capital for their software startups, I usually say no. At Fog Creek Software, we have never looked for venture capital. Here's why.
 The fundamental reason is that VCs do not have goals that are aligned with the goals of the company founders. This creates a built-in source of stress in the relationship. Specifically, founders would prefer reasonable success with high probability, while VCs are looking for fantastic hit-it-out-of-the-ballpark success with low probability. A VC fund will invest in a lot of startups. They expect about seven of them to fail, two of them to trudge along, and one of them to be The Next Netscape (""TNN""). It's OK if seven fail, because the terms of the deal will be structured so that TNN makes them enough money to make up for all the losers.
Although the real spreadsheets are many megabytes long and quite detailed, this is the VC's calculation:
A
Probability of Success
10%
B
How rich I would get
$1,000,000,000
C
Expected Return (A x B)
$100,000,000
But founders are much more conservative than that. They are not going to start ten companies in their lifetime, they're going to start, maybe, two. A founder might prefer the following model:
A
Probability of Success
80%
B
How rich I would get
$100,000,000
C
Expected Return (A x B)
$80,000,000
 Even though the second model has a lower expected return, it is vastly preferable to most founders, who can't diversify away the risk, while VCs who invest in dozens of businesses would prefer the first model because it has a greater return. This is just Econ 101; it's the same reason you buy car insurance and Hertz doesn't.
The difference in goals means that VCs are always going to want their companies to do risky things. Oh, sure, they'll deny it, but if they were really looking to do conservative risk-free things, they'd be investing in U.S. Treasuries, not optical networking companies. But as an entrepreneur, you're going to be forced at gunpoint to bet on three cherries again and again and again. You know you're going to lose, but the gunman doesn't care, he's got bets on all the slot machines and one of them is going to pay off big time.
There's nothing controversial here. A VC would say, ""that's what VC is for: investing in risky ideas."" Fair enough. As long as the entrepreneur wants to take a 10% chance, VC may be the way to go. The trouble here is that the VC is now doing a perverse kind of selection. They are looking for the founders with business ideas where the founders themselves think the idea probably won't work. The end result is that VC money ends up being used in bet-the-farm kind of ways. This kind of recklessness causes companies like WebVan to blow $800,000,000 in a rather desperate attempt to buy a profitable business model. The trouble is that they were going so fast that they didn't have time to learn how to spend money in a way that has a positive return, which is, by definition, what you have to do to be profitable.
Here's my philosophy of company growth. A growing company looks like this:
 
Oh, wait, I forgot to define the Y axis. Let's assume this curve is my revenues:
 
There are some other things which grow at roughly the same speed. For example, the number of employees:
 
And the number of people who have heard of your product, which we'll call ""PR"":
 
There's also the ""quality of your code"" curve, based on the theory that good software takes ten years .
 
I've drawn these curves moving up at roughly an equal rate. That's not a coincidence. In a small company, you regulate each of these curves so they stay roughly in sync. Why? Because if any two of those curves get out of whack, you have a big problem on your hand-one that can kill your company. For example:
Revenues grow faster than you can hire employees. Result: customer service is inadequate. Let's tune in to Alex Edelstein over at Cloudmark: ""[Cloudmark Sales are] pretty swamped, so they're not getting back properly to everyone.... What's happening here now at Cloudmark is a little like the early days at Netscape when we just had too few people to properly respond to the customer interest.""
Revenues grow slower than you hire employees. Result: you burn cash at a ridiculous rate and go out of business. That's an easy one.
PR grows faster than the quality of your code. Result: everybody checks out your code, and it's not good yet. These people will be permanently convinced that your code is simple and inadequate, even if you improve it drastically later. I call this the Marimba phenomenon . Or, you get PR before there's a product people can buy, then when the product really comes out the news outlets don't want to do the story again. We'll call this the Segway phenomenon.
Employees grows faster than code: Result: too many cooks working on code in the early days causes bad architecture. Software development works best when a single person creates the overall architecture and only later parcels out modules to different developers. And if you add developers too fast, development screeches to a halt, a phenomenon well understood since 1975 .
And so on, and so on... A small company growing at a natural pace has a reasonable chance of keeping these things in balance. But VCs don't like the flat part of the curve at the beginning, because they need an exit strategy in which the hockey-stick part of the curve occurs before their fund needs to cash out, about six years according to VC Joi Ito . This is in direct conflict with the fact that good software can't really accomplish this kind of growth. Hockey stick, there will be, but it will take longer than most VCs are willing to wait. Remember my chart of Lotus Notes? Good heavens, I am repeating myself.
 
VCs try to speed things up by spending more money. They spend it on PR, and then you get problem 3 (""PR grows faster than code""). They spend it on employees, and then you get problem 4 (""too many cooks"") and problem 2 (""high burn rate""). They hire HR people, marketing people, business development people. They spend money on advertising. And the problem is, they spend all this money before anyone has had a chance to learn what the best way to spend money is. So the business development guy wanders around aimlessly and accomplishes zilch. You advertise in magazines that VCs read, not magazines that your customers read. And so on.
 OK, that's the first part of the VC crisis.
 The second part is the fact that VCs hear too many business plans, and they need to reject 999 out of 1000. There appear to be an infinite number of business plans looking for funding. A VC's biggest problem is filtering the incoming heap to find what they consider to be that needle in the haystack that's worth funding. So they get pretty good at saying ""no,"" but they're not so good at saying no to the bad plans and yes to the good plans.
When you have to say ""no"" 999 times for every time you say ""yes,"" your method becomes whack-a-mole. Find the flaw, say no. Find the flaw, say no. The faster you find flaws, the more business plans you can ding. Over at VentureBlog you can amuse yourself for an hour with some of the trivial reasons VCs will ding you. PowerPoint too complicated? Ding! Won't tell us your magic sauce? Ding! You didn't research the VC before you came in? Ding! It's not their fault; they are just trying to say no 999 times in as efficient a way as possible. All of this reminds me too much of the old-school manager who hires programmers based on what school they went to or whether they look good in a suit.
 Naval Ravikant, a VC at August Capital, reveals the classic VC myopia of feeling like they just don't have time to get to know entrepreneurs that aren't ready to pitch yet. ""Most VCs are too busy to 'dance,'"" he wrote. They are too busy vetting serious proposals to shmooze with interesting companies that might not need cash right now.
 
 This is, roughly, the equivalent of the old joke about the guy searching for his car keys under a streetlamp. ""Did you lose them here?"" asks the cop. ""No, I lost them over there, but the light's better here.""
But the great companies are often not the ones that spend all their time begging for investments. They may already be profitable. They may be too busy to look for VC, something which is a full time job for many entrepreneurs. Many excellent entrepreneurs feel that their time is better spent pitching products to customers rather than pitching stock to investors. It's bizarre that so many VCs are willing to ignore these companies simply because they aren't playing the traditional get-funded game. Get out there and pursue them!
 Here's another funny thing that's happening. VCs are reacting to the crash by demanding ever stricter conditions for investments. It's now considered standard that the VC gets all their money back before anyone else sees a dime, no matter what percent of the company they actually own. VCs feel like this protects their interests. What they're forgetting is that it reduces the quality of startups that are willing to make deals. Here's one of VC Joi Ito's suggestion for VCs : ""Sign a 'no shop' and get a letter of intent (LOI) signed quickly so an auction doesn't start jacking up the price."" A no shop is sometimes called an exploding term sheet. It means that the company must either accept the deal on the spot or it won't get funded at all. The theory is, we don't want you going around to other VCs trying to get a better deal. It's common among the second-tier VCs, but the best VCs are usually willing to stand on their own merits.
It seems to me that a company that accepts an exploding offer is demonstrating a remarkable lack of basic business aptitude. Every building contractor in New York knows you request bids from five or ten plumbers before you award the contract. If a plumber said, ""I'll do it for $x, but if you shop around, deal's off,"" the contractor would laugh his head off and throw the plumber out on the street. Nothing sends a stronger message that an offer is uncompetitive than refusing to expose it to competition. And that's for a $6000 kitchen installation. Getting $10 million in funding for a business is the biggest and most important deal in the life of a company. You're going to be stuck with this VC forever, they're going to want to control your board of directors, they're going to push the founders out and bring in some polished CEO as quickly as they can, someone who will take the picture of the cat off your homepage and replace it with the usual MBA jargon.
 And now they want you to agree to all this in a matter of fifteen minutes without talking to anyone else? Yeah, right.
 VCs who make exploding offers are pretty much automatically eliminating all the people with good business sense from their potential universe of companies. Again, it does make it easier to say no 999 times, but you're pretty much guaranteed to say no to all the companies with a modicum of negotiating skills. This is not the correlation you're looking for. In fact, just about everything the VCs do to make their deals ""tougher,"" like demanding more control, more shares, more preferential shares, lower valuations, death spiral convertible stock, etc., is pretty much guaranteed to be at the expense of the founders in a very zero-sum kind of way. And this means that smart founders, especially the ones with businesses that can survive a lack of funding, are going to walk away. VCs must realize that if the business flops, no matter how much control you have, the investor is going to lose everything. Look at the story of arsDigita. A nasty fight over control gives Phil Greenspun enough money to buy an airplane, and the VCs still lost every penny when the company went down the tubes. So all these tough deals are not really protecting the VCs, they're just restricting the VCs' world of possible investments to dumb companies and desperate companies. Sam Bhaumik, VC, says ""VCs are being aggressive, but most requests are legitimate."" The capital belongs to public pension funds and university endowments, he notes, using the standard widows-and-orphans sob story. Boo hoo . Come on , public pension funds and university endowments are the savviest investors out there; don't tell me they need coddling and protecting. They're investing in risky venture funds for a reason: they want to get paid for taking risk. If they wanted protection, they'd invest in US Treasuries.
There are probably hundreds of software companies started every day. Of that universe, there is a small number that are actively looking for early stage investors. Of that small number, an even smaller portion is willing to go along with the current harsh deals that VCs are offering. Now slice away the founders who are afraid of being arsDigita'd. The population shrinks even more as VCs reject companies that don't match their-quite reasonable-criteria for spotting a successful company. You wind up with a tiny number of investment opportunities which, quite frankly, is vanishingly unlikely to contain The Next Netscape.
More Reading 
 Considering VC? First read this article on the web:
An Engineer's View of Venture Capitalists , by Nick Tredennick
 Don't miss these three books by company founders:
High St@kes, No Prisoners: A Winner's Tale of Greed and Glory in the Internet Wars by Charles Ferguson.
The Leap: A Memoir of Love and Madness in the Internet Gold Rush by Tom Ashbrook
Burn Rate: How I Survived the Gold Rush Years on the Internet by Michael Wolff
Startup: A Silicon Valley Adventure by Jerry Kaplan
 A movie about the process:
Startup.com 
 And don't forget:
Eboys: The First Inside Account of Venture Capitalists at Work by Randall E. Stross
 Weblogs by VCs:
VentureBlog 
Joi Ito 
 
	"
https://www.joelonsoftware.com/2003/07/29/29/,29,2003-07-29T00:05:11+00:00,,Joel Spolsky,News,"
	Fog Creek Summer Intern James Levin is writing an ASP to PHP compiler:
Dmitri Kalmar is the new voice of fogbugz@fogcreek.com :
Architect Roy Leone at the construction site for the new office:
 
	"
https://www.joelonsoftware.com/2003/07/23/23/,23,2003-07-23T00:05:10+00:00,,Joel Spolsky,News,"
	Need a disposable email address so you can sign up for some web site, quick? You've already got one, at Paul Tyma's clever Mailinator. ""Just send an email to any address @mailinator.com. Your email address already exists. Get your email sent here, THEN come check mailinator. Your mail will be waiting."" More proof that great UI design is done by taking away, not adding things.
	"
https://www.joelonsoftware.com/2003/07/17/17-2/,17,2003-07-17T00:05:09+00:00,,Joel Spolsky,News,"
	OK. Yesterday's post about Linux in Munich did, as predicted, cause an awful lot of slashdot-style religious debate, but alert reader Jan Derk went to the trouble of actually reading the report (PDF - in German). Thanks Jan! It seems like the answer to my sweet and innocent question about backwards compatibility is that they're actually going to install Linux, but on many machines (as many as 80%?) there will be VMWare running a licensed copy of Windows inside. Also the majority of the price tag was for training and consulting, not the software licenses per se.
The surprise of the century is that Gartner actually has a reasonable and concise analysis, headlined ""Munich's Choice Doesn't Prove Linux OK for General Desktop Use.""
Nobody outside of Redmond is going to be weeping much about the fact that deals like this can put pressure on Microsoft to be more competitive about pricing and more responsive to customers on license terms. If we're lucky we can get to the point of long distance telephone service in the 1980s when it was first deregulated in the USA: nobody wanted to use Sprint or MCI, because their service was terrible, but we were sure thankful that reliable old AT&T had to lower their prices in response.
Google Holes
Slate has an interesting article on three big problems with Google. It is, indeed, practically impossible to find unbiased professional reviews of consumer products using Google, although I know they must be out there somewhere.
	"
https://www.joelonsoftware.com/2003/07/16/16-2/,16,2003-07-16T00:05:08+00:00,,Joel Spolsky,News,"
	The city of Munich is replacing Windows with Linux on 14,000 desktop computers. For a secretary who has to do email and type simple documents, that will probably be fine.
Here's my question. What about all the people who need to run software that doesn't run on Linux? The article said Munich uses 175 custom Windows applications, all of which would need to be ported. And what about major commercial applications for which there's no equivalent? I guarantee you that somewhere out of those 14,000 desktops there's someone using Quark to publish an important report. Even if there were an equivalent for Linux, which there isn't, it wouldn't be the format that the printers are used to receiving. There are probably a lot of people with custom Access databases. How do they access their data?
I suspect what will really happen is that they'll roll out Linux everywhere, and then every mid-level bureaucrat will realize they can't do their job because some application they need just doesn't run on Linux, and they'll buy Windows XP at full retail price, burying the costs in expense reports or petty cash or somewhere else. And eventually Munich will buy so much Microsoft software at retail price, without the benefit of a negotiated discount, that Microsoft will make more money and Munich will start to realize that they're paying twice for software: once for the politically correct shelfware ($2550 per desktop for Linux, so it sort of sounds unbelievable) and once for the software they need to get their jobs done.
Either that or they'll simply be unable to do their jobs, and, like bureaucrats everywhere, they won't tell anyone, while the municipality quietly falls apart.
	"
https://www.joelonsoftware.com/2003/07/14/14/,14,2003-07-14T00:05:07+00:00,,Joel Spolsky,News,"
	New Stuff day!
Vault 1.1
SourceGear's new source code control system, Vault, is now shipping version 1.1 - the first source control system with FogBUGZ integration built in. Marc LaFleur writes: ""After a few minutes I was impressed, after a few days I am in love with it.""
CityDesk 2.0 (Beta 2.0.7)
CityDesk 2.0 got one step closer to shipping; today we released the fourth version of the beta. For this beta release we've been doing a lot of work around the quality of generated HTML; our WYSIWYG editor is now whitespace-preserving and generates valid xhtml.
We decided to release two new versions of CityDesk this year: one now, and one at the end of the year. The 2.0 release is intended to be a ""polishing"" of 1.0. Our goal was to make CityDesk a much more satisfying product for our current users, people who are happy with 1.0 but could be made even happier with some key enhancements. We've fixed literally hundreds of bugs and annoyances. You may not have noticed many of the bugs, most are quite rare, but we have a compulsive need to fix all the little tiny broken things before we create major new areas of functionality.
At the end of the year we will release 3.0 which will have some major architectural enhancements. It will still be the same great CityDesk you've come to know and love, but it will include major new features designed to satisfy a much wider range of projects.
But the Playstation is Not Tax Deductible.
For the new office, I ordered a Pioneer PDP-4330HD high-definition, flat-screen plasma TV. I chose this unit because all the electronics and connections are in a separate box which can be 20' away from the display. The box has a VGA jack in the front so it's easy to plug in a laptop and project in 1024x768 mode.
	"
https://www.joelonsoftware.com/2003/07/01/01/,01,2003-07-01T00:05:06+00:00,,Joel Spolsky,News,"
	Clay Shirky, brilliant as usual: ""Now, when I say these are three things you have to accept, I mean you have to accept them. Because if you don't accept them upfront, they'll happen to you anyway. And then you'll end up writing one of those documents that says 'Oh, we launched this and we tried it, and then the users came along and did all these weird things. And now we're documenting it so future ages won't make this mistake.' Even though you didn't read the thing that was written in 1978.""
Echo
Since it's so easy to create all kinds of XML feeds with CityDesk, I thought I'd create an experimental Echo feed, in hopes of officially being the first publisher on earth to use the new format, along with all the celebrity and fanfare that should entail. The feed is here. It is generated with off-the-shelf CityDesk (well, the 2.0 beta).
Please be aware that the Echo syntax itself is still changing rapidly and while I will attempt to keep up with those changes, I may not always be able to do so.
Please email me to suggest corrections to the format or if you notice something that doesn't match the rapidly-evolving spec.
	"
https://www.joelonsoftware.com/2003/08/28/28/,28,2003-08-28T00:05:19+00:00,,Joel Spolsky,News,"
	The best part of developing shrinkwrap software is the wonderful feeling you get when people actually use your product, the work of your mind and hands, and get great things done.
John's Adventures: ""Basically it's a superb piece of software... I used to be a web designer and I've tried virtually everything there is out there and nothing comes close to CityDesk in terms of power, flexibility and ease of updating your site.""
 
	"
https://www.joelonsoftware.com/2003/08/26/26/,26,2003-08-26T00:05:18+00:00,,Joel Spolsky,News,"
	 
Ah, finally! The final, gold version of CityDesk 2.0 is now shipping. Yes, it's a completely free upgrade.
We used to have both a Home Edition and a Professional Edition. That was a brave experiment, which was, I have to admit, something of a failure. Call it the Fog Creek PCjr. We wanted to make a cheaper entry-level version of CityDesk, but in the end we made something that was too cheap to support profitably, and which ended up making people worry about article count limits and go to ridiculous lengths to keep their sites under 500 pages. It wasn't fair to sell a crippled version of the product at a price that we simply couldn't maintain, so we're going to stop selling the Home Edition altogether, and eat the cost of moving every existing Home Edition user to the Professional Edition. We also lowered the price of the Professional Edition a smidgen (to $299), and introduced a lower cost Contributor Edition for team members who don't actually design sites, they just maintain them.
If you still haven't seen them, Michael and I made two movies (in Flash format) with demos of the latest features. Bring popcorn! These movies were made with TechSmith's Camtasia Studio, which worked like a charm (and no, you cynical freaks, they are not paying me to say that. Sheesh.) If you're completely new to CityDesk check out this online demo (I, for one, can't bear to hear my own voice so you'll have to watch it without me.)
	"
https://www.joelonsoftware.com/2003/08/22/22/,22,2003-08-22T00:05:17+00:00,,Joel Spolsky,News,"
	Raymond Chen has been running a series of interesting articles about the history of Windows and its API. Ever wonder why the time zone map no longer highlights the zone you're in? Or what the BEAR35, BUNNY73, and PIGLET12 functions are named after? Or why you turn off your computer by clicking ""start""? I've bookmarked his site.
In particular, ""The secret life of GetWindowText"" should be required reading for anyone trying to understand API lockin. Describing one aspect of this simple and fundamental part of the Windows API takes a couple of pages. And then notice the kicker:
The documentation simplifies this as ""GetWindowText() cannot retrieve text from a window from another application.""
As Raymond says, ""the documentation tries to explain its complexity with small words, which is great if you don't understand long words, but it also means that you're not getting the full story."" (Actually, Raymond, the documentation does tell the whole story, look closer.)
Anyway, the complexity behind such a simple function is a classic example of an abstraction leaking. And more importantly, it's one of the reasons it's so dang hard to write API emulation layers, like, say, WINE... because getting 100% compatibility means emulating all these bizarre internal complexities perfectly, even when they're not completely documented or the documentation doesn't really describe what happens in every scenario.
Printing
Does anyone have any suggestions for inexpensive ways to print two color, high quality letterhead, stationary, and business cards? A number of people have recommended Vistaprint; I've decided to avoid them because they seem to be pretty major and unreformed spammers.
	"
https://www.joelonsoftware.com/2003/08/21/21/,21,2003-08-21T00:05:16+00:00,,Joel Spolsky,News,"
	A once-in-a-generation blackout is the first time most people discover the problems with their emergency backup plans. Oh, look, we're out of diesel fuel. Or: I didn't know our generator needs electricity to turn on! (Yes, such things exist.)
When the lights went out in New York City last week and across much of the Northeast, Joel on Software and Fog Creek were online the whole time. We even sold software while the electricity was out. Credit for this goes to our colocation provider, Peer 1 Network, who maintained 100% uptime on backup generators while many of their competitors were falling over. Peer 1 even invited the journalists of the Toronto Star newspaper to their Toronto facility where they were set up with light, air conditioning, and Internet access allowing the Star to publish during the blackout.
Peer 1 hosts Joel on Software for free as a public service, but I would not hesitate to recommend them to anyone in the market for colocation.
	"
https://www.joelonsoftware.com/2003/08/20/20-2/,20,2003-08-20T00:05:15+00:00,,Joel Spolsky,News,"
	I'm back from a nice vacation in England and Norway (motto: ""And you thought the English liked mayonnaise""). Over the next few days I'll be busier than a pair of jumper cables at an Alabama picnic catching up.
At the Oslo dinner Petter Hesselberg gave me a copy of his brilliant book Programming Industrial Strength Windows. I believe it's out of print, but if you're developing Windows software for a commercial/shrinkwrap type market, it should be required reading, so do track down a used copy. This is one of the only books that really talks about all the nitty gritty things you want to get right if you are releasing a Windows application for a large market: the kinds of things that, individually, only affect a small percentage of people but taken together spell the difference between super solid Lexus quality production code that delights its users, and Yugo clunkitude.
	"
https://www.joelonsoftware.com/2003/08/08/08/,08,2003-08-08T00:05:14+00:00,,Joel Spolsky,News,"
	
Mystery icon: what's this?
I'll be on vacation for a couple of weeks. As soon as I get back, I'll push the button and we'll release CityDesk 2.0. There's a loophole the size of a truck going on right now with CityDesk pricing... we promised to upgrade all CityDesk 1.0 Home or Pro Edition users to CityDesk 2.0 Pro for free when 2.0 ships. So basically while I'm looking at fjords and glaciers, you can buy the 1.0 home edition for $79 and get the 2.0 pro edition free when I get home, saving $270.
	"
https://www.joelonsoftware.com/2003/08/02/02/,02,2003-08-02T00:05:13+00:00,,Joel Spolsky,News,"
	Oslo Dinner
You're invited to a Joel on Software dinner in Oslo, Norway on Thursday, August 14th, at 19:30 at Peppe's Pizza, Karl Johansgate 1 (outside Oslo S). I'm arriving that afternoon on SAS 1514; you may want to check if the flight is horribly delayed or cancelled, in which case the meeting is still on but I won't be there!
Yes, we'll have more dinners in other cities in the future.
Joel (March 28): ""... when you relocate more than a couple of miles, some employees' lives would be too disrupted to make the move, so you lose a lot of employees, and all the institutional knowledge, skill, and experience that comes with those employees. While I was working at Viacom one of their companies, Blockbuster, decided to move from Florida to Texas after they hired a new CEO who lived in - Texas! What a coincidence! Only a small portion of the employees made the move. For years and years the business press watched agog as Blockbuster made mistake after inexcusable mistake, re-trying all kinds of ideas that had failed only two years earlier.""
LA Times (April 13): ""Investigators are examining whether the move eviscerated Boeing's technical capability and played a role in the Columbia disaster on Feb. 1.... The decision to move the jobs was highly unpopular among Boeing's workforce, and about 80% of the California engineers refused to relocate, forcing the company to hire workers in Texas and forfeit much of the experience of its California engineering base.""
	"
https://www.joelonsoftware.com/2003/08/01/rick-chapman-is-in-search-of-stupidity/,Rick Chapman is In Search of Stupidity,2003-08-01T00:15:33+00:00,2016-12-05T19:19:13+00:00,Joel Spolsky,"CEO, News","
	(This is the foreword to Rick Chapman's new book, In Search of Stupidity.)
In every high tech company I've known, there's a war going on, between the geeks and the suits.
Before you start reading this great new book full of propaganda from software marketing wizard and uber-suit Rick Chapman, let me take a moment to tell you what the geeks think.
Play along with me for a minute, will you?
Please imagine the most stereotypically pale, Jolt-drinking, Chinese-food-eating, video-game-playing, slashdot-reading Linux-command-line-dwelling dork. Since this is just a stereotype, you should be free to imagine either a runt or a kind of chubby fellow, but in either case this is not the kind of person who plays football with his high school pals when he visits mom for Thanksgiving. Also, since he's a stereotype, I shall not have to make complicated excuses for making him a him.
This is what our stereotypical programmer thinks: ""Microsoft makes inferior products, but they have superior marketing, so everybody buys their stuff.""
Ask him what he thinks about the marketing people in his own company. ""They're really stupid. Yesterday I got into a big argument with this stupid sales chick in the break room and after ten minutes it was totally clear that she had no clue what the difference between 802.11a and 802.11b is. Duh!""
What do marketing people do, young geek? ""I don't know. They play golf with customers or something, when they're not making me correct their idiot spec sheets. If it was up to me I'd fire 'em all.""
A nice fellow named Jeffrey Tarter used to publish an annual list of the hundred largest personal computer software publishers called the Soft-letter 100. Here's what the top ten looked like in 1984[1]:
 Rank 
 Company 
 Annual Revenues 
 #1 
 Micropro International 
 $60,000,000 
 #2 
 Microsoft Corp. 
 $55,000,000 
 #3 
 Lotus 
 $53,000,000 
 #4 
 Digital Research 
 $45,000,000 
 #5 
 VisiCorp 
 $43,000,000 
 #6 
 Ashton-Tate 
 $35,000,000 
#7 
 Peachtree 
$21,700,000
#8
 MicroFocus 
 $15,000,000 
 #9
Software Publishing
$14,000,000
 #10 
 Broderbund 
$13,000,000
OK, Microsoft is number 2, but it is one of a handful of companies with roughly similar annual revenues.
Now let's look at the same list for 2001.
Rank
Company
Annual Revenues
 #1 
 Microsoft Corp. 
$23,845,000,000
#2
Adobe
$1,266,378,000
#3 
 Novell 
$1,103,592,000 
 #4 
 Intuit 
$1,076,000,000 
 #5
 Autodesk 
$926,324,000 
 #6 
 Symantec 
$790,153,000 
 #7 
 Network Associates 
$745,692,000 
 #8 
 Citrix 
$479,446,000 
#9
 Macromedia 
$295,997,000 
#10
 Great Plains 
$250,231,000
Whoa. Notice, if you will, that every single company except Microsoft has disappeared from the top ten. Also notice, please, that Microsoft is so much larger than the next largest player, it's not even funny. Adobe would double in revenues if they could just get Microsoft's soda pop budget.
The personal computer software market is Microsoft. Microsoft's revenues, it turns out, make up 69% of the total revenues of all the top 100 companies combined.
This is what we're talking about, here.
Is this just superior marketing, as our imaginary geek claims? Or the result of an illegal monopoly? (Which begs the question: how did Microsoft get that monopoly? You can't have it both ways.)
According to Rick Chapman, the answer is simpler: Microsoft was the only company on the list that never made a fatal, stupid mistake. Whether this was by dint of superior brainpower or just dumb luck, the biggest mistake Microsoft made was the dancing paperclip. And how bad was that, really? We ridiculed them, shut it off, and went back to using Word, Excel, Outlook, and Internet Explorer every minute of every day. But for every other software company that once had market leadership and saw it go down the drain, you can point to one or two giant blunders that steered the boat into an iceberg. Micropro fiddled around rewriting the printer architecture instead of upgrading their flagship product, WordStar. Lotus wasted a year and a half shoehorning 123 to run on 640kb machines; by the time they were done Excel was shipping and 640kb machines were a dim memory. Digital Research wildly overcharged for CP/M-86 and lost a chance to be the de-facto standard for PC operating systems. VisiCorp sued themselves out of existence. Ashton-Tate never missed an opportunity to piss off dBase developers, poisoning the fragile ecology that is so vital to a platform vendor's success.
I'm a programmer, of course, so I tend to blame the marketing people for these stupid mistakes. Almost all of them revolve around a failure of non-technical business people to understand basic technology facts. When Pepsi-pusher John Sculley was developing the Apple Newton, he didn't know something that every computer science major in the country knows: handwriting recognition is not possible. This was at the same time that Bill Gates was hauling programmers into meetings begging them to create a single rich text edit control that could be reused in all their products. Put Jim Manzi (the suit who let the MBAs take over Lotus) in that meeting and he would be staring blankly. ""What's a rich text edit control?"" It never would have occurred to him to take technological leadership because he didn't grok the technology; in fact, the very use of the word grok in that sentence would probably throw him off.
 Buy the book 
If you ask me, and I'm biased, no software company can succeed unless there is a programmer at the helm. So far the evidence backs me up. But many of these boneheaded mistakes come from the programmers themselves. Netscape's monumental decision to rewrite their browser instead of improving the old code base cost them several years of Internet time, during which their market share went from around 90% to about 4%, and this was the programmers' idea. Of course, the nontechnical and inexperienced management of that company had no idea why this was a bad idea. There are still scads of programmers who defend Netscape's ground-up rewrite. ""The old code really sucked, Joel!"" Yeah, uh-huh. Such programmers should be admired for their love of clean code, but they shouldn't be allowed within 100 feet of any business decisions, since it's obvious that clean code is more important to them than shipping, uh, software.
So I'll concede to Rick a bit and say that if you want to be successful in the software business, you have to have a management team that thoroughly understands and loves programming, but they have to understand and love business, too. Finding a leader with strong aptitude in both dimensions is difficult, but it's the only way to avoid making one of those fatal mistakes that Rick catalogs lovingly in this book. So read it, chuckle a bit, and if there's a stupidhead running your company, get your resume in shape and start looking for a house in Redmond.
 
[1] Source: Soft*letter, Jeffrey Tarter ed., April 30, 2001, 17:11.
	"
https://www.joelonsoftware.com/2003/08/01/01-2/,01,2003-08-01T00:05:12+00:00,,Joel Spolsky,News,"
	In every high tech company I've known, there's a war going on, between the geeks and the suits. Read all about it in my foreword to Rick Chapman's excellent new book, In Search of Stupidity.
Meanwhile: the CityDesk 2.0 release candidate is here. If you have been using any version of the beta, please upgrade to the 2.0 release candidate. If you have been using 1.0, this is a pretty dang stable release thanks to the beta testers from four prior rounds of beta releases, so you can feel reasonably safe about using it. In a week or two if no major new problems crop up, we'll rerelease this as the Gold version of CityDesk 2.0. Getting the Release Candidate
 
	"
https://www.joelonsoftware.com/2003/09/24/bionic-office/,Bionic Office,2003-09-24T00:15:57+00:00,2016-12-05T19:32:45+00:00,Joel Spolsky,"Fog Creek Software, News","
	 
Well.
That took rather longer than expected.
We have, finally, moved, into the new Fog Creek office at 535 8th Avenue, officially ten months after I started pounding the pavement looking for a replacement for my grandmother's old brownstone where we spent our first few years, working from bedrooms and the garden.
Most software managers know what good office space would be like, and they know they don't have it, and can't have it. Office space seems to be the one thing that nobody can get right and nobody can do anything about. There's a ten year lease, and whenever the company moves the last person anybody asks about how to design the space is the manager of the software team, who finds out what his new veal-fattening pens, uh, cubicle farm is going to be like for the first time on the Monday after the move-in.
Well, it's my own damn company and I can do something about it, so I did.
Maybe I'm just an architecture queen. I probably pay more attention to my physical surroundings than the average software developer. I might take it too seriously. But there are three reasons I take it so seriously:
There's a lot of evidence that the right kind of office space can improve programmer productivity, especially private offices. 
Having drop-dead gorgeous, private, windowed offices makes it a lot easier to recruit the kinds of superstars that produce ten times as much as the merely brilliant software developers. If I have to compete at New York salaries against Bangalore salaries, I'm going to need those superstars, so when people come in for an interview, I need to see jaws on the floor. It's about drama. 
Hey, this is my job; this is where I spend my days; it's my time away from my friends and family. It better be nice. 
Working with architect Roy Leone, a lot of space (425 r.s.f. per employee), and an enlightened CEO, I set out to create the ultimate software development environment.
Architects use the term ""brief"" for what we software developers call ""system requirements."" Here was the brief I gave Roy.
Private offices with doors that close were absolutely required and not open to negotiation. 
Programmers need lots of power outlets. They should be able to plug new gizmos in at desk height without crawling on the floor. 
We need to be able to rewire any data lines (phone, LAN, cable TV, alarms, etc.) easily without opening any walls, ever. 
It should be possible to do pair programming. 
When you're working with a monitor all day, you need to rest your eyes by looking at something far away, so monitors should not be up against walls. 
The office should be a hang out: a pleasant place to spend time. If you're meeting your friends for dinner after work you should want to meet at the office. As Philip Greenspun bluntly puts it: ""Your business success will depend on the extent to which programmers essentially live at your office. For this to be a common choice, your office had better be nicer than the average programmer's home. There are two ways to achieve this result. One is to hire programmers who live in extremely shabby apartments. The other is to create a nice office."" 
Roy did a great job. This is what you pay an architect for. I predict he will become something of a world expert on designing offices for software teams. Here's how he translated my brief into three dimensional space.
Private Offices. Not only did we get spacious, windowed private offices, but even the common area workstations (for non-developers) are hidden in clever angular alcoves, so everyone gets their own private space without line of sight to anyone else.
The walls between the offices and the workstations are made of high tech, translucent acrylic which glows softly and provides natural light to the interior without reducing privacy.
Power. Every desk has twenty, that's right, twenty outlets. Four of them are colored orange and have uninterruptible power coming off of a UPS in the server closet, so you don't need a UPS in every office.
The outlets are right below desk level in a special trough which runs the entire length of the desk, about six inches deep and six inches wide. The trough is a place to hide all your cables neatly and has a handy cover which blends in with the desk.
 
Wiring. There is a Snake Tray system running near the ceiling from the server room and throughout the office, running through every room. It is completely accessible so if you want to run any kind of (low voltage) cable from point A to point B you can do this neatly. We only moved in Friday, and we've already redone the intra-office LAN wiring, in a project which took about half an hour, so the snake tray has already proven itself. Every office has its own 8-port network switch, so you can plug in your laptop and your desktop and your Macintosh and that old computer you keep around to read Joel on Software when your main computer is rebooting to install today's Windows Update, and still have 3 ports left over (attention math geniuses: no need to email. One port is the uplink.) I sneer at silly building managers who still think that one LAN port per office is about right. For lawyers, maybe.
Pair Programming. When you make typical L-shaped desks many developers set themselves up in the corner. When they need to collaborate temporarily, or pair program, or even just show something to someone on their screen, the second person has to either lean all the way across the desk or look over the first person's shoulder. To avoid this we designed all the desks to be long and straight so that wherever a software developer sits, there's always room for another person to pull up a chair and sit next to them.
Resting eyes. Although the desks are up against the walls, there is an interior window in that wall, which cleverly looks across the corner of the next developer's office and through his window. Because of the rather brilliant layout this doesn't reduce privacy because even though you have a window onto the next office, it is angled so that from most positions you really only look across a small corner of that room and out its exterior window. The net result is that every office has windows on three sides, two of which look outside, creating the architectural pattern Light on Two Sides of Every Room. This is quite an accomplishment: you try coming up with a scheme to give everyone a corner office in a conventional building. Another reason hiring a great architect was well worth the money.
Hang out. We furnished the office with a kitchenette and a lounge area with sofas and a huge HDTV plasma screen with DVD player. We're planning a pool table and game console. Private offices means you can listen to music at reasonable volumes without headphones and nobody will care.
Bottom Line it For Me.
The monthly rent for our offices, when fully occupied, will run about $700 per employee. The build-out was done on budget and paid for almost entirely by the landlord. I suspect that $700 per person is on the high side for software developers throughout the world, but if it means we can hire from the 99.9 percentile instead of the 99 percentile, it'll be worth it.
	"
https://www.joelonsoftware.com/2003/09/24/24/,24,2003-09-24T00:05:22+00:00,,Joel Spolsky,News,"
	Most software managers know what good office space would be like, and they know they don't have it, and can't have it. Office space seems to be the one thing that nobody can get right and nobody can do anything about. There's a ten year lease, and whenever the company moves the last person anybody asks about how to design the space is the manager of the software team, who finds out what his new veal-fattening pens, uh, cubicle farm is going to be like for the first time on the Monday after the move-in.
Well, it's my own damn company and I can do something about it, so I did.
Bionic Office
	"
https://www.joelonsoftware.com/2003/09/18/19-2/,19,2003-09-18T00:05:21+00:00,,Joel Spolsky,News,"
	Moving
We're finally moving offices, tomorrow. When you bid out a construction job, there's always one guy who comes in with a bid that's way less than the other guys. It's almost always a bad idea to accept this bid. Anyone whose bid is that far off either doesn't know what he's doing, or is cutting corners in some scary way, or will go bankrupt in the middle of the job. Or they're lowballing to get the work, and they plan to make up the profit by overcharging you for the inevitable changes. But it can be incredibly tempting. ""You can buy an awful lot of aspirin for $35,000,"" you tell yourself. As a client, the best way to use a lowball bid is to get the contractor you really want to lower their bid.
In the software industry we're always saying things like, ""scheduling software is inherently difficult because it has never been written before, so it's science. It's not like the building industry, where everyone involved has done the same thing 100 times before and it's possible to make good reliable schedules. The software industry needs to become more like the mature trades with predictable schedules and budgets.""
Well, what I've learned from my first large construction project is that this is hogwash. The building industry doesn't know how to do anything on schedule or on budget, either.
The Good News
The good news is that our architect has done an incredible job designing what I consider to be the ultimate programmer's workspace. I'll write up a full report after we move in.
	"
https://www.joelonsoftware.com/2003/09/08/08-2/,08,2003-09-08T00:05:20+00:00,,Joel Spolsky,News,"
	This month's STQE Magazine (which just came out) contains an article I wrote called ""Every Crash, Everywhere"" about automatically tracking software crashes which occur in the field. It's not available online but Joel on Software readers can subscribe for 15% off.
MSN quotes me: ""If you have an interesting conversation about certain types of topics with a person, you can determine if [he] is the type of person you want to hire. The questions are almost a pretext to having that conversation.""
The long version: The Guerrilla Guide to Interviewing.
	"
https://www.joelonsoftware.com/2003/10/31/31/,31,2003-10-31T00:05:33+00:00,,Joel Spolsky,News,"
	URLs are clickable in the forums, again. We turned it off temporarily because of a new technique called blog comment spam ... basically, robots which post URLs to blog comments in order to improve that URL's page rank with Google, which is determined, among other things, by the number, PageRank, and diversity of incoming links.
We've reengineered it so that URLs become links to a redirect server hosted by Fog Creek which, we hope, means that posting a URL in our discussion group will not boost its PageRank.
Microsoft PDC
The Microsoft PDC is over. I loved having an opportunity to talk to so many of you in person at the Apress booth.
The PDC consisted mostly of what used to be called vaporware: preannouncements of cool products that are years and years away. But cool products they are, indeed. XAML is lightyears ahead of the old GDI/USER style of programming the user interface. WinFS, the new filesystem, means you never have to decide whether to use a relational database or a big-mess-of-files. In WinFS a file is a database row, with arbitrary fields, and you can run efficient SELECT statements on files. No, none of this is brand new. XAML's vector oriented display model reminds me of an XML version of NeWS (15 years old). BeOS apparently used to have the ability to add attributes to files which were indexed and queryable.
And, no, none of this works today. There's a prerelease version of Longhorn available, but many aspects of the design are sure to change before the beta, currently scheduled for ""about a year from now,"" with the final operating system shipping ""about two years from now,"" which means nobody will actually have Longhorn for about three years, if Microsoft keeps their schedule, which they won't.
	"
https://www.joelonsoftware.com/2003/10/25/25/,25,2003-10-25T00:05:32+00:00,,Joel Spolsky,News,"
	I'm off to LA. If you're at the PDC remember to ride your Segway into the ASP Today/Apress booth, say hi, meet other Joel on Software people, and get a free copy of FogBUGZ.
Monday 12:30 - 1:30 Tuesday 11:00 - 12:00 Wednesday 1:00 - 2:00
	"
https://www.joelonsoftware.com/2003/10/23/24-2/,24,2003-10-23T00:05:31+00:00,,Joel Spolsky,News,"
	Tokens
It's hard to believe that here it is, what, 2002? No, I think it's 2003, and when you want to send a really big file or a folder full of little files to someone, you generally wind up messing around with ftp servers and whatnot.
Well, no longer. ""A token is like a shortcut or alias that you can send via e-mail or instant message. With just one click you can create a token, and no matter how large the files you want to send are, the token representing them will be very small-just a few KB. Anyone you send a token to can then download the free Creo Token Redeemer software, and with one click redeem the token and download the files. It works for anything-a single file, an entire folder, a huge movie.""
It's quite cool. When you send a token via email your computer becomes a server, holding the files until the recipient redeems the tokens to get the file. The UI is really really simple, and you don't have to worry about whether the recipient already knows about tokens (if not, they'll get a link to download the free redeemer) or if there are firewalls in the way (if there are, the file transfer will automatically bounce off of Creo's giant-reflector-in-the-sky). This is a great implementation of a simple idea that brilliantly solves the nagging problem that it's just not easy enough to transfer large files down the hall, let alone halfway around the world, and it's going to take off like wildfire.
	"
https://www.joelonsoftware.com/2003/10/23/23-2/,23,2003-10-23T00:05:30+00:00,,Joel Spolsky,News,"
	Amazon now searches the full text of books.
	"
https://www.joelonsoftware.com/2003/10/21/21-2/,21,2003-10-21T00:05:29+00:00,,Joel Spolsky,News,"
	Going to the PDC?
Anyone going to the Microsoft Professional Developer Conference in Los Angeles? Let's meet at the ASP Today/Apress booth (booth 533). I'll be hanging out, signing books, and passing out free copies of FogBUGZ.
Monday 10/27 - 12:30 - 1:30 Tuesday 10/28 - 11:00 - 12:00 Wednesday 10/29 - 1:00 - 2:00
Terror Profiles Don't Work
Bruce Schneier: ""I think we need to put all U.S. ex-servicemen on a special watch list, because they obviously could be terrorists. I think we should flag them for 'special screening' when they fly and think twice before allowing them to take scuba-diving lessons. What do you think of my idea? I hope you're appalled, incensed and angry...""
	"
https://www.joelonsoftware.com/2003/10/17/17-3/,17,2003-10-17T00:05:28+00:00,,Joel Spolsky,News,"
	Developers Developers Developers Developers
Ok, the video of Microsoft CEO Steve Ballmer in the advanced stages of ecstatic frenzy chanting the ""Developers"" mantra was funny, but his company took it seriously, and Microsoft really does a better job than any other platform vendor encouraging small companies to write software that runs on the Windows platform. If you're a software company willing to commit to developing software for any variant of Windows, you can join the Empower Program for ISVs, which entitles you a huge pile of software at the ridiculously low price of $750. You get 5 copies of MSDN Universal (normally $2600 each) ... this is the package that includes top-of-the-line versions of every single Microsoft development tool and compiler, and Office, and Visio, and developer copies of every server product, and the MSDN library, and copies of every operating system ever shipped (Greek Windows 98SE? You got it!). Empower also includes 5 copies each of Windows XP, Office XP, and a bunch of servers with 5 client licenses... basically everything you need to develop software for Windows with a team of five programmers for $750.
There was one catch, which is why I refrained from signing up for Empower in the past: you had to go through a fairly annoying sign up process which included lots of non-optional questions about things like your annual revenues and how many employees you have... information points that I didn't really feel like Microsoft needed to have in their big fat Potential Competitors database, for when Bill Gates woke up one morning and decided to do a SQL query to find all the software companies that were ripe for a little friendly competition from Redmond.
One day Paul Gomes, a developer evangelist working out of Microsoft's New York office, called me up, as he does quite frequently, to complain about the fact that we were recommending our customers use Windows Server 2000 instead of 2003 for hosting FogBUGZ due to some incompatibilities in the threading model of IIS 6 (which we have since resolved, by the way). ""Why didn't you sign up for Empower?"" he asked.
I told him how I thought it was offensive that Microsoft wanted data on my sales and number of employees. ""You're a platform vendor, but also a potential competitor, so I'm sensitive about that stuff,"" I said.
""I hear you,"" he said, and proceeded to call up the ISV relations group back at Redmond. They called me back and walked through the signup procedure, and I told them which questions I thought were inappropriate. Then they did something which surprised me: they made every one of those questions optional. Not just for me, for everyone.
So I signed up, and got a great big box in the mail with piles and piles of DVDs.
(Now if I could just figure out how to convince them to include Flight Simulator in MSDN Universal...)
Exceptions in the Rainforest
Ned: ""The debate over exceptions and status returns is not about whether error handling is hard to do well. We all agree on that. It's not about whether exceptions make it magically better. They don't, and if someone says they do, they haven't written large systems in the real world. The debate is about how errors should be communicated through the code.""
And Now For Something Completely Different
Did you see the mention of the new Fog Creek Office in the Wall Street Journal?
and...
AutomatedQA's TestComplete is such a slick product and seems to be just as capable as the market leader, Mercury Interactive WinRunner, at less than one tenth the price. Why does anybody pay $6000 a seat for WinRunner?
	"
https://www.joelonsoftware.com/2003/10/15/15-2/,15,2003-10-15T00:05:27+00:00,2016-12-05T07:45:01+00:00,Joel Spolsky,News,"
	DoSomething()
Ned Batchelder has written a spirited defense of exceptions.
With status returns:
STATUS DoSomething(int a, int b)
{
STATUS st;
st = DoThing1(a);
if (st != SGOOD) return st;
st = DoThing2(b);
if (st != SGOOD) return st;
return SGOOD;
}
And then with exceptions:
void DoSomething(int a, int b)
{
DoThing1(a);
DoThing2(b);
}
Ned, for the sake of argument, could you do me a huge favor, let's use a real example. Change the name of DoSomething() to InstallSoftware(), rename DoThing1() to CopyFiles() and DoThing2() to MakeRegistryEntries().
OK - Cancel
Kevin Cheng: ""There are four major classes of problematic programmers that I have worked with...""
And Back To Exceptions
There's no perfect way to write code to handle errors. Arguments about whether exception handling is ""good"" or ""bad"" quickly devolve into disjointed pros and cons which never balance each other out, the hallmark of a religious debate. There are lots of good reasons to use exceptions, and lots of good reasons not to. All design is about tradeoffs. There is no perfect design and there is certainly never any perfect code.
Announcing the Joel on Software Book Club
The imperfection of design is the theme of October's Book of the Month. Did you ever think about why calculators have 1, 2, and 3 on the bottom row while phones put those keys on the top row? Why did the high beam headlight switch migrate from a floorboard pedal to a toggle on the steering shaft? Whatever you're designing, from the error handling facilities of your software to the fat handle of a toothbrush which is highly ergonomic but can't fit in anyone's toothbrush holder, you have to trade off things that can't really be balanced against each other. And no matter what you do, you'll be subject to criticism, much of it valid.
Henry Petroski, who can write a 448 page book about the common pencil and make it fascinating, has done it again, this time with an excellent book about why there is no perfect design. All design is about tradeoffs, and if you don't believe me, this book offers dozens of examples from everyday life. It even offers a candidate for the best designed object on the planet (the three-legged plastic nubbin that keeps your pizza box lid from sticking to the cheese) and shows why even that is imperfect. Small Things Considered: Why There Is No Perfect Design is another great read and it's the first Joel on Software book of the month.
	"
https://www.joelonsoftware.com/2003/10/14/14-2/,14,2003-10-14T00:05:26+00:00,,Joel Spolsky,News,"
	PHP and Unicode
Scott Reynen shows how to use integer arrays in PHP to handle Unicode manually.
There are also functions available called the Multi-Byte String Functions which handle many encodings. Please ignore the part in the documentation that says that this is ""developed to handle Japanese characters."" It actually appears to handle lots of encodings including the Unicode ones. However it is turned off by default so you must recompile PHP to enable it.
	"
https://www.joelonsoftware.com/2003/10/13/13/,13,2003-10-13T00:05:25+00:00,,Joel Spolsky,News,"
	Exceptions
People have asked why I don't like programming with exceptions. In both Java and C++, my policy is:
Never throw an exception of my own 
Always catch any possible exception that might be thrown by a library I'm using on the same line as it is thrown and deal with it immediately. 
The reasoning is that I consider exceptions to be no better than ""goto's"", considered harmful since the 1960s, in that they create an abrupt jump from one point of code to another. In fact they are significantly worse than goto's:
They are invisible in the source code. Looking at a block of code, including functions which may or may not throw exceptions, there is no way to see which exceptions might be thrown and from where. This means that even careful code inspection doesn't reveal potential bugs. 
They create too many possible exit points for a function. To write correct code, you really have to think about every possible code path through your function. Every time you call a function that can raise an exception and don't catch it on the spot, you create opportunities for surprise bugs caused by functions that terminated abruptly, leaving data in an inconsistent state, or other code paths that you didn't think about. 
A better alternative is to have your functions return error values when things go wrong, and to deal with these explicitly, no matter how verbose it might be. It is true that what should be a simple 3 line program often blossoms to 48 lines when you put in good error checking, but that's life, and papering it over with exceptions does not make your program more robust. I think the reason programmers in C/C++/Java style languages have been attracted to exceptions is simply because the syntax does not have a concise way to call a function that returns multiple values, so it's hard to write a function that either produces a return value or returns an error. (The only languages I have used extensively that do let you return multiple values nicely are ML and Haskell.) In C/C++/Java style languages one way you can handle errors is to use the real return value for a result status, and if you have anything you want to return, use an OUT parameter to do that. This has the unforunate side effect of making it impossible to nest function calls, so result = f(g(x)) must become:
T tmp; if (ERROR == g(x, tmp)) errorhandling; if (ERROR == f(tmp, result)) errorhandling;
This is ugly and annoying but it's better than getting magic unexpected gotos sprinkled throughout your code at unpredictable places.
PHP
If someone wants to write up a nice article about how to develop multilingual, Unicode applications with PHP or point me to an existing article on the subject I will link to it here. Right now both the PHP documentation and a google search for ""PHP Unicode"" make it look like you're pretty screwed if you really want to do Unicode in PHP. There is some existing documention of mb_ functions that people have pointed me to, which is badly written and confusing, and appears to only support a handful of encodings, not Unicode in general. It also seems to be an extension that you have to turn on, which means, I think, that the average PHP installation does not support this out of the box.
	"
https://www.joelonsoftware.com/2003/10/10/10/,10,2003-10-10T00:05:24+00:00,,Joel Spolsky,News,"
	When I discovered that the popular web development tool PHP has almost complete ignorance of character encoding issues, blithely using 8 bits for characters, making it darn near impossible to develop good international web applications, I thought, enough is enough. 
 So I have an announcement to make: if you are a programmer working in 2003 and you don't know the basics of characters, character sets, encodings, and Unicode, and I catch you, I'm going to punish you by making you peel onions for 6 months in a submarine. I swear I will.
 The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)
	"
https://www.joelonsoftware.com/2003/11/30/30/,30,2003-11-30T00:05:39+00:00,,Joel Spolsky,News,"
	I spent the long weekend grinding through the backlog of Joel on Software translations. There are a bunch of new articles in various languages including new sections for Esperanto and Greek. All in all there are 264 translations in progress in 32 languages thanks to 242 volunteers around the world. 177 translations are complete and have already been posted.
There are a few articles, already translated, which just need copy editors before I can post them. If you read and write one of these languages fluently and are willing to help out, I'd really appreciate it! What's involved is just looking for typos and errors and improving the translation wherever possible. If I don't find anyone to edit the articles I will probably just go ahead and post them unedited but it would be nice to have a second set of eyes improving the quality of the translations.
Languages I need editors for: Chinese (Simplified), Chinese (Trad), Esperanto, Estonian, French, Greek, Hungarian, Indonesian, Japanese, Korean, Portuguese (Port.), Romanian, Russian, Swedish, and Tamil.
A frequently asked question: why bother with these translations? Surely any real programmer knows English! And my frequently answered answer: First of all, not every programmer knows English, and if they do, they may not know it that well, so they may not really enjoy reading things written in English if they don't have to. Second, even if the programmers have learned enough English to decipher online documentation, their pointy-haired bosses from management may not have.
Another frequent question: why not just use Babelfish or Google Language Tools or another similar translation tool? Answer: They are seriously little. You cannot include/understand simply the exit. Er, what I meant to say was, they are seriously inadequate. The quality of translations produced by automatic software is so horrible that you really can't understand the output. Try asking Google to translate http://french.joelonsoftware.com from French to English for some real howlers. ""Then why does nobody make planning? Two principal reasons. Firstly, it is really difficult. Secondly, nobody believes that that is worth the sorrow of it. Why give so much difficulty to be worked on a planning if it is known that it will not be correct?""
	"
https://www.joelonsoftware.com/2003/11/22/22-2/,22,2003-11-22T00:05:38+00:00,,Joel Spolsky,News,"
	Tidbits
My incoming spam is running at over 200 junk emails a day, but SpamBayes is catching them all, with virtually no false positives. Bayesian filtering, invented by Paul Graham and available in many open source implementations, is the best answer yet.
	"
https://www.joelonsoftware.com/2003/11/14/14-3/,14,2003-11-14T00:05:37+00:00,,Joel Spolsky,News,"
	Time for the next Book of the Month.
Almost any argument about managing the software development process inevitably deteriorates into anecdote-ping-pong. ""We did wawa and everyone quit.""
""Oh yeah? Then how do you explain Company X? They wawa regularly and their stock is up 20%!""
If you have even the slightest bit of common sense, you should ask: ""Where's the data? If I'm going to switch to Intense Programming I want to see proof that the extra money spent on dog kennels and bird cages is going to pay for itself in increased programmer self-esteem. Show me hard data!""
And, of course, we have none.
One set of people will tell you you gotta have private offices with walls and a door that closes. Another set of extremos will tell you everyone has to be in a room together, shoulder-to-shoulder. Neither of them have any hard data whatsoever, where by ""hard data"" I mean ""data that wouldn't be laughed out of a sixth-grade science classroom."" The truth is, you can't honestly compare the productivity of two software teams unless they are trying to build exactly the same thing under exactly the same circumstances with the exact same human individuals, who have been somehow cloned so they don't learn anything the first time through the experiment.
Tom DeMarco was so frustrated at the inherent impossibility of providing any kind of hard data that he went so far as to write a novel in which he fantasizes about a bizarre land in which programmers are so cheap you actually can do experiments where, say, half the people have offices and half the people have cubicles.
But we don't have the data. We don't have any data. You can give us anecdotes left and right about how methodology X worked or didn't work, but you can't prove that when it worked it wasn't just because of one really, really good programmer on the team, and you can't prove that when it failed is wasn't just because the company was in the process of going bankrupt and everybody was too demoralized to do anything at all, Aeron chairs notwithstanding.
But don't give up hope. We do have the collective wisdom of fifty years of building software to draw from. Or at least, it's somewhere. Your typical startup with three pals from college may not exactly have the collective wisdom, so they're going to reinvent things from scratch that IBM figured out in 1961, or go bankrupt failing to reinvent them. Too bad, because they could have read Facts and Fallacies of Software Engineering, by Robert L. Glass, the best summary of what the software profession should have agreed upon by now. Here are just a few examples from the 55 facts and 10 fallacies in the book:
The most important factor in software work is not the tools and techniques used by the programmers, but rather the quality of the programmers themselves. 
Adding people to a late project makes it later. 
Reuse-in-the-small (libraries of subroutines) began nearly 50 years ago and is a well-solved problem. 
Reuse-in-the-large (components) remains a mostly unsolved problem, even though everyone agrees it is important and desirable. 
You can read the others in the table of contents on Amazon. One of the best things about the book is that it has sources for each fact and fallacy, so you can go back and figure out why we collectively believe that, say, code inspection is valuable but cannot and should not replace testing. This is bound to be particularly helpful when you need ammunition for your arguments with people in suits making absurd demands (""Can we make a baby in 1 month if we hire 9 mothers?"").
	"
https://www.joelonsoftware.com/2003/11/07/07-2/,07,2003-11-07T00:05:36+00:00,,Joel Spolsky,News,"
	Toronto group forming. Any others?
	"
https://www.joelonsoftware.com/2003/11/06/06/,06,2003-11-06T00:05:35+00:00,,Joel Spolsky,News,"
	Two questions and a font
Question one, for you telecom mavens out there. If you buy DSL service in New York from Covad, aren't they just going to get Verizon to install the actual DSL circuit? If so... why is it cheaper to get it from Covad?
Yes, we seem to be in the market for a new DSL provider. And I'm tired of playing the blame game where your DSL provider blames everything on Verizon and Verizon blames everything on the DSL provider, so I'd be willing to pay the monopoly tax if it meant when our DSL went down there was nobody left to blame. If you know whether Covad uses Verizon, post an answer here.
Question two, for you reliable SQL Server mavens out there. Suppose I wanted to build a Win2K-based web service using SQL Server to store the data. But I'm a reliability nut. So obviously I'll use industrial strength servers with RAID, two power supplies and network cards, etc, and they'll live in secure colocation facilities.
To further minimize failure points, I'll have a hot backup. But the twist is that I figured as long as I'm paying for a hot backup, it would be more reliable if it was somewhere else, say, on the other coast.
So here's the plan I'm working on. Server A in New York, with IIS and SQL Server. Server B in Vancouver, with IIS and SQL Server. Server A is somehow ""writing through"" any database changes to server B. I know I can do this with transaction log shipping; is this a good way to do it? Is there a better way?
Then if Server A blows up, I simply ask my ISP to route the packets intended for Server A to Server B. (I assume they can do this if it's their backbone).
What do you think of this scheme?
Might I please kindly request in advance that you do not suggest using Linux instead of Windows 2003. Yes, I concede that Linux is ""more secure,"" but not when I'm the one pushing the buttons. Last time a flaw was discovered in Windows, it took me two clicks to patch it. Last time a flaw was discovered in SSH, it took me four hours of compiling and messing around to patch it. I apologize but I don't have the skilz to keep a Linux box secure, so please, let's talk about how to make this particular configuration reliable, not about whether Linux is a better OS than Windows. Or, actually, if you do want to talk about whether Linux is more secure than Windows, do so here.
And a font
Back in the days when I did Mac development (System 6) the biggest monitors available for the Mac were maybe 9"", and the only way to see a reasonable amount of code on screen was to use a tiny font. Now that I have two 18"" LCD panels, the only way to see a reasonable amount of code on screen is to use a tiny font. The world is awash in lovely TrueType fonts but none of them are monospaced, which is a nuisance for programming because things which should line up won't.
Fortunately, I have found ProFont, and all is well again. For best results use the FON version, not the TTF version.
	"
https://www.joelonsoftware.com/2003/11/03/3/,3,2003-11-03T00:05:34+00:00,,Joel Spolsky,News,"
	Fog Creek's website has been redone to use our new Sam Sherwood-designed logo. The cutting edge page design is thanks to superstar web designer Dave Shea, famous for the CSS garden and the eye-popping new Mozilla home page, with additional programming and graphics by Fog Creek's own Dmitri Kalmar. It's about 99% standards-compliant (with the exception of a couple of stray FONT tags left over from old content that hasn't been updated... oh the horror!).
	"
https://www.joelonsoftware.com/2003/12/31/31-2/,31,2003-12-31T00:05:43+00:00,,Joel Spolsky,News,"
	I'll be DJing at the party tonight.
What you see here:
Pioneer DJM-600 Professional DJ Mixer 
Two Pioneer CDJ-800 Digital Vinyl Turntables (acts like a turntable but plays CDs) 
Trusty Shure SM-58, mentioned earlier on this site 
Sony MDR-V700DJ Studio Monitor Series DJ Headphones 
Rotel RA-1060 Stereo integrated amplifier 
B&W speaker system 
Two IBM Thinkpad Laptops (one for visual effects and 2004 countdown; the other for playing MP3s) 
Harman Kardon DVD 25 Progressive Scan DVD Player 
(Offscreen) Pioneer 43"" HDTV Plasma Monitor showing visual effects generated from the audio track using G-Force Gold 
	"
https://www.joelonsoftware.com/2003/12/22/22-3/,22,2003-12-22T00:05:42+00:00,,Joel Spolsky,News,"
	I've been sanity-checking FogBUGZ for Unix by installing various OSes under VMware.
Easiest Linux to install: RedHat 9. Mandrake is not bad but still uses some jargon that makes it not quite ready for prime time, for example, you would not be able to get through setup without knowing what ""root"" means. SuSE went to a lot of trouble to create a good setup, then they go out of their way to make it difficult and slow to install if you don't pay them for disks... my SuSE setup is still not done after several days of work. FreeBSD is pretty difficult to setup. Debian is very close to impossible, even for geeks.
The reason I need all these setups is because there are so many different ways to distribute software on Unix: we had to produce a .rpm, a .deb, a .tar.gz, and a .dmg for OS X.
(FogBUGZ for Unix system requirements: Unix, PHP 4, MySQL, Apache. It will ship in a few days).
	"
https://www.joelonsoftware.com/2003/12/15/15-3/,15,2003-12-15T00:05:41+00:00,,Joel Spolsky,News,"
	This month's Book of the Month is an excuse for me to write a long treatise about how modern software development is a world mostly divided into two large ideological cultures: The Culture of Unix Programming and The Culture of Windows Programming. 
	"
https://www.joelonsoftware.com/2003/12/14/biculturalism/,Biculturalism,2003-12-14T00:14:52+00:00,2016-12-05T19:16:14+00:00,Joel Spolsky,"Rock star developer, News","
	By now, Windows and Unix are functionally more similar than different. They both support the same major programming metaphors, from command lines to GUIs to web servers; they are organized around virtually the same panoply of system resources, from nearly identical file systems to memory to sockets and processes and threads. There's not much about the core set of services provided by each operating system to limit the kinds of applications you can create.
What's left is cultural differences. Yes, we all eat food, but over there, they eat raw fish with rice using wood sticks, while over here, we eat slabs of ground cow on bread with our hands. A cultural difference doesn't mean that American stomachs can't digest sushi or that Japanese stomachs can't digest Big Macs, and it doesn't mean that there aren't lots of Americans who eat sushi or Japanese who eat burgers, but it does mean that Americans getting off the plane for the first time in Tokyo are confronted with an overwhelming feeling that this place is strange, dammit, and no amount of philosophizing about how underneath we're all the same, we all love and work and sing and die will overcome the fact that Americans and Japanese can never really get comfortable with each others' toilet arrangements.
What are the cultural differences between Unix and Windows programmers? There are many details and subtleties, but for the most part it comes down to one thing: Unix culture values code which is useful to other programmers, while Windows culture values code which is useful to non-programmers.
This is, of course, a major simplification, but really, that's the big difference: are we programming for programmers or end users? Everything else is commentary.
The frequently controversial Eric S. Raymond has just written a long book about Unix programming called The Art of UNIX Programming exploring his own culture in great detail. You can buy the book and read it on paper, or, if Raymond's politics are just too anti-idiotarian for you to consider giving him money, you can even read it online for free and rest assured that the author will not receive a penny for his hard work.
Let's look at a small example. The Unix programming culture holds in high esteem programs which can be called from the command line, which take arguments that control every aspect of their behavior, and the output of which can be captured as regularly-formatted, machine readable plain text. Such programs are valued because they can easily be incorporated into other programs or larger software systems by programmers. To take one miniscule example, there is a core value in the Unix culture, which Raymond calls ""Silence is Golden,"" that a program that has done exactly what you told it to do successfully should provide no output whatsoever. It doesn't matter if you've just typed a 300 character command line to create a file system, or built and installed a complicated piece of software, or sent a manned rocket to the moon. If it succeeds, the accepted thing to do is simply output nothing. The user will infer from the next command prompt that everything must be OK.
This is an important value in Unix culture because you're programming for other programmers. As Raymond puts it, ""Programs that babble don't tend to play well with other programs."" By contrast, in the Windows culture, you're programming for Aunt Marge, and Aunt Marge might be justified in observing that a program that produces no output because it succeeded cannot be distinguished from a program that produced no output because it failed badly or a program that produced no output because it misinterpreted your request.
Similarly, the Unix culture appreciates programs that stay textual. They don't like GUIs much, except as lipstick painted cleanly on top of textual programs, and they don't like binary file formats. This is because a textual interface is easier to program against than, say, a GUI interface, which is almost impossible to program against unless some other provisions are made, like a built-in scripting language. Here again, we see that the Unix culture values creating code that is useful to other programmers, something which is rarely a goal in Windows programming.
Which is not to say that all Unix programs are designed solely for programmers. Far from it. But the culture values things that are useful to programmers, and this explains a thing or two about a thing or two.
Suppose you take a Unix programmer and a Windows programmer and give them each the task of creating the same end-user application. The Unix programmer will create a command-line or text-driven core and occasionally, as an afterthought, build a GUI which drives that core. This way the main operations of the application will be available to other programmers who can invoke the program on the command line and read the results as text. The Windows programmer will tend to start with a GUI, and occasionally, as an afterthought, add a scripting language which can automate the operation of the GUI interface. This is appropriate for a culture in which 99.999% of the users are not programmers in any way, shape, or form, and have no interest in being one.
There is one significant group of Windows programmers who are primarily coding for other programmers: the Windows team itself, inside Microsoft. The way they tend to do things is to create an API, callable from the C language, which implements the functionality, and then create GUI applications which call that API. Anything you can do from the Windows user interface can also be accomplished using a programming interface callable from any reasonable programming language. For example, Microsoft Internet Explorer itself is nothing but a tiny 89 KB program which wraps together dozens of very powerful components which are freely available to sophisticated Windows programmers and which are mostly designed to be flexible and powerful. Unfortunately, since programmers do not have access to the source code for those components, they can only be used in ways which were precisely foreseen and allowed for by the component developers at Microsoft, which doesn't always work out. And sometimes there are bugs, usually the fault of the person calling the API, which are difficult or impossible to debug without the source code. The Unix cultural value of visible source code makes it an easier environment to develop for. Any Windows developer will tell you about the time they spent four days tracking down a bug because, say, they thought that the memory size returned by LocalSize would be the same as the memory size they originally requested with LocalAlloc, or some similar bug they could have fixed in ten minutes if they could see the source code of the library. Raymond invents an amusing story to illustrate this which will ring true to anyone who has ever used a library in binary form.
So you get these religious arguments. Unix is better because you can debug into libraries. Windows is better because Aunt Marge gets some confirmation that her email was actually sent. Actually, one is not better than another, they simply have different values: in Unix making things better for other programmers is a core value and in Windows making things better for Aunt Marge is a core value.
Let's look at another cultural difference. Raymond says, ""Classic Unix documentation is written to be telegraphic but complete... The style assumes an active reader, one who is able to deduce obvious unsaid consequences of what is said, and who has the self-confidence to trust those deductions. Read every word carefully, because you will seldom be told anything twice."" Oy vey, I thought, he's actually teaching young programmers to write more impossible man pages.
For end users, you'll never get away with this. Raymond may call it ""oversimplifying condescension,"" but the Windows culture understands that end users don't like reading and if they concede to read your documentation, they will only read the minimum amount, and so you have to explain things repeatedly... indeed the hallmark of a good Windows help file is that any single topic can be read by itself by an average reader without assuming knowledge of any other help topic.
How did we get different core values? This is another reason Raymond's book is so good: he goes deeply into the history and evolution of Unix and brings new programmers up to speed with all the accumulated history of the culture back to 1969. When Unix was created and when it formed its cultural values, there were no end users. Computers were expensive, CPU time was expensive, and learning about computers meant learning how to program. It's no wonder that the culture which emerged valued things which are useful to other programmers. By contrast, Windows was created with one goal only: to sell as many copies as conceivable at a profit. Scrillions of copies. ""A computer on every desktop and in every home"" was the explicit goal of the team which created Windows, set its agenda and determined its core values. Ease of use for non-programmers was the only way to get on every desk and in every home and thus usability uber alles became the cultural norm. Programmers, as an audience, were an extreme afterthought.
The cultural schism is so sharp that Unix has never really made any inroads on the desktop. Aunt Marge can't really use Unix, and repeated efforts to make a pretty front end for Unix that Aunt Marge can use have failed, entirely because these efforts were done by programmers who were steeped in the Unix culture. For example, Unix has a value of separating policy from mechanism which, historically, came from the designers of X. This directly led to a schism in user interfaces; nobody has ever quite been able to agree on all the details of how the desktop UI should work, and they think this is OK, because their culture values this diversity, but for Aunt Marge it is very much not OK to have to use a different UI to cut and paste in one program than she uses in another. So here we are, 20 years after Unix developers started trying to paint a good user interface on their systems, and we're still at the point where the CEO of the biggest Linux vendor is telling people that home users should just use Windows. I have heard economists claim that Silicon Valley could never be recreated in, say, France, because the French culture puts such a high penalty on failure that entrepreneurs are not willing to risk it. Maybe the same thing is true of Linux: it may never be a desktop operating system because the culture values things which prevent it. OS X is the proof: Apple finally created Unix for Aunt Marge, but only because the engineers and managers at Apple were firmly of the end-user culture (which I've been imperialistically calling ""the Windows Culture"" even though historically it originated at Apple). They rejected the Unix culture's fundamental norm of programmer-centricity. They even renamed core directories - heretical! - to use common English words like ""applications"" and ""library"" instead of ""bin"" and ""lib.""
Raymond does attempt to compare and contrast Unix to other operating systems, and this is really the weakest part of an otherwise excellent book, because he really doesn't know what he's talking about. Whenever he opens his mouth about Windows he tends to show that his knowledge of Windows programming comes mostly from reading newspapers, not from actual Windows programming. That's OK; he's not a Windows programmer; we'll forgive that. As is typical from someone with a deep knowledge of one culture, he knows what his culture values but doesn't quite notice the distinction between parts of his culture which are universal (killing old ladies, programs which crash: always bad) and parts of the culture which only apply when you're programming for programmers (eating raw fish, command line arguments: depends on audience).
There are too many monocultural programmers who, like the typical American kid who never left St. Paul, Minnesota, can't quite tell the difference between a cultural value and a core human value. I've encountered too many Unix programmers who sneer at Windows programming, thinking that Windows is heathen and stupid. Raymond all too frequently falls into the trap of disparaging the values of other cultures without considering where they came from. It's rather rare to find such bigotry among Windows programmers, who are, on the whole, solution-oriented and non-ideological. At the very least, Windows programmers will concede the faults of their culture and say pragmatically, ""Look, if you want to sell a word processor to a lot of people, it has to run on their computers, and if that means we use the Evil Registry instead of elegant ~/.rc files to store our settings, so be it."" The very fact that the Unix world is so full of self-righteous cultural superiority, ""advocacy,"" and slashdot-karma-whoring sectarianism while the Windows world is more practical (""yeah, whatever, I just need to make a living here"") stems from a culture that feels itself under siege, unable to break out of the server closet and hobbyist market and onto the mainstream desktop. This haughtiness-from-a-position-of-weakness is the biggest flaw of The Art of UNIX Programming, but it's not really a big flaw: on the whole, the book is so full of incredibly interesting insight into so many aspects of programming that I'm willing to hold my nose during the rare smelly ideological rants because there's so much to learn about universal ideals from the rest of the book. Indeed I would recommend this book to developers of any culture in any platform with any goals, because so many of the values which it trumpets are universal. When Raymond points out that the CSV format is inferior to the /etc/passwd format, he's trying to score points for Unix against Windows, but, you know what? He's right. /etc/passwd is easier to parse than CSV, and if you read this book, you'll know why, and you'll be a better programmer.
	"
https://www.joelonsoftware.com/2003/12/01/01-4/,01,2003-12-01T00:05:40+00:00,,Joel Spolsky,News,"
	Mazel Tov to the elder Spolsky on his latest book Language Policy. No, not computer languages.
Craftsmanship
Writing code is not production, it's not always craftsmanship (though it can be), it's design. Design is that nebulous area where you can add value faster than you add cost. The New York Times magazine has been raving about the iPod and how Apple is one of the few companies that knows how to use good design to add value. But I've talked enough about design, I want to talk about craftsmanship for a minute: what it is and how you recognize it.
Summer Internships
Are you a college student looking for a summer internship in software development? Fog Creek Software is the place for you! Details...
	"
https://www.joelonsoftware.com/2004/01/31/31-3/,31,2004-01-31T00:05:54+00:00,,Joel Spolsky,News,"
	Geodog: ""So I walked into the cafe tonight and looked around for the Joel group - like any other geek, I was too shy to ask anyone, but when I spotted a big table lined entirely with males, mostly in their mid-twenties to early forties, not too well dressed, predominantly European-American, I knew that I had found the geek gathering.""
	"
https://www.joelonsoftware.com/2004/01/30/30-2/,30,2004-01-30T00:05:53+00:00,,Joel Spolsky,News,"
	Ted reviews my speech.
Scoble: ""I hate to play the 'it'll be fixed in Longhorn' card, but I'm going to."" OK, you tell me when my customers have Longhorn and I'll think about using .NET then, mm-kay? My money is on 2008.
The Salamander .NET Linker and Mini-Deployment Tool might be a solution. Has anyone evaluated it in depth?
	"
https://www.joelonsoftware.com/2004/01/28/28-2/,28,2004-01-28T00:05:52+00:00,,Joel Spolsky,News,"
	For some reason, Microsoft's brilliant and cutting-edge .NET development environment left out one crucial tool... a tool that has been common in software development environments since, oh, about 1950, and taken so much for granted that it's incredibly strange that nobody noticed that .NET doesn't really have one.
Please Sir May I Have a Linker?
** Heute verwende ich die deutsche Version von CityDesk um mein Weblog zu erstellen. No, I don't speak German, but I know CityDesk well enough to find my way around!
	"
https://www.joelonsoftware.com/2004/01/27/27/,27,2004-01-27T00:05:51+00:00,,Joel Spolsky,News,"
	Reminders:
Thursday morning I'll be giving a free lecture at UC Davis 
Friday evening, 7:30 PM, I'll be meeting up with a huge group of Joel on Software folks at Au Coquelet Cafe, 2000 University Ave. at Milvia, in Berkeley, California. Tell them you're with the ""Joel"" group. 
Not in California? I'm working on a Fog Creek open house in New York Real Soon Now. 
Anywhere else? Join our Meetup group and hang out with other Joel on Software readers in your city on Wednesday, February 18th. So far 28 cities in the world have hit critical mass (5). The London group is already up to 29 members! 
In the meantime entertain yourself with some of Rory Blyth's inspired comix.
This one's a riot: ""Ooooooh! I know! We could print out the data, scan it in, and then paste the image into Excel!"".
And some disclaimers:
The remark yesterday in tiny print could not possibly be homophobic, because I'm gay and thus granted automatic diplomatic immunity from all charges of homophobia. 
Putting spaces in front of commas is really not that bad, but I stand by my claim that it's not very professional looking, and, merely as a point of information, at least on the resumes I get, this particular error occurs on 37% of cover letters from people with Indian names and 0% of the cover letters of people without Indian names. 
Anyway talking about punctuation is really, really boring, so please let's stop. 
There's nothing like 100,000 incoming links from Slashdot to uncover those rare people without a sense of humor... but you can't tell people, ""no, it's a joke, you just didn't get it"" because the one thing common among all people without a sense of humor is that they inevitably think they have a very good sense of humor; your joke just wasn't funny. 
In the spirit of the escalator
The number one best way to get someone to look at your resume closely: come across as a human being, not a list of jobs and programming languages. Tell me a little story. ""I've spent the last three weeks looking for a job at a real software company, but all I can find are cheezy web design shops looking for slave labor."" Or, ""We yanked our son out of high school and brought him to Virginia. I am not going to move again until he is out of high school, even if I have to go work at Radio Shack or become a Wal*Mart greeter."" (These are slightly modified quotes from two real people.)
These are both great. You know why? Because I can't read them without thinking of these people as human beings. And now the dynamic has changed. I like you. I care about you. I like the fact that you want to work in a real software company. I wanted to work in a real software company so much I started one. I like the fact that you care more about your teenage son than your career.
I just can't care about ""C/C++/Perl/ASP"" in the same way.
So, maybe you won't be qualified for the job, but it's just a lot harder for me to dismiss you out of hand.
	"
https://www.joelonsoftware.com/2004/01/26/getting-your-resume-read/,Getting Your Résumé Read,2004-01-26T00:15:08+00:00,2016-12-05T19:04:47+00:00,Joel Spolsky,"New developer, News","
	I've been going through a big pile of applications for the summer internship positions at Fog Creek Software, and, I don't know how to say this, some of them are really, really bad. This is not to say that the applicants are stupid or unqualified, although they might be. I'm never going to find out, because when I have lots of excellent applications for only two open positions, there's really no need to waste time interviewing people that can't be bothered to spell the name of my company right.
So here are a few hints to review, if you're sending out resumes.
A resume is a way to get to the next stage: the interview. Companies often get dozens of resumes for every opening ... we get between 100 and 200 per opening. There is no possible way we can interview that many people. The only hope is if we can screen people out using resumes. Don't think of a resume as a way to get a job: think of it as a way to give some hiring manager an excuse to hit DELETE. At least technically, your resume has to be perfect to survive. 
If you don't have the right qualifications, don't apply for the job. When the job listing says ""summer intern,"" don't ask for a full time job. You're not going to get it and you're just going to waste your time. (It won't count against you in the future, of course, because your original application was deleted so quickly I'll have no memory of you when we do get a full time opening and you apply for it.) 
OK, this one really bugs me. Learn where spaces go in relation to other punctuation. Whenever you have a comma, there is always exactly one space and it's always after the comma and never before it. Thank you.
In the olden days resumes were sent out in the mail and included a cover sheet on top which explained why the resume was being sent. Now that we use email, there is no reason whatsoever to send the cover letter as an attachment and then write a ""cover cover"" letter in the body of the email. It's just senseless. 
Even stupider is submitting two big Word documents with no body text in the email. This just gets you spam filtered. I don't even SEE these. 
Please do not use cover letters that you copied out of a book. If you write ""I understand the position also requires a candidate who is team- and detail-oriented, works well under pressure, and is able to deal with people in departments throughout the firm"" then at best people will think you're a bullshit artist and at worst they will think that you were not born with the part of the brain that allows you to form your own thoughts and ideas. 
The personal pronoun ""I"" is always capitalized. All sentences must end in a period. If your cover letter looks like this I will not even look at your resume: 
i m interested in your summer job. here is my resume --------------------------- Do you Yahoo!? Yahoo! SiteBuilder - Free web site building tool. Try it!
And while I'm on it, anonymous email accounts and AOL accounts just don't send a good message. They won't exactly disqualify you since so many people use them, but crazydood2004 at hotmail.com does not really impress me as much as name at alumni.something.edu. Do you really need to know if I Yahoo!? Do you really want to advertise Yahoo! SiteBuilder, a competitor to one of Fog Creek's products, when you're actually applying for a job at Fog Creek? 
In most of the English speaking world it is not considered polite to open letters to a Mr. Joel Spolsky by writing ""Dear Spolsky."" One might write ""Dear Mr. Spolsky,"" or ""Dear sir,"" or perhaps, ""Hi Joel!"" But ""Dear Spolsky"" is usually followed by some story about embezzled funds and needing to borrow my bank account. 
Don't tell me about one of the requirements of the position and then tell me that you don't want to follow it. ""One of the requirements for Summer Internship says that you need to interview in person in New York City. I am interested in the position but I stay in East Nowhere, TN."" OK, that's nice, hon, you stay there. Another PS, I thought we said in the requirements ""Excellent command of written and spoken English."" Oh, yes, indeed, that was our first requirement. So at least do yourself a favor and get someone to check your cover letter for obvious mistakes. Like I said, don't give me an excuse to throw your resume in the trash. 
I don't know why I need to spell these out because they're probably listed in every single ""how to send out resumes"" book on the planet, right there in chapter 1, but I still get more resumes that show an appalling lack of concern for what it takes to get an interview.
Let me try not to be so negative and provide some constructive advice.
Proofread everything a hundred times and have one other person proofread it. Someone who got really good grades in English. 
Write a personal cover letter that is customized for the job you are applying for. Try to sound like a human in the cover letter. You want people to think of you as a human being. 
Study the directions that are given for how to apply. They are there for a reason. For example our website instructs you to send a resume to jobs@fogcreek.com. This goes into an email folder which we go through to find good candidates. If you think for some reason that your resume will get more attention if you print it out and send it through the mail, that you'll ""stand out"" somehow, disabuse yourself of that notion. Paper resumes can't get into the email folder we're using to keep track of applicants unless we scan them in, and, you know what? The scanner is right next to the shredder in my office and the shredder is easier to use. 
Don't apply for too many jobs. I don't think there's ever a reason to apply for more than three or four jobs at a time. Resumespam, or any sign that you're applying for 100 jobs, just makes you look desperate which makes you look unqualified. You want to look like you are good enough to be in heavy demand. You're going to decide where you want to work, because you're smart enough to have a choice in the matter, so you only need to apply for one or two jobs. A personalized cover letter that shows that you understand what the company does goes a long way to proving that you care enough to deserve a chance. 
Some of this stuff may sound pretty superficial. Indeed, what we're really looking for when we look at resumes is someone who is passionate and successful at whatever they try to do. We like people who are passionate about software. Writing a shareware app when you're a teenager is just as good a qualification to us as getting into MIT. This is your life story, and by the time you're applying for a job it's probably too late to change that.
Would I reject someone just because they don't quite understand the relationship between the comma and the space? Well, not necessarily. But when I have to find two summer interns out of 300 applicants, here's what I do with the resumes: I make three piles: Good, OK, and Bad. I give the same resumes to Michael and he does the same thing. There are always enough people that we both put in the Good pile that those are really the only people that stand a chance. In principle if we can't find enough people we like that we both rated as ""good"" we would consider some people who got Good/OK, but in practice this has never happened. Much as I'd love to be able to consider everyone on their merits instead of on superficial resume stuff, it's just not realistic, and there's just no reason a college graduate can't get this right.
(Added 1/27/2004)
The number one best way to get someone to look at your resume closely: come across as a human being, not a list of jobs and programming languages. Tell me a little story. ""I've spent the last three weeks looking for a job at a real software company, but all I can find are cheezy web design shops looking for slave labor."" Or, ""We yanked our son out of high school and brought him to Virginia. I am not going to move again until he is out of high school, even if I have to go work at Radio Shack or become a Wal*Mart greeter."" (These are slightly modified quotes from two real people.)
These are both great. You know why? Because I can't read them without thinking of these people as human beings. And now the dynamic has changed. I like you. I care about you. I like the fact that you want to work in a real software company. I wanted to work in a real software company so much I started one. I like the fact that you care more about your teenage son than your career.
I just can't care about ""C/C++/Perl/ASP"" in the same way.
So, maybe you won't be qualified for the job, but it's just a lot harder for me to dismiss you out of hand.
	"
https://www.joelonsoftware.com/2004/01/26/26-2/,26,2004-01-26T00:05:50+00:00,,Joel Spolsky,News,"
	""Please do not use cover letters that you copied out of a book. If you write 'I understand the position also requires a candidate who is team- and detail-oriented, works well under pressure, and is able to deal with people in departments throughout the firm' then at best people will think you're a bullshit artist and at worst they will think that you were not born with the part of the brain that allows you to form your own thoughts and ideas.""
Getting Your Resume Read
PS. This article got two kinds of feedback:
Ok Joel, I've been getting you newsletter for a while now. Mostly I was glad to. I'm a twenty year vet myself and I agreed with most of what you had to say. You were always a little pompous, but the resume ""thing"" takes the cake. PLease take me off you maliing list.
And:
It's absolutely perfect. Please make sure that this article stays on your site for a very long time. I want to maintain a link to it and recommend it to everybody who is looking for a job. Thank you!
Why the disparity?
Attention, All Gay Men on the Planet: OK, I can understand you don't want to dress up for the interview, but at least pick out a handbag that matches your outfit!
	"
https://www.joelonsoftware.com/2004/01/20/20-3/,20,2004-01-20T00:05:49+00:00,,Joel Spolsky,News,"
	I will be speaking on the subject of Designing Applications with the User in Mind at UC Davis on January 29th. The speech is free and open to the public so if you're in the Davis/Sacramento area please come.
UC Davis Thursday, January 29, 2004 10 - 11:30am at the University Club (map)
 
	"
https://www.joelonsoftware.com/2004/01/19/19-3/,19,2004-01-19T00:05:48+00:00,,Joel Spolsky,News,"
	SysAdmin Week
After a bit of a scare discovering that a few of our critical files were not getting backed up, and with various system administration things starting to cross from annoying into the category of downright emergencies, I am going to spend a few days focused on improving our network infrastructure.
All of our backups are done to hard drives, not tapes. It's not that much more expensive than tape, and it's a lot more convenient. For example all our workstations and laptops are backed up using Veritas NetBackup Pro which creates hard-drive based backups on a server. Anyone can browse the last 5 versions of any file on their hard drive and instantly restore it; if a complete system is lost NetBackup does ""bare metal restore"", and, the part I like best - if two people have the same file it is only stored once. This saves gigs and gigs of space because almost every machine here has the same OS files, the same development environment, the same full text of MSDN, etc. Servers are backed up over the Internet using Dantz Retrospect, also to a hard drive at a different location. Retrospect has the advantage of supporting ""open file backup"" on SQL Server databases, backing them up while they're running. As far as I can tell, this relies on an underlying feature of Windows 2000 which allows you to make virtually instantaneous, atomic copies of any open file (Windows does this using ""Copy on Write,"" where the file is simply marked as being ""copied,"" the copy itself doesn't take place until one copy is written to, and then only on a sector-by-sector basis). Dantz has the disadvantage of some architectural decisions that reflect its Macintosh heritage which do not really make sense... for example, rather than the traditional Windows server model of having two apps - an invisible service and a management console which controls that service - there's just one app. This means you can only run one management console and if you lose it (e.g. someone else is running it in a different session) you can't get in, requiring drastic process killing or rebooting. And the number of new concepts you need to learn to set up simple server backups is astonishing... it took me way too long to get things set up and then it took several weeks of occasional tinkering to get it to work, and even then it seems to get flaky and decide it doesn't want to backup and doesn't want to tell anyone that it doesn't want to backup, so I have a weekly scheduled task to kick the sucker. Somewhat frustrating but I have no experience with other server backup products and suspect the others are just as bad.
I just woke up to the fact that we were paying about $6/GB for disk storage on Dell SCSI RAID arrays, and for backup media I don't need SCSI and I don't need RAID, so I'm going to try a LaCie Big Disk Drive connected to the backup server over USB 2.0 which is about $1.20/GB.
Meetup
So far there are 136 people registered at Meetup.com. London, Toronto, and Dublin have passed the threshold of 5 members for meetings to actually be held. I was thinking it might be fun to pick the city with the most people on this list for my next vacation.
 
	"
https://www.joelonsoftware.com/2004/01/17/17-4/,17,2004-01-17T00:05:47+00:00,,Joel Spolsky,News,"
	Meetup.com organizes regularly scheduled Joel on Software reader meetings in 640 cities around the world on the third Wednesday of every month. The next one is coming up on January 21st.
I'm not sure exactly how it works... I think that as soon as they get 5 members confirmed in a particular city, the meetup is officially on, otherwise it's automatically cancelled.
Meetup.com was created by my fellow New Yorker, Scott ""Fries With That?"" Heiferman, who also founded i-traffic.com (now a part of agency.com).
	"
https://www.joelonsoftware.com/2004/01/13/13-2/,13,2004-01-13T00:05:46+00:00,,Joel Spolsky,News,"
	Whoo hoo! There's nothing better than shipping a new product.
Fog Creek Software is proud to announce: FogBUGZ for Unix and FogBUGZ for Macintosh.
All About FogBUGZ System Requirements: Unix | Macintosh | Windows
Today is Monday, right?
	"
https://www.joelonsoftware.com/2004/02/28/28-3/,28,2004-02-28T00:05:57+00:00,,Joel Spolsky,News,"
	This thread in Ask Joel about offshoring/outsourcing is much better than anything I could have written on the subject myself. Ken sets up the strawman; eloquent readers from around the globe tear it down.
	"
https://www.joelonsoftware.com/2004/02/27/27-2/,27,2004-02-27T00:05:56+00:00,,Joel Spolsky,News,"
	I hope you're not all missing the excellent stuff going down on the Ask Joel forum.
On Apress: "" And although they would not put a doggie on the cover of my book as I requested, because a certain other book publisher threatens to sue his competitors when they put anything animal like within 90 feet of their covers, their graphic designer worked overtime to create underground cover art called User Interface Design for Doggies complete with three golden retrievers, which they framed and sent to me. ""
On Microsoft Program Managers: "" So the programmers think they're deciding everything and the program managers think they're deciding everything. How can they both be deciding everything? They can't. Who is really deciding, then? Let me give you a hint. Of the program managers and developers you know, on the whole, who has better people skills? eh? speak up boy, I can't hear you. Duh! Of course it's the program managers. You knew that. Developers couldn't people-skill their way out of a summer intern party at BillG's lakeside mansion. Developers have such weak people skills they can't even imagine what people skills could be used for, other than the purely theoretical concept of getting a theoretical date (""I ... like ... big BUTTS and I can not LIE...""), so it's no wonder they're not even aware of the secret that I can finally reveal today. ""
On Lisp: ""And I have the ultimate respect for Paul Graham - I think there's a good probability that in a year or two we will credit him with being the man who solved spam. But I think that if you try to ignore the fact that millions of programmers around the world have learned lisp and don't prefer to use it, you're in the land of morbid cognitive dissonance. ""
On Big-M Methodologies: "" Everything about RUP, for example, is obsessed with figuriing out what the business objects and business rules are so you can do a payroll system. We do things like add spell checkers to an editor window. ""
On Usable Programming APIs: ""Indexes are one based. That's how humans count. Zero-based is better, I agree, but one-based is what humans expect, and the program model must conform to the user model for ease of use.""
On Starting Fog Creek: "" The law firm that was recommended to us was big and famous and wanted a $30,000 retainer just to talk to us. There was a time during dotcom mania where you weren't someone unless your law firm was VLG or MoFo. I was literally told that you had to use VLG or maybe, distant second, MoFo, or I could never convince VCs to invest. ""They won't take you seriously if you don't have a serious lawfirm."" I snorted up my milk. ""
On teaching your boyfriend C++: "" Forget it! Give up! ... Teach me about women's shoes and I will feign interest and then promptly forget everything you told me.""
On software pricing: ""With software sold in corporations, as soon as your price gets up in the $3000 level, the amount of approval it needs is so absurd that you are not going to sell products without a salesperson making a few visits. Hiring the salesperson, sending them out to make presentations, hotels, airfare - now it costs $50,000 to get the sale done just in sales closing costs. That's why you see a lot of software products at $100,000 and a lot under $3000, but anywhere in-between and it's impossible to make sales. ""
	"
https://www.joelonsoftware.com/2004/02/20/20-4/,20,2004-02-20T00:05:55+00:00,,Joel Spolsky,News,"
	Ask Joel
I'm running out of my own ideas for article topics. I was going to write about how the search for autotrephination on Google only has one result, which is surprising, considering how there's an entire movie on the subject, although I realized most people probably think autotrephination would mean ""automatic-drilling-of-holes-in-the-head"" when it's perfectly obvious to me that it should mean ""drilling-of-holes-in-one's-own-head"" but, hey, what does a word mean that has only been used once in the entire history of Google? And what does it mean to say that a word means something if nobody has ever used it? Anyway, I decided that writing about this would be so headache-inducing you all would try to drill a hole in my head so I didn't write anything about it.
Luckily, I have my readers for topic ideas. A lot of times people email me saying, ""I'd love to hear what you think about X."" Sometimes, that's enough to motivate me to write a long essay. But more often, my opinion is far too shallow and insipid to justify such an effort, so I dash off a paragraph or two to the email correspondent, or, more often, file away the email in a folder full of things I would love to respond to if we lived on Pluto and the day was 153.4 hours long and humans didn't require that much sleep.
I decided to try out one of Philip Greenspun's ideas - the Ask Philip Forum. So, without further ado, I have recycled the dreary old ""New Yorkers"" forum, which was something of a ghost town anyway, into the shiny new Ask Joel Questions forum. There are still some old New York-related topics there. Ignore them. Put the drill away. Thank you.
Linkers
The appropriate person at Microsoft blew off my request for a linker. The strongest argument he makes is that Microsoft wants to be able to patch security bugs in the CLR after I've shipped my program. This is a valid concern; when a major security hole was found in zlib everybody had to figure out which programs they had that used it and recompile them all. I wasted a day of my life on that particular bug. But it's easily solved by a simple technology of shims or jump tables. Put on your thinking hat and you'll figure out how to make a linker that produces a single executable plus a jump-table that Microsoft can patch when they find a security hole. PS. Apple had this technology in the original Macintosh, 1984.
His other argument about working set size is a decision that should be left to developers. Let me pick the tradeoff I want to make between ease of installation and working set size.
Look, I used to be a program manager at Microsoft, and there's a really strong tendency in that culture to treat customer requests as fun intellectual challenges to be fended off like exercises in debating class. But I've been talking to customers since the days of the Visual Basic 1.0 runtime in 1991 - thirteen years ago! who have been begging for this problem to be addressed. Jason, why don't you go talk to somebody on the FoxPro team. In the late 80s FoxPro clobbered dBase in the market mainly on the strength of the fact that it compiled standalone executables. FoxPro had a linker. xBase developers pleaded with Ashton-Tate, makers of dBase, to develop or acquire a linker, but Ed Esber, reviled CEO of Ashton-Tate, refused to give them one. Learn from your own history. (Thanks to Rick Chapman for reminding me of history repeating itself.)
ISV's that I talk to agree that this is the #1 weakness of VB1-6 and .Net. I'm forced to conclude that Microsoft has grown so large they are living in a reality-distortion field. I suppose it's not unusual for someone working on a campus with 45 buildings all full of Microsoft employees to lose track of what the outside world is thinking and doing.
OK, anyway, there are third party alternatives. Jitit makes a thing called Thinstall. I haven't tried it. If someone out there wants to write an in-depth technical review of this thing, please contact me and I'll try to get you a review copy.
Elsewhere
Blogs I've been reading lately: Rory, Scoble, Raymond, Phil.
I loved the style, wittiness, humor and erudition of Why's (Poignant) Guide to Ruby but I can't say I learned much about Ruby. Maybe in the next chapter?
	"
https://www.joelonsoftware.com/2004/03/25/25-2/,25,2004-03-25T00:06:00+00:00,,Joel Spolsky,News,"
	Thanks to everyone who came to the open house last night. If you have pictures, send me a link!
We had an interesting conversation about how the impedance mismatch between contemporary high-level programming languages (Java, C#, Python, VB) and relational databases. Since a huge percentage of code requires access to databases, the glue (a.k.a. the connecticazoint) between the RDBMS layer and the application code is very important, yet virtually every modern programming language assumes that RDBMS access is something that can be left to libraries. In other words, language designers never bother to put database integration features into their languages. As a tiny example of this, the syntax for ""where"" clauses is never identical to the syntax for ""if"" statements. And don't get me started about data type mismatches: just the fact that columns of any type might be ""null"" leads to an incompatibility between almost every native data type and the database data types.
The trouble with this is that the libraries (think ADO, DAO, ODBC, JDBC, embedded SQL, and a thousand others) need to be general purpose to be reusable, and yet what you really want is a mapping between a native data structure and a table row or query result row. Inevitably, you have to hand roll this mapping and wire it up manually, which is error prone and frustrating.
I think this is a fatal flaw in language design, akin to the bad decision by the designers of C++ that it was not necessary to support a native string type. ""Let a thousand CString/TString/String/string<char> types flourish,"" they said, and then spent more than a decade adding new features to the language until it was marginally, but not completely, possible to implement a non-awful string class. And now we have a thousand string types (most large C++ bodies of code I've seen use three or four) and a bunch of really good books by Scott Meyers about why your personal hand-rolled string class is inadequate. It's about time that a language designer admitted that RDBMS access is intrinsic to modern application implementation and supported it in a first-class way syntactically.
Now for all the disclaimers to prevent ""but what about"" emails. (1) in functional languages like lisp the syntax layer is so light that you could probably implement very good RDBMS shims in ways that feel almost native. Especially if you have lazy evaluation of function parameters, it's easy to see how you could build a ""where"" clause generator that used the same syntax as your ""if"" predicates. (2) Access Basic, later Access VBA, had a couple of features to make database access slicker, specifically the [exp] syntax and the rs!field syntax, but it's really only 10%. There are probably other niche-languages or languages by RDBMS vendors that do a nice job. (3) Attempts to solve this problem in the past have fallen in two broad groups: the people who want to make the embedded SQL programming languages better (PL/SQL, TSQL, et al), and the people who want to persist objects magically using RDBMS backends (OODBMSes and object persistence libraries). Neither one fully bridges the gap: I don't know of anyone who builds user interfaces in SQL or its derivatives, and the object persistence implementations I've seen never have a particularly good implementation of SELECT.
	"
https://www.joelonsoftware.com/2004/03/04/04/,04,2004-03-04T00:05:59+00:00,,Joel Spolsky,News,"
	Save the date: Fog Creek Software will host an open house at our new office on March 24th, 2004, at 6:00 PM.
535 8th Ave. (bet. 36th and 37th), 18th Floor, New York
	"
https://www.joelonsoftware.com/2004/03/02/top-twelve-tips-for-running-a-beta-test/,Top Twelve Tips for Running a Beta Test,2004-03-02T00:15:46+00:00,2016-12-05T19:31:45+00:00,Joel Spolsky,"News, Program manager","
	Here are a few tips for running a beta test of a software product intended for large audiences - what I call ""shrinkwrap"". These apply for commercial or open source projects; I don't care whether you get paid in cash, eyeballs, or peer recognition, but I'm focused on products for lots of users, not internal IT projects.
Open betas don't work. You either get too many testers (think Netscape) in which case you can't get good data from the testers, or too few reports from the existing testers. 
The best way to get a beta tester to send you feedback is to appeal to their psychological need to be consistent. You need to get them to say that they will send you feedback, or, even better, apply to be in the beta testing program. Once they have taken some positive action such as filling out an application and checking the box that says ""I agree to send feedback and bug reports promptly,"" many more people will do so in order to be consistent. 
Don't think you can get through a full beta cycle in less than eight to ten weeks. I've tried; lord help me, it just can't be done. 
Don't expect to release new builds to beta testers more than once every two weeks. I've tried; lord help me, it just can't be done. 
Don't plan a beta with fewer than four releases. I haven't tried that because it was so obviously not going to work! 
If you add a feature, even a small one, during the beta process, the clock goes back to the beginning of the eight weeks and you need another 3-4 releases. One of the biggest mistakes I ever made was adding some whitespace-preserving code to CityDesk 2.0 towards the end of the beta cycle which had some, shall we say, unexpected side effects that a longer beta would have fleshed out. 
Even if you have an application process, only about one in five people will send you feedback anyway. 
We have a policy of giving a free copy of the software to anyone who sends any feedback, positive, negative, whatever. But people who don't send us anything don't get a free copy at the end of the beta. 
The minimum number of serious testers you need (i.e., people who send you three page summaries of their experience) is probably about 100. If you're a one-person shop, that's all the feedback you can handle. If you have a team of testers or beta managers, try to get 100 serious testers for every employee that is available to handle feedback. 
Even if you have an application process, only one out of five testers is really going to try the product and send you feedback. So, for example, if you have a QA department with 3 testers, you should approve 1500 beta applications to get 300 serious testers. Fewer than this and you won't hear everything. More than this and you'll be deluged with repeated feedback. 
Most beta testers will try out the program when they first get it, and then lose interest. They are not going to be interested in retesting it every time you drop them another build unless they really start using the program every day, which is unlikely for most people. Therefore, stagger the releases. Split your beta population into four groups and each new release, add another group that gets the software, so there are new beta testers for each milestone. 
Don't confuse a technical beta with a marketing beta. I've been talking about technical betas, here, in which the goal is to find bugs and get last-minute feedback. Marketing betas are prerelease versions of the software given to the press, to big customers, and to the guy who is going to write the Dummies book that has to appear on the same day as the product. With marketing betas you don't expect to get feedback (although the people who write the books are likely to give you copious feedback no matter what you do, and if you ignore it, it will be cut and pasted into their book). 
	"
https://www.joelonsoftware.com/2004/03/02/02-2/,02,2004-03-02T00:05:58+00:00,,Joel Spolsky,News,"
	Top Twelve Tips for Running a Beta Test.
	"
https://www.joelonsoftware.com/2004/04/22/news-4/,News,2004-04-22T00:06:02+00:00,,Joel Spolsky,News,"
	Perfectionism
If I was as much of a perfectionist as some here would have me be, I would never get out the door in the morning, I'd be so busy scrubbing the floors of my apartment until they sparkle and shaving every ten minutes and removing lint from my clothing with masking tape, and by the time I finished that I'd have to shave again and take out the trash because there was masking tape in the trash and re-scrub the floor because when I took the trash out I might have tracked in dust. And then I'd have to shave again.
I could go insane with the web page behind the discussion board. First I could make it 110% xhtml 1.1 + CSS. Heck, why not xhtml 2.0 just to be extra addictive-personality-disordered. Then I could neatly format all the html code so it's perfectly indented. But the html is generated by a script, and the script has to be indented correctly so that it's perfect too, and a correctly indented ASP script does not, by defintion, produce correctly indented HTML. So I could write a filter that takes the output of the ASP script and reindents it so that if anybody does a View Source they would see neatly indented HTML and think I have great attention to detail. Then I would start to obsess about all the wasted bandwidth caused by meaningless whitespace in the HTML file, and I'd go back and forth in circles between compressed HTML and nicely laid out HTML, pausing only to shave.
I could spend the rest of my life perfecting the HTML behind every page on all of our sites, or I could do something that might actually benefit someone.
Perfectionism is a very dangerous quality in business and in life, because by being perfectionist about one thing you are, by definition, neglecting another. The three days I spent insuring that all icons in CityDesk 3.0 are displayed with perfect alpha-blended effects came at the price of having a web site where the descender of the ""g"" is not a hyperlink. And both are at the price of working on my next book, or writing another article for Joel on Software, or making CityDesk publish really big sites faster.
If you're noticing a recurring theme, it's that I never like to talk about whether or not to do X. The question should never be ""X, yes or no?"" As long as you have limited time and resources, you always have to look at the cost and the benefit of X. Questions should be ""Is X worth the time"" or ""Will X or Y have a greater return on investment?""
Great Minds Think Alikeor, you can take the boy out of Microsoft but you can't take Microsoft out of the boy
Raymond Chen: ""In other words, in an error-code model, it is obvious when somebody failed to handle an error: They didn't check the error code. But in an exception-throwing model, it is not obvious from looking at the code whether somebody handled the error, since the error is not explicit."" (c.f. Joel on Exceptions)
Larry Osterman: ""I'm not saying that metrics are bad. They're not. But basing people's annual performance reviews on those metrics is a recipe for disaster."" (c.f. Joel on Measurement, Joel on Incentive Pay, Why FogBugz isn't a crutch for HR, etc.)
By the way, have you noticed how everyone at Microsoft is a blogger now? Dave Winer has managed to successfully and almost single-handedly pull off the most incredible Fire and Motion coup in the history of the software industry. His endless evangelism of blogging now has every Microsoft employee spending more time working on their blogs than working on software development or even picking out polo shirts. Brilliant! And that fifth column thing with Scoble - there are no words! Bravo!
The Best Thing on Television, Ever
We just finished watching Season 1 of the BBC television series The Office on DVD during our lunchbreaks at Fog Creek. WOW! Incredibly funny, incredibly touching, and supernaturally realistic. But now I'm paranoid when nobody in the office laughs at my jokes. I'm an entertainer, first, really, then a boss. Also I'll have to cut down on the army stories.
Hint to Americans: turn on the English subtitles and you'll catch twice as many jokes.
	"
https://www.joelonsoftware.com/2004/04/16/news-3/,News,2004-04-16T00:06:01+00:00,,Joel Spolsky,News,"
	Dogfood
The term ""eating your own dogfood,"" in the software industry, means using the code you're developing for your own daily needs: basically, being a user as well as a developer, so the user empathy that is the hallmark of good software comes automatically.
This site is produced in CityDesk, and about half of my time is spent writing code for CityDesk, so it's been my policy to edit Joel on Software using the current, debugging version of CityDesk running inside the debugger. The neat part is that if I'm writing a long essay for the site and the application crashes, I have a chance to debug it right there and then and in fact if I haven't saved in a while I must debug it right there and then, otherwise I won't be able to save my work.
Anyway, for the last couple of weeks, the development version of CityDesk has been using a new, smaller database schema (it's mostly the same as the old schema but with some redundancies removed to make it better normalized) and the truth is I was a little bit scared to upgrade the Joel on Software database so I could publish. But dogfood we must eat, so here you go.
Interviews
Eric Lippert writes: ""Dev candidates: if you've done any reading at all, you know that most of your interviews will involve writing some code on a whiteboard. A word of advice: writing code on whiteboards is HARD. Practice!"" Good advice. I'm wondering if we should stop giving advice on interviewing... my guerrilla guide is so well read that my old trick of looking for people who write their }'s immediately after their {'s doesn't work any more. Everyone who interviews at Fog Creek always carefully does that now, and then they sort of look at me to make sure I noticed that they wrote their } immediately after their {. Tip: That's not what I'm looking for any more.
Memetics and Email Viruses
Gary Cornell and I had an interesting conversation about how email viruses are getting cleverer and better written. It reminded me of Richard Dawkins and Oliver Goodenough (Nature, September 1, 1994) who realized that chain letters were a great example of the evolution of memes. Evolution requires:
A genetic code, such as DNA
Replication
Mutation
Natural Selection
In a chain letter, you have
The text of the letter itself
The letter requires you to copy it and send it to other people
When the letter is copied by hand, everyone makes slight mistakes and slight changes, either intentionally, because they think they are better, or unintentionally, by mistake.
The letters that work best at convincing people to copy them get copied the most and thus those memes survive the longest.
The same thing happens with email viruses. The ones with the best fake letters, e.g., the ones that persuade the most people to open the attachment, will survive and reproduce. The ones that aren't very convincing die out. The next stage, which may have already happened, would be for the virus to modify a couple of words at random in the text of the message before sending it out. Instead of blasting a million people the same message, blast groups of 100 people the same message with a different random change. Eventually random mutation will improve the ability of these messages to survive and reproduce by fooling people into opening the attachment.
Software Marketing
I've said it before, and I'll say it again ... nobody knows more about marketing in the shrinkwrapped software industry than Rick Chapman, and the new fourth edition of his book is the only place you can go to find a complete encylopedia of just about everything there is to know about marketing software. There's really nothing else that compares and if you're trying to market software you really have to read this book.
Over the years and the editions Rick has added an awful lot of material, and a lot of it is starting to show its age. In particular a lot of the discussion of channel marketing may not be relevant: thanks to the Internet, plenty of software companies today are doing fine using 100% direct-to-customer without any traditional channel whatsoever. Don't let that stop you from buying the book; it has plenty of useful data on Internet and direct sales, too. Before you try to sell software, you have to at least sit down and read this book cover to cover, if only to gain the humility to realize how much is involved in marketing.
	"
https://www.joelonsoftware.com/2004/05/05/mike-gunderloys-coder-to-developer/,Mike Gunderloy’s Coder to Developer,2004-05-05T00:15:07+00:00,2016-12-05T19:03:51+00:00,Joel Spolsky,"New developer, News","
	Note: This is my foreword to Mike Gunderloy's awesome new book, Coder to Developer. The book is now available from SYBEX.
 
You know what drives me crazy?
""Everything?"" you ask. Well, OK, some of you know me a bit too well by now.
But seriously, folks, what drives me crazy is that most software developers don't realize just how little they know about software development.
Take, for example, me.
When I was a teenager, as soon as I finished reading Peter Norton's famous guide to programming the IBM-PC in Assembler, I was convinced that I knew everything there was to know about software development in general. Heck, I was ready to start a software company to make a word processor, you see, and it was going to be really good. My imaginary software company was going to have coffee breaks with free donuts every hour. A lot of my daydreams in those days involved donuts.
When I got out of the army, I headed off to college and got a degree in Computer Science. Now I really knew everything. I knew more than everything, because I had learned a bunch of computer-scientific junk about linear algebra and NP completeness and frigging lambda calculus which was obviously useless, so I thought they must have run out of useful things to teach us and were scraping the bottom of the barrel.
Nope. At my first job I noticed how many things there are that many Computer Science departments are too snooty to actually teach you. Things like software teamwork. Practical advice about user interface design. Professional tools like source code control, bug tracking databases, debuggers and profilers. Business things. Computer Science departments in the most prestigious institutions just won't teach you this stuff because they consider it ""vocational,"" not academic; the kind of thing that high school dropouts learn at the local technical institute so they can have a career as an auto mechanic, or an air-conditioner repairman, or a (holding nose between thumb and forefinger) ""software developer.""
I can sort of understand that attitude. After all, many prestigious undergraduate institutions see their goal as preparing you for life, not teaching you a career, least of all a career in a field that changes so rapidly any technologies you learn now will be obsolete in a decade.
Over the next decade I proceeded to learn an incredible amount about software development and all the things it takes to produce software. I worked at Microsoft on the Excel team, at Viacom on the web team, and at Juno on their email client. And, you know what? At every point in the learning cycle, I was completely convinced that I knew everything there was to know about software development.
""Maybe you're just an arrogant sod?"" you ask, possibly using an even spicier word than ""sod."" I beg your pardon: this is my foreword; if you want to be rude write your own damn foreword, tear mine out of the book, and put yours in instead.
There's something weird about software development, some mystical quality, that makes all kinds of people think they know how to do it. I've worked at dotcom-type companies full of liberal arts majors with no software experience or training who nevertheless were convinced that they knew how to manage software teams and design user interfaces. This is weird, because nobody thinks they know how to remove a burst appendix, or rebuild a car engine, unless they actually know how to do it, but for some reason there are all these people floating around who think they know everything there is to know about software development.
Anyway, the responsibility is going to fall on your shoulders. You're probably going to have to learn how to do software development on your own. If you're really lucky, you've had some experience working directly with top notch software developers who can teach you this stuff, but most people don't have that opportunity. So I'm glad to see that Mike Gunderloy has taken upon himself to write the book you hold in your hands. Here you will find a well-written and enjoyable introduction to many of the most important things that you're going to need to know as you move from being a person who can write code to being a person who can develop software. Do those sound like the same thing? They're not. That's roughly the equivalent of going from being a six year old who can crayon some simple words, backwards N's and all, to being a successful novelist who writes books that receive rave reviews and sell millions of copies. Being a software developer means you can take a concept, build a team, set up state of the art development processes, design a software product, the right software product, and produce it. Not just any software product: a high quality software product that solves a problem and delights your users. With documentation. A web page. A setup program. Test cases. Norwegian versions. Bokmal and Nynorsk. Appetizers, dessert, and twenty seven eight-by-ten color glossy photographs with circles and arrows and a paragraph on the back of each one explaining what each one was. (Apologies to Arlo Guthrie.)
And then, one day, finally, perhaps when it's too late, you'll wake up and say, ""Hmm. Maybe I really don't know what it really takes to develop software."" And on that day only, and not one minute before, but on that day and from that day forward, you will have earned the right to call yourself a software developer. In the meantime, all is not lost: you still have my blessing if you want to eat donuts every hour.
	"
https://www.joelonsoftware.com/2004/05/05/news-5/,News,2004-05-05T00:06:03+00:00,,Joel Spolsky,News,"
	You know what drives me crazy?
""Everything?"" you ask. Well, OK, some of you know me a bit too well by now.
But seriously, folks, what drives me crazy is that most software developers don't realize just how little they know about software development.
Take, for example, me.
	"
https://www.joelonsoftware.com/2004/06/25/news-11/,News,2004-06-25T00:06:09+00:00,,Joel Spolsky,News,"
	Brendan Eich recently wrote: ""The best way to help the Web is to incrementally improve the existing web standards, with compatibility shims provided for IE, so that web content authors can actually deploy new formats interoperably.""
Dave Shea nicely summarizes the conversation about web applications. ""The recession is over, the slump is ended. Web development is in demand, and the demand is only going to increase.""
Patrick Breitenbach pointed me to General Interface, a company that has built a commercial windowing/UI system on top of DHTML allowing almost-rich-client-apps inside the browser. They lean a bit too heavily on IE-only features for now and the overall look is more like a rich client app than a web app (very much like Oddpost), but hey, it's one way to do it.
Ben Nolan has a dusty library called phplive. ""It's event driven programming for the web - but the whole page isn't refreshed - whenever you click a button, focus an element, or fire any event that has a handler on the server - an RPC call is dispatched to the server...""
Ian Hickson of Opera: ""Our own position was that any successful framework would have to be backwards compatible with the existing Web content, and would have to be largely implementable in Windows IE6 without using binary plug-ins (for example using scripted HTCs). We were the only ones to even remotely suggest that the solution should be based on HTML.""
Espen Antonsen shares his wishlist: ""As a web developer I find many tasks more time consuming and difficult to accomplish when building a web application - we develop a web-based ERP system.""
SysAdmin Week
I just wanted to announce that SysAdmin Week will hence be known as ""SysAdmin Fortnight.""
	"
https://www.joelonsoftware.com/2004/06/23/news-10/,News,2004-06-23T00:06:08+00:00,,Joel Spolsky,News,"
	SysAdmin Week
This week is sysadmin week, in which I catch up on a few months of accumulated system administration headaches.
On Monday I went down to Peer 1 Networks' colocation facility in New York, where the main Joel on Software server lives. Peer 1 provides free bandwidth and a wee shelf (shown at right) for Joel on Software, for which I am extremely grateful. Michael and I installed the original server there about a year and a half ago, and it's been running fine ever since, down only because of Windows Updates. (Don't get me started.) Sometimes the server didn't come back up properly after one of the reboots required for patching Windows, so we installed a remote controlled power strip, which has a web interface allowing us to power cycle the server. There's supposed to be such a thing built into the server itself, something Dell makes called RAC, but it crashes more often than the server, requiring a full power cycle to get it back to life, which defeats the purpose...
Anyway the reason I went down on Monday was to slide in another 1U Dell server into the rack which will serve as a ""hot backup"" in case the main server dies. I'm going to set up some simple replication from the main server to the hot backup so we should be able to switch back and forth between the main server and the backup server without more than a few seconds of downtime. The replication will use robocopy for files and log shipping for SQL databases like the database behind the discussion group.
Peer 1, by the way, is doing incredibly well. When I installed the server there last winter they only had two rows of racks, mostly empty. On Monday when I went down there the whole data center was crammed with racks and they were turning away new customers until they could arrange for a bigger data center. Joe Cooper, the NY manager, told me they had gone from 20% to 90% capacity in their colo facility and were trying to reserve the remaining 10% for existing customers. A nice problem to have. I couldn't be happier with their hosting services and they're the nicest people, so even though I'm completely tainted since they host my site for free, I most heartily recommend them if you're looking for colocation (or wicker furniture, har dee har har).
	"
https://www.joelonsoftware.com/2004/06/18/news-9/,News,2004-06-18T00:06:07+00:00,,Joel Spolsky,News,"
	Dean Jackson, who's responsible for applications at the W3C: ""The good news is that it seems we have many of the big players ready to go in this area. Joel may get some of his wishes sooner than he thinks (let's hope!)""
Rhys Jeremiah: ""I'll outline the features that I would like to add.""
Jeremy Hartley: ""I have spent the past two years web-enabling my company's HRM System. My intentions have always been to make the web version of the application as similar to the Win32 version as possible-no compromise allowed. To do this I have had to use every trick in the book as well as making up quite a few myself. The process took me two years. I think I could have done it in six months if I had had the following...""
Yoz Grahame: ""The current Javascript security philosophy can be easily summarised thus: 'No.'""
Jeremy Smith: ""I want a way to access a browser's right-click menu.""
Mike Marshall doesn't agree. ""Here is the real solution. Microsoft is coming out with ClickOnce in VS 2005 ('Whidbey'). What's that, too platform independent? Java will come with something similar, in fact Java Web Start apps are pretty much already there. You will have your pick at this time next year, believe me.""
	"
https://www.joelonsoftware.com/2004/06/17/news-8/,News,2004-06-17T00:06:06+00:00,,Joel Spolsky,News,"
	The Web Hypertext Applications Technology Working Group is working on extending HTML4 forms to make Web applications work better.
In the previous rounds of HTML enhancement, the world's great graphic designers (like Jeffrey Zeldman) made the most noise and got us things like CSS which allow the kind of pixel-perfect page layout that the marketing people like, done in an intelligent way that separates content from presentation. Kudos. They got what they wanted, mostly, and quieted down. Now it's time for us application developers to start clamoring for the features we need to develop great web applications. Here are some examples of the kinds of features I'd like to see in web browsers:
Improved inline editing (step one: make contentEditable work in Gecko just like it does in IE 5.5+)
Javascript features to do fast REST queries back to the server, so I can implement things like a lush spell checker with the dictionary on the server. It should be possible to have a 300,000 employee directory on the server and create a web app that has a list box where you can type the first few letters of an employee's name and see a filtered list as fast as you can type on the screen.
A rich set of standard controls for application development that provide better ways to upload files, better ways to drag and drop with the desktop, etc
Compiled or compressed JavaScript, so that web applications can use really large amounts of JavaScript with decent performance
Better standardized windowing features. At the very least I'd like modal and modeless dialogs that pop up instantly, a standard way to do a menu inside a web page (with ONE consistent UI, not everybody's wacky DHTML menu that are all a bit different), TreeView and ListView controls, and a standard way to make a toolbar/button bar
The ability to get a ""device context"" (in a platform neutral way) on an HTML control and wail on it to paint just about anything you want
A far richer set of events. At the very least I need to be able to use the entire keyboard. Combined with #6 I should be able to develop any custom control I want that is 100% client side.
Media integration, so I can play sounds or stream music in standard ways without relying on <objects>
Graceful degradation for legacy browsers (IE. It's time to make Microsoft play catchup again. Fire and Motion Baby.)
This is just a random list, nothing organized. These things would have happened if browser development hadn't ground to a halt in the late 90s due to the misguided Netscape-rewrite-project and the lock-IE-developers-in-a-dungeon project.
What I do not want to hear about:
Proprietary tools like Macromedia's or Java Applets that embed clever widgets in rectangles in a browser. I want this stuff integrated with DHTML and CSS, deeply in the fabric of the web
Things that don't have any chance of degrading gracefully on legacy browsers. You have to be able to construct an interface that gets better if you install Firefox, but still works on IE, without too much testing on the part of the developer.
Boil the ocean schemes that require 400,000,000 users to install some thingamajig before you get anything useful. Such schemes will not go anywhere.
What are your ideas for improving the HTML/CSS/JavaScript infrastructure to make web app development better? Write them up and post them somewhere; I'll point to the best ones from my blog. Please don't email me your suggestions - post them on the web and email me a link so everyone can benefit. I just don't have enough time for private email conversations (yesterday's API Wars article generated well over 200 thoughtful email messages which I can never hope to respond to adequately). It's time for application developers to start clamoring for the next generation of the Web now that the graphic designers got their wish list taken care of.
	"
https://www.joelonsoftware.com/2004/06/16/news-7/,News,2004-06-16T00:06:05+00:00,,Joel Spolsky,News,"
	""There are two opposing forces inside Microsoft, which I will refer to, somewhat tongue-in-cheek, as The Raymond Chen Camp and The MSDN Magazine Camp.""
How Microsoft Lost the API War
	"
https://www.joelonsoftware.com/2004/06/15/news-6/,News,2004-06-15T00:06:04+00:00,,Joel Spolsky,News,"
	Oh, goody, FireFox 0.9 is here. And it's less than a 5 MB download. I have long since switched to FireFox for web browsing. I switched for the popup blocking but I stayed for the tabbed browsing.
Here are three reasons to switch web browsers today:
You'll get fewer viruses and you'll get no annoying popups asking you if you want to install lame spyware that will ruin your computer forcing a complete reinstall.
You can open all your bookmarks in tabs, all at once, and let them download in the background while you read them.
You'll help break the Microsoft Monopoly on web browsers. Microsoft took over the browser market fair and square by making a better product, but they were so afraid that Web-based applications would eliminate the need for Windows that they locked the IE team in a dark dungeon and they haven't allowed improvements to IE for several years now. Now Firefox is the better product and there's a glimmer of hope that one day DHTML will actually improve to the point where web-based applications are just as good as Windows-based applications.
 
	"
https://www.joelonsoftware.com/2004/06/13/how-microsoft-lost-the-api-war/,How Microsoft Lost the API War,2004-06-13T00:15:25+00:00,2016-12-05T19:18:55+00:00,Joel Spolsky,"Top 10, CEO, News","
	Here's a theory you hear a lot these days: ""Microsoft is finished. As soon as Linux makes some inroads on the desktop and web applications replace desktop applications, the mighty empire will topple.""
Although there is some truth to the fact that Linux is a huge threat to Microsoft, predictions of the Redmond company's demise are, to say the least, premature. Microsoft has an incredible amount of cash money in the bank and is still incredibly profitable. It has a long way to fall. It could do everything wrong for a decade before it started to be in remote danger, and you never know... they could reinvent themselves as a shaved-ice company at the last minute. So don't be so quick to write them off. In the early 90s everyone thought IBM was completely over: mainframes were history! Back then, Robert X. Cringely predicted that the era of the mainframe would end on January 1, 2000 when all the applications written in COBOL would seize up, and rather than fix those applications, for which, allegedly, the source code had long since been lost, everybody would rewrite those applications for client-server platforms.
Well, guess what. Mainframes are still with us, nothing happened on January 1, 2000, and IBM reinvented itself as a big ol' technology consulting company that also happens to make cheap plastic telephones. So extrapolating from a few data points to the theory that Microsoft is finished is really quite a severe exaggeration.
However, there is a less understood phenomenon which is going largely unnoticed: Microsoft's crown strategic jewel, the Windows API, is lost. The cornerstone of Microsoft's monopoly power and incredibly profitable Windows and Office franchises, which account for virtually all of Microsoft's income and covers up a huge array of unprofitable or marginally profitable product lines, the Windows API is no longer of much interest to developers. The goose that lays the golden eggs is not quite dead, but it does have a terminal disease, one that nobody noticed yet.
Now that I've said that, allow me to apologize for the grandiloquence and pomposity of that preceding paragraph. I think I'm starting to sound like those editorial writers in the trade rags who go on and on about Microsoft's strategic asset, the Windows API. It's going to take me a few pages, here, to explain what I'm really talking about and justify my arguments. Please don't jump to any conclusions until I explain what I'm talking about. This will be a long article. I need to explain what the Windows API is; I need to demonstrate why it's the most important strategic asset to Microsoft; I need to explain how it was lost and what the implications of that are in the long term. And because I'm talking about big trends, I need to exaggerate and generalize.
Developers, Developers, Developers, Developers
Remember the definition of an operating system? It's the thing that manages a computer's resources so that application programs can run. People don't really care much about operating systems; they care about those application programs that the operating system makes possible. Word Processors. Instant Messaging. Email. Accounts Payable. Web sites with pictures of Paris Hilton. By itself, an operating system is not that useful. People buy operating systems because of the useful applications that run on it. And therefore the most useful operating system is the one that has the most useful applications.
The logical conclusion of this is that if you're trying to sell operating systems, the most important thing to do is make software developers want to develop software for your operating system. That's why Steve Ballmer was jumping around the stage shouting ""Developers, developers, developers, developers."" It's so important for Microsoft that the only reason they don't outright give away development tools for Windows is because they don't want to inadvertently cut off the oxygen to competitive development tools vendors (well, those that are left) because having a variety of development tools available for their platform makes it that much more attractive to developers. But they really want to give away the development tools. Through their Empower ISV program you can get five complete sets of MSDN Universal (otherwise known as ""basically every Microsoft product except Flight Simulator"") for about $375. Command line compilers for the .NET languages are included with the free .NET runtime... also free. The C++ compiler is now free. Anything to encourage developers to build for the .NET platform, and holding just short of wiping out companies like Borland.
Why Apple and Sun Can't Sell Computers
Well, of course, that's a little bit silly: of course Apple and Sun can sell computers, but not to the two most lucrative markets for computers, namely, the corporate desktop and the home computer. Apple is still down there in the very low single digits of market share and the only people with Suns on their desktops are at Sun. (Please understand that I'm talking about large trends here, and therefore when I say things like ""nobody"" I really mean ""fewer than 10,000,000 people,"" and so on and so forth.)
Why? Because Apple and Sun computers don't run Windows programs, or, if they do, it's in some kind of expensive emulation mode that doesn't work so great. Remember, people buy computers for the applications that they run, and there's so much more great desktop software available for Windows than Mac that it's very hard to be a Mac user.
Sidebar What is this ""API"" thing?
If you're writing a program, say, a word processor, and you want to display a menu, or write a file, you have to ask the operating system to do it for you, using a very specific set of function calls which are different on every operating system. These function calls are called the API: it's the interface that an operating system, like Windows, provides to application developers, like the programmers building word processors and spreadsheets and whatnot. It's a set of thousands and thousands of detailed and fussy functions and subroutines that programmers can use, which cause the operating system to do interesting things like display a menu, read and write files, and more esoteric things like find out how to spell out a given date in Serbian, or extremely complex things like display a web page in a window. If your program uses the API calls for Windows, it's not going to work on Linux, which has different API calls. Sometimes they do approximately the same thing. That's one important reason Windows software doesn't run on Linux. If you wanted to get a Windows program to run under Linux, you'd have to reimplement the entire Windows API, which consists of thousands of complicated functions: this is almost as much work as implementing Windows itself, something which took Microsoft thousands of person-years. And if you make one tiny mistake or leave out one function that an application needs, that application will crash.
And that's why the Windows API is such an important asset to Microsoft.
(I know, I know, at this point the 2.3% of the world that uses Macintoshes are warming up their email programs to send me a scathing letter about how much they love their Macs. Once again, I'm speaking in large trends and generalizing, so don't waste your time. I know you love your Mac. I know it runs everything you need. I love you, you're a Pepper, but you're only 2.3% of the world, so this article isn't about you.)
The Two Forces at Microsoft
There are two opposing forces inside Microsoft, which I will refer to, somewhat tongue-in-cheek, as The Raymond Chen Camp and The MSDN Magazine Camp.
Raymond Chen is a developer on the Windows team at Microsoft. He's been there since 1992, and his weblog The Old New Thing is chock-full of detailed technical stories about why certain things are the way they are in Windows, even silly things, which turn out to have very good reasons.
The most impressive things to read on Raymond's weblog are the stories of the incredible efforts the Windows team has made over the years to support backwards compatibility:
Look at the scenario from the customer's standpoint. You bought programs X, Y and Z. You then upgraded to Windows XP. Your computer now crashes randomly, and program Z doesn't work at all. You're going to tell your friends, ""Don't upgrade to Windows XP. It crashes randomly, and it's not compatible with program Z."" Are you going to debug your system to determine that program X is causing the crashes, and that program Z doesn't work because it is using undocumented window messages? Of course not. You're going to return the Windows XP box for a refund. (You bought programs X, Y, and Z some months ago. The 30-day return policy no longer applies to them. The only thing you can return is Windows XP.)
I first heard about this from one of the developers of the hit game SimCity, who told me that there was a critical bug in his application: it used memory right after freeing it, a major no-no that happened to work OK on DOS but would not work under Windows where memory that is freed is likely to be snatched up by another running application right away. The testers on the Windows team were going through various popular applications, testing them to make sure they worked OK, but SimCity kept crashing. They reported this to the Windows developers, who disassembled SimCity, stepped through it in a debugger, found the bug, and added special code that checked if SimCity was running, and if it did, ran the memory allocator in a special mode in which you could still use memory after freeing it.
This was not an unusual case. The Windows testing team is huge and one of their most important responsibilities is guaranteeing that everyone can safely upgrade their operating system, no matter what applications they have installed, and those applications will continue to run, even if those applications do bad things or use undocumented functions or rely on buggy behavior that happens to be buggy in Windows n but is no longer buggy in Windows n+1. In fact if you poke around in the AppCompatibility section of your registry you'll see a whole list of applications that Windows treats specially, emulating various old bugs and quirky behaviors so they'll continue to work. Raymond Chen writes, ""I get particularly furious when people accuse Microsoft of maliciously breaking applications during OS upgrades. If any application failed to run on Windows 95, I took it as a personal failure. I spent many sleepless nights fixing bugs in third-party programs just so they could keep running on Windows 95.""
A lot of developers and engineers don't agree with this way of working. If the application did something bad, or relied on some undocumented behavior, they think, it should just break when the OS gets upgraded. The developers of the Macintosh OS at Apple have always been in this camp. It's why so few applications from the early days of the Macintosh still work. For example, a lot of developers used to try to make their Macintosh applications run faster by copying pointers out of the jump table and calling them directly instead of using the interrupt feature of the processor like they were supposed to. Even though somewhere in Inside Macintosh, Apple's official Bible of Macintosh programming, there was a tech note saying ""you can't do this,"" they did it, and it worked, and their programs ran faster... until the next version of the OS came out and they didn't run at all. If the company that made the application went out of business (and most of them did), well, tough luck, bubby. 
To contrast, I've got DOS applications that I wrote in 1983 for the very original IBM PC that still run flawlessly, thanks to the Raymond Chen Camp at Microsoft. I know, it's not just Raymond, of course: it's the whole modus operandi of the core Windows API team. But Raymond has publicized it the most through his excellent website The Old New Thing so I'll name it after him.
That's one camp. The other camp is what I'm going to call the MSDN Magazine camp, which I will name after the developer's magazine full of exciting articles about all the different ways you can shoot yourself in the foot by using esoteric combinations of Microsoft products in your own software. The MSDN Magazine Camp is always trying to convince you to use new and complicated external technology like COM+, MSMQ, MSDE, Microsoft Office, Internet Explorer and its components, MSXML, DirectX (the very latest version, please), Windows Media Player, and Sharepoint... Sharepoint! which nobody has; a veritable panoply of external dependencies each one of which is going to be a huge headache when you ship your application to a paying customer and it doesn't work right. The technical name for this is DLL Hell. It works here: why doesn't it work there?
The Raymond Chen Camp believes in making things easy for developers by making it easy to write once and run anywhere (well, on any Windows box). The MSDN Magazine Camp believes in making things easy for developers by giving them really powerful chunks of code which they can leverage, if they are willing to pay the price of incredibly complicated deployment and installation headaches, not to mention the huge learning curve. The Raymond Chen camp is all about consolidation. Please, don't make things any worse, let's just keep making what we already have still work. The MSDN Magazine Camp needs to keep churning out new gigantic pieces of technology that nobody can keep up with.
Here's why this matters.
Microsoft Lost the Backwards Compatibility Religion
Inside Microsoft, the MSDN Magazine Camp has won the battle. 
The first big win was making Visual Basic.NET not backwards-compatible with VB 6.0. This was literally the first time in living memory that when you bought an upgrade to a Microsoft product, your old data (i.e. the code you had written in VB6) could not be imported perfectly and silently. It was the first time a Microsoft upgrade did not respect the work that users did using the previous version of a product. 
And the sky didn't seem to fall, not inside Microsoft. VB6 developers were up in arms, but they were disappearing anyway, because most of them were corporate developers who were migrating to web development anyway. The real long term damage was hidden.
With this major victory under their belts, the MSDN Magazine Camp took over. Suddenly it was OK to change things. IIS 6.0 came out with a different threading model that broke some old applications. I was shocked to discover that our customers with Windows Server 2003 were having trouble running FogBugz. Then .NET 1.1 was not perfectly backwards compatible with 1.0. And now that the cat was out of the bag, the OS team got into the spirit and decided that instead of adding features to the Windows API, they were going to completely replace it. Instead of Win32, we are told, we should now start getting ready for WinFX: the next generation Windows API. All different. Based on .NET with managed code. XAML. Avalon. Yes, vastly superior to Win32, I admit it. But not an upgrade: a break with the past.
Outside developers, who were never particularly happy with the complexity of Windows development, have defected from the Microsoft platform en-masse and are now developing for the web. Paul Graham, who created Yahoo! Stores in the early days of the dotcom boom, summarized it eloquently: ""There is all the more reason for startups to write Web-based software now, because writing desktop software has become a lot less fun. If you want to write desktop software now you do it on Microsoft's terms, calling their APIs and working around their buggy OS. And if you manage to write something that takes off, you may find that you were merely doing market research for Microsoft.""
Microsoft got big enough, with too many developers, and they were too addicted to upgrade revenues, so they suddenly decided that reinventing everything was not too big a project. Heck, we can do it twice. The old Microsoft, the Microsoft of Raymond Chen, might have implemented things like Avalon, the new graphics system, as a series of DLLs that can run on any version of Windows and which could be bundled with applications that need them. There's no technical reason not to do this. But Microsoft needs to give you a reason to buy Longhorn, and what they're trying to pull off is a sea change, similar to the sea change that occurred when Windows replaced DOS. The trouble is that Longhorn is not a very big advance over Windows XP; not nearly as big as Windows was over DOS. It probably won't be compelling enough to get people to buy all new computers and applications like they did for Windows. Well, maybe it will, Microsoft certainly needs it to be, but what I've seen so far is not very convincing. A lot of the bets Microsoft made are the wrong ones. For example, WinFS, advertised as a way to make searching work by making the file system be a relational database, ignores the fact that the real way to make searching work is by making searching work. Don't make me type metadata for all my files that I can search using a query language. Just do me a favor and search the damned hard drive, quickly, for the string I typed, using full-text indexes and other technologies that were boring in 1973.
Automatic Transmissions Win the Day
Don't get me wrong... I think .NET is a great development environment and Avalon with XAML is a tremendous advance over the old way of writing GUI apps for Windows. The biggest advantage of .NET is the fact that it has automatic memory management.
A lot of us thought in the 1990s that the big battle would be between procedural and object oriented programming, and we thought that object oriented programming would provide a big boost in programmer productivity. I thought that, too. Some people still think that. It turns out we were wrong. Object oriented programming is handy dandy, but it's not really the productivity booster that was promised. The real significant productivity advance we've had in programming has been from languages which manage memory for you automatically. It can be with reference counting or garbage collection; it can be Java, Lisp, Visual Basic (even 1.0), Smalltalk, or any of a number of scripting languages. If your programming language allows you to grab a chunk of memory without thinking about how it's going to be released when you're done with it, you're using a managed-memory language, and you are going to be much more efficient than someone using a language in which you have to explicitly manage memory. Whenever you hear someone bragging about how productive their language is, they're probably getting most of that productivity from the automated memory management, even if they misattribute it.
SidebarWhy does automatic memory management make you so much more productive? 1) Because you can write f(g(x)) without worrying about how to free the return value from g, which means you can use functions which return interesting complex data types and functions which transform interesting complex data types, in turn allowing you to work at a higher level of abstraction. 2) Because you don't have to spend any time writing code to free memory or tracking down memory leaks. 3) Because you don't have to carefully coordinate the exit points from your functions to make sure things are cleaned up properly.
Racing car aficionados will probably send me hate mail for this, but my experience has been that there is only one case, in normal driving, where a good automatic transmission is inferior to a manual transmission. Similarly in software development: in almost every case, automatic memory management is superior to manual memory management and results in far greater programmer productivity.
If you were developing desktop applications in the early years of Windows, Microsoft offered you two ways to do it: writing C code which calls the Windows API directly and managing your own memory, or using Visual Basic and getting your memory managed for you. These are the two development environments I have used the most, personally, over the last 13 years or so, and I know them inside-out, and my experience has been that Visual Basic is significantly more productive. Often I've written the same code, once in C++ calling the Windows API and once in Visual Basic, and C++ always took three or four times as much work. Why? Memory management. The easiest way to see why is to look at the documentation for any Windows API function that needs to return a string. Look closely at how much discussion there is around the concept of who allocates the memory for the string, and how you negotiate how much memory will be needed. Typically, you have to call the function twice-on the first call, you tell it that you've allocated zero bytes, and it fails with a ""not enough memory allocated"" message and conveniently also tells you how much memory you need to allocate. That's if you're lucky enough not to be calling a function which returns a list of strings or a whole variable-length structure. In any case, simple operations like opening a file, writing a string, and closing it using the raw Windows API can take a page of code. In Visual Basic similar operations can take three lines.
So, you've got these two programming worlds. Everyone has pretty much decided that the world of managed code is far superior to the world of unmanaged code. Visual Basic was (and probably remains) the number one bestselling language product of all time and developers preferred it over C or C++ for Windows development, although the fact that ""Basic"" was in the name of the product made hardcore programmers shun it even though it was a fairly modern language with a handful of object-oriented features and very little leftover gunk (line numbers and the LET statement having gone the way of the hula hoop). The other problem with VB was that deployment required shipping a VB runtime, which was a big deal for shareware distributed over modems, and, worse, let other programmers see that your application was developed in (the shame!) Visual Basic.
One Runtime To Rule Them All
And along came .NET. This was a grand project, the super-duper unifying project to clean up the whole mess once and for all. It would have memory management, of course. It would still have Visual Basic, but it would gain a new language, one which is in spirit virtually the same as Visual Basic but with the C-like syntax of curly braces and semicolons. And best of all, the new Visual Basic/C hybrid would be called Visual C#, so you would not have to tell anyone you were a ""Basic"" programmer any more. All those horrid Windows functions with their tails and hooks and backwards-compatibility bugs and impossible-to-figure-out string-returning semantics would be wiped out, replaced by a single clean object oriented interface that only has one kind of string. One runtime to rule them all. It was beautiful. And they pulled it off, technically. .NET is a great programming environment that manages your memory and has a rich, complete, and consistent interface to the operating system and a rich, super complete, and elegant object library for basic operations.
And yet, people aren't really using .NET much.
Oh sure, some of them are.
But the idea of unifying the mess of Visual Basic and Windows API programming by creating a completely new, ground-up programming environment with not one, not two, but three languages (or are there four?) is sort of like the idea of getting two quarreling kids to stop arguing by shouting ""shut up!"" louder than either of them. It only works on TV. In real life when you shout ""shut up!"" to two people arguing loudly you just create a louder three-way argument. 
(By the way, for those of you who follow the arcane but politically-charged world of blog syndication feed formats, you can see the same thing happening over there. RSS became fragmented with several different versions, inaccurate specs and lots of political fighting, and the attempt to clean everything up by creating yet another format called Atom has resulted in several different versions of RSS plus one version of Atom, inaccurate specs and lots of political fighting. When you try to unify two opposing forces by creating a third alternative, you just end up with three opposing forces. You haven't unified anything and you haven't really fixed anything.)
So now instead of .NET unifying and simplifying, we have a big 6-way mess, with everybody trying to figure out which development strategy to use and whether they can afford to port their existing applications to .NET. 
No matter how consistent Microsoft is in their marketing message (""just use .NET-trust us!""), most of their customers are still using C, C++, Visual Basic 6.0, and classic ASP, not to mention all the other development tools from other companies. And the ones that are using .NET are using ASP.NET to develop web applications, which run on a Windows server but don't require Windows clients, which is a key point I'll talk about more when I talk about the web.
Oh, Wait, There's More Coming!
Now Microsoft has so many developers cranking away that it's not enough to reinvent the entire Windows API: they have to reinvent it twice. At last year's PDC they preannounced the next major version of their operating system, codenamed Longhorn, which will contain, among other things, a completely new user interface API, codenamed Avalon, rebuilt from the ground up to take advantage of modern computers' fast display adapters and realtime 3D rendering. And if you're developing a Windows GUI app today using Microsoft's ""official"" latest-and-greatest Windows programming environment, WinForms, you're going to have to start over again in two years to support Longhorn and Avalon. Which explains why WinForms is completely stillborn. Hope you haven't invested too much in it. Jon Udell found a slide from Microsoft labelled ""How Do I Pick Between Windows Forms and Avalon?"" and asks, ""Why do I have to pick between Windows Forms and Avalon?"" A good question, and one to which he finds no great answer.
So you've got the Windows API, you've got VB, and now you've got .NET, in several language flavors, and don't get too attached to any of that, because we're making Avalon, you see, which will only run on the newest Microsoft operating system, which nobody will have for a loooong time. And personally I still haven't had time to learn .NET very deeply, and we haven't ported Fog Creek's two applications from classic ASP and Visual Basic 6.0 to .NET because there's no return on investment for us. None. It's just Fire and Motion as far as I'm concerned: Microsoft would love for me to stop adding new features to our bug tracking software and content management software and instead waste a few months porting it to another programming environment, something which will not benefit a single customer and therefore will not gain us one additional sale, and therefore which is a complete waste of several months, which is great for Microsoft, because they have content management software and bug tracking software, too, so they'd like nothing better than for me to waste time spinning cycles catching up with the flavor du jour, and then waste another year or two doing an Avalon version, too, while they add features to their own competitive software. Riiiight.
No developer with a day job has time to keep up with all the new development tools coming out of Redmond, if only because there are too many dang employees at Microsoft making development tools!
It's Not 1990
Microsoft grew up during the 1980s and 1990s, when the growth in personal computers was so dramatic that every year there were more new computers sold than the entire installed base. That meant that if you made a product that only worked on new computers, within a year or two it could take over the world even if nobody switched to your product. That was one of the reasons Word and Excel displaced WordPerfect and Lotus so thoroughly: Microsoft just waited for the next big wave of hardware upgrades and sold Windows, Word and Excel to corporations buying their next round of desktop computers (in some cases their first round). So in many ways Microsoft never needed to learn how to get an installed base to switch from product N to product N+1. When people get new computers, they're happy to get all the latest Microsoft stuff on the new computer, but they're far less likely to upgrade. This didn't matter when the PC industry was growing like wildfire, but now that the world is saturated with PCs most of which are Just Fine, Thank You, Microsoft is suddenly realizing that it takes much longer for the latest thing to get out there. When they tried to ""End Of Life"" Windows 98, it turned out there were still so many people using it they had to promise to support that old creaking grandma for a few more years.
Unfortunately, these Brave New Strategies, things like .NET and Longhorn and Avalon, trying to create a new API to lock people into, can't work very well if everybody is still using their good-enough computers from 1998. Even if Longhorn ships when it's supposed to, in 2006, which I don't believe for a minute, it will take a couple of years before enough people have it that it's even worth considering as a development platform. Developers, developers, developers, and developers are not buying into Microsoft's multiple-personality-disordered suggestions for how we should develop software.
Enter the Web
I'm not sure how I managed to get this far without mentioning the Web. Every developer has a choice to make when they plan a new software application: they can build it for the web or they can build a ""rich client"" application that runs on PCs. The basic pros and cons are simple: Web applications are easier to deploy, while rich clients offer faster response time enabling much more interesting user interfaces.
Web Applications are easier to deploy because there's no installation involved. Installing a web application means typing a URL in the address bar. Today I installed Google's new email application by typing Alt+D, gmail, Ctrl+Enter. There are far fewer compatibility problems and problems coexisting with other software. Every user of your product is using the same version so you never have to support a mix of old versions. You can use any programming environment you want because you only have to get it up and running on your own server. Your application is automatically available at virtually every reasonable computer on the planet. Your customers' data, too, is automatically available at virtually every reasonable computer on the planet.
But there's a price to pay in the smoothness of the user interface. Here are a few examples of things you can't really do well in a web application:
Create a fast drawing program
Build a real-time spell checker with wavy red underlines
Warn users that they are going to lose their work if they hit the close box of the browser
Update a small part of the display based on a change that the user makes without a full roundtrip to the server
Create a fast keyboard-driven interface that doesn't require the mouse
Let people continue working when they are not connected to the Internet
These are not all big issues. Some of them will be solved very soon by witty Javascript developers. Two new web applications, Gmail and Oddpost, both email apps, do a really decent job of working around or completely solving some of these issues. And users don't seem to care about the little UI glitches and slowness of web interfaces. Almost all the normal people I know are perfectly happy with web-based email, for some reason, no matter how much I try to convince them that the rich client is, uh, richer.
So the Web user interface is about 80% there, and even without new web browsers we can probably get 95% there. This is Good Enough for most people and it's certainly good enough for developers, who have voted to develop almost every significant new application as a web application.
Which means, suddenly, Microsoft's API doesn't matter so much. Web applications don't require Windows.
It's not that Microsoft didn't notice this was happening. Of course they did, and when the implications became clear, they slammed on the brakes. Promising new technologies like HTAs and DHTML were stopped in their tracks. The Internet Explorer team seems to have disappeared; they have been completely missing in action for several years. There's no way Microsoft is going to allow DHTML to get any better than it already is: it's just too dangerous to their core business, the rich client. The big meme at Microsoft these days is: ""Microsoft is betting the company on the rich client."" You'll see that somewhere in every slide presentation about Longhorn. Joe Beda, from the Avalon team, says that ""Avalon, and Longhorn in general, is Microsoft's stake in the ground, saying that we believe power on your desktop, locally sitting there doing cool stuff, is here to stay. We're investing on the desktop, we think it's a good place to be, and we hope we're going to start a wave of excitement...""
The trouble is: it's too late.
I'm a Little Bit Sad About This, Myself
I'm actually a little bit sad about this, myself. To me the Web is great but Web-based applications with their sucky, high-latency, inconsistent user interfaces are a huge step backwards in daily usability. I love my rich client applications and would go nuts if I had to use web versions of the applications I use daily: Visual Studio, CityDesk, Outlook, Corel PhotoPaint, QuickBooks. But that's what developers are going to give us. Nobody (by which, again, I mean ""fewer than 10,000,000 people"") wants to develop for the Windows API any more. Venture Capitalists won't invest in Windows applications because they're so afraid of competition from Microsoft. And most users don't seem to care about crappy Web UIs as much as I do. 
And here's the clincher: I noticed (and confirmed this with a recruiter friend) that Windows API programmers here in New York City who know C++ and COM programming earn about $130,000 a year, while typical Web programmers using managed code languages (Java, PHP, Perl, even ASP.NET) earn about $80,000 a year. That's a huge difference, and when I talked to some friends from Microsoft Consulting Services about this they admitted that Microsoft had lost a whole generation of developers. The reason it takes $130,000 to hire someone with COM experience is because nobody bothered learning COM programming in the last eight years or so, so you have to find somebody really senior, usually they're already in management, and convince them to take a job as a grunt programmer, dealing with (God help me) marshalling and monikers and apartment threading and aggregates and tearoffs and a million other things that, basically, only Don Box ever understood, and even Don Box can't bear to look at them any more.
Much as I hate to say it, a huge chunk of developers have long since moved to the web and refuse to move back. Most .NET developers are ASP.NET developers, developing for Microsoft's web server. ASP.NET is brilliant; I've been working with web development for ten years and it's really just a generation ahead of everything out there. But it's a server technology, so clients can use any kind of desktop they want. And it runs pretty well under Linux using Mono. 
None of this bodes well for Microsoft and the profits it enjoyed thanks to its API power. The new API is HTML, and the new winners in the application development marketplace will be the people who can make HTML sing.
	"
https://www.joelonsoftware.com/2004/07/25/news-15/,News,2004-07-25T00:06:13+00:00,,Joel Spolsky,News,"
	
I know that Rome empties out in August, but if any Joel on Software readers plan to be there on Monday, August 16th, it would be nice to get together for dinner. So far, we've done these dinners in Berkeley, Oslo, and Montreal, with great success. We'll take over a room in a restaurant, eat, drink, be merry, and talk about software development. If you can attend, or would like to suggest a good place to meet, post a message here.
Marshall T. Rose, in RFC 3117: ""Counter-intuitively, Postel's robustness principle ('be conservative in what you send, liberal in what you accept') often leads to deployment problems. Why? When a new implementation is initially fielded, it is likely that it will encounter only a subset of existing implementations. If those implementations follow the robustness principle, then errors in the new implementation will likely go undetected. The new implementation then sees some, but not widespread deployment. This process repeats for several new implementations. Eventually, the not-quite-correct implementations run into other implementations that are less liberal than the initial set of implementations. The reader should be able to figure out what happens next.""
	"
https://www.joelonsoftware.com/2004/07/23/news-14/,News,2004-07-23T00:06:12+00:00,,Joel Spolsky,News,"
	Microsoft puts Lookout up on their Download Center. (Update: no, it's on the MSN Sandbox. Scurry, scurry.)
	"
https://www.joelonsoftware.com/2004/07/19/news-13/,News,2004-07-19T00:06:11+00:00,,Joel Spolsky,News,"
	One of the biggest weaknesses of Microsoft Outlook has been the search feature. It takes so long for Outlook to search that the feature is almost useless.
Searching is not a hard problem, and a lot of plug-ins sprang up to solve this problem. Lookout was one of the best. It just works. Searching five years of accumulated email takes less than a second. Indexing is done quietly in the background and never slows down your system. Suddenly email is useful again.
So what happens? Microsoft buys Lookout. That's nice, good for them.
But look more closely at the Q&A:
Q: Why can't I download Lookout anymore?
We will be focusing our efforts on integrating our expertise and working on next-generation technologies.
Huh? What's going on?
Q: What is Microsoft going to do with Lookout? ...
The existing Lookout product will no longer be available, but its technology will be part of an exciting vision that MSN has for delivering new and innovative search services.
MSN?! Lookout is going to be part of MSN? What about Outlook?
Our vision is to take search beyond today's basic Internet search services to deliver direct answers to people's questions, and help them find information from a broad range of sources.
What? What the hell does this have to do with searching email? Could Microsoft have possibly bought Lookout just to shut them down? Even at my most paranoid, I can't for the life of me figure out why Microsoft wants searching in Outlook to be worthless. Maybe just Hanlon's Razor: ""Never attribute to malice that which is adequately explained by stupidity.""
Update: They figured it out on the discussion group. Lookout is using an open-source component for searching, which Microsoft can't redistribute. The only part of Lookout that Microsoft allegedly cares about, the search engine, is released under the Apache license. The only part of Lookout which Microsoft can use is the Outlook integration, and they don't seem to care about that. Methinks this is one of those ""HR Acquisitions,"" wherein Microsoft buys a company for a few bucks because it's the only way to hire someone they want.
	"
https://www.joelonsoftware.com/2004/07/16/news-12/,News,2004-07-16T00:06:10+00:00,,Joel Spolsky,News,"
	Ah, finally, my second book is on its way to the printer.
Yes, it's mostly reprints of articles which you've already read on this site over the last four years. But there are three huge advantages to the book version. 1) It has been professionally edited. I have finally learned to use semicolons instead of commas to separate complete sentences, and somebody smarter than me has sorted out all the ""whiches"" and the ""thats."" 2) You don't have to read it on a computer. 3) You can hurl it at your boss or coworkers to make a point, and the impact will be much more powerful than emailing a URL.
I'm hoping it will be out in a month or so.
	"
https://www.joelonsoftware.com/2004/08/27/news-22/,News,2004-08-27T00:06:20+00:00,,Joel Spolsky,News,"
	In June I wrote ""The old Microsoft, the Microsoft of Raymond Chen, might have implemented things like Avalon, the new graphics system, as a series of DLLs that can run on any version of Windows and which could be bundled with applications that need them. There's no technical reason not to do this. But Microsoft needs to give you a reason to buy Longhorn...""
Microsoft: ""Microsoft also announced that the Windows WinFX developer technologies, including the new presentation subsystem code-named 'Avalon' and the new communication subsystem code-named Indigo, will be made available for Microsoft(R) Windows XP and Windows Server 2003 in 2006.""
(MSDNMag 0, RaymondChen 1!)
I've been hard at work on some new code for the discussion groups. Hopefully I'll get an experimental build up somewhere in a week or two and we can start playing with it. It won't look very different from the outside, so don't get too excited. I think probably the biggest visible change will be that when you post something, you'll be able to provide a URL that your name links to. It's a small feature that I'm hoping will have a big effect on the anthropology of the discussion group. Like everything else, it's an experiment. Have a great weekend!
	"
https://www.joelonsoftware.com/2004/08/25/news-21/,News,2004-08-25T00:06:19+00:00,,Joel Spolsky,News,"
	Dare Obasanjo at Microsoft read How Microsoft Lost the API War and took it to heart: ""The Microsoft culture is about creating the newest, latest greatest thing that 'changes the world' not improving what is already out there and working for customers. When I read various Microsoft blogs and MSDN headlines about how even though we've made paradigm shifts in developer technologies in the recent years we aren't satisfied and want to introduce radically new and different technologies all over again. This bothers me. I hate the fact that 'you have to rewrite a lot of your code' is a common answer to questions a customer might ask about how to leverage new or upcoming functionality in a developer technology.""
It's great that some people Microsoft took my article to heart (not just the MSDN editors, who have been running victory laps). Now I have a confession. The reason it took me so long to write this article is that I was afraid Microsoft would actually listen to me, even in some small degree, even if it's just the System.Xml.XmlDocument class. As a developer, I would much prefer if the Raymond Chen camp won - it sure makes my life easier - but as a competitor to Microsoft, I have to assume that the stupider Microsoft is, the better.
	"
https://www.joelonsoftware.com/2004/08/19/news-20/,News,2004-08-19T00:06:18+00:00,,Joel Spolsky,News,"
	Almost everyone who has worked with programmers or mathematicians knows someone with at least a light form of Asperger's Syndrome: the well-recognized symptoms include an inability to interpret peoples' emotions from their facial expressions, incredibly logical thought processes that make math easy but human relations darn near impossible, and fear of physical contact with other people.
The Curious Incident of the Dog in the Night-time is quite possibly the best book I've read this year. It purports to be a novel written by Christopher Boone, a fifteen year old boy who suffers from Asperger's, and it hits the mark spot on. Christopher finds a neighbor's dog dead with a pitchfork stuck in it:
I decided that the dog was probably killed with the fork because I could not see any other wounds in the dog and I do not think you would stick a garden fork into a dog after it had died for some other reason, like cancer for example, or a road accident. But I could not be certain about this.
It's funny, but it's also logical, in the irritating way that so many programmers are logical beyond reason. Poor Christopher can barely take a train - the man behind the window asks him if he wants a single ticket or a round trip, which he doesn't understand.
""And he said, 'Do you want to go one way, or do you want to go and come back?'
And I said, 'I want to stay there when I get there.'
And he said, 'For how long?'
And I said, 'Until I go to university.'
And he said, 'Single, then'.""
Christopher numbers the chapters with prime numbers, and can't resist including a mathematical proof as an appendix, but he doesn't know when people are angry with him and hates being touched so much his parents can't hug him. I must warn you not to start reading it before you go to sleep because nobody I know has been able to put it down without reading through to the end.
	"
https://www.joelonsoftware.com/2004/08/19/news-19/,News,2004-08-19T00:06:17+00:00,,Joel Spolsky,News,"
	My second book has finally been published!
The official title is Joel on Software: And on Diverse and Occasionally Related Matters That Will Prove of Interest to Software Developers, Designers, and Managers, and to Those Who, Whether by Good Fortune or Ill Luck, Work with Them in Some Capacity, but you can call it Joel+37 or Joel, The Book.
It's meant to be a ""best of"" the website, in other words, there's not a heck of a lot of new material. Gary Cornell and I chose what we thought were the most timeless 45 articles (362 pages) from the Joel on Software archive, and I spent some time cleaning it up and adding occasional postscripts for the book version. Besides the fact that you can read it in the bath, the biggest advantage of the book is that when you throw it at your colleague's head after a very frustrating argument about whether to throw away all your code and start over from scratch, it makes more of an impact than a URL. So buy several copies and keep them handy for winning arguments at work. We tried to keep the price low (it's under $17 today at Amazon).
(The first book was User Interface Design for Programmers, still in print).
For some reason there are already four reviews of this book up at Amazon.com which don't make any sense; they look like reviews of an Oracle book I'd like to read. If you like the material you've read on this site, I'd sure appreciate if you could write a little review on Amazon and drown out the comments there about somebody else's book.
Postscript: Wow! The book is #1 in ""Computers"" on Amazon! Thanks!
Postscript Two: Thanks to those of you who attended the Joel on Software dinner in Rome (pictures), even if we did have to drag in people from Zurich and London and walk around for a while hunting for an open restaurant.
Postscript Three: The only case I know of where a manual transmission beats a good automatic transmission is when you're driving on the highway, and you know that sometime soon you're going to have to pass somebody, so you downshift to third gear to get ready to accelerate. An automatic transmission can't read your mind, so it stays in 4th or 5th, and has to downshift when you floor the accelerator, thus creating a temporary hesitation between the time you press the gas and the time the acceleration starts which wouldn't exist if you were already in 3rd gear.
	"
https://www.joelonsoftware.com/2004/08/06/news-18/,News,2004-08-06T00:06:16+00:00,,Joel Spolsky,News,"
	I'm just about to leave for the annual Spolsky family vacation... this year we've got a villa in Umbria, Italy. I'll be passing through Rome on Monday, August 16th. We've got a few people who have already confirmed to meet for a dinner there, so if you'll be in town, let's meet up!
Where: The lobby of the Aleph HotelAddress: Via di San Basilio, 15When: 20.00 lunedi 16 agosto 2004
I'll make sure the concierge knows where I am. At 8 PM when we see how many people show up, we'll find a good restaurant that's open (not easy in August in Rome, I'm told) and talk about software (and food (and the heat)).
	"
https://www.joelonsoftware.com/2004/08/04/news-17/,News,2004-08-04T00:06:15+00:00,,Joel Spolsky,News,"
	Eric Sink: ""It's okay to be in awe of these great hackers. But as a practical matter, small ISVs would be much better off hiring professionals."" Agreed!
Which reminds me, I can't wait for Johanna Rothman's new book on hiring geeks to come out. I'm reading the manuscript now and it's a great book on a topic that doesn't get a lot of coverage.
	"
https://www.joelonsoftware.com/2004/08/03/news-16/,News,2004-08-03T00:06:14+00:00,,Joel Spolsky,News,"
	SoftwareCEO.com has a feature about Fog Creek Software on their home page this week: ""In fact, Spolsky takes a skeptical view of almost every bit of received wisdom he's ever heard about running a software company. His views are refreshing and thought-provoking, and they certainly work in his niche."" (Read it this week, as SoftwareCEO archives are open to paid subscribers only.)
	"
https://www.joelonsoftware.com/2004/09/26/news-29/,News,2004-09-26T00:06:27+00:00,,Joel Spolsky,News,"
	Doug Kaye interviewed me for IT Conversations; you can listen to the audio interview. Dave Walker also interviewed me for the Sydney Morning Herald and Melbourne's The Age; an extended verison of that article is on his site Shorewalker.com. Finally, Mary Jo Foley came by the Fog Creek office to interview me for Microsoft Watch, which is a subscription-only newsletter.
	"
https://www.joelonsoftware.com/2004/09/14/news-28/,News,2004-09-14T00:06:26+00:00,,Joel Spolsky,News,"
	Incrementalists versus Completionists
Rands: ""Completionists are dreamers. They have a very good idea of how to solve a given problem and that answer is SOLVE IT RIGHT. Their mantra is, 'If you're going to spend the time to solve a problem, solve it in a manner that you aren't going to be solving it AGAIN in three months.'""
We Won't Be Fooled Again
Dan Appleman: ""Sure, if you're writing software with a lifespan of a few years, Windows Forms is a great way to go. But we all know that software, enterprise software especially, lives a long time. Can Microsoft categorically promise to maintain a full commitment to development, maintenance and support of Windows Forms for the next 15 years?""
Discussion Group Software
We've been quietly making some improvements to the beta discussion group software. 
Today we rolled out Brett's new full-text search feature. It relies on the database engine to provide full-text search, and we're running Microsoft SQL Server, which has rather poor full-text search capabilities: for example, it requires a manual process to rebuild the index, which we schedule for every 15 minutes, so it won't find anything posted in the last few minutes.
I also added an RSS feed. Originally I wanted to provide full text of all topics and replies in the last three days so that you could use an RSS reader to read the discussion group. Unfortunately that would have resulted in a huge download, and since RSS readers bang on the site every hour or three, our bandwidth usage would have been absurd. So I had to settle for full text of the original topic but not of replies.
And finally we got Summer Intern Ben's excellent Bayesian filtering code working... due to a couple of configuration problems it wasn't running right. The idea is to delete comment spam before anyone sees it. It's hard to tell if the filter works yet because it needs more training, but so far it's doing pretty well. If you think comment spam is not a big problem, you haven't moderated a discussion group lately... this is the number one priority for spammers these days, since email filters are starting to work pretty well and spamming a lot of discussion groups is perceived as a good way to trick Google into giving a site prominent placement.
We admit to three strategies to prevent comment spam:
Bayesian filtering which can be trained to remove comment spam instantly
Not allowing new comments on old posts, so that comment spam can't be hidden in posts which nobody but Google visits any more
Using a META tag to ask search engines not to follow URLs from discussion topics. Although this technique prevents comment spam from working it doesn't prevent it from happening because spammers don't seem to particularly care if a given spam works or not.
By ""we admit to"" I imply that there are other things we do which we don't talk about too much because revealing them would make it that much easier for spammers to work around them, thus reducing the cost of spamming, thus making it more economically feasible.
One side affect of the Bayesian filter is that if it finds a suspicious topic, rather than letting it through, it will flag it for a human moderator. The moderator can then allow it to be posted (which trains the filter) or leave it unshown. The effect of this is that rarely, new posts won't appear until a human approves them. This should happen less and less as the filter learns more.
	"
https://www.joelonsoftware.com/2004/09/11/news-27/,News,2004-09-11T00:06:25+00:00,,Joel Spolsky,News,"
	In Memoriam
	"
https://www.joelonsoftware.com/2004/09/06/its-not-just-usability/,It’s Not Just Usability,2004-09-06T00:14:31+00:00,2016-12-05T19:09:42+00:00,Joel Spolsky,"Software designer, News","
	For years and years, self-fashioned pundits, like, uh, me, have been nattering endlessly about usability, and how important it is to make software usable. Jakob Nielsen has a mathematical formula he'll reveal to you in exchange for $122 which you can use to calculate the value of usability. (If the expected value of usability is greater than $122, I guess you make a profit.)
I have a book you can buy for a lot less that tells you some of the principles of designing usable software, but there's no math involved, and you'll be out the price of the book.
In that book, on page 31, I showed an example from what was, at the time, the most popular software application on Earth, Napster. The main Napster window used buttons to flip between the five screens. Due to a principle in usability called affordance, instead of buttons, it really should have had tabs, which was the point I was trying to make.
And yet, Napster was the most popular software application on Earth.
In an early version of the manuscript, I actually wrote something like ""this just goes to show you that usability ain't all that important,"" which was an odd thing to be writing in a book about usability. I was sort of relieved when the typesetter announced that I had to shorten that paragraph. So I deleted the sentence.
But there's a scary element of truth to it-scary to UI professionals, at least: an application that does something really great that people really want to do can be pathetically unusable, and it will still be a hit. And an application can be the easiest thing in the world to use, but if it doesn't do anything anybody wants, it will flop. UI consultants are constantly on the defensive, working up improbable ROI formulas about the return on investment clients will get from their $75,000 usability project, precisely because usability is perceived as ""optional,"" and the scary thing is, in a lot of cases, it is. In a lot of cases. The CNN website has nothing to be gained from a usability consultant. I'll go out on a limb and say that there is not a single content-based website online that would gain even one dollar in revenue by improving usability, because content-based websites (by which I mean, websites that are not also applications) are already so damn usable.
Anyway.
My goal today is not to whine about how usability is not important... usability is important at the margins, and there a lots of examples where bad usability kills people in small planes, creates famine and pestilence, etc.
My goal today is to talk about the next level of software design issues, after you've got the UI right: designing the social interface.
I need to explain that, I guess.
Software in the 1980s, when usability was ""invented,"" was all about computer-human interaction. A lot of software still is. But the Internet brings us a new kind of software: software that's about human-human interaction.
Discussion groups. Social networking. Online classifieds. Oh, and, uh, email. It's all software that mediates between people, not between the human and the computer.
When you're writing software that mediates between people, after you get the usability right, you have to get the social interface right. And the social interface is more important. The best UI in the world won't save software with an awkward social interface.
The best way to illustrate social interfaces is with a few examples of failures and successes.
Some Examples
First, a failing social interface. Every week I get an email from somebody I've never heard of asking me to become a part of his or her social network. I usually don't know the person, so I feel a little bit miffed and delete the message. Someone told me why this happens: one of those social networking software companies has a tool that goes through your email address book and sends email to everyone asking them to join in. Now, combine this with the feature that some email software saves the sender's address of every incoming message, and the feature that when you go to sign up for the Joel on Software email bulletin you get a confirmation message asking if you really want to join, and voila: all kinds of people who I don't know are running software that is inadvertently asking me to confirm that I'm their friend. Thank you for subscribing to my newsletter, but no, I'm not going to introduce you to Bill Gates. I currently have a policy of not joining any of these social networks, because they strike me as going strongly against the grain of how human networks really work.
Now, let's look at a successful social interface. Many humans are less inhibited when they're typing than when they are speaking face-to-face. Teenagers are less shy. With cellphone text messages, they're more likely to ask each other out on dates. That genre of software was so successful socially that it's radically improving millions of people's love lives (or at least their social calendars). Even though text messaging has a ghastly user interface, it became extremely popular with the kids. The joke of it is that there's a much better user interface built into every cellphone for human to human communication: this clever thing called ""phone calls."" You dial a number after which everything you say can be heard by the other person, and vice versa. It's that simple. But it's not as popular in some circles as this awkward system where you break your thumbs typing huge strings of numbers just to say ""damn you're hot,"" because that string of numbers gets you a date, and you would never have the guts to say ""damn you're hot"" using your larynx.
Another social software success is ebay. When I first heard about ebay, I said, ""Nonsense! That will never work. Nobody's going to send money to some random person they encountered on the Internet in hopes that person will out of the goodness of their hearts actually ship them some merchandise."" A lot of people thought this. We were all wrong. Wrong, wrong, wrong. Ebay made a big bet on the cultural anthropology of human beings and won. The great thing about ebay is that it was a huge success precisely because it seemed like a terrible idea at the time, and so nobody else tried it, until ebay locked in the network effects and first-mover advantage.
In addition to absolute success and failures in social software, there are also social software side effects. The way social software behaves determines a huge amount about the type of community that develops. Usenet clients have this big-R command which is used to reply to a message while quoting the original message with those elegant >'s in the left column. And the early newsreaders were not threaded, so if you wanted to respond to someone's point coherently, you had to quote them using the big-R feature. This led to a particularly Usenet style of responding to an argument: the line-by-line nitpick. It's fun for the nitpicker but never worth reading. (By the way, the political bloggers, newcomers to the Internet, have reinvented this technique, thinking they were discovering something fun and new, and called it fisking, for reasons I won't go into. Don't worry, it's not dirty.) Even though human beings had been debating for centuries, a tiny feature of a software product produced a whole new style of debating.
Small changes in software can make big differences in the way that software supports, or fails to support, its social goals. Danah Boyd has a great critique of social software networks, Autistic Social Software, blasting the current generation of this software for forcing people to behave autistically:
Consider, for a moment, the recent surge of interest in articulated social networks such as Friendster, Tribe, LinkedIn, Orkut and the like. These technologies attempt to formalize how people should construct and manage their relationships. They assume that you can rate your friends. In some cases, they procedurally direct how people can engage with new people by giving you an absolute process through which you can contact others.
While this approach certainly has its merits because it is computationally possible, i'm terrified when people think that this models social life. It's so simplistic that people are forced to engage as though they have autism, as though they must interact procedurally. This approach certainly aids people who need that kind of systematization, but it is not a model that universally makes sense. Furthermore, what are the implications of having technology prescribe mechanistic engagement? Do we really want a social life that encourages autistic interactions?
When software implements social interfaces while disregarding cultural anthropology, it's creepy and awkward and doesn't really work.
Designing Social Software
Let me give you an example of social interface design.
Suppose your user does something they shouldn't have done.
Good usability design says that you should tell them what they did wrong, and tell them how to correct it. Usability consultants are marketing this under the brand name ""Defensive Design.""
When you're working on social software, this is too naive.
Maybe the thing that they did wrong was to post an advertisement for Viagra on a discussion group.
Now you tell them, ""Sorry, Viagra is not a suitable topic. Your post has been rejected.""
Guess what they'll do? They'll post an advertisement for V1agra. (Either that, or they'll launch into a long boring rant about censorship and the First Amendment.)
With social interface engineering, you have to look at sociology and anthropology. In societies, there are freeloaders, scammers, and other miscreants. In social software, there will be people who try to abuse the software for their own profit at the expense of the rest of the society. Unchecked, this leads to something economists call the tragedy of the commons.
Whereas the goal of user interface design is to help the user succeed, the goal of social interface design is to help the society succeed, even if it means one user has to fail.
So a good social interface designer might say, let's not display an error message. Let's just pretend that the post about Viagra was accepted. Show it to the original poster, so he feels smug and moves on to the next inappropriate discussion group. But don't show it to anyone else.
Indeed one of the best ways to deflect attacks is to make it look like they're succeeding. It's the software equivalent of playing dead.
No, it doesn't work 100% of the time. It works 95% of the time, and it reduces the problems you'll have twenty-fold. Like everything else in sociology, it's a fuzzy heuristic. It kind of works a lot of the time, so it's worth doing, even if it's not foolproof. The Russian mafia with their phishing schemes will eventually work around it. The idiot Floridians in trailer parks trying to get rich quick will move on. 90% of the spam I get today is still so hopelessly naive about spam filters that it would even get caught by the pathetic junk filter built into Microsoft Outlook, and you've got to have really lame spam to get caught by that scrawny smattering of simplistic searchphrases.
Marketing Social Interfaces 
A few months ago I realized that a common theme in the software we've built at Fog Creek is an almost obsessive attention to getting the social interfaces right. For example, FogBugz has lots of features, and even more non-features, designed to make bug tracking actually happen. Time and time again customers tell me that their old bug tracking software was never getting used, because it did not align with the way people wanted to work together, but when they rolled out FogBugz, people actually starting using it, and became addicted to it, and it changed the way they worked together. I know that FogBugz works because we have a very high upgrade rate when there's a new version, which tells me FogBugz is not just shelfware, and because even customers who buy huge blocks of licenses keep coming back for more user licenses as the product spreads around their organization and really gets used. This is something I'm really proud of. Software used in teams usually fails to take hold, because it requires everyone on the team to change the way they work simultaneously, something which anthropologists will tell you is vanishingly unlikely. For that reason FogBugz has lots of design decisions which make it useful even for a single person on a team, and lots of design features which encourage it to spread to other members of the team gradually until everyone is using it.
The discussion group software used on this site, which will soon be for sale as a feature of FogBugz 4.0, is even more obsessed with getting the social interface aspects exactly right. There are dozens of features and non-features and design decisions which collectively lead to a very high level of interesting conversation with the best signal-to-noise ratio of any discussion group I've ever participated in. I wrote a lot about this in my article Building Communities with Software.
Since then, I've become even more devoted to the idea of the value of good social interface design: we bring in experts like Clay Shirky (a pioneer in the field), we do bold experiments on the poor citizens of the Joel on Software discussion group (many of which are so subtle as to be virtually unnoticeable, for example, the fact that we don't show you the post you're replying to while you type your reply in hopes of cutting down quoting, which makes it easier to read a thread), and we're investing heavily in advanced algorithms to reduce discussion group spam.
A New Field
Social interface design is still a field in its infancy. I'm not aware of any books on the subject; there are only a few people working in the research side of the field, and there's no organized science of social interface design. In the early days of usability design, software companies recruited ergonomics experts and human factors experts to help design usable products. Ergonomics experts knew a lot about the right height for a desk, but they didn't know how to design GUIs for file systems, so a new field arose. Eventually the new discipline of user interface design came into its own, and figured out the concepts like consistency, affordability, feedback, etc., which became the cornerstone of the science of UI design.
Over the next decade, I expect that software companies will hire people trained as anthropologists and ethnographers to work on social interface design. Instead of building usability labs, they'll go out into the field and write ethnographies. And hopefully, we'll figure out the new principles of social interface design. It's going to be fascinating... as fun as user interface design was in the 1980s... so stay tuned.
Discuss this topic on the Joel on Software Social Interface Design Forum.
	"
https://www.joelonsoftware.com/2004/09/06/news-26/,News,2004-09-06T00:06:24+00:00,,Joel Spolsky,News,"
	My Latest Article
Software in the 1980s, when usability was ""invented,"" was all about computer-human interaction. A lot of software still is. But the Internet brings us a new kind of software: software that's about human-human interaction. When you're writing software that mediates between people, after you get the usability right, you have to get the social interface right. And the social interface is more important. The best UI in the world won't save software with an awkward social interface. It's Not Just Usability
Workspace Quality
Someone posted a nice summary of links to information about the quality of workspace provided to software developers. ""Perhaps it can be useful to other software developers in a position to influence managers or may someday be in a position to make decisions about workspace design themselves.""
	"
https://www.joelonsoftware.com/2004/09/03/news-25/,News,2004-09-03T00:06:23+00:00,,Joel Spolsky,News,"
	I'm happy to announce that my friend, teacher, and competitor Eric Sink has agreed to host the new Business of Software forum.
Eric has been in the software industry from time immemorial. He built one of the first web browsers, Spyglass and founded the AbiWord project to make an open source word processor. His latest company is SourceGear, a highly successful Inc 500 software company in Champaign, Illinois which makes great source control management software. He writes a column on the business of software for MSDN and has his own weblog where he has been extremely generous with his knowledge of software business. I couldn't have a better host.
	"
https://www.joelonsoftware.com/2004/09/02/news-24/,News,2004-09-02T00:06:22+00:00,,Joel Spolsky,News,"
	In Usenet, whenever a single newsgroup got too large, it tended to fork. So from comp we got comp.sys.ibm.pc which split into smaller and smaller groups like the unloved comp.sys.ibm.pc.hardware.video, created because people were sick of talking about video drivers on the main group.
I didn't like forks, because they make discussions less interesting. I mean, it's bad enough there's a comp.software.windows.nt.40.microsoft.notepad, does there have to be a comp.software.windows.nt.40.microsoft.notepad.helpfile.index? Seriously now.
But my aversion to forking notwithstanding, there's just too much traffic in the Joel on Software discussion group. Things wind up scrolling off right away and discussion has to be fast and furious or you lose it. So as an experiment in forking, I've set up a few new groups:
The Business of Software
The Design of Software
The Human Side of Software
Whether Or Not It Is A Good Thing That Rory Slept With Dean
Just kidding about #4 there. The Gilmore Girls is holy. Can't mess with that.
If any of these groups doesn't have enough daily traffic, it'll go the way of the old New Yorkers group and the Delphi group, bless them, in the Joel on Software graveyard.
Joel on Software, The Book
My book is about to go into a second printing. Yay! Hurry up and buy one now or you may have to wait while Apress scurries around making more copies.
	"
https://www.joelonsoftware.com/2004/09/02/news-23/,News,2004-09-02T00:06:21+00:00,,Joel Spolsky,News,"
	Try out the new discussion group, now in beta!
A few brief comments:
Yes, there are bugs! Many bugs! Please report them using the link provided.
It looks kind of plain right now, I know. And I haven't implemented a search feature yet, which is planned.
It works a lot like the old discussion group. 
There's a new archive section (""Older Topics"").
You can provide a URL with your name when you post. I'm hoping that people who have their own web sites will do so, and that this will make posters a little less anonymous. (Note that these URLs will not be followed by search engines like Google, so they cannot be abused to ""steal"" PageRank.)
Most of the changes are really on the back end, in the adminitrator's interface and in the abuse- and spam-prevention features. I'm hoping that if all works well, you'll see a lot less spam. And it's now much easier for me to make a new discussion group, something which used to take an hour of work, so I may set up several new groups in the future (if you have a good idea for a topic please post it.)
	"
https://www.joelonsoftware.com/2004/10/29/news-35/,News,2004-10-29T00:06:33+00:00,,Joel Spolsky,News,"
	
	"
https://www.joelonsoftware.com/2004/10/27/news-34/,News,2004-10-27T00:06:32+00:00,,Joel Spolsky,News,"
	Pure CSS Slideshows
CSS expert Eric Meyer came up with a pretty awesome slide show system called S5: 
""S5 is a slide show format based entirely on XHTML, CSS, and JavaScript. With one file, you can run a complete slide show and have a printer-friendly version as well. The markup used for the slides is very simple, highly semantic, and completely accessible. Anyone with even a smidgen of familiarity with HTML or XHTML can look at the markup and figure out how to adapt it to their particular needs. Anyone familiar with CSS can create their own slide show theme. It's totally simple, and it's totally standards-driven.""
Even cooler, CityDesk expert Brian Cantoni created a very slick CityDesk template for S5 so you don't even have to know HTML. CityDesk is free for sites with less than 50 files which should be enough for most presentations, so this is a pretty cool free, standards-compliant improvement on PowerPoint that lets you put your presentations on the web.
IIS Bug
I am completely at wit's end debugging this strange (apparent) IIS bug...
... Update: Fixed! So far, at least. Since it's one of those intermittent things I can't be 100% sure yet, but it looks like Tim Chaffee got it right: 
""I would look at the MTS/COM+ package that IIS creates when you choose HIGH isolation. What user is that configured to use? It may be IWAM And you may need to switch it to the user you need.""
That seems to be it. If you look in the Component Services control panel, it is indeed the case that the COM+ application that IIS created has its identity set to the IWAM_Machinename account. Changing that fixed the problem. I've moved the whole story here.
Thanks to Sean Timm, Yakov Shafranovich, Simon Fell, Mike Surel, Sasha Do, Mike Openshaw, Marcus Tucker, Max Skibinsky, Scott Durow, John Christensen, Tim Chaffee, Steven Afdahl, Nick Parker, John Waterson, Beau Hartshorne, Olivier Dagenais, Gil Bahat, Robert MacLean, Nicole Calinoiu, Scott Wisniewski, Matthew Randle, Lars Bergstrom, Sikko2Go, Glenn Deschen, Brendan Tompkins, Bill Loytty, Sean Wheeler, and Justin Bowler for their helpful and intelligent suggestions.
	"
https://www.joelonsoftware.com/2004/10/27/news-33/,News,2004-10-27T00:06:31+00:00,,Joel Spolsky,News,"
	Gary Cornell: ""While the reason we published the essays collected in ""Joel on Software"" is obvious to anyone who has read anything Joel has written, the cover of the book has given rise to more than a few questions!""
I've gotten lots of great nominations for essays that deserve a place in the next book, tentatively titled ""// comment"". It's going to be your book: the 30 best essays about computer software over the last year... the kinds of things that Joel on Software readers want to read, edited and introduced by me. Check out the list of nominations, vote for the ones you like, and add your own nominations.
	"
https://www.joelonsoftware.com/2004/10/26/news-32/,News,2004-10-26T00:06:30+00:00,,Joel Spolsky,News,"
	Ipswitch's IMail customers seem to be in open revolt over a new pricing scheme. IMail is a popular email server for Windows-based servers. Ipswitch is a normally smart company in Massachusetts. This story will be interesting to follow for anyone making pricing decisions about software and trying to move upmarket.
Disclosure: We use IMail for email at Fog Creek Software. The only reason we were using IMail is for historical reasons, when we only wanted to have one public-facing server, and it had to be Windows so it could run FogBugz. Now that FogBugz is available for Linux, and, more importantly, we can afford to run as many servers as we want, IMail is a lot less compelling than Postfix or qmail, which are free.
Now, on to Ipswitch's new price strategy. Clearly, management was drooling over the Exchange/Notes market and wondered why Microsoft was getting so much more money for Exchange than they were getting for IMail, and they probably misunderstood the reason. What they were thinking was, ""oh, Exchange has all these other collaboration features besides email. Let's add some collaboration features and then we can charge as much as Exchange. In fact if we even go halfway towards the price of Exchange and be an even better value than Exchange. Mo' money, mo' money, mo' money!""
First mistake: they underestimated how much more Microsoft can charge for the same junk simply because Microsoft is the market leader. In MBA terms, Microsoft can capture a larger portion of the consumer surplus because they're the true market leader, a ""safe"" choice, and they have a worldwide sales force about 200 times larger than the entire staff of Ipswitch. These are people who spend every minute of every day explaining to customers why Exchange is great even if it isn't. Second, Ipswitch misunderstood that Microsoft is in the market for Large Corporate Email Systems and Ipswitch is in the market for small-medium ISPs and smaller businesses without dedicated IT staffs. These are two different markets with very different willingnesses to pay.
The second mistake was a fundamental pricing blunder of misframing the value equation. The price of software has very little to do with cost, and everything to do with perceived value. The classic book about pricing is Nagle and Holden's The Strategy and Tactics of Pricing: A Guide to Profitable Decision Making, a book which is offered in hardback and paperback, with the paperback sold at a higher price than the hardback in a brilliant pricing strategy (Thomas Nagle practices what he preaches). And one interesting point in this book is that customers perception of value is always based on comparisons to some baseline. IPSwitch was hoping their ISP customers, who have never remotely considered using Exchange due to the extremely high per-user cost, would compare their new price to Exchange, but of course, what they really compared it to was the price of the old version of their product, with which it compared very unfavorably. 
By the way, if you're wondering what a good example of this strategy is, look at the four editions of Microsoft Visual Studio. There's a super expensive ""Enterprise Architect"" edition at the top of the line that hardly anyone ever buys; it's only there to make the other prices look reasonable by comparison. Consumers don't really know how to judge the value of software so well, so they grope around for nearby products to use as baselines. Pricing 101 says you give them something really expensive to think about so your product seems cheaper by comparison and thus a better value.
If Ipswitch really wanted to compete against Exchange and Notes, first of all, they shouldn't be competing on price in that market, because IPSwitch does not have any inherent price advantage. In fact Microsoft probably has the price advantage in that market because they can distribute development costs over so many more customers and they already have a sunk cost of a huge marketing force. Never compete on price when you don't have a price advantage. If you're the small company, you don't have the price advantage.
And secondly, Ipswitch shouldn't be abandoning their existing market to chase after an elusive new market in which they're going head-on against Microsoft and IBM (Lotus Notes). They can't win that way. There's a Will and Grace episode that proves it.
My sources inform me that this was a decision made by the MBAs in the company over the strong objections of the developers. It's ironic that the MBAs don't even get the basic MBA stuff right; this is entirely a bad move for reasons that business school graduates should be able to figure out without understanding the technology at all.
	"
https://www.joelonsoftware.com/2004/10/21/news-31/,News,2004-10-21T00:06:29+00:00,,Joel Spolsky,News,"
	It's That Time of Year Again
Once again my company Fog Creek Software is looking for A Few Good College Students to work as interns next summer. We've doubled the size of the program, from two interns to four, and we're looking for both interns in Software Development, for CS types, and Software Marketing, for MBA types.
The application deadline is February 1st.
	"
https://www.joelonsoftware.com/2004/10/20/news-30/,News,2004-10-20T00:06:28+00:00,,Joel Spolsky,News,"
	Hoo boy, almost let an entire month go by without posting!
I'm editing a new book: a collection of the best software essays published anywhere - on the web or in print - during 2004. Please nominate essays by posting a new topic here. Please include the title, the author's name, and a URL where the essay can be found. If you've read one of the essays mentioned and want to comment on whether it belongs in the book, please reply to the topic nominating it with your comments. Full names and email addresses are required to nominate or comment. Writers are encouraged to nominate their own works... don't be embarassed! The deadline for nominations is November 20th. The best articles will be published in a book by Apress (assuming we can secure the rights).
In other news...
The whole company (and four outside consultants, phew) has been concentrating on trying to get FogBugz 4.0 out the door. Exciting stuff there: this release, I think, will really show the benefits of our policy of listening to our customers, not our competitors. If all goes well we'll be pushing out the first beta in a couple of weeks.
The goofy name FogBugz is an historical accident which I rather regret, but the brand name is so well known by now that we're not going to change it. We have subtly reduced the number of capital letters (FogBUGZ became FogBugz) which makes it a little bit less embarassing, but I think for now we're stuck with the stupid name. I have actually gotten email from people who say they can't buy FogBugz because the name doesn't sound ""professional."" Sorry! Get over it, or you may have to use the professionally-named ""Bugzilla"" forever!
	"
https://www.joelonsoftware.com/2004/11/29/news-41/,News,2004-11-29T00:06:39+00:00,,Joel Spolsky,News,"
	What's a NetSeminar? Here's what I think will happen if you register for my upcoming NetSeminar (free). This Thursday, December 2, 2004, at 11:00AM Pacific / 2:00PM Eastern / 6:00PM UTC you'll go to some kind of URL, which, I believe, you will be told about as a part of the aforementioned registration process, being careful to use Internet Explorer and to turn off all your popup blocking geegaws and script prevention whatnots. Whereby you will be treated to:
an introduction by host Alexa Weber Morales, the editor of Software Development magazine, followed by
a scintillating 24 minute presentation by me about social software, squeezed down to fit in 20 minutes, which will involve talking really really fast and leaving many proofs as exercises to the reader, followed by,
a 20 minute infomercial by the sponsor of the whole thing, a company called Electric Cloud which makes a distributed parallel make utility. Electric Cloud was founded by John Ousterhout, who happens to be the creator of the language tcl (motto: ""And you thought lisp had weird quoting semantics""), and he'll be doing the demo, followed by hossanas for aforementioned distributed make utility by QuickBooks team lead Jon Burt, who has promised to get that secondary - monitor - popups - jump - to - the - first - monitor bug in QB fixed for me. Thanks Jon, I'm holding you to it, followed by
questions and answers, and all interspersed liberally with
those fun and silly Internet live polls (""Parallel Distributed Make is (a) important (b) cost-effective (c) the cat's whiskers (d) all of the above"")
The whole thing will take exactly 60 minutes, no more, no less, and then the nice salespeople at Electric Cloud will quarrel over the registration data, a.k.a. ""the Glengarry leads."" But seriously, just to keep the editorial / advertising story straight, I am being paid by Software Development Magazine to appear whilst Electric Cloud is paying to sponsor the whole thing, rah rah go blogs, even though Electric Cloud actually has really quite an interesting distributed make technology and you would probably want to check it out even if they weren't paying people to say that. So it's just like a regular seminar only it's on the net. Get it? A NetSeminar!
Anyway, as I said, that's what I think will happen. More likely there will be funny pratfalls, feedback sounds, microphone batteries dying, and in the background of my presentation you will hear glass breaking followed by babies wailing. I don't know where we'll get the babies. It's not like there are normally babies in my office. 
Register Now!
	"
https://www.joelonsoftware.com/2004/11/22/news-40/,News,2004-11-22T00:06:38+00:00,,Joel Spolsky,News,"
	Joel on Software, the book, is one of Amazon's ten best books of 2004 in ""Computers and Internet."" Thank you, kind anonymous Amazon.com editors!
California in March: Next year I'll be speaking at both the O'Reilly Emerging Technology Conference (San Diego, March 14-17) and SD West 2005 (Santa Clara, March 14-18). If you're looking for an interesting conference to get your boss to send you to, both would be excellent choices.
	"
https://www.joelonsoftware.com/2004/11/18/news-39/,News,2004-11-18T00:06:37+00:00,,Joel Spolsky,News,"
	Did you know... you can Ctrl+C to copy the text of a Windows popup error message box to the clipboard?
	"
https://www.joelonsoftware.com/2004/11/18/news-38/,News,2004-11-18T00:06:36+00:00,,Joel Spolsky,News,"
	Peter Ireland: 10 Reasons to Shy Away from Venture Capital.
Seth Godin: ""There's never been a better time to start a business with no money. This manifesto will show you how.""
(As I wrote last year, VCs do not have goals that are aligned with the goals of the company founders).
Last chance to nominate articles to be included in // comment: The Best Software Essays of 2004. There are a lot of great nominated articles on the list and not a lot of feedback. If you're bored this weekend read through some of them and add your comments to the discussion thread.
Do you know any really, really smart Computer Science undergrads or college marketing geeks? I'll bet they'd love a summer internship at Fog Creek Software in New York City. The pay is good, the benefits are great, and they'll get to make a real contribution to shipping software.
	"
https://www.joelonsoftware.com/2004/11/03/news-37/,News,2004-11-03T00:06:35+00:00,,Joel Spolsky,News,"
	A long time ago I decided that Joel on Software would be non-political. In programming terms, politics are orthogonal to software, and tightly coupling my personal political viewpoint would result in unnecessary arbitrary incompatibilities.
On the other hand I feel guilty every time I delete a post about politics from the discussion group. So I've taken some readers' advice and created a second discussion group, called Off Topic, where you can feel free to flame about political or personal issues that are completely unrelated to software development, marketing, or management. We'll see how it goes.
In Other News
I've been putting off writing new Joel on Software essays because every time I start writing one I realize that it's much more important to get FogBugz 4.0 out the damn door. With any luck we'll start trickling it out to beta testers over the next couple of weeks, with wider betas starting in about a month. The beta is only open to existing customers; you can request to be a beta tester here.
I'm totally excited about FogBugz 4.0. It's our biggest release ever, it's got lots of incredible new features, all of which make it even easier to enter and track bugs, features, and respond to customer email and even run online discussion groups. One of my favorite writers, Mike Gunderloy, who wrote Coder to Developer, is coming out with a book about FogBugz. One of my favorite web designers, Dave Shea, who created the famous css Zen Garden and has designed supernaturally beautiful templates for FireFox, TypePad, Blogger, and Fog Creek, has redesigned the visuals in FogBugz. Oh, and do you remember Jill McFarlane, the tester I raved about as being measurably 12 times as productive as average? She's working on FogBugz QA. When this thing ships you can tell me if you think having a great team is worth the trouble or if I should have just farmed the development out to the cheapest bidder.
	"
https://www.joelonsoftware.com/2004/11/02/news-36/,News,2004-11-02T00:06:34+00:00,,Joel Spolsky,News,"
	Go vote now!
	"
https://www.joelonsoftware.com/2004/12/27/news-54/,News,2004-12-27T00:06:52+00:00,,Joel Spolsky,News,"
	In response to the emergency in Asia, Fog Creek Software will donate 50% of all revenues earned this week (Dec 26 - Jan 1) to Oxfam. You can also make a direct contribution yourself.
	"
https://www.joelonsoftware.com/2004/12/25/news-53/,News,2004-12-25T00:06:51+00:00,,Joel Spolsky,News,"
	Auggie Wren's Christmas Story, by Paul Auster, was the inspiration for the movie Smoke.
 
	"
https://www.joelonsoftware.com/2004/12/23/news-52/,News,2004-12-23T00:06:50+00:00,,Joel Spolsky,News,"
	Brett has written up instructions for upgrading PHP to the latest version and getting it working with FogBugz. These instructions should be useful to anyone who needs to upgrade PHP due to the recent security flaw.
Happy Fifth
Tomorrow is the fifth anniversary of Joel on Software!
Job Openings
Organize my life and run the office at Fog Creek Software: Executive Assistant / Office Manager (filled).
And don't forget, when you're home for the holidays and you see all your cousins, siblings, and aunts who have been away at college: we have great summer internships, so please encourage them to apply!
	"
https://www.joelonsoftware.com/2004/12/17/news-51/,News,2004-12-17T00:06:49+00:00,,Joel Spolsky,News,"
	Mercury News: ""Accounting rule makers handed down long-awaited final guidelines Thursday that will force companies to deduct the value of billions of dollars of employee stock options from reported profits starting in mid-2005.""
Here's some old discussion of what this means.
The old Silicon Valley hands are unhappy with the general concept of expensing stock options, and one reason they often give for this is the difficulty of figuring out the value of stock options. But anybody in the investment industry, and indeed, anyone with a rudimentary understanding of financial accounting knows that accounting for the value of an illiquid asset is always a problem yet something you always have to do anyway, and just because the value of stock options changes over time or because it is not possible to fix exactly does not mean it shouldn't be accounted for consistently.
	"
https://www.joelonsoftware.com/2004/12/16/news-50/,News,2004-12-16T00:06:48+00:00,,Joel Spolsky,News,"
	""When you're setting a price, you're sending a signal. If your competitor's software ranges in price from about $100 to about $500, and you decide, heck, my product is about in the middle of the road, so I'll sell it for $300, well, what message do you think you're sending to your customers? You're telling them that you think your software is 'eh.' I have a better idea: charge $1350. Now your customers will think, 'oh, man, that stuff has to be the cat's whiskers since they're charging mad coin for it!'"" 
Camels and Rubber Duckies
	"
https://www.joelonsoftware.com/2004/12/15/camels-and-rubber-duckies/,Camels and Rubber Duckies,2004-12-15T00:14:27+00:00,2016-12-05T19:35:30+00:00,Joel Spolsky,"Product manager, News","
	You've just released your latest photo-organizing software. Through some mechanism which will be left as an exercise to the reader, you've managed to actually let people know about it. Maybe you have a popular blog or something. Maybe Walt Mossberg wrote a rave review in the Wall Street Journal.
One of the biggest questions you're going to be asking now is, ""How much should I charge for my software?"" When you ask the experts they don't seem to know. Pricing is a deep, dark mystery, they tell you. The biggest mistake software companies make is charging too little, so they don't get enough income, and they have to go out of business. An even bigger mistake, yes, even bigger than the biggest mistake, is charging too much, so they don't get enough customers, and they have to go out of business. Going out of business is not good because everybody loses their job, and you have to go work at Wal*Mart as a greeter, earning minimum wage and being forced to wear a polyester uniform all day long.
So if you like cotton uniforms you better get this right.
The answer is really complicated. I'm going to start with a little economic theory, then I'm going to tear the theory to bits, and when I'm finished, you'll know a lot more about pricing and you still won't know how much to charge for your software, but that's just the nature of pricing. If you can't be bothered to read this, just charge $0.05 for your software, unless it does bug tracking, in which case charge $30,000,000 for it.
Now. Where was I.
Some Economic Theory
Imagine, for the moment, that your software costs $199. Why $199? Well, because I have to start somewhere. We'll try other numbers real soon now. For now, imagine that you charge $199 and that gets you 250 customers.
Let me plot that:
This little chart I made means that if you charge $199, 250 people will buy your software. (As you see, economists are very odd people, and they like to put the quantity sold on the x-axis with the price on the y-axis. If 250 people bought your software, it must mean that you charged $199!)
What would happen if you raised the price to $249? 
Some of the people who might have been willing to pay $199 are going to think $249 is too much, so they'll drop out. 
Obviously, people who wouldn't even buy it for $199 are certainly not going to buy it at the higher price.
If 250 people bought at $199, we must assume that less than 250 people would buy it at $249. Let's guess, oh, 200:
What if we charged less? Say, $149? Well, everyone who would buy it for $199 will certainly buy it for $149, and there will probably be even more people who think $149 is affordable, so let's say we could sell 325 copies at $149:
And so on and so forth:
In fact rather than graphing a few discrete points here, let's draw the complete curve that includes all these points, and while I'm at it I'll fix the x-axis so it's to scale:
Now you can tell me any price between $50 and $400 and I'll tell you how many people will buy your software at that price. What we have here is a classic demand curve and the demand curve is always downward-sloping, because the more you charge, the fewer people will be willing to buy your software.
These numbers are not, of course, real. The only thing I'm asking you to believe, so far, is that the demand curve is downward sloping.
(If it's still bothering you that I put the quantity on the x-axis and the price on the y-axis, when clearly the quantity is a function of the price, not the other way around, please take it up with Augustin Cournot. He probably has a blog by now.)
So how much should you charge?
""Uh, $50, because then I sell the most units!""
No no no. You're not trying to maximize units, you're trying to maximize profits. 
Let's calculate profits.
Assume each unit of software that you sell costs you an incremental $35. 
Maybe it cost you $250,000 to develop the software in the first place, but that's a sunk cost. We don't care about that anymore, because the $250,000 is the same whether you sell 1000 units or 0. Sunk. Kiss it goodbye. Set any price you want, the $250,000 is gone and therefore not relevant any more.
At this point all we can worry about is the incremental cost of selling each additional unit. That might include shipping and handling, that might include tech support, bank service charges, CD duplication and shrinkwrapping, whatever; I'm going to be really hand-wavy here and use $35 as my incremental cost.
Now we can whip out our handy-dandy copy of Visicalc:
 
Here's how to read that spreadsheet. Each row is a scenario. Row 3: If we were to charge $399, then we would sell 12 copies, making $364 profit per copy, for a total profit of $4368.
NOW WE'RE GETTING SOMEWHERE!
This is really cool. I think we're on the verge of solving the problem of how much to charge for software! I'M SO EXCITED!
The reason I'm so excited is it looks like if you plot price against profit, you get a nice curve with a big hump in the middle! And we all know what humps mean! Humps mean local maxima! Or camels. But here they mean local maxima!
In this chart the actual data is shown as little blue diamonds, and I've asked Excel to draw a nice polynomial trendline on top. So now all I have to do is drop a line straight down from the peak of the hump to find out the price I should charge to make a maximal amount of profit:
""O frabjous day! Callooh! Callay!"" I chortle. We have found the optimum price, $220, and that's how much you should charge for your software. Thanks for your time.
Ahem.
Thank you for your time! Nothing more to see here! Move along now!
You're not leaving.
I see.
Some of the more observant members of my audience have detected through careful analysis of the scrollbar position in their web browser that I might have something more to say other than ""$220.""
Well, maybe. There's just a tiny little loose end I left untied which I might as well tie up now if you're all still up for it. Ok? OK!
You see, by setting the price at $220, we managed to sell, let's say, 233 copies of the software, at a total profit of $43,105, which is all good and fine, but something is distracting me: all those people who were all ready to pay more, like those 12 fine souls who would have paid a full $399, and yet, we're only charging them $220 just like everyone else! 
The difference between $399 and $220, i.e., $179, is called consumer surplus. It's the extra value that those rich consumers got from their purchase that they would have been perfectly happy to do without.
It's sort of like if you were all set to buy that new merino wool sweater, and you thought it was going to cost $70, which is well worth it, and when you got to Banana Republic it was on sale for only $50! Now you have an extra $20 in found money that you would have been perfectly happy to give to the Banana Republicans!
Yipes!
That bothers good capitalists. Gosh darn it, if you're willing to do without it, well, give it to me! I can put it to good use, buying a SUV or condo or Mooney or yacht one of those other things capitalists buy!
In economist jargon, capitalists want to capture the consumer surplus.
Let's do this. Instead of charging $220, let's ask each of our customers if they are rich or if they are poor. If they say they're rich, we'll charge them $349. If they say they're poor, we'll charge them $220.
Now how much do we make? Back to Excel:
Notice the quantities: we're still selling the same 233 copies, but the richest 42 customers, who were all willing to spend $349 or more, are being asked to spend $349. And our profits just went up! from $43K to about $48K! NICE!
Capture me some more of that consumer surplus stuff!
But wait, that's not all. After selling all these 233 copies, I felt kind of bad about the people who were only willing to spend $99. After all, if I could sell a few more copies to those guys at $99, I'd still be making some money, since my marginal cost is only $35. 
What if we called up all the customers who said ""no thanks"" at $220, and offered them the software at $99?
At $99, we have 450 potential customers, but don't forget that 233 of them already paid full price, leaving us with 217 extra customers who just wouldn't go along with the program and pay the full price:
Babymosesinabasket, I think we just made $62K in profit! All in all, an extra twenty thousand buckeroos, cash spendable money, which goes a loooong way towards a down payment on that fishing boat you've had your eye on. All from the power of segmentation: separating your customers into different groups according to how much they are willing to pay, and extracting the maximal consumer surplus from each customer. Holy Segments, Batman, how much money could we make if we ask every customer to tell us their maximum willingness to pay and then charge them that?
Surreal! Almost $80K! That's almost double the profits we made having just one price! Capturing the consumer surplus is clearly quite profitable. Even the 350 annoying people who only want to give me $49 each are making some contribution to the profits. All these customers are happy because we're asking them to pay the amount they were willing to pay already, so it's not like we're ripping anyone off. Kind of.
Here are some examples of segmentation you're probably familiar with:
Senior citizen discounts, since older people tend to be living on a ""fixed income"" and are willing to pay less than working-age adults
Cheap afternoon movie matinees (useful only to people without jobs)
Bizarre airfares, where everyone seems to be paying a different price. The secret about airfares is that people who are flying on business get their company to reimburse them, so they couldn't care less how much the ticket costs, while leisure travellers are spending their own money and they won't go if it costs too much. 
Of course, the airlines can't just ask you if you're travelling on business, because pretty quickly everyone would catch on and lie to get the cheaper fares. But business travellers almost always travel on weekdays, and they hate spending a weekend away from home. So the airlines instituted policies that if you're staying over a Saturday night, you're probably not travelling on business, and they give you much cheaper fares if you stay over a Saturday night.
There are more subtle ways to segment. You know those grocery coupons you see in the paper? The ones that get you 25 cents off a box of Tide detergent if you clip them out and remember to bring them to the store? Well, the trouble with grocery coupons is that there's so much manual labour involved in clipping them, and sorting them out, and remembering which ones to use, and choosing brands based on which coupons you have, and so on, and the net effect is that if you clip coupons you're probably working for about $7.00 an hour. 
Now, if you're retired and living off of social security, $7 an hour sounds pretty good, so you do it, but if you're a stock analyst at Merrill Lynch getting paid $12,000,000 a year to say nice things about piece-of-junk Internet companies, working for $7 an hour is a joke, and you're not going to clip coupons. Heck, in one hour you could issue ""buy"" recommendations on ten piece-of-junk Internet companies! So coupons are a way for consumer products companies to charge two different prices and effectively segment their market into two. Mail-in rebates are pretty much the same as coupons, with some other twists like the fact that they reveal your address, so you can be direct marketed to in the future.
There are other ways to segment. You can market your products under different brand names (Old Navy vs. The Gap vs. Banana Republic) and hope that the rich people conveniently remember to buy their clothes at the Banana while the po' people go to Old Navy. In case there was any risk of people forgetting and going to the wrong store, the Banana Republic stores are conveniently situated in neighborhoods full of $2,000,000 condos while the Old Navy store is near the train station where you haul your poor tired ass back to New Jersey after a day of hard manual labor.
In the world of software, you can just make a version of your product called ""Professional"" and another version called ""Home"" with some inconsequential differences, and hope that the corporate purchasers (again, the people who are not spending their own money) will be too embarassed at the thought of using ""Windows XP Home Edition"" at work and they'll buy the Pro edition. Home Edition at work? Somehow that feels like coming to work in your pyjamas! Ick!
Quick trick: if you're going to try to pull the segmenting idea, you're probably going to be better off offering a discount to certain users rather than trying to charge some users a premium. Nobody likes feeling ripped off: people would rather buy a $199 product for $99 than a $59 product for $79. Theoretically, people should be rational. $79 is less than $99. Realistically, they hate feeling like someone is ripping them off. They'd much rather feel like they're getting a bargain than feel like they're getting gouged.
ANYWAY.
That was the easy part.
The hard part is that everything I just told you is sort of wrong.
Working my way backwards, this business about segmenting? It pisses the heck off of people. People want to feel they're paying a fair price. They don't want to think they're paying extra just because they're not clever enough to find the magic coupon code. The airline industry got really, really good at segmenting and ended up charging literally a different price to every single person on the plane. As a result most people felt they weren't getting the best deal, and they didn't like the airlines. When a new alternative arose in the form of low cost carriers (Southwest, jetBlue, etc.) customers had no loyalty whatsover to the legacy airlines that had been trying to pick their pockets for all those years. 
And God help you if an A-list blogger finds out that your premium printer is identical to the cheap printer, with the speed inhibitor turned off.
So, while segmenting can be a useful tool to ""capture consumer surplus,"" it can have significant negative implications for the long term image of your product. Many a small software vendor has seen their revenues go up and the amount of customer bickering about price go way down when they eliminated coupons, discounts, deals, multiple versions and tiers. Somehow, it seems like customers would rather pay $100 when everyone else is paying $100 than pay $79 if they know there's someone out there who got it for $78. Heck, GM made a whole car company, Saturn, based on the principle that the offered price is fair and you don't have to bargain.
Even assuming you're willing to deal with a long-term erosion of customer goodwill caused by blatant price discrimination, segmentation is just not that easy to pull off. First of all, as soon as your customers find out you're doing it, they'll lie about who they are:
Frequent business travellers rearranged their tickets to include dual Saturday-night stays. For example a consultant living in Pittsburgh and working in Seattle Monday through Thursday would buy a two week trip from Pittsburgh to Seattle and then a weekend trip home in the middle. Both trips included Saturday night stays, it was the same flights they would have taken anyway, just much cheaper.
Got an academic discount? Everyone who is even vaguely related to someone vaguely associated with academia will start using it.
If your customers talk amongst themselves, they're going to find out about the price you're offering the other people, and you'll find yourself forced to match the lowest prices for everyone. Especially the big corporate purchasers who theoretically should have the ""maximum willingness to pay"" since they represent rich customers. Corporations have full time purchasing departments staffed with people whose entire job is whittling down prices. These people go to conferences where they learn how to get the best price. They practice saying ""no. cheaper."" all day long in front of mirrors. Your sales guy doesn't stand a snowflake's chance in hell.
There are two forms of segmentation that slightly-too-clever software companies engage in that are not such great ideas:
Bad Idea #1: Site Licenses. 
The opposite of segmentation, really. I have certain competitors that do this: they charge small customers per-user but then there's a ""unlimited"" license at a fixed price. This is nutty, because you're giving the biggest price break precisely to the largest customers, the ones who would be willing to pay you the most money. Do you really want IBM to buy your software for their 400,000 employees and pay you $2000? Hmm?
As soon as you have an ""unlimited"" price, you are instantly giving a gigantic gift of consumer surplus to the least price-sensitive customers who should have been the cash cows of your business.
Bad Idea #2: How Much Money Do You Have? Pricing.
This is the kind used by software startups founded by ex-Oracle salesmen where the price isn't on the website anywhere. No matter how much you search to find the price, all you get is a form to provide your name, address, phone number, and fax number, for some reason, not that they're ever going to fax you anything. 
It's pretty obvious here that the plan is to have a salesman call you up and figure out how much you're worth, and then charge you that much. Perfect segmentation!
This doesn't work so good either. First of all, the low end buyers are just going to move on. They will assume that if the price isn't listed, they can't afford it. Second, the people who don't like salesmen harassing them will just move on.
Worse, as soon as you send a message that your price is negotiable, you're going to end up reverse segmenting. Here's why: the big companies you sell to, the ones who should be willing to give you the most money, are incredibly sophisticated about purchasing. They'll notice that your sales guy or gal is working on commission, and they'll know that he's got quarterly quotas, and they'll know that both the salesperson and the company are going to be incredibly desperate to make a sale at the end of the quarter (the salesperson to get his commission, and the company to avoid getting their knees shot off by their VCs or Wall Street). So the big customers will always wait until the last day in the quarter and end up getting a ridiculously good price which somehow involves weird accounting shenanigans so the company can book a lot of revenue that they're never really going to get.
So, don't do site licenses, and don't try to make up prices as you go along.
BUT WAIT!
Do you really want to maximize profits? I glossed over something. You don't necessarily care about maximizing profits this month. You really care about maximizing all your profits, over time, in the future as well. Technically, you want to maximize the NPV of the stream of all future profits (without ever having your cash reserves dip below zero).
Diversion: What's an NPV?
What's worth more, $100 today or $100 in one year?
Obviously $100 today, because you can invest it, say, in bonds, and at the end of the year you'll have, like, $102.25.
So when you're comparing the value of $100 in one year to $100 today, you need to discount the $100 based on some interest rate. If the interest rate is 2.25%, for example, those $100 in the future should be discounted to $97.80, which is called the net present value (NPV) of $100 one year in the future.
Go even further into the future, and you need to discount even more. $100 in five years, at today's interest rates, is worth only $84 today. $84 is the net present value of $100 in five years.
Which would you rather earn?
OPTION ONE:$5000, $6000, $7000 over the next three years
OPTION TWO:$4000, $6000, $10000 over the next three years
Option two sounds like a better deal, even after discounting the future earnings. If you take the second option, it's like investing $1000 in year one and getting $3000 back two years later, which is a very respectable investment!
The reason I bring this up is because software is priced three ways: free, cheap, and dear.
Free. Open source, etc. Not relevant to the current discussion. Nothing to see here. Move along.
Cheap. $10 - $1000, sold to a very large number of people at a low price without a salesforce. Most shrinkwrapped consumer and small business software falls into this category.
Dear. $75,000 - $1,000,000, sold to a handful of rich big companies using a team of slick salespeople that do six months of intense PowerPoint just to get one goddamn sale. The Oracle model.
All three methods work fine.
Notice the gap? There's no software priced between $1000 and $75,000. I'll tell you why. The minute you charge more than $1000 you need to get serious corporate signoffs. You need a line item in their budget. You need purchasing managers and CEO approval and competitive bids and paperwork. So you need to send a salesperson out to the customer to do PowerPoint, with his airfare, golf course memberships, and $19.95 porn movies at the Ritz Carlton. And with all this, the cost of making one successful sale is going to average about $50,000. If you're sending salespeople out to customers and charging less than $75,000, you're losing money.
The joke of it is, big companies protect themselves so well against the risk of buying something expensive that they actually drive up the cost of the expensive stuff, from $1000 to $75000, which mostly goes towards the cost of jumping all the hurdles that they set up to insure that no purchase can possibly go wrong.
Now, a quick glance around the Fog Creek website reveals that I'm firmly in camp #2. Why? Selling software at a low price means that I can get thousands of customers right away, some small, some large. And all those customers are going to be out there using my software and recommending it to their friends. When those customers grow, they'll buy more licenses. When people working at those customers move to new companies, they'll recommend my software to those new companies. Effectively I am willing to accept a lower price now in exchange for creating grassroots support. I see the low price of FogBugz as being an investment in advertising that I expect will pay off many times over in the long run. So far, it's working very well: FogBugz sales have grown more than 100% for three years without marketing, solely based on word-of-mouth and existing customers buying additional licenses.
By comparison, look at BEA. Big company. Big price tag. The price alone means almost nobody has experience with their product. Nobody comes out of college and starts a dotcom using BEA technology, because they couldn't afford BEA technology in college. A lot of other good technologies have doomed themselves with high prices: Apple WebObjects was irrelevant as an application server because it started at $50,000. Who cared how good it was? Nobody ever used it! Anything made by Rational. The only way these products get into the hands of users is with an expensive full-frontal sales pitch. At these prices, the sales pitch is made to the executive, not the techie. The techies may well actively resist bad technology with good sales that the executives force down their throats. We have lots of FogBugz customers who have high-priced Remedy, Rational, or Mercury products sitting on the shelves after investments of well over $100,000, because that software isn't good enough to actually use. Then they buy a couple of thousand dollars worth of FogBugz and that's the product they really use. The Rational salesperson is laughing at me, because I have $2000 in the bank and he has $100,000. But I have far more customers than he does, and they're all using my product, and evangelizing it, and spreading it, while Rational customers either (a) don't use it or (b) use it and can't stand it. But he's still laughing at me from his 40 foot yacht while I play with rubber duckies in the bathtub. Like I said, all three methods work fine. But cheaper prices is like buying advertising and as such is an investment in the future.
OK.
Where was I.
Oh yeah, before I started frothing at the mouth, I was picking apart the logic of deriving a demand curve. When I walked you through that whole discussion of the demand curve, you were probably asking yourself, ""How do I know how much people are willing to pay?""
You're right.
That's a problem.
You can't really find out what the demand curve is.
You can have focus groups and ask people, but they'll lie to you. Some people will lie to show off their generosity and wealth. ""Heck, yeah, I'd buy a pair of $400 jeans in a New York Minute!"" Other people will lie because they really want your thing and they think you'll decide to charge less money if they tell you a low number. ""Blogging software? Hmm. I'd pay, at most, 38 cents.""
Then you ask another focus group the next day, and this time, the first man to speak has a crush on a pretty woman in the group, and he wants to impress her, so he starts talking about how much his car cost and everyone is thinking Big Numbers. And the day after that, you serve Starbucks during the break, and while you're in the john everyone unbeknownst to you gets into a side conversation about paying $4 for a cup of coffee, and they're in a real frugal mood when you ask them about their willingness to pay. 
Then you finally get the focus group to agree that your software is worth $25 a month, and then you ask them how much they would pay for a permanent license and the same people just won't go a penny over $100. People seriously can't count.
Or you ask some aircraft designers how much they would pay and they sort of think $99 would be a maximum price, even though aircraft designers regularly use software that costs on the order of $3000 a month without being aware of it, because someone else does the purchasing.
So from day to day you get radically, and I mean radically different answers when you ask people how much they're willing to pay for something. The truth is, the only way to determine how much someone will pay for something is to put it up for sale, and see how many people actually buy it.
Then you can try twiddling the prices to measure price sensitivity and try to derive the demand curve, but until you have something like 1,000,000 customers and you are absolutely sure that customer A will not find out you are offering a lower price to customer B, you will not get statistically meaningful responses.
There's a real strong tendency to assume that experiments done on large populations of people should work out just like experiments done with chemicals in a high school lab, but everyone that has ever tried to do experiments on people knows that you get wildly variable results that just aren't repeatable and the only way you can be confident in your results is to carefully avoid ever doing the same experiment twice.
And, in fact, you can't even be sure that the demand curve is downward sloping. 
The only reason we assumed that the demand curve is downward sloping is that we assumed things like ""if Freddy is willing to buy a pair of sneakers for $130, he is certainly willing to buy those same sneakers for $20."" Right? Ha! Not if Freddy is an American teenager! American teenagers would not be caught dead in $20 sneakers. It's, like, um, the death penalty? if you are wearing sneakers? that only cost $20 a pair? in school?
I'm not joking around here: prices send signals. Movies in my town cost, I think, $11. Criminy. There used to be a movie theatre that had movies for $3. Did anyone go there? I DON'T THINK SO. It's obviously just a dumping ground for lousy movies. Somebody is now at the bottom of the East River with $20.00 cement sneakers because they dared to tell the consumer which movies the industry thought were lousy.
You see, people tend to believe that you get what you pay for. The last time I needed a lot of hard drive space I invested in some nice cheap hard drives allegedly designed by Mr. Porsche himself that went for about $1 a gigabyte. Within six months all four had failed. Last week I replaced them with Seagate Cheetah SCSI hard drives that cost about $4 a gigabyte because I've been running those since I started Fog Creek four years ago without a glitch. Chalk it up to ""you get what you pay for.""
There are just too many examples where you actually do get what you pay for, and the uninformed consumer is generally going to infer that the more expensive product is better. Buying a coffee maker? Want a really good coffee maker? You have two choices. Find the right issue of Consumer Reports in the library, or go to Williams-Sonoma and get the most expensive coffee maker they have there.
When you're setting a price, you're sending a signal. If your competitor's software ranges in price from about $100 to about $500, and you decide, heck, my product is about in the middle of the road, so I'll sell it for $300, well, what message do you think you're sending to your customers? You're telling them that you think your software is ""eh."" I have a better idea: charge $1350. Now your customers will think, ""oh, man, that stuff has to be the cat's whiskers since they're charging mad coin for it!""
And then they won't buy it because the limit on the corporate AMEX is $500.
Misery.
The more you learn about pricing, the less you seem to know. 
I've been nattering on about this topic for well over 5000 words and I don't really feel like we're getting anywhere, you and I.
Some days it seems like it would be easier to be a taxi driver, with prices set by law. Or to be selling sugar. Plain ol' sugar. Yep. That would be sweet.
Take my advice, offered about 20 pages back: charge $0.05 for your software. Unless it does bug tracking, in which case the correct price is $30,000,000. Thank you for your time, and I apologize for leaving you even less able to price software than you were when you started reading this.
	"
https://www.joelonsoftware.com/2004/12/15/news-49/,News,2004-12-15T00:06:47+00:00,,Joel Spolsky,News,"
	All these people griping about how writing software isn't fun anymore probably didn't notice that here in the northern hemisphere, we're only about a week away from the shortest day of the year. Install some bright lights, drink some coffee, take a vacation in Tahiti, and tell me in April if you still think software development is depressing.
Google Suggest
I had to change my home page back to regular Google due to a fairly blatant usability bug in Google Suggest. Repro steps:
Move your mouse so it's over the ""Google Search"" button
Type ""Joel""
Click the mouse button immediately
The bug: often, the timing is such that the Google Suggest popup appears after I type Joel but before I click the mouse, so I think I'm clicking on the ""Google Search"" button intending to search for, say, Joel, not that I would search for myself, after all, I'm right here, but I'm really clicking on the popup listbox item for ""Joel Turner"", whoever that is. Any relation to Tina? Or Bachman?
I still think Google Suggest is important-I'm sure they'll fix this little problem. It's important not for searching, but because it's going to teach web users to expect highly responsive user interfaces:
If you have a website that shows a map, and the user clicks to zoom in, they're going to expect the map to zoom in, quickly-they will no longer tolerate the full-page-reload-and-scroll-to-the-top that Mapquest has conditioned them to accept.
If you show a list, and let people click on the column headers to sort by different columns, they're no longer going to tolerate the full-page-reload-and-scroll-to-the-top that certain unnamed bug tracking applications have conditioned them to accept.
If you have an email application, and you show people a list of email and give them a button to delete email as spam, they're going to expect virtually instantaneous response time, not the full-page-reload-and-scroll-to-the-top that most web email programs have conditioned them to accept.
That's what I meant by ""raising the bar.""
More Google
Attention, FogBugz competitors: a court has ruled that you are welcome to continue to advertise your products when people search for FogBugz on Google. I actually don't think there's anything wrong with this although it does show a certain lack of class, mm, don't you think? You don't see Wal*Mart advertising when you search for Tiffany.
	"
https://www.joelonsoftware.com/2004/12/13/news-48/,News,2004-12-13T00:06:46+00:00,,Joel Spolsky,News,"
	Upcoming Joel on Software meals: dinner in Bellevue, WA on January 18th and lunch in Toronto January 21st. Please RSVP so I can get a count. These are always very informal geek-out sessions, lots of fun and a chance to meet other readers in your area.
	"
https://www.joelonsoftware.com/2004/12/10/news-47/,News,2004-12-10T00:06:45+00:00,,Joel Spolsky,News,"
	I didn't think I'd be changing my startup page again for a long time.
Looks like I was wrong. Check out Google Suggest.
Lemme explain why this is so cool. First of all, it saves you keystrokes entering your search terms. That's the externally cool thing.
The internal cool thing is that it's one of the first prominent uses I've seen of the IFRAME XmlHttpRequest technique of going back to the web server for more data while the user interacts with a page. This has been possible for a long long time, but web developers have been mostly ignoring it. Rob Whelan explains how it's done.
The latency of web UIs, in which everything you do is a slow round-trip that requires completely refetching and rebuilding the web page, is one of the reason web UIs feel so clunky compared to native GUIs. Google is very publicly raising the bar on the quality of interfaces that people will expect from web pages.
	"
https://www.joelonsoftware.com/2004/12/08/news-46/,News,2004-12-08T00:06:44+00:00,,Joel Spolsky,News,"
	Scott Rosenberg interviewed me for Salon. ""The connection between software and Yiddish humor may not have been evident until Joel Spolsky began writing his Joel on Software essays and blog in 2000.""
	"
https://www.joelonsoftware.com/2005/01/27/news-58/,News,2005-01-27T00:06:56+00:00,,Joel Spolsky,News,"
	Everyone thinks they're hiring the top 1%.
Martin Fowler: ""We are still working hard to hire only the very top fraction of software developers (the target is around the top 0.5 to 1%).""
Me: ""We get between 100 and 200 [resumes] per opening.""
I remember when I started working for David Shaw he told us they only hired ""1 out of 200."" 
I hear this from almost every software company. ""We hire the top 1% or less,"" they all say.
Could they all be hiring the top 1%? Where are all the other 99%? General Motors?
I had an insight the other day.
Quiz: If you get 200 resumes, and you hire 1 person, are you hiring the top 0.5% of software developers?
""No,"" you say, ""your screening process is unlikely to find the best person out of 200.""
Agreed. OK. Let's say you had a magical screening process that actually allowed you to find the ""best"" person.
""No,"" you say, ""people are good at different things. There's no absolute, forced ranking of developers that makes sense.""
Agreed. Let's simplify for the moment and assume that all software developers in the world could be ranked in absolute order of skill, and that you had a magical screening process that found the ""best"" person from any field.
Now, when you get those 200 resumes, and hire the best person from the top 200, does that mean you're hiring the top 0.5%?
""Maybe.""
No. You're not. Think about what happens to the other 199 that you didn't hire.
They go look for another job.
That means, in this horribly simplified universe, that the entire world could consist of 1,000,000 programmers, of whom the worst 199 keep applying for every job and never getting them, but the best 999,801 always get jobs as soon as they apply for one. So every time a job is listed the 199 losers apply, as usual, and one guy from the pool of 999,801 applies, and he gets the job, of course, because he's the best, and now, in this contrived example, every employer thinks they're getting the top 0.5% when they're actually getting the top 99.9801%.
The top 0.5% usually have jobs. They have jobs where they do very well, so their employers pay them lots of money and do whatever it takes to keep them happy. (I know. Oversimplification. Lots of employers try to drive out the good software developers because they complain a lot and demand high salaries. Still.)
Those 200 resumes you got from Craigslist? Those consist of the one guy who happened to be good, but he's only applying for a job because his wife wants to be nearer to her family, and the usual floating population of 199 people who apply for every single job and are qualified for none. And now you think you're being ""super selective"" but you're not, it's just a statistical fallacy.
I'm exaggerating a lot, but the point is, when you select 1 out of 200 applicants, the other 199 don't give up and go into plumbing (although I wish they would... plumbers are impossible to find). They apply again somewhere else, and contribute to some other employer's self-delusions about how selective they are.
In fact, one thing I have noticed is that the people who I consider to be good software developers barely ever apply for jobs at all. I know lots of great people who took a summer internship on a whim and then got permanent offers. They only ever applied for one or two jobs in their lives.
On the other hand there are people out there who appear to be applying to every job on Monster.com. I'm not kidding. They spam their resume to hundreds or thousands of employers. A lot of times I can see this because there are actually hundreds of ""job"" aliases in the ""To:"" line of their email. (Some evil part of me wants to ""reply-to-all"" the rejection note I send them, but I usually overcome the urge). 
It's pretty clear to me that just because you're hiring the top 0.5% of all applicants for a job, doesn't mean you're hiring the top 0.5% of all software developers. You could be hiring from the top 10% or the top 50% or the top 99% and it would still look, to you, like you're rejecting 199 for every 1 that you hire.
By the way, it's because of this phenomenon-the fact that many of the great people are never on the job market-that we are so aggressive about hiring summer interns. This may be the last time these kids ever show up on the open market. In fact we hunt down the smart CS students and individually beg them to apply for an internship with us, because if you wait around to see who sends you a resume, you're already missing out.
	"
https://www.joelonsoftware.com/2005/01/19/news-57/,News,2005-01-19T00:06:55+00:00,,Joel Spolsky,News,"
	Seattle is funny. All the local newspapers are running big headlines about how it's raining. I don't get it!
The Joel on Software Lunch in Toronto is coming up soon, at the Movenpick Marche, at BCE Place, at 1:00 PM Friday January 21st, 2005.
	"
https://www.joelonsoftware.com/2005/01/18/news-56/,News,2005-01-18T00:06:54+00:00,,Joel Spolsky,News,"
	Joel on Software Dinner Reminder: Tonight's Bellevue (WA) Joel on Software dinner will be at 7:30 at the food court at the Crossroads Mall.
	"
https://www.joelonsoftware.com/2005/01/02/advice-for-computer-science-college-students/,Advice for Computer Science College Students,2005-01-02T00:15:09+00:00,2016-12-05T19:00:29+00:00,Joel Spolsky,"New developer, News","
	Despite the fact that it was only a year or two ago that I was blubbering about how rich Windows GUI clients were the wave of the future, college students nonetheless do occasionally email me asking for career advice, and since it's recruiting season, I thought I'd write up my standard advice which they can read, laugh at, and ignore.
Most college students, fortunately, are brash enough never to bother asking their elders for advice, which, in the field of computer science, is a good thing, because their elders are apt to say goofy, antediluvian things like ""the demand for keypunch operators will exceed 100,000,000 by the year 2010"" and ""lisp careers are really very hot right now.""
I, too, have no idea what I'm talking about when I give advice to college students. I'm so hopelessly out of date that I can't really figure out AIM and still use (horrors!) this quaint old thing called ""email"" which was popular in the days when music came on flat round plates called ""CDs.""
So you'd be better off ignoring what I'm saying here and instead building some kind of online software thing that lets other students find people to go out on dates with.
Nevertheless.
If you enjoy programming computers, count your blessings: you are in a very fortunate minority of people who can make a great living doing work they enjoy. Most people aren't so lucky. The very idea that you can ""love your job"" is a modern concept. Work is supposed to be something unpleasant you do to get money to do the things you actually like doing, when you're 65 and can finally retire, if you can afford it, and if you're not too old and infirm to do those things, and if those things don't require reliable knees, good eyes, and the ability to walk twenty feet without being out of breath, etc.
What was I talking about? Oh yeah. Advice.
Without further ado, then, here are Joel's Seven Pieces of Free Advice for Computer Science College Students (worth what you paid for them):
Learn how to write before graduating.
Learn C before graduating.
Learn microeconomics before graduating.
Don't blow off non-CS classes just because they're boring.
Take programming-intensive courses.
Stop worrying about all the jobs going to India.
No matter what you do, get a good summer internship.
Now for the explanations, unless you're gullible enough to do all that stuff just because I tell you to, in which case add: 8. Seek professional help for that self-esteem thing.
Learn how to write before graduating. 
Would Linux have succeeded if Linus Torvalds hadn't evangelized it? As brilliant a hacker as he is, it was Linus's ability to convey his ideas in written English via email and mailing lists that made Linux attract a worldwide brigade of volunteers. 
Have you heard of the latest fad, Extreme Programming? Well, without getting into what I think about XP, the reason you've heard of it is because it is being promoted by people who are very gifted writers and speakers. 
Even on the small scale, when you look at any programming organization, the programmers with the most power and influence are the ones who can write and speak in English clearly, convincingly, and comfortably. Also it helps to be tall, but you can't do anything about that.
The difference between a tolerable programmer and a great programmer is not how many programming languages they know, and it's not whether they prefer Python or Java. It's whether they can communicate their ideas. By persuading other people, they get leverage. By writing clear comments and technical specs, they let other programmers understand their code, which means other programmers can use and work with their code instead of rewriting it. Absent this, their code is worthless. By writing clear technical documentation for end users, they allow people to figure out what their code is supposed to do, which is the only way those users can see the value in their code. There's a lot of wonderful, useful code buried on sourceforge somewhere that nobody uses because it was created by programmers who don't write very well (or don't write at all), and so nobody knows what they've done and their brilliant code languishes.
I won't hire a programmer unless they can write, and write well, in English. If you can write, wherever you get hired, you'll soon find that you're getting asked to write the specifications and that means you're already leveraging your influence and getting noticed by management.
Most colleges designate certain classes as ""writing intensive,"" meaning, you have to write an awful lot to pass them. Look for those classes and take them! Seek out classes in any field that have weekly or daily written assignments. 
Start a journal or weblog. The more you write, the easier it will be, and the easier it is to write, the more you'll write, in a virtuous circle.
Learn C before graduating 
Part two: C. Notice I didn't say C++. Although C is becoming increasingly rare, it is still the lingua franca of working programmers. It is the language they use to communicate with one another, and, more importantly, it is much closer to the machine than ""modern"" languages that you'll be taught in college like ML, Java, Python, whatever trendy junk they teach these days. You need to spend at least a semester getting close to the machine or you'll never be able to create efficient code in higher level languages. You'll never be able to work on compilers and operating systems, which are some of the best programming jobs around. You'll never be trusted to create architectures for large scale projects. I don't care how much you know about continuations and closures and exception handling: if you can't explain why while (*s++ = *t++); copies a string, or if that isn't the most natural thing in the world to you, well, you're programming based on superstition, as far as I'm concerned: a medical doctor who doesn't know basic anatomy, passing out prescriptions based on what the pharma sales babe said would work.
Learn microeconomics before graduating
Super quick review if you haven't taken any economics courses: econ is one of those fields that starts off with a bang, with many useful theories and facts that make sense, can be proven in the field, etc., and then it's all downhill from there. The useful bang at the beginning is microeconomics, which is the foundation for literally every theory in business that matters. After that things start to deteriorate: you get into Macroeconomics (feel free to skip this if you want) with its interesting theories about things like the relationship of interest rates to unemployment which, er, seem to be disproven more often than they are proven, and after that it just gets worse and worse and a lot of econ majors switch out to Physics, which gets them better Wall Street jobs, anyway. But make sure you take Microeconomics, because you have to know about supply and demand, you have to know about competitive advantage, and you have to understand NPVs and discounting and marginal utility before you'll have any idea why business works the way it does.
Why should CS majors learn econ? Because a programmer who understands the fundamentals of business is going to be a more valuable programmer, to a business, than a programmer who doesn't. That's all there is to it. I can't tell you how many times I've been frustrated by programmers with crazy ideas that make sense in code but don't make sense in capitalism. If you understand this stuff, you're a more valuable programmer, and you'll get rewarded for it, for reasons which you'll also learn in micro.
Don't blow off non-CS classes just because they're boring. 
Blowing off your non-CS courses is a great way to get a lower GPA. 
Never underestimate how big a deal your GPA is. Lots and lots of recruiters and hiring managers, myself included, go straight to the GPA when they scan a resume, and we're not going to apologize for it. Why? Because the GPA, more than any other one number, reflects the sum of what dozens of professors over a long period of time in many different situations think about your work. SAT scores? Ha! That's one test over a few hours. The GPA reflects hundreds of papers and midterms and classroom participations over four years. Yeah, it's got its problems. There has been grade inflation over the years. Nothing about your GPA says whether you got that GPA taking easy classes in home economics at Podunk Community College or taking graduate level Quantum Mechanics at Caltech. Eventually, after I screen out all the 2.5 GPAs from Podunk Community, I'm going to ask for transcripts and recommendations. And then I'm going to look for consistently high grades, not just high grades in computer science.
Why should I, as an employer looking for software developers, care about what grade you got in European History? After all, history is boring. Oh, so, you're saying I should hire you because you don't work very hard when the work is boring? Well, there's boring stuff in programming, too. Every job has its boring moments. And I don't want to hire people that only want to do the fun stuff. 
I took this course in college called Cultural Anthropology because I figured, what the heck, I need to learn something about anthropology, and this looked like an interesting survey course.
Interesting? Not even close! I had to read these incredibly monotonous books about Indians in the Brazilian rain forest and Trobriand Islanders, who, with all due respect, are not very interesting to me. At some point, the class was so incredibly wearisome that I longed for something more exciting, like watching grass grow. I had completely lost interest in the subject matter. Completely, and thoroughly. My eyes teared I was so tired of the endless discussions of piling up yams. I don't know why the Trobriand Islanders spend so much time piling up yams, I can't remember any more, it's incredibly boring, but It Was Going To Be On The Midterm, so I plowed through it. I eventually decided that Cultural Anthropology was going to be my Boredom Gauntlet: my personal obstacle course of tedium. If I could get an A in a class where the tests required me to learn all about potlatch blankets, I could handle anything, no matter how boring. The next time I accidentally get stuck in Lincoln Center sitting through all 18 hours of Wagner's Ring Cycle, I could thank my studies of the Kwakiutl for making it seem pleasant by comparison.
I got an A. And if I could do it, you can do it.
Take programming-intensive courses.
I remember the exact moment I vowed never to go to graduate school.
It was in a course on Dynamic Logic, taught by the dynamic Lenore Zuck at Yale, one of the brightest of an array of very bright CS faculty.
Now, my murky recollections are not going to do proper credit to this field, but let me muddle through anyway. The idea of Formal Logic is that you prove things are true because other things are true. For example thanks to Formal Logic, ""Everyone who gets good grades will get hired"" plus ""Johnny got good grades"" allows you to discover the new true fact, ""Johnny will get hired."" It's all very quaint and it only takes ten seconds for a deconstructionist to totally tear apart everything useful in Formal Logic so you're left with something fun, but useless.
Now, dynamic logic is the same thing, with the addition of time. For example, ""after you turn the light on, you can see your shoes"" plus ""The light went on in the past"" implies ""you can see your shoes.""
Dynamic Logic is appealing to brilliant theoreticians like Professor Zuck because it holds up the hope that you might be able to formally prove things about computer programs, which could be very useful, if, for example, you could formally prove that the Mars Rover's flash card wouldn't overflow and cause itself to be rebooted again and again all day long when it's supposed to be driving around the red planet looking for Marvin the Martian.
So in the first day of that class, Dr. Zuck filled up two entire whiteboards and quite a lot of the wall next to the whiteboards proving that if you have a light switch, and the light was off, and you flip the switch, the light will then be on.
The proof was insanely complicated, and very error-prone. It was harder to prove that the proof was correct than to convince yourself of the fact that switching a light switch turns on the light. Indeed the multiple whiteboards of proof included many skipped steps, skipped because they were too tedious to go into formally. Many steps were reached using the long-cherished method of Proof by Induction, others by Proof by Reductio ad Absurdum, and still others using Proof by Graduate Student.
For our homework, we had to prove the converse: if the light was off, and it's on now, prove that you flipped it.
I tried, I really did.
I spent hours in the library trying.
After a couple of hours I found a mistake in Dr. Zuck's original proof which I was trying to emulate. Probably I copied it down wrong, but it made me realize something: if it takes three hours of filling up blackboards to prove something trivial, allowing hundreds of opportunities for mistakes to slip in, this mechanism would never be able to prove things that are interesting. 
Not that that matters to dynamic logicians: they're not in it for useful, they're in it for tenure.
I dropped the class and vowed never to go to graduate school in Computer Science.
The moral of the story is that computer science is not the same as software development. If you're really really lucky, your school might have a decent software development curriculum, although, they might not, because elite schools think that teaching practical skills is better left to the technical-vocational institutes and the prison rehabilitation programs. You can learn mere programming anywhere. We are Yale University, and we Mold Future World Leaders. You think your $160,000 tuition entititles you to learn about while loops? What do you think this is, some fly-by-night Java seminar at the Airport Marriott? Pshaw.
The trouble is, we don't really have professional schools in software development, so if you want to be a programmer, you probably majored in Computer Science. Which is a fine subject to major in, but it's a different subject than software development.
If you're lucky, though, you can find lots of programming-intensive courses in the CS department, just like you can find lots of courses in the History department where you'll write enough to learn how to write. And those are the best classes to take. If you love programming, don't feel bad if you don't understand the point of those courses in lambda calculus or linear algebra where you never touch a computer. Look for the 400-level courses with Practicum in the name. This is an attempt to hide a useful (shudder) course from the Liberal Artsy Fartsy Administration by dolling it up with a Latin name.
Stop worrying about all the jobs going to India.
Well, OK, first of all, if you're already in India, you never really had to worry about this, so don't even start worrying about all the jobs going to India. They're wonderful jobs, enjoy them in good health.
But I keep hearing that enrollment in CS departments is dropping perilously, and one reason I hear for it is ""students are afraid to go into a field where all the jobs are going to India."" That's so wrong for so many reasons. First, trying to choose a career based on a current business fad is foolish. Second, programming is incredibly good training for all kinds of fabulously interesting jobs, such as business process engineering, even if every single programming job does go to India and China. Third, and trust me on this, there's still an incredible shortage of the really good programmers, here and in India. Yes, there are a bunch of out of work IT people making a lot of noise about how long they've been out of work, but you know what? At the risk of pissing them off, really good programmers do have jobs. Fourth, you got any better ideas? What are you going to do, major in History? Then you'll have no choice but to go to law school. And there's one thing I do know: 99% of working lawyers hate their jobs, hate every waking minute of it, and they're working 90 hour weeks, too. Like I said: if you love to program computers, count your blessings: you are in a very fortunate minority of people who can make a great living doing work they love.
Anyway, I don't think students really think about this. The drop in CS enrollment is merely a resumption of historically normal levels after a big bubble in enrollment caused by dotcom mania. That bubble consisted of people who didn't really like programming but thought the sexy high paid jobs and the chances to IPO at age 24 were to be found in the CS department. Those people, thankfully, are long gone.
No matter what you do, get a good summer internship.
Smart recruiters know that the people who love programming wrote a database for their dentist in 8th grade, and taught at computer camp for three summers before college, and built the content management system for the campus newspaper, and had summer internships at software companies. That's what they're looking for on your resume. 
If you enjoy programming, the biggest mistake you can make is to take any kind of job-summer, part time, or otherwise-that is not a programming job. I know, every other 19-year-old wants to work in the mall folding shirts, but you have a skill that is incredibly valuable even when you're 19, and it's foolish to waste it folding shirts. By the time you graduate, you really should have a resume that lists a whole bunch of programming jobs. The A&F graduates are going to be working at Enterprise Rent-a-Car ""helping people with their rental needs."" (Except for Tom Welling. He plays Superman on TV.)
To make your life really easy, and to underscore just how completely self-serving this whole essay is, my company, Fog Creek Software, has summer internships in software development that look great on resumes. ""You will most likely learn more about software coding, development, and business with Fog Creek Software than any other internship out there,"" says Ben, one of the interns from last summer, and not entirely because I sent a goon out to his dorm room to get him to say that. The application deadline is February 1st. Get on it.
If you follow my advice, you, too, may end up selling stock in Microsoft way too soon, turning down jobs at Google because you want your own office with a door, and other stupid life decisions, but they won't be my fault. I told you not to listen to me.
	"
https://www.joelonsoftware.com/2005/01/02/news-55/,News,2005-01-02T00:06:53+00:00,,Joel Spolsky,News,"
	Most college students, fortunately, are brash enough never to bother asking their elders for advice, which, in the field of computer science, is a good thing, because their elders are apt to say goofy, antediluvian things like ""the demand for keypunch operators will exceed 100,000,000 by the year 2010"" and ""lisp careers are really very hot right now.""
I, too, have no idea what I'm talking about when I give advice to college students. But that's never stopped me from writing before.
College Advice
	"
https://www.joelonsoftware.com/2005/02/23/news-65/,News,2005-02-23T00:07:03+00:00,,Joel Spolsky,News,"
	Phew! and w00t! Last night at about 7:35 FogBugz 4.0 finally went live, on the exact day we planned to ship it quite a few months ago.
 
I have put a lot of other things on hold while we got this major upgrade out the door, so I'll be spending some time in catch-up mode for the next few weeks. And now I'm going to take a nap.
The Large Print Giveth and the Small Print Taketh Away: What we shipped today was FogBugz 4.0 for Windows. The Unix & Mac versions are now in beta and will be shipping Real Soon Now.
	"
https://www.joelonsoftware.com/2005/02/17/news-64/,News,2005-02-17T00:07:02+00:00,,Joel Spolsky,News,"
	Usability Time! When Microsoft AntiSpyware is running it displays this dialog:
... which looks, to me, like it's telling me that it detected spyware on my system.
Oh, wait! No, that's not it, it's just a lazy programmer who wrote this code:
10 PRINT ""DETECTED SPYWARE ON YOUR SYSTEM:""20 FOR I = 1 TO 100000000030 IF SPYWARE(I) THEN PRINT FILENAME(I)40 NEXT I
I think I get it. It's the heading for a list which has not arrived yet because you're still busy scanning my harddrive searching for spyware which I don't have. The usual programmer mentality (""it's just a list with 0 elements, what's so hard to understand about that?""). Hey guys, next time don't use a message that's only one pixel away from telling me the exact wrong fact about whether or not there's spyware on my system.
So far, it looks like this is a nifty program, and consumers should be happy that Microsoft has announced it will be free, but it really, really would have been nice for us here in the software industry if Microsoft had set a price on this thing just to provide some air cover for the other companies working on spyware removal. This is not a software category where a monopoly monoculture will be a good thing. 
Not only that, but I wonder if Microsoft can run an antispyware product without huge conflicts of interest. For example, will they block all the spyware that Real installs on your system? While Real is suing them? Especially when blocking spyware from Real will just give Real more ammunition to use against Microsoft in court? And the next time Microsoft needs a DRM favor from your friendly neighborhood media conglomerate, will the media conglomerate demand exemption from Antispyware removal for their adware in exchange for supporting Windows Media 37.0, with the new brain-zapping feature that prevents you from humming any song unless you bought the performance rights? (A sheet of tinfoil wrapped tightly around your skull is effective against this zapper, I understand.)
I understand that Microsoft wants to help customers who feel like a spyware-free operating system should be your right when you pay for WinXP, but it's a shame that by giving it away free they're likely to wipe out a useful industry and replace it with something that's difficult to trust due to conflicts of interest.
	"
https://www.joelonsoftware.com/2005/02/16/news-63/,News,2005-02-16T00:07:01+00:00,,Joel Spolsky,News,"
	Jamie Zawinski on Groupware: ""So I said, narrow the focus. Your 'use case' should be, there's a 22 year old college student living in the dorms. How will this software get him laid?""
	"
https://www.joelonsoftware.com/2005/02/12/news-62/,News,2005-02-12T00:07:00+00:00,,Joel Spolsky,News,"
	Katie Lucas: ""Step 1: write about running really fast. Step 2: Go and draw a plan of the racetrack. Step 3: go and buy really tight lycra shorts. Step 4: run really, really, really fast. Step 5: cross line first.""
	"
https://www.joelonsoftware.com/2005/02/11/foreword-to-painless-project-management-with-fogbugz-by-mike-gunderloy/,"Foreword to Painless Project Management with FogBugz, by Mike Gunderloy",2005-02-11T00:15:01+00:00,2016-12-05T19:15:40+00:00,Joel Spolsky,"Rock star developer, News","
	There's a restaurant in my New York City neighborhood called Isabella's that's always packed.
Downstairs, upstairs, at the sidewalk cafe, it's mobbed. And there are large crowds of happy yuppies out front, waiting 45 minutes for a table when they can clearly see other perfectly good restaurants right across the street which have plenty of tables.
It doesn't matter when you go there. For Sunday brunch, it's packed. Friday night? Packed, of course. But go on a quiet Wednesday night at 11:00 PM. You'll get a table fairly quickly, but the restaurant is still, basically, packed.
Is it the food? Nah. Ruth Reichl, restaurant reviewer extraordinaire from the New York Times, dismissed it thusly: ""The food is not very good."" 
The prices? I doubt anyone cares. This is the neighborhood where Jerry Seinfeld bought Isaac Stern's apartment with views over two parks.
Lack of competition? What, are you serious? This is Manhattan!
Here's a clue as to why Isabella's works. In ten years living in this neighborhood, I still go back there. All the time. Because they've never given me a single reason not to.
That actually says a lot.
I never go to a certain fake-Italian art-themed restaurant, because once I ate there and the waiter, who had gone beyond rude well into the realm of actual cruelty, mocking our entree choices, literally chased us down the street complaining about the small tip we left him.
I stopped going to another hole-in-the-wall pizza-pasta-bistro because the owner would come sit down at our table while we ate and ask for computer help.
I really, really loved the food at a local curry restaurant with headache-inducing red banquettes and zebra-striped decor. The katori chat was to die for. I was even willing to overlook the noxious smell of ammonia wafting up from the subterranean bathrooms. But the food inevitably took an hour to arrive, even when the place was empty, so I just never went back.
But in ten years I can't think of a single bad thing that ever happened to me at Isabella's.
Nothing.
So that's why it's so packed. People keep coming back, again and again, because when you dine at Isabella's, nothing will ever go wrong.
Isabella's is thoroughly and completely debugged.
It takes you ten years to notice this, because most of the time when you eat at a restaurant, nothing goes wrong. It took a couple of years of going to the curry place before we realized they were always going to make us miss our movie, no matter how early we arrived, and we finally had to write them off.
And so, on the Upper West Side of Manhattan, if you're a restaurant, and you want to thrive, you have to carefully debug everything.
You have to make sure that there's always someone waiting to greet guests. This person must learn never to leave the maitre d' desk to show someone to their table, because otherwise the next person will come in and there will be nobody there to greet them. Instead, someone else needs to show patrons to their tables. And give them their menus, right away. And take their coats and drink orders.
You have to figure out who your best customers are-the locals who come on weekday nights when the restaurant is relatively quiet-and give them tables quickly on Friday night, even if the out-of-towners have to wait a little longer.
You need a procedure so that every water glass is always full.
Every time somebody is unhappy, that's a bug. Write it down. Figure out what you're going to do about it. Add it to the training manual. Never make the same mistake twice.
Eventually, Isabella's became a fabulously profitable and successful restaurant, not because of its food, but because it was debugged. Just getting what we programmers call ""the edge cases"" right was sufficient to keep people coming back, and telling their friends, and that's enough to overcome a review where the New York Times calls your food ""not very good.""
Great products are great because they're deeply debugged. Restaurants, software, it's all the same.
Great software doesn't crash when you do weird, rare things, because everybody does something weird. 
Microsoft developer Larry Osterman, working on DOS 4, once thought he had found a rare bug. ""But if that were the case,"" he told DOS architect Gordon Letwin, ""it'd take a one in a million chance for it to happen.""
Letwin's reply? ""In our business, one in a million is next Tuesday."" 
Great software helps you out when you misunderstand it. If you try to drag a file to a button in the taskbar, Windows pops up a message that says, essentially, ""You can't do that!"" but then it goes on to tell you how you can accomplish what you're obviously trying to do (try it!)
Great software pops up messages that show that the designers have thought about the problem you're working on, probably more than you have. In FogBugz, for example, if you try to reply to an email message but someone else tries to reply to that same email at the same time, you get a warning and your response is not sent until you can check out what's going on.
Great software works the way everybody expects it to. I'm probably one of the few people left who still closes windows by double clicking in the top left corner instead of clicking on the [x] button. I don't know why I do that, but it always works, with great software. Some software that I have is not so great. It doesn't close if you double click in the top left corner. That makes me a little bit frustrated. It probably made a lot of people frustrated, and a lot of those people probably complained, but I'll bet you that the software developers just didn't do bug tracking, because they have never fixed that bug and probably never will.
What great software has in common is being deeply debugged and the only way to get software that's deeply debugged is to keep track of your bugs.
A bug tracking database is not just a memory aid, or a scheduling tool. It doesn't make it easier to produce great software, it makes it possible to create great software.
With bug tracking, every idea gets into the system. Every flaw gets into the system. Every tester's possible misinterpretation of the user interface gets into the system. Every possible improvement that anybody thinks about gets into the system.
Bug tracking software captures the cosmic rays that cause the genetic mutations that make your software evolve into something superior.
And as you constantly evaluate, reprioritize, triage, punt, and assign these flaws, the software evolves. It gets better and better. It learns to deal with more and more weird situations, more and more misunderstanding users, and more and more scenarios.
That's when something magical happens, and your software becomes better than just the sum of its features. Suddenly it becomes reliable. Reliable, meaning, it never screws up. It never makes its users angry. It never makes its customers wish they had purchased something else.
And that magic is the key to success. In restaurants as in software.
	"
https://www.joelonsoftware.com/2005/02/11/news-61/,News,2005-02-11T00:06:59+00:00,,Joel Spolsky,News,"
	w00t! Hot off the presses, copies of Mike Gunderloy's excellent new book, Painless Project Management with FogBugz, just arrived in the Fog Creek Office!
This book covers FogBugz 4.0 in detail. I wrote the foreword, which you can read here.
Astute readers will note that FogBugz 4.0 is not quite available for sale yet, but it will be, by March 1st. We're also going to be selling Mike Gunderloy's book on the Fog Creek online store, which will be the first inventory item in the history of Fog Creek, so we'll need to make some changes to the online store software.
	"
https://www.joelonsoftware.com/2005/02/07/news-60/,News,2005-02-07T00:06:58+00:00,,Joel Spolsky,News,"
	Thanks to everyone who sent me advice on our new servers. I've updated the document a bit with the information I've learned.
Upcoming Events
A lot of events coming up in March!
On March 16th I'll be speaking at the O'Reilly Emerging Technology Conference in San Diego. It will be somewhat similar to my talk at Amazon.com, which was about why Brad Pitt and the Apple iPod are so doggone popular, while Ian Somerhalder and the elegantly named ""Creative Nomad Jukebox Zen Extra"" are not. Also there will be jokes and music.
The very next day, March 17th, I'll be at Software Development West in Santa Clara, at a ""fireside chat"" with Alexandra Weber Morales. I'm not sure where the fire is coming from.
And the very next day after that, March 18th, my publisher, Apress, will host an open-house/pizza party in Berkeley (exact time and location to be announced) for anyone who wants to stop by and say hi.
Way in the future, like, July or something, I'll be giving a keynote at the Cold Fusion conference in Washington, D.C. More about that as we get closer.
	"
https://www.joelonsoftware.com/2005/02/05/colo-expansion-version-20/,Colo Expansion Version 2.0,2005-02-05T00:15:53+00:00,2016-12-05T19:32:29+00:00,Joel Spolsky,"Fog Creek Software, News","
	(Updated 2/6/05)
It's been about two years since we first installed a server at the Peer 1 colocation facility downtown. That server, a Dell 2650, has patiently handled the load for Joel on Software and Fog Creek gracefully, but there are a few issues that are starting to become more significant as Fog Creek grows and reliability becomes more important. And we need more server horsepower and scalability.
In the past I would have upgraded the system, installed it all, and written an article about it. And then people would have emailed me to suggest better ways to do things, but it would be too late.
So now for the first time ever, I'm going to publish a ""live"" article here. So far, I haven't done anything. If you have any better suggestions for how to do things, it's not too late for me to learn from your experience. As we go along, I might have a few questions for my readers who have experience with this stuff. Thanks to everyone who has emailed me so far!
Step one was figuring out what problems we're trying to solve. Here's the list:
Not enough horsepower to handle the large number of FogBugz online trials we'll be hosting. FogBugz 4.0 is a couple of weeks away from shipping and that should create a flood of people wanting to take advantage of the free online trial. (By the way, if you want to beat the traffic, apply to join the FogBugz 4,0 beta.)
Running an email server on Windows allowed us to save hardware, at the cost of buying a commercial email product, IPswitch IMail. We are very close to using up the maximum number of mailboxes we're entitled to create, and we'd really like to switch to a Linux mail server running qmail or Postfix. The votes seem to be in favor of Postfix.
Although we have a standby server, a small Dell 750 we stuck in there last summer, we don't really have a good story for handling failures. Right now we could recover from most kinds of failures in about 24 hours, and we have to take all the sites down for about 15-30 minutes when we need to apply OS patches or upgrade the server. But Fog Creek's daily revenue has grown to the point where I'm not happy with that. Our new goal is to have no single point of hardware failure be able to bring down any of our sites, to be able to upgrade OSes without bringing everything down, and to be able to recover from very major problems in 15 minutes. This goal is fairly absurd. There will always be single points of failure. The ozone layer, for example. A more accurate goal would be ""No single hard drive, power supply, or fan failure takes us out of commission for even 1 second. Any other server failure can be recovered from in 15 minutes. Routine Windows Updates will no longer bring our site down. If something happens to the colo facility, its power supply, or the City of New York, well, we go off the air for a while.""
And we want to have an architecture in place to be able to scale up our hardware relatively easily to meet new demand.
Step one in this project was finding a good sysadmin to help design and implement this project. One of the great things about Fog Creek in its fifth year is that when we need to do something, we have the money to do it. So instead of me trying to build mission critical server networks using off-the-shelf consumer grade plastic linksys crap, I called up Adam Prato, who I had worked with at Juno, who has years of experience building out these kinds of things. After about an hour briefing he wrote up a very professional plan, sketched out the basic architecture of the new network, and started recommending purchases.
In choosing servers, there's a lot of benefit to using totally standard, identical parts. It makes it easy to swap things around when you need to scale or when something fails, and things are cheaper by the dozen. In order to avoid going totally broke, we still want reasonably affordable servers, but my requirement of ""no single point of failure"" means we need servers with dual power supplies, hot-swap RAID, and everything engineered for longetivity. That tends to narrow things down to the Dell PowerEdge 2850, which is the updated version of the 2650 we have now. I looked into the equivalent HP box. It looks like it costs 2-3 times as much for the equivalent thing.
The current plan is to get six servers:
1 and 2: web servers running Windows 2003. Two mirrors, each containing every site we host. We're using Win2003 instead of Win2000 because mirroring is much easier - the IIS 6.0 metabase is just a big XML file so we should be able to mirror the two machines using something as simple as ROBOCOPY. In fact, I think we can stage all our web sites back at the Fog Creek office and let Robocopy distribute them out to the web servers. 
We will have some rudimentary load balancing by using a different IP address for every site that we host, and we can program each server's NIC to respond to some subset of IP addresses. That way moving a website from one server to the other is a simple matter of changing what IP addresses each server uses. We can scale up by adding more of these servers as we go along, and in the future we can use round-robin DNS or a real load balancer to distribute the load if necessary. If one server dies, the other one is a mirror so it can take up the whole load. Many people wrote in to recommend Windows' built-in Network Load Balancing. I think this may be overkill for the first generation but it sounds like a good idea in the long run.
3: SQL Server. Because everybody is sharing the same SQL Server, this machine will be slightly different than its peers: it will have the fastest available CPU available and it will have more hard drives plugged in. I heard that it's a good idea to get the transaction logs onto a different physical drive than the data itself, for better performance, so I think this machine will have two RAID 1 mirror sets (4 hard drives). Most correspondents agreed that this is the best architecture.
4: Mail and everything else server. Linux.
5: Routing server. Probably NetBSD. This machine will have four ethernet ports and will route between the public internet, the direct connection to the Fog Creek office, the ""DMZ"" containing our public-facing servers, and a private network segment containing the SQL Server machine. Many people suggested OpenBSD for better firewall support (""pf""). I'm out of my league here, and will have to trust Adam to use the right technology. Also having different OSes for #4 and #5 doesn't make sense so we'll try to pick one OS for both.
Other people thought that it might be better to use a solid-state hardware firewall/router rather than build our own on a generic Intel server. The advantages of building our own is a lot more flexibility, and somehow I think that the Dual-everything Dell PowerEdge 2850 is going to be a lot more robust than one of those dinky firewall/routers you get at CompUSA. I've already had one of those die on me with no explanation... 
6: Cold backup. Another machine, identical to the first five, sitting around ready to be used for whatever we need it for or to serve as an emergency replacement.
Each machine will contain:
A Xeon processor, 800 MHz Front Side Bus, with 1 MB Cache
SCSI RAID with room for 6 drives. All the systems will start with 2x146GB drives installed in RAID 1 (mirroring) formation, except for the SQL machine which will have 4 drives. Every hard drive in the rack will be a Seagate Cheetah, 146GB SCSI U320, at 10000 rpm. Since they're hot swappable we can move them around at will and we can keep a couple of spares in the cage. 10K is much cheaper than 15K. Some people suggested using 15K for the SQL Server but I've actually heard elsewhere that RPMs aren't such a big deal for SQL Server. And I really don't want to have two kinds of hard drive.
Dual Gigabit NICS. The whole network is going to be gigabit ethernet and we'll use unmanaged Dell gigabit switches which seem to be priced well below the (NetGear) competition. The managed gigabit switches are more than 3x the price of unmanaged gigabit switches.
2 GB RAM
Dell's DRAC 4/I remote management card (more about that in a minute).
I called up Dell and got a quote for this whole mess. By the way, if you're ever buying more than one or two machines, it's worth actually calling Dell. Somehow you always get a lower price than you would have gotten on the website. I've also been told that if you call during the last week of Dell's fiscal quarter, which I just missed, you get great deals as they spaz out trying to make their numbers for Wall Street in a classic display of American public company mismanagement.
I still have a list of open questions that I need to work on this week. If you have any answers, email is appreciated!
Question 1 - Power Management
Dell's built-in management card, the DRAC 4/I, has the ability to turn on and off the machine its plugged into, to resolve ""stuck"" systems, which is nice. But in two years of operating our current server, we've learned that the DRAC card itself (an older model, the DRAC 3) is more likely to freeze up than Windows 2000 itself. And there's no cure to a frozen DRAC card other than a full power cycle.
To address this, out of desperation, we put an APC MasterSwitch in the rack. This is basically a power strip with a web server. You can connect to it using any web browser to turn on or off anything plugged into the back. The MasterSwitch is awesome. It does one thing, and does it well.
The trouble is, this poor MasterSwitch only has 8 outlets and we have 6 servers with two power supplies each. It looks like there's a company called Sentry that makes something called the Dual Feed Power Tower, which, if I understand correctly, is designed exactly for these servers with dual feeds. Has anyone ever used such a thing? I can't find a price on the website which always makes me worry. It looks like it's about $1350. For less money I can get a new APC MasterSwitch Plus plus the ""expansion pack"" giving me 16 power outlets on two separate boxes thus reducing points of failure.
And another question - according to Dell's very cool Rack Advisor, my six PowerEdge's are going to need about 35 amps of power. Yelps. Is that believeable? From what I remember you're not even allowed to have more than 20 amps on each circuit. So I'm wondering if a single power tower switcheroo thing can handle the load. And speaking of power, sometime this week I need to track down Joe Cooper of Peer 1 networks and find out how much it would cost to upgrade from a 1/8th rack to a 1/2 rack. We'll be going from 3U today to 14U. I'm hoping that Peer 1 has some way of getting me enough amps to run six servers. Or maybe when Dell says that one of their servers consumes over 5 amps, they mean ""fully loaded"", and we won't really be close to fully loaded. People have told me that Dell is on drugs. Technically the power supplies in these things are 700 watts, but realistically you never draw that much, and so 20 amps should be fine.
Question 2 - Rack Management
As soon as we got the second server, our small backup PowerEdge 750, and put it on top of the old 2650, we had to add RAM to the 2650 (on the bottom), which was a terrible pain in the buttocks. Which made me realize we really need to rack mount all our servers properly. I need to get Peer 1 to tell me what kind of mounting equipment I need to order... Dell gives you a choice of ""VersaRails"" or ""RapidRails."" I'm sure we'll figure out how to install things, but it would be nice if Dell had a video showing how to rack mount their servers instead of badly written technical documentation with instructions like ""Install two 10-32 x 0.5-inch flange-head Phillips screws in the back mounting flange's top and third-from-top holes to secure the slide assembly to the back vertical rail."" What? VersaRail is for round holes and requires screwing things in. Rapid Rails is for square holes and things just click into place. It's not that hard, I'm told 
Question 3 - Remote Control
We need to decide between a remote KVM-over-IP system and just using Dell's built-in DRAC 4/I remote control.
The DRAC has two advantages I know of:
It has other nice features like power cycling (when it doesn't freeze) and the ability to boot your server off of a floppy or CD-ROM which is mounted over the network.
It's a lot cheaper; KVM over IP is pretty expensive.
But I'm worried about the DRAC's KVM capabilities. With version 3, you could see the computer screen while it was booting up, but after that the remote control capability disappeared for a while until the operating system came up, after which it seemed to use Windows Terminal Services or something like that to remote control the server. This is a little bit to OS-dependent for comfort. I have heard rumors that the new model DRAC 4/I fixes this problem and lets you remote control the server no matter what state the OS is in. Can anyone confirm this? If so we can probably live without an expensive KVM-over-IP solution. The bottom line is that we need to have the DRAC 4/I, because there's no other way to turn on the server remotely. Power cycling a server that was on will make it come back on, but if you screw up and tell windows to shutdown you can power cycle until next monday and it won't go on. Given that we have to buy the DRAC 4/Is anyway, I'm hoping that they are good enough and we can live without expensive KVM over IP. If I'm wrong we'll just add KVM later.
Question 4 - SQL Server on its own Machine
I've never tried running SQL Server on a separate physical box than the ASP application that's using it. I know it works since FogBugz customers do it all the time, and it seems like it should improve performance, but then again, I'm worried about the network bottleneck. We'll have fast gigabit ethernet and the two machines are only one hop away. Do I need to worry about this? I don't have to worry about this, it works fine, etc. Many people pointed out that Best Practice is to have a separate network segment/switch for the SQL traffic so it doesn't compete with web server traffic. I strongly suspect this best practice arose in the days of 10/100 ethernet, not gigabit ethernet, and that this would be overkill, although if needed it will be easy to retrofit in later since every server has 2 ethernet ports.
Question 5 - RAID And *nix
People tell me that even using Dell-standard RedHat on their own servers with RAID has the problem that there's no way to find out when a drive has failed, and that the situation is even worse with the BSDs. This could be a major problem. There's no point in having RAID if you don't find out when a drive failed. We need to make sure whatever OS we choose for the two Unix boxes supports the Dell Perc Raid Thing.
FAQ
Q: Why Windows for the web servers?
A: FogBugz is written for Windows and ported to Unix. Thus the Windows version is usually about 2 months ahead of the Unix version, and we always want to be running the latest daily builds of our own dogfood. Also, a lot of Fog Creek's existing applications such as the online store are written for ASP or ASP.NET.
Q: Why SQL Server instead of MySQL?
A: Similar historical reasons, the performance is better, and the Unicode support is far better.
Q: Don't you like Linux/Unix/MacOSX/NetBSD/BeOS?
A: Yes. I love all operating systems equally. If we were building all this software from scratch I might have taken a different technical approach, but we didn't, so get off your OS religion high horse for a minute. We're going to have a mixed environment for the foreseeable future and 90% of FogBugz customers choose to run it on Windows servers. But we will use Unix for network routing, email, DNS, and a few other small things.
Q: Why Windows 2003 instead of Windows 2000?
A: Because IIS 6.0, the web server in Windows 2003, stores all its configuration information in a XML text-file metabase, and supports ""XCOPY deployment,"" it means we'll be able to mirror web servers more trivially simply by mirroring file directories. And Windows 2003 has lots of improvements to web server performance.
Q: Why Dell?
A: My experience has been that it's easier to get a Dell server built and configured exactly the way you want it, and it usually comes out a lot cheaper than the alternatives. At least 2x cheaper than HP! And I don't like buying through resellers who don't know what they're selling. Every time I ever made the mistake of buying something from PC Connection I sentenced myself to weekly annoying sales calls from a clueless sales person who always dramatically screwed up anything I tried to buy from him. When you call Dell you get a nice, cheerful, competent kid in Austin, Texas who laughs at your jokes, no matter how dumb, and actually has the ability to do sophisticated things like read email that you sent him and then actually reply to it!
But that said, Dell has really, really crappy software skills, and their management software sucks big rocks. Every simple application they make is a horrible mess of Shockwave, HTML, Java, and Visual Basic with 35 MB of runtimes just to do some basic system administration thing. Today when I downloaded their otherwise cool Rack Advisor, the download was an EXE - a self-extracting EXE. Running the EXE extracted - wait for it - another EXE. This EXE was the single file installer. Really, really, really crappy software skills. Get some programmers, Dell! HP and IBM are reputed to have much better system management software, not that I've ever seen it.
Finally, Dell has a neat feature where you can log on to their website and see a list of every computer you've ever bought from them, and I love logging on and seeing that list get longer and longer.
Q: Why not a SAN?
A: There seem to be lots of good reasons to use a storage area network, although I don't think it's quite cost-effective for our situation. We're looking at a total bill in the neighborhood of $20K, and SAN solutions tend to start around that price.
 
	"
https://www.joelonsoftware.com/2005/02/05/news-59/,News,2005-02-05T00:06:57+00:00,,Joel Spolsky,News,"
	It's time for a server upgrade. For two years a single server has hosted the bulk of our sites, including Joel on Software, although a second smaller server has made an appearance. Over the next few weeks there will be a massive upgrade, giving us six top of the line, state of the art servers at the Peer 1 colo downtown.
In the past I would have upgraded the system, installed it all, and written an article about it. And then people would have emailed me to suggest better ways to do things, but it would be too late.
So now for the first time ever, I'm going to publish a ""live"" article here. So far, I haven't done anything. If you have any better suggestions for how to do things, it's not too late for me to learn from your experience. As we go along, I might have a few questions for my readers who have experience with this stuff.
Colo Expansion Part 1
	"
https://www.joelonsoftware.com/2005/03/31/the-road-to-fogbugz-40-part-iv/,The Road to FogBugz 4.0: Part IV,2005-03-31T00:15:54+00:00,2016-12-05T19:31:54+00:00,Joel Spolsky,"Fog Creek Software, News","
	A ridiculously small portion of the energy it takes to make a commercial software product actually goes into the writing of lines of code. I would estimate that out of every 100 calories expended by the Fog Creek team:
25 calories are spent on customer service55 calories are spent on debugging, beta testing, and minor tweaks8 calories are spent on marketing, including the Fog Creek website5 calories are spent reading college kids' resumes and interviewing said college kids5 calories are spent on code that never ships, such as the online demo and the online store
Leaving just:
2 calories spent on actually writing new lines of code that ship to a customer.
This, I think, helps explain why so many software companies started by programmers fail: programmers are really good at writing news line of code, they might be good at debugging, but nobody ever taught them how to do marketing or customer service, and they are probably horrible at graphic design.
Before a consumer will buy your software product, they'll evaluate all kinds of things to decide if it's a real product that will meet their needs:
They'll evaluate the quality of your website.
They'll look for discussion groups to see if people are actually using the product, and if the people who have problems are getting prompt resolutions.
They'll look to see if there is a third-party support infrastructure, like books.
They'll evaluate your reputation.
They'll search the web to see if you have positive buzz.
They'll see how long you've been around, and they'll try to evaluate whether you're profitable and successful and likely to stay around to continue supporting the product.
Oh, and if they have a few minutes left over, they might actually look at your product itself to see if it works.
And that explains why people buy overpriced but useless shelfware that costs $millions and doesn't really work. They rationalize that if they install it, they'll be shielded from criticism and other mercurial notes of anger.
Anyway, before we could launch FogBugz, even after the final shipping bits were perfect and ready to go, we had a list of things we wanted to have ready to make the product experience complete. For FogBugz 4.0 the big things were:
Professional-quality graphic design in the user interface
An online demo that included every feature of the product
An online movie that introduced the product for couch potatoes
A great marketing website
Getting at least one book about FogBugz into bookstores
Making a real physical product available on CD-ROM
Graphic Design
Human emotions can be really, really superficial. In particular people ridiculously overvalue aesthetics and beauty when evaluating products. It's one of the reasons iPods, and, for that matter, Keanu Reeves, are so successful. If you have a product that is functional but not beautiful you have a really, really, really, really, really, really, really, really, really, really big handicap to overcome against the product that is beautiful but maybe not so functional.
Given the importance of this I spent days looking at portfolios of web designers. I happened upon CSS Zen Garden, which was new at the time, the effort of Vancouver-based graphic designer Dave Shea who wanted to prove that CSS did not imply ugly boxy design. In those days there were only a few designs available on Zen Garden and a lot of them were done by Dave himself, but they were all stunning. (Here's one I particularly liked).
So we hired Dave to do a redesign of FogBugz.
Before:
After:
OK, now all the programmers in the audience are saying, ""what? I don't get it?!"" I know. I don't either. But the new user interface looks and feels, well, 5% more ""quality,"" whatever the heck that means, and it's all very nebulous and vague but I can tell ya everyone has been saying it's the cat's pajamas, so I'm happy.
Online Demo
The online demo speaks for itself, but we had to do a lot of work to make it possible to host hundreds or thousands of instances of FogBugz in one directory.
In particular we were afraid that one spark of good publicity would result in hundreds or thousands of people setting up new trial accounts simultaneously, which would whack the poor servers and result in a lot of potential customers thinking FogBugz was slow simply because they were trying it on an overloaded server. So we changed the trial signup procedure to include a throttle that, under peak load, allows us to slow down the creation of new trials. Occasionally, it may mean that a potential customer has to wait a few hours to try out the software, but it's better than everybody having a bad experience.
The Online Movie
One product I just can't stop singing the praises of is Camtasia Studio, by the folks at TechSmith in Okemos, Michigan. It lets you ""film"" your computer screen, all in software of course, then edit the film, add narration, then squeeze it down to a very compact flash movie you can put on the web. This is a beautiful piece of software. It does exactly what you need, works the first time, and comes with great documentation you'll never need.
I used Camtasia Studio to record an introduction to FogBugz 4.0 in movie form. The whole project took me about one day. If I had to make another movie, it would only take a couple of hours, as I learned many tricks along the way. For example the first recordings I made sounded terrible. Our offices are in New York City and a lot of street noise drifts up to us here on the 18th floor. It's not enough to notice during the day but when you're trying to record something, the muted sirens in the background are shockingly unprofessional! To make things worse, we have hardwood floors throughout the office and don't have those yucky acoustic tiles on the ceiling, so the office is acoustically live in a way which made the movie sound like I was in a big abandoned warehouse, down by the river, waiting for Kojak to arrive with a lollypop.
I gathered up all the rugs and pillows I could find at Fog Creek and moved them all into my office. With a big rug on the floor and giant sofa pillows lining every wall, the sound quality was vastly improved. In fact my office was so pleasant with all the sound-absorbing stuff that I realized it's not enough to have quiet offices; you want to have acoustically dead offices as well. For our next office space I think I'll specify thick carpeting for the private offices, even if it's not as cool as wood floors. We're seriously considering hiring Aviva Stanoff to come up with some kind of framed pillow arty thing to put on the walls to deaden the sound even more.
The Website
Um, yeah. We threw this together at the last minute. We did manage to find a few good-looking FogBugz customers to give us testimonials so we could replace the crappy stock photography with pictures of actual humans, and Dmitri found a great old picture of some craftsmen making violins. I spent a lot of time putting together a screenshot tour because a lot of people look for the screenshots first when they're learning about a new product.
FogBugz, The Book
Different people learn different ways. I always want to dive in and start using a product, but some people prefer learning about a product in a classroom, and others prefer to read a book. I've even heard people say they won't use any development tool until there's a genuine book about it in bookstores. A real book from a real publishing house is one of those things that makes a product ""feel"" real.
I had been incredibly impressed by Mike Gunderloy's classic book Coder to Developer, about all the things that a full-fledged software developer needs to do above and beyond the basic work of writing lines of code, and Mike has been working with FogBugz since version 1.0, so I persuaded him to write a book, which Apress published. 
The reason I like Mike's book so much is that it's not just a rehash of the online documentation, which is pretty detailed to begin with, and it's not just a big wasted list of steps for filling out dialog boxes. Instead Mike's book focuses on how to manage software projects using FogBugz effectively, so it adds a lot of useful material. In fact I liked the book so much I ordered a thousand copies, which we're selling along with FogBugz. Probably 20% of new FogBugz customers buy a copy or two of the book, and it's also good to have around as a handout for potential large customers.
(By the way, if you're a Mike Gunderloy fan like me, you'll be delighted to see that he has recently relaunched his website Larkware as a daily source of news about programming technologies.)
FogBugz, The CD-ROM
One of the nicest things about selling software is that there is no physical product, but I'm kind of old fashioned, and whenever I buy software online, if there's an option to receive a physical disk, I usually take it, just so I can have something physical up on the shelf that I can find if I ever need to reinstall the software. I can't tell why but somehow having the option of a physical product makes the software feel more tangible and therefore worth more money. It's a great mystery to me why this is the case but I'm sure anthopologists would not be surprised.
Since we already decided to sell physical products, i.e., the book, we needed to get set up for shipping physical products anyway, which meant inventory, postage meters, UPS accounts, and all that stuff, so I figured, against my better judgement, that it couldn't hurt to make CD-ROMs available as well.
The FogBugz CD-ROM is entirely manufactured at Fog Creek, using a robotic combination CD-ROM recorder/inkjet printer which records and prints the CD-ROM without human intervention. We put them in DVD boxes, which are a little bit classier than CD-ROM Jewel Boxes. So far it looks like we're shipping two or three a week to customers who opt to pay an extra ten bucks for physical media. It's hard to tell if it's worth it. Somehow I think that having a real packaged product makes FogBugz ""seem"" more real even if almost nobody orders it, but again, maybe that's just me being old fashioned.
Tomorrow, the aftermath!
	"
https://www.joelonsoftware.com/2005/03/31/news-76/,News,2005-03-31T00:07:14+00:00,,Joel Spolsky,News,"
	Part Four: Out of every 100 calories expended by the Fog Creek team, just 2 calories are spent on actually writing new lines of code that ship to a customer.
	"
https://www.joelonsoftware.com/2005/03/30/the-road-to-fogbugz-40-part-iii/,The Road to FogBugz 4.0: Part III,2005-03-30T00:15:47+00:00,2016-12-05T19:32:04+00:00,Joel Spolsky,"Fog Creek Software, News","
	One day in the summer of 2003, after my friend Uday had finally told me for about the 17th time that he would have bought FogBugz but they didn't have any Windows servers to run it on, I decided to figure out a plan for getting a Unix version. We had looked into Chilisoft, an implementation of ASP and VBScript that runs on Unix, but we didn't like that idea much because at the time it cost something like $1000 per server and that wouldn't be acceptable to our customers, who could have bought a whole 'nother Windows server for not much more than that.
One morning walking to work I thought, gosh, it would be cool to have a summer intern, and I could tell the intern to write an ASP compiler that generated PHP as its output. Then we could produce a Unix version of FogBugz from our source code automatically, and as we added new features to the ASP version, they would magically show up in the PHP version without any more work.
Lo and behold that day this kid named Jimmy calls up the office. He's just back from Junior year in Italy and he needed a summer job. When I gave him one of my (unpublished!) interview questions (don't look for it online, you won't find it) he answered it in exactly the same way as I had answered the same question when Brian MacDonald asked it to me for an internship at Microsoft back in 1990. All the same false starts, the same initially-wrong answer, and eventually, the ideal answer, Jimmy was sounding like a clone of me.
Against my better judgment, knowing myself, we hired him for the summer, and thus was born the Fog Creek Summer Internship program.
Jimmy didn't know PHP, or ASP, or Java, really, but we thought Java was a good implementation language for an ASP to PHP compiler, so he dealt. Within a few weeks we had something up and running. By the end of the summer it was pretty decent, running FogBugz like a champ, although after Jimmy went back to school, getting all the tiny details right took Michael another couple of months.
I keep calling this thing an ASP to PHP compiler, which leads many people to email me saying ""don't you mean translator?""
Let me explain. 
In computer science jargon a translator IS a compiler. It's exactly the same thing. Those are synonyms. 
In common usage, people think of a compiler as generating machine code, but it doesn't have to. Java and .NET compilers generate bytecode, for example. And Stroustrup's first C++ compiler, called Cfront, actually generated C code because C was portable and this made it possible to run C++ on any system that had a C compiler. When you're inventing a new language it's a waste of time generating machine language output for every architecture when you can just generate nice messy C code and let cc generate the machine language and do all the back end and optimization stuff. Cfront was terribly confusing to a lot of people because it was often referred to as a ""preprocessor,"" so people got the feeling that C++ was just a clever set of macros that use the old-school C preprocessor cpp to generate C code. Nothing could have been farther from the truth. There's no way you could use the simplistic C preprocessor to convert C++ to C. Cfront was a complete, genuine compiler, with all the classic parts of a compiler: a lexer, a parser, an abstract syntax tree, etc., but instead of outputting machine language which would only work on one CPU, it output terrifying, yet perfectly portable, C code.
And that's what our ASP to PHP compiler, Thistle, does. It's a complete compiler, not a bunch of glorified regexps, which lexes and parses a VBScript/ASP program, creates an abstract syntax tree in memory, and then generates an ""executable program"" which happens to be in PHP. So I've been calling Thistle a ""compiler"" sort of to make a point, but mostly because I'm a pedantic windbag who can't resist the opportunity to teach a little lesson to the younguns who think that a compiler has to generate machine code.
Windbagginess aside, I always get a few questions about Thistle, so I'll answer the common ones here:
Q. Why didn't you use asp2php?
The quality of the ""translation"" produced by asp2php is nowhere near good enough to produce production quality code. On samples we fed it, almost every generated line contained an error. There are some really subtle tricks to VBScript and PHP which asp2php seems to completely punt on.
(OK, you really have to know? In VBScript you can assign an array to a variable one minute, and one minute later assign an object with a default method taking one integer argument to the same variable, so the expression a(1) would translate as $a[1] in the first case and $a->$default(1) in the second case, and it's the same expression, and this fundamental problem was completely punted on by the designers of asp2php, probably justifiably so. In a moment I'll tell you how we solved it.)
Furthermore, we had a hard-and-fast requirement that the generated PHP code had to work without further tweaks. That's because the ASP code is a living thing which changes all the time, and we constantly regenerate the PHP code automatically. If there were any manual tweaks required to get the output of Thistle to work it would dramatically increase the headache of getting a PHP build. So we implemented all kinds of conditional compilation tricks, and since we controlled the compiler, we could build in all kinds of intelligence to make sure that the generated code was exactly what we wanted.
Q. Why don't you commercialize this great Thistle thing if it's so great?
Thistle is a compiler that only has to compile one program: FogBugz. That means it doesn't need to include any logic for any features that FogBugz doesn't use. There are lots of library functions we don't have to translate because we never call them. And there are conventions in our code that we always adhere to that allow the compiler to take big shortcuts. That means Thistle would not work so well for anyone else off-the-shelf.
Remember the problem of how to translate a(1), which could mean ""look up the 2nd element of array a"" or ""call the default method of the object a passing the argument 1"" depending on what type a contains at runtime? This really matters, because we use arrays, and because we use the built-in class RecordSet all over the place, doing things like rs(1) which is short for rs.Item(1).Value, and since VBScript is latebound there is no way to know what code to generate in PHP until runtime, and that's too late! The only correct thing to do in PHP would be to generate code that checks the type of a, and decides, at runtime, whether to do an array lookup or a method call. This is messy and slow and would suck big rocks in the kinds of tight loops where you tend to be using arrays.
How did we fix it? Well, thanks to Hungarian notation, so callously dissed by developers who do would not recognize a superb coding convention if it walked up to them on the Shanghai Maglev train and shook their pants leg, every recordset at Fog Creek starts with the letters ""rs"". And Thistle looks for the rs and say, ""ah, this is a recordset, you're not looking for an array value, you're calling the default method,"" and generates fast code. Based on your age you will either call this an evil hack (if you're young) or an elegant hack (if you're old); in either case it's a huge optimization made possible by the fact that Thistle only has one program to compile. Outside of Fog Creek it wouldn't work. All hail Hungarian notation!
One more reason we don't commercialize it: it's a competitive advantage to us allowing us to create server-side applications that run on Windows OR Unix (or Mac or Solaris or Linux) with a single source tree. But that's secondary.
Q. Are you serious about Hungarian notation?
Yes, it's standard at Fog Creek. We try to use something called Apps Hungarian notation, as invented by Simonyi, not the grotesque bastard Systems Hungarian notation, misinterpreted by Petzold and the entire Windows team. You can still read the original paper.
In Apps Hungarian you still have the prefixes, but they are supposed to add semantic information, not merely repeat the type of a variable. So for example when you have a buffer size, the variable should be named ""cb"", which means ""count of bytes"". Whenever you're writing C++ code that needs to deal with all kinds of strings, it's really nice to be able to look at the variable name, and if it's a psz, you know, oh, look, it's a pointer to a null-terminated string, but no memory is allocated! Or if it starts with rgch, you know it's an array of characters, with memory allocated, or rgwch, you know it's an array of Unicode (wide) chars, or if it starts with ix you know it's an index to something (or a primary key in SQL), etc. etc. It's really nice when you're manipulating unicode that cch means ""count of chars"" while cb means ""count of bytes"" since a char is not a byte, and if you ever got confused, the variable name sorts you out. And it's really nice when you don't remember if you have a pointer to a string or a pointer to a pointer to a string and the ""p"" or ""pp"" at the beginning sorts you out, too. Anyway, Hungarian is widely and correctly reviled by people who don't see the point of putting dw in front of all your longs, although even that was useful in its day, but using ""c"" for a count or ""ix"" for an index is quite helpful.
In SQL tables we use very light Hungarian to indicate the type of fields: s for strings, dt for date/time, c for a count, ix for a key, n for a number that is not a count of something or a key of some sort. The most useful aspect of this is that if a table is named Bug then you can be certain its primary key is ixBug, so whenever you're looking at SQL anywhere in the database if you see ixBug you know it's a foreign key pointing to the Bug table without bothering to look it up. And now without even thinking if you see this snippet of SQL: ""join Bar on Foo.ixBar = Bar.ixBar"" you know exactly what's going on, and if you see ""join Bar on Foo.ixFred = Bar.ixBar"" then you know it's probably wrong code because with a little bit of practice the mismatched ixFred/ixBar just jumps out at you. 
I'm especially driven crazy by people who keep blabbing on their blogs that Hungarian makes code ""less"" readable. Yes, it's less readable if you don't know the convention, but it takes about 10 minutes to learn the convention and all the important prefixes, and people who whine about Hungarian making code ""less"" readable have obviously never done this. If you know what the prefixes mean Hungarian makes code more readable because every variable gives you a little bit of free, extra useful information you don't have to go look up.
Q. How did you handle all the runtime libraries ASP provides?
We reimplemented them - either in VBScript, which gets translated to PHP, or directly in PHP. In most cases there is a very close PHP equivalent so the reimplementation is one line.
Q. What about COM objects?
That was the most work. For our own COM objects we wrote portable C++ code and we compiled that to .so's for Unix. For one of the major third-party COM objects that we use, we reimplemented it completely in PHP using a built-in PHP library. For the built-ins like Server, Response, Request, Recordset, etc. we created our own classes which usually just call underlying PHP functionality. And our implementation of Server.CreateObject knows all the tricks and just implements a giant select statement that constructs the right kind of object so we don't need an equivalent of COM class factories.
Q. Was it worth it?
Probably. FogBugz for Unix is about 10% of our sales. The effort to create it was probably 20% above the effort to create FogBugz for Windows alone. A lot of our customers are happier that we run on Unix even if they're using the Windows version, because they know they could switch servers at any time. And finally we have a certain amount of confidence that if Microsoft ever decided to stop making VBScript/ASP work on their server OS, it would be a very simple matter to change Thistle to generate the new flavor of the week ... be it Ruby.Net, Eiffel, C#, or this Language.
Tune in again tomorrow, when I'll talk about all the other stuff we did for FogBugz 4.0 to make it a complete product, not just a computer program.
	"
https://www.joelonsoftware.com/2005/03/30/news-75/,News,2005-03-30T00:07:13+00:00,,Joel Spolsky,News,"
	To make FogBugz work on Unix as well as Windows, we needed a PHP version. Rather than do a one-time port, we built a compiler that automatically generates a PHP version from the ASP source code. Read all about it in today's part III of The Road to FogBugz 4.0.
	"
https://www.joelonsoftware.com/2005/03/29/the-road-to-fogbugz-40-part-ii/,The Road to FogBugz 4.0: Part II,2005-03-29T00:15:50+00:00,2016-12-05T19:32:13+00:00,Joel Spolsky,"Fog Creek Software, News","
	A long time ago I wrote an article called What is the Work of Dogs in this Country? about the benefits of eating your own dogfood, a quaint expression in the software industry that means ""using your own product."" 
We're totally devoted to the idea of using our own software as much as possible... all my writing is done inside CityDesk (a very unstable developer build, at that, which drives everyone completely crazy), all our development is planned and tracked in FogBugz, of course, and even our customer service operation is entirely supported and tracked with FogBugz, which is why when you email us you always get a reply.
Well, almost always.
About a year ago, I noticed that people were emailing us, sometimes, and not getting responses.
This was not good.
I dug up their messages in FogBugz.
RESOLVED: SPAM, it said. Someone handling the customer service queue had decided that the email was spam and closed it without responding.
When I looked closer, it was usually because the subject line sounded kinda spammy or was blank, but sometimes it was just the proverbial Operator Error.
In the meantime I had been using SpamBayes for my own personal email. This is probably the best implementation of what is probably the best spam filtering algorithm out there: Bayesian filtering, invented by Paul Graham and first published in August 2002 in his seminal article A Plan for Spam. Bayesian filtering learns from experience. When it makes a mistake trying to classify an email as spam or non-spam, you correct it, and it looks for clues in that message so it can do a better job at classification in the future.
And I thought, gosh, here I am paying a college graduate to go through email and decide whether or not it's spam, and he's flagging 1% of email incorrectly, when there's this algorithm called Bayesian filtering which in my experience has far fewer false positives (something like 0.01% false positives). So while everybody is worried about how spam filters might inadvertently delete the proverbial crucial email from a customer, in practice, in the presence of lots of spam, human beings are far more likely to delete a real email than a well-implemented Bayesian filter.
The other thing about the Bayesian algorithm, by the way, is that it has to be implemented in the email client, not the server, because it needs to be taught about what one particular person's legitimate email looks like. For example when we get email at Fog Creek, the word ""FogBugz"" in the body of the email is strong evidence that the email is not spam while the word ""mortgage"" in the body of the email is strong evidence that the email is spam. However if you're a real estate agent or bank, the word mortgage probably occurs all the time in legitimate email. So basically Bayesian filtering is not going to work unless it knows what messages you deleted as spam and which suspicious messages you recovered. The Ipswitch guys who make a mail server tried to implement Bayesian filtering on the server, because that's what they have, and frankly that system just doesn't work.
Since spam filtering needs to be done on the client, and FogBugz is an email client, we decided that spam filtering needs to be done in FogBugz.
Now, all that probability stuff is too hard for me, so we asked Summer Intern Ben Kamens to figure it out. In a matter of weeks he had a beautiful, speedy implementation of Bayesian filtering up and running in FogBugz.
Bayesian filtering is really just a specialization of a long established AI algorithm for sorting documents based on training, and we thought, gosh, why not generalize the algorithm so that in addition to sorting incoming email into ""spam,"" ""suspect,"" and ""ham,"" it also sorted all the ham into piles, for example, ""sales,"" ""tech support,"" and ""job applications""?
Ben spent a few more weeks studying this and came up with the idea of using a tournament algorithm. He's a college athlete. They think of the world in terms of tournaments. It worked quite well. With 24 hours of training I had it sorting my own inbox into personal email, Fog Creek email, Joel on Software email, Joel on Software translator coordination email, Subversion checkin comments, bug notifications, and sales reports. Frankly it did an astonishingly good job with 100% accuracy on the obvious emails, like the checkin comments that all had the same structure, and well over 90% accuracy on the hard ones, like telling personal email from Joel on Software reader mail.
I was tempted to try and get it to sort email into messages from Republicans vs. messages from Democrats, but that was pushing my luck. 
By the way, the paper Ben wrote at the end of the summer describing his algorithm is here (PDF). This paper is the ultimate rebuttal to those grumpy people who email me, barely able to conceal their disgust, saying, ""why do you need to hire such smart people to work on bug tracking software?""
The cool thing about the implementation in FogBugz is that if the sorter makes a mistake, it's OK. You just correct it and get on with your life, and it learns from its mistake. But in the meantime it saves you 95% of the work directing incoming email to the right people.
Snippets
We got one other good idea for FogBugz 4.0 from dogfooding it. 
As long as FogBugz has had the ability to receive mail, all customer service email sent to Fog Creek goes into our own FogBugz database where anyone can answer it. 
Over time I've come to notice the occasional customer who thought we were being rude to him in an email message. On closer examination, we weren't being rude, but the email we sent seemed rude, and it was usually because it was incredibly terse and to-the-point. We decided that instead of sending emails like:
Yep, this is fixed in the latest version.
... we should be sending emails like:
Hi! Thanks for writing to us. I think I know what you're talking about, and it's definitely a bug in our product. The good news is: it's fixed! You can download the latest version by logging onto our online store at https://shop.fogcreek.com with your order ID number and email address, and that should solve this problem once and for all. If you don't have your order ID number just let me know and I'll be happy to look it up for you, or call us here at the Fog Creek office at 866-FOG-CREEK.
Please let me know if there's any other way I can be of assistance!
All the best,
(signature of a real human being)
It's sort of like translating from English to Japanese. I have never been to Japan but my father, a linguist, once told me the story of the train station in Tokyo, where the announcements were made in Japanese and English. You would hear four or five minutes of nonstop Japanese and then the English translation would be ""The train to Osaka is on platform 4."" It seems that in Japanese there is simply no way to say something that simple without cosseting it heavily in a bunch of formal etiquette-stuff. And it turns out the same thing applies to email messages, even in English. The moral of the story is that given two email messages with the same semantic content, the terse one is more likely to come across sounding rude. But given the amount of email correspondence we have to deal with here, we don't have time to be Emerson on every customer support email.
Thus was born the idea of snippets: canned bits 'n' pieces of email that you could insert into an outgoing reply with a few keystrokes. The theory is that you define a snippet like ""Please let me know if there's any other way I can be of assistance"" and then assign it to a short code like ""2"". Now while your composing your reply, you just hit 2 and then press the backquote key ` and (ding!) it is instantly replaced with the long text it represents right in front of your eyes. It's really cool and it saves a ton of time and allows us to produce the verbose email replies that are less likely to be misinterpreted. We have built up an extensive library of snippets for all kinds of ""faqs"" and common parts of email messages.
In tomorrow's installment of The Road to FogBugz, a look at Thistle, our proprietary ASP to PHP compiler/translator.
	"
https://www.joelonsoftware.com/2005/03/29/news-74/,News,2005-03-29T00:07:12+00:00,,Joel Spolsky,News,"
	We use FogBugz extensively internally to handle company email, and the process of using FogBugz ourselves (""eating our own dogfood"") motivated us to add Bayesian spam filtering, and a ""snippets"" feature to make it easy to enter common phrases and even entire messages in replies to frequently-asked questions.
In today's installment of The Road to FogBugz 4.0, a look at two new features that came out of dogfooding.
	"
https://www.joelonsoftware.com/2005/03/28/the-road-to-fogbugz-40-part-i/,The Road to FogBugz 4.0: Part I,2005-03-28T00:15:58+00:00,2016-12-05T19:32:21+00:00,Joel Spolsky,"Fog Creek Software, News","
	It started with a phone call from a customer, back in the old office. 
Most of our customers, thankfully, understand that the idea here at Fog Creek is to make shrinkwrapped, off-the-shelf software that you buy for a low price and it already does what you need, and if it doesn't, well, we'd like to hear about that, but for $99 you're not getting a customized version of the software, sorry.
Some of our customers still think we're one of those big enterprise software companies where you call them up, negotiate with a salesperson for three months, and, on the last day of the fiscal quarter, force the salesperson to promise a long list of new features in exchange for a half-million dollar contract.
That's nice, but we don't have salespeople and we're not one of those vendors. Our customers are happy that our price point is low but not all of them quite understand the implications. They ask us to fly out to their headquarters to give a demo of the software to their development team. They send us long spreadsheets with lists of features and ask us to check off the features we support. They even send us RFPs (shudder). RFP stands for ""Request for Proposal."" It's a request by a large company for a custom proposal from a small company. The small company works on the 200 page laser-printed proposal like mad for three weeks and Fedexes it in great expense and at the last minute, where it gets put in the trash because the large company has their favorite vendor who takes them on a helicopter to Atlantic City on junkets involving blackjack and strippers, and who is going to get the contract no matter what, but someone in purchasing for some unexplained reason, maybe he's bucking for a promotion is insisting that the proposal be opened up to ""competitive bidding"" and the small company has been chosen as a victim to write up a proposal that has no chance of being accepted just to make the process look a little bit less corrupt, and if you're a small company, I would recommend that you don't fall for it and don't spend any time responding to RFPs unless it's already understood that you're going to get the contract.
ANYHOO.
The good thing about such customers is that they give us useful feedback about what features we should be adding to FogBugz. One of our mantras here at Fog Creek is ""Listen to your customers, not your competitors."" So when we get calls from potential big customers we listen.
Back then, early in the planning stages of FogBugz 4.0, the call was from a large not-for-profit organization. They were considering using so many copies of FogBugz that they needed a way for department managers to see their own departments' cases in one place, even when each department managed multiple projects.
The short term solution would have been for us to add a table of departments and make a report based on departments. But we're an off-the-shelf company, and when we do something, we want to do it in a general way that's useful to a lot of customers. So we took a little bit more time and designed a more general feature and solved a large class of customer problems with one feature. In addition to customers who wanted things sorted out by department, we had customers who were typical consulting shops and wanted to sort things out by client. Most of these customers wanted privacy features so their clients could access FogBugz without seeing any other clients' bugs. And many of our customers were small shops with ten or twenty users who couldn't care less about departments, clients, or privacy features, so whatever we did needed to be implemented in a way that would have zero impact on customers who didn't care. The last thing we need is for FogBugz to become big and unwieldy because it has a lot of features and fields you don't care about.
So, OK, it took a little bit of time to deliver this feature to this particular customer. From that phone call to the time we delivered an alpha release to the customer with the new feature about twelve months elapsed. That's more because we're still oriented around big major releases every year and a half. I justified the reason for this schedule in the article Picking a Ship Date.
Many of the other features in FogBugz 4.0, which we finally shipped on February 22, were based on customer feedback, too. We kept hearing customers asking how to attach screenshots to a bug. ""Oh, it's easy,"" we said. ""Alt+Print Screen, run paintbrush, paste, save as a file somewhere, run your browser, go to the FogBugz homepage, hit ""New Case,"" describe the case, click the file browse button, and find the file you just created."" What could be easier?
Maybe it could be a bit easier.
Finally I thought ""how hard could it be to make a little taskbar lint icon thingy that grabs a screenshot and makes a bug out of it?"" Not so hard. 
I got the Windows version done in The Proverbial Weekend (defined as one weekend to get it working, two weeks to fix bugs, another week to rewrite it to workaround new bugs introduced by a patch to Internet Explorer). Daniel Berlinger knocked out the Macintosh version in REALbasic in a couple of weeks. And now entering a bug that you see on screen is a matter of two clicks.
It's great.
I've found that about 30% of the bugs I enter can be completely described with a screenshot. Here's a complete bug report I entered on Monday:
The red rectangle comes from a highlight tool built into the screenshot program. The ""wha?"" I typed was probably overkill. If I had been willing to live with an untitled bug this entire bug report could have been entered with four clicks and a drag (that sounds like a good name for a band: ""Four Clicks and a Drag."" Or the Fog Creek development team, now that I think of it.)
The thing is, as far as I know, not that I pay close attention, none of our competitors has this feature.
If one of our competitors think this is cool, they can copy us, but it'll take them a while, especially if they read my site and bought my line about only shipping every 18 months.
No amount of listening to our competitors would have motivated us to do a screenshot feature. Our customers didn't think to ask for it, but we did notice that they kept asking for ways to attach screenshots, so that's what we did.
Come back tomorrow for Part II, in which I talk about dog food.
	"
https://www.joelonsoftware.com/2005/03/28/news-73/,News,2005-03-28T00:07:11+00:00,,Joel Spolsky,News,"
	This week, I'm going to be running a five-part behind-the-scenes look at the development of FogBugz 4.0. Each morning I'll post a new installment.
Today, in The Road To FogBugz 4.0 Part I, I'll talk about a couple of major features we added after listening to customer feedback, and why our mantra is to listen to our customers and ignore our competitors.
	"
https://www.joelonsoftware.com/2005/03/23/news-72/,News,2005-03-23T00:07:10+00:00,,Joel Spolsky,News,"
	Hiring
Until now we've been hiring rarely and quietly, but lately our sales are so strong we can't quite keep up. 
My old theory of hiring was to post a job listing on Monster or Craigslist and then sort through the massive pile of unqualified applicants in hopes of finding the needle in the haystack. 
That hasn't worked so well. In the future I'm going to try putting up semi-permanent job listings for all the kinds of people we might hire on the Fog Creek website and see if that gets us a slower trickle of more qualified job applicants.
Filmmaker Wanted
We are looking for a talented filmmaker, student or experienced, to make a documentary about the software development process this summer. If you think you're interested, read on for more details!
	"
https://www.joelonsoftware.com/2005/03/18/news-71/,News,2005-03-18T00:07:09+00:00,,Joel Spolsky,News,"
	A few people who heard my talk at O'Reilly Etech wrote reviews:
""Off Topic""
""less successful""
""a bit fluffy""
""somewhere in between""
If you're in the bay area don't miss the pizza/beer reception tonight at Apress 6:00 to 7:30 pm in Berkeley, at Apress, 2560 Ninth St., Ste. 219.
	"
https://www.joelonsoftware.com/2005/04/28/news-81/,News,2005-04-28T00:07:19+00:00,,Joel Spolsky,News,"
	
 I have to give two speeches at CFUNITED, the ColdFusion technical conference coming up in Washington DC June 29th - July 1st. The first is a general keynote, in which I'll talk about Really Great Products and why the iPod is so doggone popular even though it's more expensive, and less capable, than a lot of other products that have failed in the marketplace. Also, as usual, there will be jokes, music, and pictures of Jennifer Aniston. 
The second is entitled ""Project Management the Joel on Software Way."" I'll mostly be going over The Joel Test, but at the end I'll leave time for a demo of FogBugz 4.0.
Michael Smith, who is organizing CFUNITED, interviewed me.
	"
https://www.joelonsoftware.com/2005/04/14/news-80/,News,2005-04-14T00:07:18+00:00,,Joel Spolsky,News,"
	JunkFax.org: ""Congress is about to do for junk faxes what they recently did for spam: Make it LEGAL as long as a qualified advertiser puts an ""opt out"" notice on the faxes!""
	"
https://www.joelonsoftware.com/2005/04/12/news-79/,News,2005-04-12T00:07:17+00:00,,Joel Spolsky,News,"
	Eric J. Smith reminds me why having a great book about your product, by a great author, pays off in spades: ""As I kept reading, I quickly realized that FogBugz could single-handedly manage my support requests, sales requests, bug tracking and project management for CodeSmith.""
	"
https://www.joelonsoftware.com/2005/04/09/news-78/,News,2005-04-09T00:07:16+00:00,,Joel Spolsky,News,"
	As another of my continuing experiments in discussion groups, I've opened a job posting discussion group, where the theory is that quality is more important than quantity.
	"
https://www.joelonsoftware.com/2005/04/01/the-road-to-fogbugz-40-part-v/,The Road to FogBugz 4.0: Part V,2005-04-01T00:16:02+00:00,2016-12-05T19:31:47+00:00,Joel Spolsky,"Fog Creek Software, News","
	I was really hoping to ship FogBugz for Windows and FogBugz for Unix on the same day, but it just wasn't gonna happen. There were a bunch of little details we needed to get right on the Unix side and with over a year of development we had accumulated a few little things that Thistle didn't compile perfectly. And it seemed a shame to hold up the Windows version (90% of the market) for the Unix version (10%). So on February 23, 2005, at 7:35 PM Eastern Time, FogBugz 4.0 for Windows went live.
I thought to myself, ah, now I can relax.
I have no idea why I thought that.
I should know by now that shipping software is the beginning, not the end.
We promptly got whacked. The phone lines lit up like a New Mexico license plate frame. Our weekly sales tripled. We could barely keep up with the phone calls and email inquiries. This is a good problem to have, and I don't know why I did not predict it, but even if I had, I probably wouldn't have done anything differently: I believed what Eric Sink wrote in The Hazards of Hiring: ""Don't fill a position until after the need for that position is painfully clear.""
And we won the Jolt Award, which is unbelievably cool (4.0 was too late so the award was for version 3.1):
In the meantime, we've got another half dozen things on our plates at Fog Creek Software. We're starting to get the kind of gigantic customers who want things just a little bit different, and they're willing to pay so much money for it you'd be insane not to give in. 
We're working on rolling out a new scalable stack o' servers to handle the demands for the next five years. 
We're gearing up for the coolest summer internship program you've ever heard of... our four interns will develop a brand new product from soup to nuts, and get the darn thing up and running and earning real money from real customers by the end of the summer - something that's challenging enough without a filmmaker running around making a documentary about it, which, I hope, does not turn out like The Restaurant, Blow Out, or, god forbid, The Office. My David Brent streak is a mile long and will need to be actively surpressed. ""I see myself as a friend first, probably entertainer second, and boss third...""
And we really, really need to hire more people, no matter what Eric says, which means we'll need a bigger office, so that's more work too, and life goes on.
	"
https://www.joelonsoftware.com/2005/04/01/news-77/,News,2005-04-01T00:07:15+00:00,,Joel Spolsky,News,"
	Today, the shocking conclusion of The Road To FogBugz.
	"
https://www.joelonsoftware.com/2005/05/31/news-92/,News,2005-05-31T00:07:30+00:00,,Joel Spolsky,News,"
	Benjamin Pollack: ""I checked out the README, which said things ought to build just fine on VisualStudio.NET 2003, so I thought it would be a piece of cake to get running. Bzzzt! I hit F5, the build starts, and then dies with my least favorite error message in the entire world: Internal Compiler Error.""
P.S. If you were about to buy FogBugz 4.0, today is the last day of the introductory pricing, so hurry up!
	"
https://www.joelonsoftware.com/2005/05/26/news-91/,News,2005-05-26T00:07:29+00:00,,Joel Spolsky,News,"
	Project Aardvark: ""I initially approached C# with a bit of trepidation. Although my bread and butter (and grades) depend on C++ and Java, anyone who knows me well knows that I'd much rather be working in one of the dynamic languages-especially Squeak Smalltalk or Ruby-than in any of the C descendents. My previous experiences with Microsoft languages (VisualBasic in all of its many varieties) did not exactly raise my expectations, and I was prepared for the worst.""
	"
https://www.joelonsoftware.com/2005/05/25/news-90/,News,2005-05-25T00:07:28+00:00,,Joel Spolsky,News,"
	FogBugz 4.0 for Unix and Macintosh is finally shipping!
 
	"
https://www.joelonsoftware.com/2005/05/21/news-89/,News,2005-05-21T00:07:27+00:00,,Joel Spolsky,News,"
	Dan Bricklin Interviews Me
Dan Bricklin: ""We talked about developers keeping track of where their code comes from and watching out for GPL code that shouldn't be there, why developers who read Slashdot and Eric Raymond are more likely to be at least somewhat aware of copyright issues than their managers who don't, differences between Windows and Unix when it comes to combining code (especially back in the days when the GPL was written), access to Microsoft source code, economics of Open Source, and more."" 
The interview is available as a 18MB MP3 file and runs about 38 minutes. Dan Bricklin was the co-creator of Visicalc, the world's first spreadsheet program.
Wall St. 101
""Remember that scam I explained to you last month?"" Jared asked me over dinner, while reviewing my investments. 
A month ago Jared had explained a clever scam Wall Street uses to rip off retail bond investors. He explained it very well. It all made sense. 
I remembered. 
""Well, you just fell for it!"" 
Hmm.
	"
https://www.joelonsoftware.com/2005/05/20/news-88/,News,2005-05-20T00:07:26+00:00,,Joel Spolsky,News,"
	A lot of people were asking what books were on the pile for the interns. Actually those books are really optimized for Project Aardvark, for example, there's a book on OpenSSL and the Time Out guide to New York. However I do have a standard list of recommended reading for all programmers. I haven't updated it since 2002, but, you know what? These are timeless classics so I probably won't revisit it again for a few more years.
Now for a little tiny hint about yesterday's puzzler. I'll print the hint in white text so you can't see it if you're still working on the problem. Drag your mouse over the hint to see it.
<hint> Imagine ten years have passed, and put yourself in the shoes of the government. Under what circumstances would the government choose to prepay Bond C? </hint>.
	"
https://www.joelonsoftware.com/2005/05/19/news-87/,News,2005-05-19T00:07:25+00:00,,Joel Spolsky,News,"
	Wall Street Survival 101
You have $100,000 to invest. Which government bond should you invest in?
Bond A, B or C?
Bond A pays 4.15%. If you buy this bond, you'll get a check for $4150 in interest at the end of every year for 10 years. With your last check, you'll get your $100,000 back. 
Bond B pays 4.5%. You'll get a check for $4500 at the end of every year for 30 years, then with your last check, you'll get your $100,000 back.
Bond C pays even more! It's 4.75%, w00t. you will get $4750 at the end of every year for 10 years, then get your original investment back, unless the government decides they want to keep your money for a little longer, in which case you'll get another 20 years of $4750 before you get your money back.
Bond C is a little more complicated so let me explain. On the tenth anniversary, the government gets to decide whether to pay you your $100K back and owe you nothing, or keep your $100K for another twenty years and keep paying you the interest. The point being, the choice is up to the government.
But either way, with Bond C, you're getting MORE interest every year, whether they decide to keep your money for 10 years or 30.
So, it's stupid to buy bonds A or B, right? Bond C is obviously the better choice.
Right?
Hints: assume that you're a left-handed avocado farmer and therefore don't pay any tax. So ignore the tax implications. Then, assume that all the bonds are equally sound, backed by the ""full faith and credit of the United States"" which, in the financial world, means there is absolutely no chance of default. This is not a trick question.
The answer tomorrow.
Interns
Project Aardvark: ""Our summer interns will have some light reading to do before they can get started.""
	"
https://www.joelonsoftware.com/2005/05/17/news-86/,News,2005-05-17T00:07:24+00:00,,Joel Spolsky,News,"
	Former intern and future employee Ben Kamens (on the right) just graduated, and is setting off tomorrow on a cross country bicycle trip with his friend Greg Fleizach to raise money for charity. He's rigged up some kind of text-message-map-gateway thingamajig so you can track their progress. Good luck, guys!
	"
https://www.joelonsoftware.com/2005/05/13/news-85/,News,2005-05-13T00:07:23+00:00,,Joel Spolsky,News,"
	New Server
The main Joel on Software site is moving to a new server today. If you can read this, you're already looking at the new server. Instead of one reasonable-sized Dell PowerEdge hosting the site, there's now a stack of six beefy servers down at Peer1.
	"
https://www.joelonsoftware.com/2005/05/11/making-wrong-code-look-wrong/,Making Wrong Code Look Wrong,2005-05-11T00:15:02+00:00,2016-12-05T19:13:57+00:00,Joel Spolsky,"Rock star developer, News","
	Way back in September 1983, I started my first real job, working at Oranim, a big bread factory in Israel that made something like 100,000 loaves of bread every night in six giant ovens the size of aircraft carriers.
The first time I walked into the bakery I couldn't believe what a mess it was. The sides of the ovens were yellowing, machines were rusting, there was grease everywhere.
""Is it always this messy?"" I asked.
""What? What are you talking about?"" the manager said. ""We just finished cleaning. This is the cleanest it's been in weeks.""
Oh boy.
It took me a couple of months of cleaning the bakery every morning before I realized what they meant. In the bakery, clean meant no dough on the machines. Clean meant no fermenting dough in the trash. Clean meant no dough on the floors.
Clean did not mean the paint on the ovens was nice and white. Painting the ovens was something you did every decade, not every day. Clean did not mean no grease. In fact there were a lot of machines that needed to be greased or oiled regularly and a thin layer of clean oil was usually a sign of a machine that had just been cleaned.
The whole concept of clean in the bakery was something you had to learn. To an outsider, it was impossible to walk in and judge whether the place was clean or not. An outsider would never think of looking at the inside surfaces of the dough rounder (a machine that rolls square blocks of dough into balls, shown in the picture at right) to see if they had been scraped clean. An outsider would obsess over the fact that the old oven had discolored panels, because those panels were huge. But a baker couldn't care less whether the paint on the outside of their oven was starting to turn a little yellow. The bread still tasted just as good.
After two months in the bakery, you learned how to ""see"" clean.
Code is the same way.
When you start out as a beginning programmer or you try to read code in a new language it all looks equally inscrutable. Until you understand the programming language itself you can't even see obvious syntactic errors.
During the first phase of learning, you start to recognize the things that we usually refer to as ""coding style."" So you start to notice code that doesn't conform to indentation standards and Oddly-Capitalized variables.
It's at this point you typically say, ""Blistering Barnacles, we've got to get some consistent coding conventions around here!"" and you spend the next day writing up coding conventions for your team and the next six days arguing about the One True Brace Style and the next three weeks rewriting old code to conform to the One True Brace Style until a manager catches you and screams at you for wasting time on something that can never make money, and you decide that it's not really a bad thing to only reformat code when you revisit it, so you have about half of a True Brace Style and pretty soon you forget all about that and then you can start obsessing about something else irrelevant to making money like replacing one kind of string class with another kind of string class.
As you get more proficient at writing code in a particular environment, you start to learn to see other things. Things that may be perfectly legal and perfectly OK according to the coding convention, but which make you worry.
For example, in C:
char* dest, src;
This is legal code; it may conform to your coding convention, and it may even be what was intended, but when you've had enough experience writing C code, you'll notice that this declares dest as a char pointer while declaring src as merely a char, and even if this might be what you wanted, it probably isn't. That code smells a little bit dirty. 
Even more subtle:
if (i != 0) foo(i);
In this case the code is 100% correct; it conforms to most coding conventions and there's nothing wrong with it, but the fact that the single-statement body of the ifstatement is not enclosed in braces may be bugging you, because you might be thinking in the back of your head, gosh, somebody might insert another line of code there
if (i != 0) bar(i); foo(i);
... and forget to add the braces, and thus accidentally make foo(i)unconditional! So when you see blocks of code that aren't in braces, you might sense just a tiny, wee, soupcon of uncleanliness which makes you uneasy.
OK, so far I've mentioned three levels of achievement as a programmer:
1. You don't know clean from unclean.
2. You have a superficial idea of cleanliness, mostly at the level of conformance to coding conventions.
3. You start to smell subtle hints of uncleanliness beneath the surface and they bug you enough to reach out and fix the code.
There's an even higher level, though, which is what I really want to talk about:
4. You deliberately architect your code in such a way that your nose for uncleanliness makes your code more likely to be correct.
This is the real art: making robust code by literally inventing conventions that make errors stand out on the screen.
So now I'll walk you through a little example, and then I'll show you a general rule you can use for inventing these code-robustness conventions, and in the end it will lead to a defense of a certain type of Hungarian Notation, probably not the type that makes people carsick, though, and a criticism of exceptions in certain circumstances, though probably not the kind of circumstances you find yourself in most of the time. 
But if you're so convinced that Hungarian Notation is a Bad Thing and that exceptions are the best invention since the chocolate milkshake and you don't even want to hear any other opinions, well, head on over to Rory's and read the excellent comix instead; you probably won't be missing much here anyway; in fact in a minute I'm going to have actual code samples which are likely to put you to sleep even before they get a chance to make you angry. Yep. I think the plan will be to lull you almost completely to sleep and then to sneak the Hungarian=good, Exceptions=bad thing on you when you're sleepy and not really putting up much of a fight.
An Example
Right. On with the example. Let's pretend that you're building some kind of a web-based application, since those seem to be all the rage with the kids these days.
Now, there's a security vulnerability called the Cross Site Scripting Vulnerability, a.k.a. XSS. I won't go into the details here: all you have to know is that when you build a web application you have to be careful never to repeat back any strings that the user types into forms.
So for example if you have a web page that says ""What is your name?"" with an edit box and then submitting that page takes you to another page that says, Hello, Elmer! (assuming the user's name is Elmer), well, that's a security vulnerability, because the user could type in all kinds of weird HTML and JavaScript instead of ""Elmer"" and their weird JavaScript could do narsty things, and now those narsty things appear to come from you, so for example they can read cookies that you put there and forward them on to Dr. Evil's evil site.
Let's put it in pseudocode. Imagine that
s = Request(""name"")
reads input (a POST argument) from the HTML form. If you ever write this code:
Write ""Hello, "" & Request(""name"")
your site is already vulnerable to XSS attacks. That's all it takes.
Instead you have to encode it before you copy it back into the HTML. Encoding it means replacing "" with &quot;, replacing > with &gt;, and so forth. So
Write ""Hello, "" & Encode(Request(""name""))
is perfectly safe.
All strings that originate from the user are unsafe. Any unsafe string must not be output without encoding it.
Let's try to come up with a coding convention that will ensure that if you ever make this mistake, the code will just look wrong. If wrong code, at least, looks wrong, then it has a fighting chance of getting caught by someone working on that code or reviewing that code.
Possible Solution #1
One solution is to encode all strings right away, the minute they come in from the user:
s = Encode(Request(""name""))
So our convention says this: if you ever see Request that is not surrounded by Encode, the code must be wrong.
You start to train your eyes to look for naked Requests, because they violate the convention.
That works, in the sense that if you follow this convention you'll never have a XSS bug, but that's not necessarily the best architecture. For example maybe you want to store these user strings in a database somewhere, and it doesn't make sense to have them stored HTML-encoded in the database, because they might have to go somewhere that is not an HTML page, like to a credit card processing application that will get confused if they are HTML-encoded. Most web applications are developed under the principle that all strings internally are not encoded until the very last moment before they are sent to an HTML page, and that's probably the right architecture.
We really need to be able to keep things around in unsafe format for a while.
OK. I'll try again. 
Possible Solution #2
What if we made a coding convention that said that when you write out any string you have to encode it?
s = Request(""name"")// much later:Write Encode(s)
Now whenever you see a naked Write without the Encode you know something is amiss.
Well, that doesn't quite work... sometimes you have little bits of HTML around in your code and you can't encode them:
If mode = ""linebreak"" Then prefix = ""<br>""
// much later:Write prefix
This looks wrong according to our convention, which requires us to encode strings on the way out:
Write Encode(prefix)
But now the ""<br>"", which is supposed to start a new line, gets encoded to &lt;br&gt; and appears to the user as a literal < b r >. That's not right either.
So, sometimes you can't encode a string when you read it in, and sometimes you can't encode it when you write it out, so neither of these proposals works. And without a convention, we're still running the risk that you do this:
s = Request(""name"")
...pages later...name = s
...pages later...recordset(""name"") = name // store name in db in a column ""name""
...days later...theName = recordset(""name"") 
...pages or even months later...Write theName
Did we remember to encode the string? There's no single place where you can look to see the bug. There's no place to sniff. If you have a lot of code like this, it takes a ton of detective work to trace the origin of every string that is ever written out to make sure it has been encoded.
The Real Solution
So let me suggest a coding convention that works. We'll have just one rule:
All strings that come from the user must be stored in variables (or database columns) with a name starting with the prefix ""us"" (for Unsafe String). All strings that have been HTML encoded or which came from a known-safe location must be stored in variables with a name starting with the prefix ""s"" (for Safe string).
Let me rewrite that same code, changing nothing but the variable names to match our new convention.
us = Request(""name"")
...pages later...usName = us
...pages later...recordset(""usName"") = usName 
...days later...sName = Encode(recordset(""usName""))
...pages or even months later...Write sName
The thing I want you to notice about the new convention is that now, if you make a mistake with an unsafe string, you can always see it on some single line of code, as long as the coding convention is adhered to:
s = Request(""name"")
is a priori wrong, because you see the result of Request being assigned to a variable whose name begins with s, which is against the rules. The result of Request is always unsafe so it must always be assigned to a variable whose name begins with ""us"".
us = Request(""name"")
is always OK.
usName = us
is always OK.
sName = us
is certainly wrong.
sName = Encode(us)
is certainly correct.
Write usName
is certainly wrong.
Write sName
is OK, as is
Write Encode(usName)
Every line of code can be inspected by itself, and if every line of code is correct, the entire body of code is correct.
Eventually, with this coding convention, your eyes learn to see the Write usXXX and know that it's wrong, and you instantly know how to fix it, too. I know, it's a little bit hard to see the wrong code at first, but do this for three weeks, and your eyes will adapt, just like the bakery workers who learned to look at a giant bread factory and instantly say, ""jay-zuss, nobody cleaned insahd rounduh fo-ah! What the hayl kine a opparashun y'awls runnin' heey-uh?"" 
In fact we can extend the rule a bit, and rename (or wrap) the Request and Encodefunctions to be UsRequest and SEncode... in other words, functions that return an unsafe string or a safe string will start with Us and S, just like variables. Now look at the code:
us = UsRequest(""name"")usName = usrecordset(""usName"") = usName sName = SEncode(recordset(""usName""))Write sName
See what I did? Now you can look to see that both sides of the equal sign start with the same prefix to see mistakes.
us = UsRequest(""name"") // ok, both sides start with USs = UsRequest(""name"") // bugusName = us // oksName = us // certainly wrong.sName = SEncode(us) // certainly correct.
Heck, I can take it one step further, by naming Write to WriteS and renaming SEncode to SFromUs:
us = UsRequest(""name"")usName = usrecordset(""usName"") = usName sName = SFromUs(recordset(""usName""))WriteS sName
This makes mistakes even more visible. Your eyes will learn to ""see"" smelly code, and this will help you find obscure security bugs just through the normal process of writing code and reading code.
Making wrong code look wrong is nice, but it's not necessarily the best possible solution to every security problem. It doesn't catch every possible bug or mistake, because you might not look at every line of code. But it's sure a heck of a lot better than nothing, and I'd much rather have a coding convention where wrong code, at least, looked wrong. You instantly gain the incremental benefit that every time a programmer's eyes pass over a line of code, that particular bug is checked for and prevented.
A General Rule
This business of making wrong code look wrong depends on getting the right things close together in one place on the screen. When I'm looking at a string, in order to get the code right, I need to know, everywhere I see that string, whether it's safe or unsafe. I don't want that information to be in another file or on another page that I would have to scroll to. I have to be able to see it right there and that means a variable naming convention.
There are a lot of other examples where you can improve code by moving things next to each other. Most coding conventions include rules like:
Keep functions short.
Declare your variables as close as possible to the place where you will use them.
Don't use macros to create your own personal programming language.
Don't use goto.
Don't put closing braces more than one screen away from the matching opening brace.
What all these rules have in common is that they are trying to get the relevant information about what a line of code really does physically as close together as possible. This improves the chances that your eyeballs will be able to figure out everything that's going on. 
In general, I have to admit that I'm a little bit scared of language features that hide things. When you see the code
i = j * 5;
... in C you know, at least, that j is being multiplied by five and the results stored in i. 
But if you see that same snippet of code in C++, you don't know anything. Nothing. The only way to know what's really happening in C++ is to find out what types i and j are, something which might be declared somewhere altogether else. That's because j might be of a type that has operator* overloaded and it does something terribly witty when you try to multiply it. And i might be of a type that has operator= overloaded, and the types might not be compatible so an automatic type coercion function might end up being called. And the only way to find out is not only to check the type of the variables, but to find the code that implements that type, and God help you if there's inheritance somewhere, because now you have to traipse all the way up the class hierarchy all by yourself trying to find where that code really is, and if there's polymorphism somewhere, you're really in trouble because it's not enough to know what type i and j are declared, you have to know what type they are right now, which might involve inspecting an arbitrary amount of code and you can never really be sure if you've looked everywhere thanks to the halting problem (phew!).
When you see i=j*5 in C++ you are really on your own, bubby, and that, in my mind, reduces the ability to detect possible problems just by looking at code.
None of this was supposed to matter, of course. When you do clever-schoolboy things like override operator*, this is meant to be to help you provide a nice waterproof abstraction. Golly, j is a Unicode String type, and multiplying a Unicode String by an integer is obviously a good abstraction for converting Traditional Chinese to Standard Chinese, right?
The trouble is, of course, that waterproof abstractions aren't. I've already talked about this extensively in The Law of Leaky Abstractions so I won't repeat myself here.
Scott Meyers has made a whole career out of showing you all the ways they fail and bite you, in C++ at least. (By the way, the third edition of Scott's book Effective C++ just came out; it's completely rewritten; get your copy today!)
Okay.
I'm losing track. I better summarize The Story Until Now:
Look for coding conventions that make wrong code look wrong. Getting the right information collocated all together in the same place on screen in your code lets you see certain types of problems and fix them right away.
I'm Hungary
So now we get back to the infamous Hungarian notation.
Hungarian notation was invented by Microsoft programmer Charles Simonyi. One of the major projects Simonyi worked on at Microsoft was Word; in fact he led the project to create the world's first WYSIWYG word processor, something called Bravo at Xerox Parc.
In WYSIWYG word processing, you have scrollable windows, so every coordinate has to be interpreted as either relative to the window or relative to the page, and that makes a big difference, and keeping them straight is pretty important.
Which, I surmise, is one of the many good reasons Simonyi started using something that came to be called Hungarian notation. It looked like Hungarian, and Simonyi was from Hungary, thus the name. In Simonyi's version of Hungarian notation, every variable was prefixed with a lower case tag that indicated the kind of thing that the variable contained. 
I'm using the word kind on purpose, there, because Simonyi mistakenly used the word type in his paper, and generations of programmers misunderstood what he meant.
If you read Simonyi's paper closely, what he was getting at was the same kind of naming convention as I used in my example above where we decided that us meant ""unsafe string"" and s meant ""safe string."" They're both of type string. The compiler won't help you if you assign one to the other and Intellisense won't tell you bupkis. But they are semantically different; they need to be interpreted differently and treated differently and some kind of conversion function will need to be called if you assign one to the other or you will have a runtime bug. If you're lucky.
Simonyi's original concept for Hungarian notation was called, inside Microsoft, Apps Hungarian, because it was used in the Applications Division, to wit, Word and Excel. In Excel's source code you see a lot of rw and col and when you see those you know that they refer to rows and columns. Yep, they're both integers, but it never makes sense to assign between them. In Word, I'm told, you see a lot of xl and xw, where xl means ""horizontal coordinates relative to the layout"" and xw means ""horizontal coordinates relative to the window."" Both ints. Not interchangeable. In both apps you see a lot of cb meaning ""count of bytes."" Yep, it's an int again, but you know so much more about it just by looking at the variable name. It's a count of bytes: a buffer size. And if you see xl = cb, well, blow the Bad Code Whistle, that is obviously wrong code, because even though xl and cb are both integers, it's completely crazy to set a horizontal offset in pixels to a count of bytes.
In Apps Hungarian prefixes are used for functions, as well as variables. So, to tell you the truth, I've never seen the Word source code, but I'll bet you dollars to donuts there's a function called YlFromYw which converts from vertical window coordinates to vertical layout coordinates. Apps Hungarian requires the notation TypeFromType instead of the more traditional TypeToType so that every function name could begin with the type of thing that it was returning, just like I did earlier in the example when I renamed Encode SFromUs. In fact in proper Apps Hungarian the Encode function would have to be named SFromUs. Apps Hungarian wouldn't really give you a choice in how to name this function. That's a good thing, because it's one less thing you need to remember, and you don't have to wonder what kind of encoding is being referred to by the word Encode: you have something much more precise.
Apps Hungarian was extremely valuable, especially in the days of C programming where the compiler didn't provide a very useful type system. 
But then something kind of wrong happened. 
The dark side took over Hungarian Notation.
Nobody seems to know why or how, but it appears that the documentation writers on the Windows team inadvertently invented what came to be known as Systems Hungarian.
Somebody, somewhere, read Simonyi's paper, where he used the word ""type,"" and thought he meant type, like class, like in a type system, like the type checking that the compiler does. He did not. He explained very carefully exactly what he meant by the word ""type,"" but it didn't help. The damage was done. 
Apps Hungarian had very useful, meaningful prefixes like ""ix"" to mean an index into an array, ""c"" to mean a count, ""d"" to mean the difference between two numbers (for example ""dx"" meant ""width""), and so forth.
Systems Hungarian had far less useful prefixes like ""l"" for long and ""ul"" for ""unsigned long"" and ""dw"" for double word, which is, actually, uh, an unsigned long. In Systems Hungarian, the only thing that the prefix told you was the actual data type of the variable.
This was a subtle but complete misunderstanding of Simonyi's intention and practice, and it just goes to show you that if you write convoluted, dense academic prose nobody will understand it and your ideas will be misinterpreted and then the misinterpreted ideas will be ridiculed even when they weren't your ideas. So in Systems Hungarian you got a lot of dwFoo meaning ""double word foo,"" and doggone it, the fact that a variable is a double word tells you darn near nothing useful at all. So it's no wonder people rebelled against Systems Hungarian.
Systems Hungarian was promulgated far and wide; it is the standard throughout the Windows programming documentation; it was spread extensively by books like Charles Petzold's Programming Windows, the bible for learning Windows programming, and it rapidly became the dominant form of Hungarian, even inside Microsoft, where very few programmers outside the Word and Excel teams understood just what a mistake they had made.
And then came The Great Rebellion. Eventually, programmers who never understood Hungarian in the first place noticed that the misunderstood subset they were using was Pretty Dang Annoying and Well-Nigh Useless, and they revolted against it. Now, there are still some nice qualities in Systems Hungarian, which help you see bugs. At the very least, if you use Systems Hungarian, you'll know the type of a variable at the spot where you're using it. But it's not nearly as valuable as Apps Hungarian.
The Great Rebellion hit its peak with the first release of .NET. Microsoft finally started telling people, ""Hungarian Notation Is Not Recommended."" There was much rejoicing. I don't even think they bothered saying why. They just went through the naming guidelines section of the document and wrote, ""Do Not Use Hungarian Notation"" in every entry. Hungarian Notation was so doggone unpopular by this point that nobody really complained, and everybody in the world outside of Excel and Word were relieved at no longer having to use an awkward naming convention that, they thought, was unnecessary in the days of strong type checking and Intellisense.
But there's still a tremendous amount of value to Apps Hungarian, in that it increases collocation in code, which makes the code easier to read, write, debug, and maintain, and, most importantly, it makes wrong code look wrong. 
Before we go, there's one more thing I promised to do, which is to bash exceptions one more time. The last time I did that I got in a lot of trouble. In an off-the-cuff remark on the Joel on Software homepage, I wrote that I don't like exceptions because they are, effectively, an invisible goto, which, I reasoned, is even worse than a goto you can see. Of course millions of people jumped down my throat. The only person in the world who leapt to my defense was, of course, Raymond Chen, who is, by the way, the best programmer in the world, so that has to say something, right?
Here's the thing with exceptions, in the context of this article. Your eyes learn to see wrong things, as long as there is something to see, and this prevents bugs. In order to make code really, really robust, when you code-review it, you need to have coding conventions that allow collocation. In other words, the more information about what code is doing is located right in front of your eyes, the better a job you'll do at finding the mistakes. When you have code that says
dosomething();cleanup();
... your eyes tell you, what's wrong with that? We always clean up! But the possibility that dosomething might throw an exception means that cleanupmight not get called. And that's easily fixable, using finally or whatnot, but that's not my point: my point is that the only way to know that cleanup is definitely called is to investigate the entire call tree of dosomething to see if there's anything in there, anywhere, which can throw an exception, and that's ok, and there are things like checked exceptions to make it less painful, but the real point is that exceptions eliminate collocation. You have to look somewhere else to answer a question of whether code is doing the right thing, so you're not able to take advantage of your eye's built-in ability to learn to see wrong code, because there's nothing to see.
Now, when I'm writing a dinky script to gather up a bunch of data and print it once a day, heck yeah, exceptions are great. I like nothing more than to ignore all possible wrong things that can happen and just wrap up the whole damn program in a big ol' try/catch that emails me if anything ever goes wrong. Exceptions are fine for quick-and-dirty code, for scripts, and for code that is neither mission critical nor life-sustaining. But if you're writing an operating system, or a nuclear power plant, or the software to control a high speed circular saw used in open heart surgery, exceptions are extremely dangerous. 
I know people will assume that I'm a lame programmer for failing to understand exceptions properly and failing to understand all the ways they can improve my life if only I was willing to let exceptions into my heart, but, too bad. The way to write really reliable code is to try to use simple tools that take into account typical human frailty, not complex tools with hidden side effects and leaky abstractions that assume an infallible programmer.
More Reading
If you're still all gung-ho about exceptions, read Raymond Chen's essay Cleaner, more elegant, and harder to recognize. ""It is extraordinarily difficult to see the difference between bad exception-based code and not-bad exception-based code... exceptions are too hard and I'm not smart enough to handle them.""
Raymond's rant about Death by Macros, A rant against flow control macros, is about another case where failing to get information all in the same place makes code unmaintainable. ""When you see code that uses [macros], you have to go dig through header files to figure out what they do.""
For background on the history of Hungarian notation, start with Simonyi's original paper, Hungarian Notation. Doug Klunder introduced this to the Excel team in a somewhat clearer paper. For more stories about Hungarian and how it got ruined by documentation writers, read Larry Osterman's post, especially Scott Ludwig's comment, or Rick Schaut's post.
	"
https://www.joelonsoftware.com/2005/05/11/news-84/,News,2005-05-11T00:07:22+00:00,,Joel Spolsky,News,"
	""It's at this point you typically say, 'Blistering Barnacles, we've got to get some consistent coding conventions around here!' and you spend the next day writing up coding conventions for your team and the next six days arguing about the One True Brace Style and the next three weeks rewriting old code to conform to the One True Brace Style until a manager catches you and screams at you for wasting time on something that can never make money, and you decide that it's not really a bad thing to only reformat code when you revisit it, so you have about half of a True Brace Style and pretty soon you forget all about that and then you can start obsessing about something else irrelevant to making money like replacing one kind of string class with another kind of string class.""
Making Wrong Code Look Wrong
	"
https://www.joelonsoftware.com/2005/06/24/news-100/,News,2005-06-24T00:07:38+00:00,,Joel Spolsky,News,"
	Washington, DC
Live in the greater DC area? Planning a trip to Our Nation's Capital for July 4th weekend? Why not stop by CFUNITED and see what the Project Aardvark interns are up to?
CFUNITED is the ColdFusion developers conference, which is going to be held just outside of DC at the Bethesda North Marriott, also known as the Montgomery County Conference Center, next week, from June 29-July 1. I'll be giving the keynote speech on Wednesday and also doing a session on The Joel Test on Thursday.
On Wednesday and Thursday, in the Fog Creek booth, the Aardvarks will be doing the first public demos of their product, SidePilot. Yep, it's basically working, although still rather unpolished. If you're a Joel on Software reader you can register FREE for an ""exhibit only"" pass to come see the demo.
The Fog Creek booth will be open:
Wednesday, June 299:30am - 1:00pm and 2:00pm - 7:00pm
Thursday June 309:30am - 10:50am and 11:50am - 5:45pm
I'll be there, too, and so will Brett, one of the FogBugz developers, so if you'd like to talk in person to someone about FogBugz here's your chance..
To register for CFUNITED:
If you just want a free pass to the exhibit area, use code X3545, Visa card 4444, expiration date 11/11.
For the full conference use code S1515089 to get a $50 discount
In either case write ""Joel on Software Reader"" in the comments section
See you there!
	"
https://www.joelonsoftware.com/2005/06/23/news-99/,News,2005-06-23T00:07:37+00:00,,Joel Spolsky,News,"
	The Best Software Writing I is #1 in computer books on Amazon!
The publisher told me they sold out of the first printing in three days. Apparently it is completely whuping ""PMP Exam Prep (4th Edition)"", which is number 2. They probably didn't think to put Leon Bambrick's drawing of a cow in their book.
Her Majesty Queen Elizabeth II, on Sony UI design: ""I have a lot of trouble with your remote controls. Too many arrows."" Me too.
	"
https://www.joelonsoftware.com/2005/06/21/news-98/,News,2005-06-21T00:07:36+00:00,,Joel Spolsky,News,"
	Some reviews of The Best Software Writing I:
Rooneg::Weblog: ""The whole book is fantastic though, and you should absolutely pick it up when it's available in dead tree form, I know I intend to.""
Marc A. Garrett: ""Mr. Spolsky, with the help of his readers, has assembled an outstanding collection of essays. A few of them are likely to be as relevant five years from now as they are today, and that's saying something. Highly recommended.""
Where else can you get Rory's hysterical comic strip about how people use Excel as a database (""I'll have to take a photo of the printout with my Kodak Funtime digital camera..."") alongside Adam Bosworth's ISCON talk saying basically the same thing (""That software which is flexible, simple, sloppy, tolerant, and altogether forgiving of human foibles and weaknesses turns out to be actually the most steel-cored..."")? Where else will you find Bruce Eckel's proposal to use unit tests as a replacement for strong type checking to insure correctness of applications written in late-bound scripting languages, alongside Leon Bambrick's hysterical critique of Windows Search (""Why is a dog asking me questions?"") Where else will you find the most important writing about social interfaces, from danah boyd's brilliant dismissal of social networking products (""Why on earth should we encourage people to perform a mental disorder in the digital world?"") to Clay Shirky on Kaycee Nicole (""changing your identity is really weird"")?
Well... on the inkernet, I guess, but if you like to read in the bath, while driving, or in the Himalayas, or you want to preserve your eyesight for that hunting trip you've been planning, you should read the dead-trees version.
The Best Software I is available from Amazon.com and on all the local Amazon sites (although some of the international ones still have an old title for the book - you'll have to search for ""Joel Spolsky""). And I was just joking about reading while driving.
 
	"
https://www.joelonsoftware.com/2005/06/20/news-97/,News,2005-06-20T00:07:35+00:00,,Joel Spolsky,News,"
	""The software development world desperately needs better writing. If I have to read another 2000 page book about some class library written by 16 separate people in broken ESL, I'm going to flip out. If I see another hardback book about object oriented models written with dense faux-academic pretentiousness, I'm not going to shelve it any more in the Fog Creek library: it's going right in the recycle bin. If I have to read another spirited attack on Microsoft's buggy code by an enthusiastic nine year old Trekkie on Slashdot, I might just poke my eyes out with a sharpened pencil. Stop it, stop it, stop it!""
That's from my introduction to The Best Software Writing I: Selected and Introduced by Joel Spolsky, now in bookstores. It includes 29 great short pieces of brilliant, insightful, and often hysterically funny stuff about software. You can read the introduction here.
	"
https://www.joelonsoftware.com/2005/06/17/news-96/,News,2005-06-17T00:07:34+00:00,,Joel Spolsky,News,"
	I think I'm ready to declare email bankrupcy. I simply have no hope of ever getting anywhere close to answering the email already in my inbox, let alone keeping up with the incoming flow.
On the bright side, Project Aardvark had their first successful end-to-end demo on Wednesday. ""The building is nowhere near done yet; walls and floors are missing, not to mention windows, doors, air conditioner vents, the candy stand in the lobby, and the dead guy in cement in the basement who tried to smuggle a non-union electrician onto the work site, but you've hit the top and the building never gets any higher.""
Folks, give Robert Scoble a break. Folks over at Microsoft are feeling a little defensive these days, and he just wanted to point out that Microsoft can still be a great place to work. Apparently Hillary Clinton, the President of Indochina, had lunch with Malcolm Gladwell there, where they signed his super tablet computer. Rock on.
That wasn't really my point. My post was replying to an article by a recruiter at Microsoft who complained about the talent landscape:
""Hiring Managers (and I'm referring to Microsoft Hiring Managers ... but I know this problem exists in other companies) not 'getting' the talent landscape. Not only do they not seem to understand that brilliant software engineers don't grow on trees (you don't, do you?) ... but they can't seem to get it through their heads that 1) Microsoft isn't the only place hiring, 2) Working at a big company isn't everyone's dream, and 3) Redmond is not the first place people say they want to move when they wake up in the morning.""
That's a recruiter who works for Microsoft talking, not me.
So, my point to Gretchen, sympathetically, was, ""recruiting has to be done at the Bill and Steve level, not at the Gretchen level."" Want to solve Microsoft's recruiting problem? Open a downtown development center in Pioneer Square and another one South of Market in San Francisco. Then split up the company into lots of small, well-funded startups and give people stock options in their own products, which actually have a fighting chance of growing. Then create some spinoffs with their own personality. Spin off X-Box so it feels more like a cool gaming startup rather than a big corporate ""General Motors Trying to Sell Hip Things to an Appealing Demographic."" I'm sure there are a million other ideas, but none of the kind of decisions that would make Microsoft an even more attractive workplace are in the hands of the recruiting department or even the hiring managers. No wonder there's so much frustration.
Years and years and years ago when I started this site I wrote that ""a software company has to think of recruiting the right people as its number one problem."". After five years of running Fog Creek I still think that way, which is why we set up Project Aardvark.
Seth Godin wrote: ""I feel sorry for Judy Verses. She's the Chief Marketing Officer of Verizon, a brand that is justifiably reviled by millions of people. Is Verizon disdained, mistrusted and avoided because Judy's not doing a great job? Of course not. She's doing a great job."" 
Read what Seth has to say. Marketing is the CEO's job, since that's the only person who can really drive the kinds of changes that the public cares about. And recruiting is the CEO's job, too.
	"
https://www.joelonsoftware.com/2005/06/15/news-95/,News,2005-06-15T00:07:33+00:00,,Joel Spolsky,News,"
	Recruiting
To Gretchen: recruiting successfully isn't only up to recruiters. The best recruiting department in the world can't make people want to work at a company that's moribund, that can't figure out how to ship a compelling upgrade to their flagship OS, or update their flagship database server more than once every five years, that has added tens of thousands of technical workers who aren't adding any dollars to the bottom line, and that constantly annoys twenty year veterans by playing Furniture Police games over what office furniture they are and aren't allowed to have. Summer interns at Fog Creek have better chairs, monitors, and computers than the most senior Microsoft programmers.
Recruiting has to be done at the Bill and Steve level, not at the Gretchen level. No matter how good a recruiter you are, you can't compensate for working at a company that people don't want to work for; you can't compensate for being the target of eight years of fear and loathing from the slashdot community, which very closely overlaps the people you're trying to recruit, and you can't compensate for the fact that a company with a market cap of $272 billion just ain't going to see their stock price go up. MSFT can grow by an entire Google every year and still see less than 7% growth in earnings. You can be the best recruiter in the world and the talent landscape is not going to look very inviting if the executives at your company have spent the last years focusing on cutting benefits, cutting off oxygen supplies, and cutting features from Longhorn.
Network Load Balancing Works
For the first time ever I was able to install today's round of Microsoft patches on our web servers without bringing the sites down at all. I'm very happy about this, since this was the main point of upgrading the web farm.
We have two web servers, web1.fogcreek.com and web2.fogcreek.com, each with their own IP address, but using a feature built into Windows 2003 called Network Load Balancing, they both share the web site load using a third IP address, which I've named webnlb.fogcreek.com. Whenever a request comes in on that shared IP address, it is distributed to one of the web servers at random. If requests come in from the same class C address range, those requests will prefer to go to the same web server that previously served that address range. So for the most part the same user will always go to the same physical machine, if possible, so stateful web applications still work even if the state is maintained on one computer.
I actually like the NLB system a bit more than using a dedicated hardware load balancer. Here's why: there's no single point of failure. If you have a hardware load balancer and that needs to be updated or rebooted or if it fails, you're off the air. Whereas Windows NLB is all-software and each server in the cluster is a peer, so any server can die and the rest of the system stays up.
When I needed to install today's Windows updates, here's what I did:
Told WEB1 to drainstop. That means ""finish serving any requests you're working on, but don't take any new requests."" This took three or four minutes before it flatlined; WEB2 silently picked up the entire load.
Installed the upgrades on WEB1 and rebooted it.
Repeat for WEB2, while WEB1 held up the entire load.
As far as I can tell nobody should have seen a single hiccup in the sites served from the new web farm.
	"
https://www.joelonsoftware.com/2005/06/13/news-94/,News,2005-06-13T00:07:32+00:00,,Joel Spolsky,News,"
	The interns report: ""In Aardvark, for example, I initially attached some new connection-specific handshaking code inside a class that controlled the windows taskbar icon for our program. That probably sounds a bit silly, but it actually made a reasonable amount of sense."" Riiight.
	"
https://www.joelonsoftware.com/2005/06/02/news-93/,News,2005-06-02T00:07:31+00:00,,Joel Spolsky,News,"
	Michael Pryor reports: ""Once you get Subversion set up and running, if you are on Windows, you will be amazed at how useful a good Subversion client can be. Steve King has created a fantastic piece of software, the TortoiseSVN client, and he has spent some time making sure that it works perfectly with FogBugz.""
Mystery from next door
We share the floor of our building with a contracting firm, White&Carr, who moved in shortly after we did. We were always on good terms with them, and they seemed like a generic, successful contracting company. They were talking about opening a new office in Philly.
The founder of the firm, Raymond White, often came by our office to chat and be neighborly. Some of you may have met him at our open house last year.
A few weeks ago, as I left the office, I noticed a woman banging on the door to the office. ""Have you seen anyone from this company lately?""
I hadn't. But I told her that Raymond had an apartment down the street. ""Did you check his apartment?""
""He's not there either,"" she said.
As the weeks went by we noticed nobody was coming or going, and we could see under the door that an awful lot of mail was piling up there.
The landlord told us they had stopped paying their rent. The building super told us that the workers stopped coming in to work because they weren't getting paid.
Weird.
I'll bet you think I'm going to tell you what happened. I don't know!
	"
https://www.joelonsoftware.com/2005/07/30/usability-testing-with-morae/,Usability Testing with Morae,2005-07-30T00:15:45+00:00,2016-12-05T19:31:17+00:00,Joel Spolsky,"News, Program manager","
	The last time I participated in formal usability testing was at a fancy lab in Colorado, custom built for the purpose at a cost of around $100,000. It was basically a television studio, complete with one-way glass, lots of special video gear, and a giant video console that would have been adequate to broadcast the Superbowl. To do usability testing for Juno, a group of us flew out to Colorado, rented cars, stayed in a hotel, ate at expensive restaurants, and generally consumed massive amounts of money so we could watch people try to sign up for our online service, and, generally, succeed.
At the other extreme, I've long been an advocate of hallway usability tests and paper prototypes, which often find some of the biggest usability problems long before they occur for about fifty cents.
Now there's a middle ground. My friends over at TechSmith in Okemos, Michigan recently released a software product called Morae which lets you use cheap webcams to set up a complete usability lab in your office without fancy equipment or one-way glass. I asked them if they would be willing to usability test their own product by running a usability test in the Fog Creek office for our new remote assistance service, and they graciously agreed.
Here's how Morae works. You set up your usability testing subject in front of a computer with a webcam and a microphone:
Then any number of people can watch the subject from their own computers:
Here Tyler is watching two screens: one is showing the helper and the other is showing the person being helped. He can see their screens, hear everything they say, and see video of the subject in the corner. We happen to have windows between the offices at Fog Creek so he can actually see the helper through his window. Let's see if I can zoom in on Tyler's screens:
In my book on UI design, I wrote about a common problem with usability tests:
In most usability tests, you prepare a list of instructions for the user. For example, if you were usability testing an Internet access provider, you might have an instruction to ""sign up for the service."" (I actually did this very usability test, several times, in my career.)
So far so good. The first user comes in, sits down, starts signing up for the service, and gets to the screen asking them how they want to pay. The user looks at me helplessly. ""Do I gotta pay for this myself?""
""Oh wait,"" you interrupt. ""Here, use this fake credit card number.""
The sign up procedure then asks them if they would like to use a regular modem, a cable modem, or a DSL line.
""What do I put here?"" asks the user. Possibly because they don't know the answer, but possibly because they know the answer for their computer, but they're not using their computer, they're using your computer, which they've never seen before, in a usability lab, where they've never been before.
To work around this problem, usability testers have started trying to do field testing. Instead of giving the subject tasks to do in a highly contrived environment, you conspire to watch the subject doing their own work at their own desk while you hide in a nearby shrub and spy on them. Morae, by the way, would be perfect for that. This method is most useful when you already have a version n of your product and you're trying to figure out how to improve version n+1.
The usability test worked great. Our usability test was a little bit uncommon in that we had two subjects, since Fog Creek Copilot involves a helper and a helpee, and Morae only let us hear one subject at a time from one computer. To work around this we just set up two computers with the Morae Remote Viewer so we could get the sound from both subjects.
So far this morning we've run two usability test sessions, with great results: we've already realized that 2 out of 2 helpers were confused about how to get reconnected, since the Fog Creek Copilot helper application deletes itself when you're done with it. This is a classic example of the user model not conforming to the program model ... most programs don't delete themselves! ... which is the source of virtually every usability problem. From the very first chapter of UI for Programmers:
The cardinal axiom of all user interface design:
A user interface is well-designed when the program behaves exactly how the user thought it would.
I should have known this. The program design violated a principle I wrote myself in big bold print in my own book: it didn't do what you expected. The great thing about usability tests is with a day of usability testing and handful of subjects, even if you're as senile as I am, you can find the biggest areas where you didn't realize where the program's behavior diverges from the user's expected behavior.
	"
https://www.joelonsoftware.com/2005/07/30/news-108/,News,2005-07-30T00:07:46+00:00,,Joel Spolsky,News,"
	The great thing about usability tests is with a day of usability testing and handful of subjects, even if you're as senile as I am, you can find the biggest areas where you didn't realize where the program's behavior diverges from the user's expected behavior.
Usability Testing with Morae
	"
https://www.joelonsoftware.com/2005/07/28/news-107/,News,2005-07-28T00:07:45+00:00,,Joel Spolsky,News,"
	The contents of the office next door to us are being auctioned off as we speak. I hope that means we'll be able to expand into there soon: we've totally outgrown our existing office space.
The interns have spent the last two weeks working on performance enhancements to copilot.com. They put in support for automatically finding proxy servers and using them if necessary, and this week they've been working on raw speed. Tonight the whole company is going to sales training, in the form of the play Glengarry Glen Ross.
Thanks to David McNett for sending me the great I (heart) Unicode T-Shirt! He's selling them, both in Mac and Windows format, on cafepress.
 
	"
https://www.joelonsoftware.com/2005/07/26/news-106/,News,2005-07-26T00:07:44+00:00,,Joel Spolsky,News,"
	A small note from yesterday's post. Although the compression algorithm is commonly called ""LZW,"" the original paper was credited to Ziv first, so I think it should properly be referred to as Ziv-Lempel-Welch or ZLW.
	"
https://www.joelonsoftware.com/2005/07/25/hitting-the-high-notes/,Hitting the High Notes,2005-07-25T00:15:18+00:00,2016-12-05T19:43:36+00:00,Joel Spolsky,"Recruiter, News","
	In March, 2000, I launched this site with the shaky claim that most people are wrong in thinking you need an idea to make a successful software company:
The common belief is that when you're building a software company, the goal is to find a neat idea that solves some problem which hasn't been solved before, implement it, and make a fortune. We'll call this the build-a-better-mousetrap belief. But the real goal for software companies should be converting capital into software that works.
For the last five years I've been testing that theory in the real world. The formula for the company I started with Michael Pryor in September, 2000 can be summarized in four steps:
Best Working Conditions
->
Best Programmers
->
Best Software
->
Profit!
It's a pretty convenient formula, especially since our real goal in starting Fog Creek was to create a software company where we would want to work. I made the claim, in those days, that good working conditions (or, awkwardly, ""building the company where the best software developers in the world would want to work"") would lead to profits as naturally as chocolate leads to chubbiness or cartoon sex in video games leads to gangland-style shooting sprees.
For today, though, I want to answer just one question, because if this part isn't true, the whole theory falls apart. That question is, does it even make sense to talk about having the ""best programmers?"" Is there so much variation between programmers that this even matters?
Maybe it's obvious to us, but to many, the assertion still needs to be proven.
Several years ago a larger company was considering buying out Fog Creek, and I knew it would never work as soon as I heard the CEO of that company say that he didn't really agree with my theory of hiring the best programmers. He used a biblical metaphor: you only need one King David, and an army of soldiers who merely had to be able to carry out orders. His company's stock price promptly dropped from 20 to 5, so it's a good thing we didn't take the offer, but it's hard to pin that on the King David fetish.
And in fact the conventional wisdom in the world of copycat business journalists and large companies who rely on overpaid management consultants to think for them, chew their food, etc., seems to be that the most important thing is reducing the cost of programmers.
In some other industries, cheap is more important than good. Wal*Mart grew to be the biggest corporation on Earth by selling cheap products, not good products. If Wal*Mart tried to sell high quality goods, their costs would go up and their whole cheap advantage would be lost. For example if they tried to sell a tube sock that can withstand the unusual rigors of, say, being washed in a washing machine, they'd have to use all kinds of expensive components, like, say, cotton, and the cost for every single sock would go up.
So, why isn't there room in the software industry for a low cost provider, someone who uses the cheapest programmers available? (Remind me to ask Quark how that whole fire-everybody-and-hire-low-cost-replacements plan is working.)
Here's why: duplication of software is free. That means that the cost of programmers is spread out over all the copies of the software you sell. With software, you can improve quality without adding to the incremental cost of each unit sold.
Essentially, design adds value faster than it adds cost.
Or, roughly speaking, if you try to skimp on programmers, you'll make crappy software, and you won't even save that much money.
The same thing applies to the entertainment industry. It's worth hiring Brad Pitt for your latest blockbuster movie, even though he demands a high salary, because that salary can be divided by all the millions of people who see the movie solely because Brad is so damn hot.
Or, to put it another way, it's worth hiring Angelina Jolie for your latest blockbuster movie, even though she demands a high salary, because that salary can be divided by all the millions of people who see the movie solely because Angelina is so damn hot.
But I still haven't proven anything. What does it mean to be ""the best programmer"" and are there really such major variations between the quality of software produced by different programmers?
Let's start with plain old productivity. It's rather hard to measure programmer productivity; almost any metric you can come up with (lines of debugged code, function points, number of command-line arguments) is trivial to game, and it's very hard to get concrete data on large projects because it's very rare for two programmers to be told to do the same thing. 
The data I rely upon comes from Professor Stanley Eisenstat at Yale. Each year he teaches a programming-intensive course, CS 323, where a large proportion of the work consists of about five programming assignments, each of which takes about two weeks. The assignments are very serious for a college class: implement a Unix command-line shell, implement a ZLW file compressor, etc.
There was so much griping among the students about how much work was required for this class that Professor Eisenstat started asking the students to report back on how much time they spent on each assignment. He has collected this data carefully for several years.
I spent some time crunching the data; it's the only data sets I know of where we have dozens of students working on identical assignments using the same technology at the same time. It's pretty darn controlled, as experiments go.
The first thing I did with this data was to calculate the average, minimum, maximum, and standard deviation of hours spent on each of twelve assignments. The results:
Project
Avg Hrs
Min Hrs
Max Hrs
StDev Hrs
CMDLINE99
14.84
4.67
29.25
5.82
COMPRESS00
33.83
11.58
77.00
14.51
COMPRESS01
25.78
10.00
48.00
9.96
COMPRESS99
27.47
6.67
69.50
13.62
LEXHIST01
17.39
5.50
39.25
7.39
MAKE01
22.03
8.25
51.50
8.91
MAKE99
22.12
6.77
52.75
10.72
SHELL00
22.98
10.00
38.68
7.17
SHELL01
17.95
6.00
45.00
7.66
SHELL99
20.38
4.50
41.77
7.03
TAR00
12.39
4.00
69.00
10.57
TEX00
21.22
6.00
75.00
12.11
ALL PROJECTS
21.44
4.00
77.00
11.16
The most obvious thing you notice here is the huge variations. The fastest students were finishing three or four times faster than the average students and as much as ten times faster than the slowest students. The standard deviation is outrageous. So then I thought, hmm, maybe some of these students are doing a terrible job. I didn't want to include students who spent 4 hours on the assignment without producing a working program. So I narrowed the data down and only included the data from students who were in the top quartile of grades... the top 25% in terms of the quality of the code. I should mention that grades in Professor Eisenstat's class are completely objective: they're calculated formulaically based on how many automated tests the code passes and nothing else. No points are deducted for bad style or lateness.
Anyway, here are the results for the top quartile:
Project
Avg Hrs
Min Hrs
Max Hrs
StdDev Hrs
CMDLINE99
13.89
8.68
29.25
6.55
COMPRESS00
37.40
23.25
77.00
16.14
COMPRESS01
23.76
15.00
48.00
11.14
COMPRESS99
20.95
6.67
39.17
9.70
LEXHIST01
14.32
7.75
22.00
4.39
MAKE01
22.02
14.50
36.00
6.87
MAKE99
22.54
8.00
50.75
14.80
SHELL00
23.13
18.00
30.50
4.27
SHELL01
16.20
6.00
34.00
8.67
SHELL99
20.98
13.15
32.00
5.77
TAR00
11.96
6.35
18.00
4.09
TEX00
16.58
6.92
30.50
7.32
ALL PROJECTS
20.49
6.00
77.00
10.93
Not much difference! The standard deviation is almost exactly the same for the top quartile. In fact when you look closely at the data it's pretty clear there's no discernable correlation between the time and score. Here's a typical scatter plot of one of the assignments... I chose the assignment COMPRESS01, an implementation of Ziv-Lempel-Welch compression assigned to students in 2001, because the standard deviation there is close to the overall standard deviation.
There's just nothing to see here, and that's the point. The quality of the work and the amount of time spent are simply uncorrelated.
I asked Professor Eisenstat about this, and he pointed out one more thing: because assignments are due at a fixed time (usually midnight) and the penalties for being late are significant, a lot of students stop before the project is done. In other words, the maximum time spent on these assignments is as low as it is partially because there just aren't enough hours between the time the assignment is handed out and the time it is due. If students had unlimited time to work on the projects (which would correspond a little better to the working world), the spread could only be higher.
This data is not completely scientific. There's probably some cheating. Some students may overreport the time spent on assignments in hopes of gaining some sympathy and getting easier assignments the next time. (Good luck! The assignments in CS 323 are the same today as they were when I took the class in the 1980s.) Other students may underreport because they lost track of time. Still, I don't think it's a stretch to believe this data shows 5:1 or 10:1 productivity differences between programmers.
But wait, there's more!
If the only difference between programmers were productivity, you might think that you could substitute five mediocre programmers for one really good programmer. That obviously doesn't work. Brooks' Law, ""adding manpower to a late software project makes it later,"" is why. A single good programmer working on a single task has no coordination or communication overhead. Five programmers working on the same task must coordinate and communicate. That takes a lot of time. There are added benefits to using the smallest team possible; the man-month really is mythical.
But wait, there's even more!
The real trouble with using a lot of mediocre programmers instead of a couple of good ones is that no matter how long they work, they never produce something as good as what the great programmers can produce.
Five Antonio Salieris won't produce Mozart's Requiem. Ever. Not if they work for 100 years.
Five Jim Davis's - creator of that unfunny cartoon cat, where 20% of the jokes are about how Monday sucks and the rest are about how much the cat likes lasagna (and those are the punchlines!) ... five Jim Davis's could spend the rest of their lives writing comedy and never, ever produce the Soup Nazi episode of Seinfeld.
The Creative Zen team could spend years refining their ugly iPod knockoffs and never produce as beautiful, satisfying, and elegant a player as the Apple iPod. And they're not going to make a dent in Apple's market share because the magical design talent is just not there. They don't have it.
The mediocre talent just never hits the high notes that the top talent hits all the time. The number of divas who can hit the f6 in Mozart's Queen of the Night is vanishingly small, and you just can't perform The Queen of the Night without that famous f6.
Is software really about artistic high notes? ""Maybe some stuff is,"" you say, ""but I work on accounts receivable user interfaces for the medical waste industry."" Fair enough. This is a conversation about software companies, shrinkwrap software, where the company's success or failure is directly a result of the quality of their code. 
And we've seen plenty of examples of great software, the really high notes, in the past few years: stuff that mediocre software developers just could not have developed.
Back in 2003, Nullsoft shipped a new version of Winamp, with the following notice on their website:
Snazzy new look!
Groovy new features!
Most things actually work!
It's the last part... the ""Most things actually work!"" that makes everyone laugh. And then they're happy, and so they get excited about Winamp, and they use it, and tell their friends, and they think Winamp is awesome, all because they actually wrote on their website, ""Most things actually work!"" How cool is that?
If you threw a bunch of extra programmers onto the Windows Media Player team, would they ever hit that high note? Never in a thousand years. Because the more people you added to that team, the more likely they would be to have one real grump who thought it was unprofessional and immature to write ""Most things actually work"" on your website.
Not to mention the comment, ""Winamp 3: Almost as new as Winamp 2!""
That kind of stuff is what made us love Winamp.
By the time AOL Time Warner Corporate Weenieheads got their hands on that thing the funny stuff from the website was gone. You can just see them, fuming and festering and snivelling like Salieri in the movie Amadeus, trying to beat down all signs of creativity which might scare one old lady in Minnesota, at the cost of wiping out anything that might have made people like the product.
Or look at the iPod. You can't change the battery. So when the battery dies, too bad. Get a new iPod. Actually, Apple will replace it if you send it back to the factory, but that costs $65.95. Wowza.
Why can't you change the battery?
My theory is that it's because Apple didn't want to mar the otherwise perfectly smooth, seamless surface of their beautiful, sexy iPod with one of those ghastly battery covers you see on other cheapo consumer crap, with the little latches that are always breaking and the seams that fill up with pocket lint and all that general yuckiness. The iPod is the most seamless piece of consumer electronics I have ever seen. It's beautiful. It feels beautiful, like a smooth river stone. One battery latch can blow the whole river stone effect.
Apple made a decision based on style, in fact, iPod is full of decisions that are based on style. And style is not something that 100 programmers at Microsoft or 200 industrial designers at the inaptly-named Creative are going to be able to achieve, because they don't have Jonathan Ive, and there aren't a heck of a lot of Jonathan Ives floating around.
I'm sorry, I can't stop talking about the iPod. That beautiful thumbwheel with its little clicky sounds ... Apple spent extra money putting a speaker in the iPod itself so that the thumbwheel clicky sounds would come from the thumbwheel. They could have saved pennies ... pennies! by playing the clicky sounds through the headphones. But the thumbwheel makes you feel like you're in control. People like to feel in control. It makes people happy to feel in control. The fact that the thumbwheel responds smoothly, fluently, and audibly to your commands makes you happy. Not like the other 6,000 pocket-sized consumer electronics bit of junk which take so long booting up that when you hit the on/off switch you have to wait a minute to find out if anything happened. Are you in control? Who knows? When was the last time you had a cell phone that went on the instant you pressed the on button?
Style.
Happiness.
Emotional appeal.
These are what make the huge hits, in software products, in movies, and in consumer electronics. And if you don't get this stuff right you may solve the problem but your product doesn't become the #1 hit that makes everybody in the company rich so you can all drive stylish, happy, appealing, cars like the Ferrari Spider F-1 and still have enough money left over to build an ashram in your back yard.
It's not just a matter of ""10 times more productive."" It's that the ""average productive"" developer never hits the high notes that make great software.
Sadly, this doesn't really apply in non-product software development. Internal, in-house software is rarely important enough to justify hiring rock stars. Nobody hires Dolly Parton to sing at weddings. That's why the most satisfying careers, if you're a software developer, are at actual software companies, not doing IT for some bank.
The software marketplace, these days, is something of a winner-take-all system. Nobody else is making money on MP3 players other than Apple. Nobody else makes money on spreadsheets and word processors other than Microsoft, and, yes, I know, they did anti-competitive things to get into that position, but that doesn't change the fact that it's a winner-take-all system. 
You can't afford to be number two, or to have a ""good enough"" product. It has to be remarkably good, by which I mean, so good that people remark about it. The lagniappe that you get from the really, really, really talented software developers is your only hope for remarkableness. It's all in the plan:
Best Working Conditions
->
Best Programmers
->
Best Software
->
Profit!
	"
https://www.joelonsoftware.com/2005/07/25/news-105/,News,2005-07-25T00:07:43+00:00,,Joel Spolsky,News,"
	Does it even make sense to talk about having the ""best programmers?"" Is there so much variation between programmers that this even matters? 
Maybe it's obvious to us, but to many, the assertion still needs to be proven.
Hitting the High Notes
	"
https://www.joelonsoftware.com/2005/07/18/news-104/,News,2005-07-18T00:07:42+00:00,,Joel Spolsky,News,"
	JD has a report and pictures from the Fog Creek Open House. Thanks to everyone who came!
Also in attendance, deadprogrammer, whose website Deadprogrammer's Cafe best illustrates, through beautiful photonarratives, my theory that ""New York is the kind of place where ten things happen to you every day on the way to the subway that would have qualified as interesting dinner conversation in Bloomington, Indiana, and you don't pay them any notice.""
	"
https://www.joelonsoftware.com/2005/07/15/news-103/,News,2005-07-15T00:07:41+00:00,,Joel Spolsky,News,"
	One of the most common reactions we keep getting to Fog Creek Copilot is, ""Please don't tell my mom about this!""
Fog Creek Copilot is still in a limited beta. Yesterday we opened it to the first 50 beta testers and today we're adding another 100.
We're finding a lot of small bugs and making a lot of improvements. Over the last few days most of the bugs have been deployment issues. Since we're deploying the service on a web farm with two servers, and most of the development has been done on a single server, we found a few tiny details that needed to be fixed. Nothing major.
We're also putting a lot of work into features that it takes to make an online service with very high uptime. For example, when we upgrade the reflector part of the service, anybody still using the old reflector can continue to use it until they're done, while the new reflector picks up the new traffic; this is called ""draining."" And if one of the servers goes down, even while people are using it, the clients automatically reconnect to the other server.
	"
https://www.joelonsoftware.com/2005/07/14/news-102/,News,2005-07-14T00:07:40+00:00,,Joel Spolsky,News,"
	If you're in or around New York City today, you won't want to miss Fog Creek's Open House today!
Meet our summer interns, the Aardvarks, and see a demo of that copilot thing they've been cooking up. 
Celebrate the first beta of Fog Creek Copilot with wine, cheese, and even rumored chocolate-covered strawberries
Check out the bionic office in living color before all the expansion-construction chaos begins
Meet the filmmaker, working on a documentary on software development. You might even be in the movie!
See the fish, the new server rack, the polarizing film, the treasure chest, etc.
No rsvp necessary.
WhenTHURSDAY, July 14, 5:30 pm - 7:00 pm.
WhereFog Creek Software, 535 8th Ave. (near 37th St.), 18th Floor
SubwayA, C, E to 34th Street
	"
https://www.joelonsoftware.com/2005/07/07/project-aardvark-midterm-report/,Project Aardvark Midterm Report,2005-07-07T00:16:00+00:00,2016-12-05T19:31:40+00:00,Joel Spolsky,"Fog Creek Software, News","
	Project Aardvark, if you've been following along with the blog, is our summer interns' new product. We've got four interns here (three in development, one in marketing) putting together a complete product from beginning to end. Now that they've officially announced what it's all about and we're about to start the first beta, I can bring you up to date on the project, which is more or less halfway done.
The Idea
If you've ever tried to help your technologically-challenged uncle fix his computer problems over the phone, you know what a pain in the butt it can be to try to walk him through the fix.
""Click START""
""What?""
""Start. Click Start. It's in the bottom left.""
""I have C - T - R - L in the bottom left.""
""The bottom left of your screen.""
""Oh. OK, I clicked it.""
""OK, now click RUN.""
""What?""
""On the menu that came up. Click RUN.""
""It's not there.""
""What do you mean it's not there?""
""It's not there. I don't have a RUN.""
""What do you see? Read me everything you see""
""Recycle Bin... My Computer... Anna Navratilova J P G...""
""No, on the menu.""
""What menu?""
""The menu that came up when you clicked start.""
""When I what?""
This is when you give up and realize that something that could take you 10 seconds to fix in person is about to become a two hour nightmare during which you'll alienate your family, lose sleep, tie up the phone line while your Auntie Marge is stuck on the turnpike with no gas and can't get through to your uncle to come rescue her, and curse your lot in life. Just because you're a programmer doesn't mean you have to be the help desk for a dozen friends, relatives, and the people in the apartment next door. Does it?
That's the general idea behind the new Fog Creek CopilotSM service. In a nutshell, you go to copilot.com and get an invitation code. You tell your uncle to go to copilot.com and type in that same invitation code. You each get a little program to download and run. When you run the program, your uncle's computer screen shows up in a window. When you move your mouse, his mouse moves. When you type something, it appears on his computer. Etc. And now you fix the problem and log off, and peace is restored and your aunt gets home safely and your uncle dances at your wedding instead of boycotting it and holding up unpleasant signs across from the hotel where said wedding is taking place.
But but but...
Yes, similar services already exist. That never stopped me before. I'd like to point out that Fog Creek has been doubling in revenues every year mostly thanks to bug tracking software, and it's not like we invented bug tracking software. There are a few things our product will do better than the competition, but mostly we just want the Fog Creek Copilot experience to be shockingly seamless. It'll be totally secure, it'll be cheap, it'll be painless, it will work through firewalls on either side so you can help mom at home on her firewalled DSL from behind your NAT at work without a hiccup. We even made it so that the little software program you download is totally self-contained, totally pre-configured, and deletes itself when you're done so you can feel more secure about the whole episode. There's no commitment; you don't have to sign up or create an account and remember a password; you can even make your uncle pay since, after all, he's getting the benefit.
For the geeks in the audience, the service uses a highly customized and optimized version of VNC, but it also requires a customized ""reflector"" service that we're building which sits outside of any firewalls. The idea is, since you can't connect into mom's computer which is behind a firewall, she'll connect out to our server, you'll connect out to our server too, and the reflector will forward data back and forth between the two of you.
How'd you get the idea?
For the last few years we've been supporting FogBugz customers using a similar scheme, although it's a bit of a pain to set up. Our customers have to follow 7 steps to allow us to control their computers, and we've found that walking people through these steps on the phone takes an average of 5 minutes. With the Fog Creek Copilot service we'll just tell them to check their email and click on a link and hey presto! we're fixing their computer.
So the original idea was to use this for tech support. But when I told the idea to the interns, two out of four said, ""yeah, I could use something like that to help my mom."" That's when we realized there's a huge world out there of Informal Tech Support... lots of people trying to help Uncle Leo who can't use products like VNC because of the firewall problem. So we changed the focus of release 1 to be the casual and home user instead of tech support departments.
The Name
We had a list of important criteria for the name, but the most important one was that when someone read the name to someone else over the phone, it would be extremely likely that they would get it right. This ruled out names that are weirdly spelled, names which could be easily confused over the phone (for example ""m"" and ""n"" are almost impossible to distinguish), and names that have different possible spellings. We went rather too far along the process of investigating the name ""Fixant"" (complete with a very cool drawing of an ant holding an ethernet cable) before I just got everyone together in a room for a half hour of brainstorming, when we finally hit upon the idea of ""Copilot."" I can't even remember who thought of it. The idea of brainstorming is just that you shout out ideas, which stimulate other people to have ideas, and you put them all up on a whiteboard.
Well, there are a couple of dozen products named Copilot, many with registered trademarks, so our trademark lawyer advised us to use Fog Creek Copilot which would eliminate any possibility of confusion with those other Copilot brand products. The point of trademark laws is that what you're not allowed to do is create any confusion or potential confusion as to the origin of your product, and sticking ""Fog Creek"" in front guarantees that, but we have to be religious about always using the full name. I didn't really mind, having started my career working on products like Microsoft Excel, Microsoft Visual Basic for Applications for Microsoft Excel, etc. etc. After a few weeks on the Microsoft Excel team if you ever saw the word ""Excel"" without a ""Microsoft"" in front of it, it looked nekkid.
We bought the domain name for more money than we spent developing the first version of FogBugz, oy gevalt, but it is a really good name - easy to spell, pronounce, and it even sort of suggests what the product does, which makes it more memorable.
The Conference
For some reason, a long long time ago, I had agreed to give the keynote speech for CFUNITED, a conference about ColdFusion.
""I never used ColdFusion!"" I protested.
""Don't worry. Nobody has. The biggest sponsor of this conference is Microsoft, who have a huge presence trying to get the ColdFusion developers to switch to VB.NET,"" the organizers told me.
As luck would have it, the conference timing was perfect for the first feature-complete version of the interns' code. It gave the team a deadline to work to. At the conference itself, we set up a Fog Creek booth and the interns gave demos to several hundred attendees who wandered by.
This was the first trade show Fog Creek had ever attended. The truth is, a trade show is not a very cost-effective way to reach potential customers. Given the cost of travel, hotels, the booth, a thousand bucks for nice brochures, and everybody taking a week off of work, it's a really expensive way to get in front of prospects, especially since I can write an article on my website and get in front of 1000 times as many people.
But that's not really the point: the point is to have interactive experiences with your customers. You can try out lots of different pitches and really listen to how people respond to them, which is something you can't do in non-interactive marketing like web sites and magazine ads. I learned this from Eric Sink, who wrote a great article on the topic, Going to a Trade Show.
We went down to Washington in two big SUVs with all four interns, one of the FogBugz developers, Brett, who gave demos of FogBugz, and me. Our booth probably looked just a little bit too much like a science-fair exhibit, but, whatever, it was our first attempt. Next time we'll know to make backdrop posters that stretch right out to the edge of the backdrop which looks a bit more professional, and I'll remember to bring a lucite brochure dispenser instead of arranging the trifold brochures artfully in the shape of an Aardvark.
But that's not really a big deal. What was a big deal is that we got to talk to hundreds of potential customers, and, wow! the response was just incredible. At the very best, the response we got was, ""I need a thousand of these yesterday for my whole team."" Almost everyone was impressed by the product and knew that they wanted to use it. A very small number of people were aware of other competitors and other solutions to the problem, but mostly people gave us very positive feedback. More importantly, after spending two days pitching the product again and again to lots of different people we learned the most effective ways to present it. We learned that the best way to present it was not to start with, ""You know VNC?"" This drew glassy stares. The best way was to start with a typical remote support scenario. ""Your mom calls you up. She says her screen is half grey. You have no idea what the heck she's talking about.""
The Beta
We got back last Friday and immediately started working on the beta. The goal of this summer internship is to be shipping to paying customers by the end of the summer, and I didn't want our interns to go home after ""mostly"" finishing the code, leaving us permanent employees to debug until next February, so we're working on a really compressed schedule. Over the next few weeks, we've got to:
Deploy the site and service on our web farm
Launch a controlled, private beta so a few people can start trying the service and we can figure out if it works in the real world. Yaron is taking beta applications now.
Launch a wider public beta
Do a round of usability tests in the lab. The nice folks at TechSmith have a product for usability testing called Morae, and they'll be coming out to New York and helping us organize and run the usability tests. Morae lets you set up a complete usability lab using nothing more than their software and a little webcam
Start serious QA.
So far we've really been hitting the schedule so I'm pretty confident. In the meantime, you can:
Follow along with the Project Aardvark blog!
Apply for the beta! If you're accepted, you can try the Fog Creek Copilot service yourself!
If you're in New York, come to the Project Aardvark Open House! You'll get free wine and cheese and you can pepper the interns with questions about sockets programming in person. The open house is Thursday, July 14, 2005, from 5:30 PM - 7:00 PM, at Fog Creek Software, 535 8th Ave., 18th Floor, New York.
 
	"
https://www.joelonsoftware.com/2005/08/31/news-114/,News,2005-08-31T00:07:52+00:00,,Joel Spolsky,News,"
	New Orleans in happier times, from my trip in 2003.
 How doth the city sit solitary, that was full of people!
	"
https://www.joelonsoftware.com/2005/08/17/the-project-aardvark-spec/,The Project Aardvark Spec,2005-08-17T00:14:50+00:00,2016-12-05T19:07:18+00:00,Joel Spolsky,"Software designer, News","
	As the final version of Copilot.com (what this spec calls ""Aardvark"") went into production in early August, 2005, this spec is now of historical interest only. I'm making it available as a part of Joel on Software because many people have asked to see some samples of the kinds of specs we write at Fog Creek. (You may also be interested in my series on Painless Functional Specifications.)
There was one big mistake in the spec. When I wrote it I had assumed that port 443, used by the secure (SSL) http protocol, would be open even on networks that are configured to use proxy servers. I mistakenly believed that proxy servers could not forward SSL traffic because that would appear, to the browser, to be a ""man in the middle"" attack. This, it turns out, was erroneous, false, and incorrect, and after shipping the first beta we discovered just how wrong it was. Thus, the final implementation of Copilot 1.0 required a lot of unplanned work to support proxy detection and different kinds of proxy servers. We got most of that work done in time for 1.0 and are now finishing off the rest of it for a release we're calling 1.1. 
That said, the extra proxy work only added about 10% to the overall development effort. The reason you write a spec is not to solve every possible problem in advance: the reason you write a spec is to solve as many problems as you possibly can in advance so that you minimize the number of surprises that come up during development. In our case, since we were working with summer interns who literally had to walk out the door and go back to school, we literally could not afford to underestimate the amount of work that was needed to build Project Aardvark or I would be stuck debugging the thing deep into September while the kids drank beer and played poker, and we couldn't have that.
Many times, thinking things out in advance saved us serious development headaches later on. When I wrote the first draft of this spec, I had a more complicated flowchart that assumed that either party (helper or victim) could initiate the process. This became extremely complicated and convoluted for various reasons. As I worked through the screens that would be needed to allow either party to initiate the process, I realized that Aardvark would be just as useful, and radically simpler, if the helper was required to start the whole process. Making this change in the spec took an hour or two. If we had made this change in code, it would have added weeks to the schedule. I can't tell you how strongly I believe in Big Design Up Front, which the proponents of Extreme Programming consider anathema. I have consistently saved time and made better products by using BDUF and I'm proud to use it, no matter what the XP fanatics claim. They're just wrong on this point and I can't be any clearer than that.
There was one other significant change we made late in the process which is not reflected in the spec. After usability testing, we discovered that people were consistently confused by our policy of having the application delete itself. This was not what users expect. We modified the final product so that the helper could check a box to cause the victim's executable to be deleted, but it wasn't done by default. This way the helper, who is presumably more computer savvy, could insure that no unsafe executables were left around on the victim's computer. I think this change was about 2 hours of work, so it didn't impact the schedule.
Finally, you'll notice a big ""coding conventions"" section in the middle of the spec. Frankly, this doesn't belong in a functional specification, and it should really have been a separate document.
Still, as I reread this spec today, I'm surprised by what a good job the Aardvarkians did implementing everything. I seriously expected we would have to cut features; instead, we shipped with everything we wanted in version 1 and even did some of the features this spec refers to as version 2 features.
Download The Project Aardvark Spec in PDF Format (about 120KB). If you link to the spec, please link to this page, not the PDF file itself.
	"
https://www.joelonsoftware.com/2005/08/17/news-113/,News,2005-08-17T00:07:51+00:00,,Joel Spolsky,News,"
	""As I worked through the screens that would be needed to allow either party to initiate the process, I realized that Aardvark would be just as useful, and radically simpler, if the helper was required to start the whole process. Making this change in the spec took an hour or two. If we had made this change in code, it would have added weeks to the schedule. I can't tell you how strongly I believe in Big Design Up Front, which the proponents of Extreme Programming consider anathema. I have consistently saved time and made better products by using BDUF and I'm proud to use it, no matter what the XP fanatics claim. They're just wrong on this point and I can't be any clearer than that.""
The Project Aardvark Spec
	"
https://www.joelonsoftware.com/2005/08/16/news-112/,News,2005-08-16T00:07:50+00:00,,Joel Spolsky,News,"
	I'm thinking that it might be a good idea to just set up a Wiki for all the Joel on Software translated articles. That way the volunteers who translate articles could publish them themselves without emailing them to me and waiting around for me to publish them to the web.
Does anyone have any advice on how to do this?
I'd like it to look as much like wikipedia as possible, with pictures, real links (no CamelCase requirement), and maintaining a history of changes so vandalism can be quickly undone. Most importantly, I'd like it to be self-organizing so that, ideally, once we set up the servers, it just sort of magically populates itself with high quality translations of the Joel on Software articles 
Any ideas or suggestions?
	"
https://www.joelonsoftware.com/2005/08/10/news-111/,News,2005-08-10T00:07:49+00:00,,Joel Spolsky,News,"
	Let me just take a minute to congratulate Mike Gunderloy, author of the book Painless Project Management with FogBugz, on the breathtaking review he received in this month's Dr. Dobbs Journal: ""This book is brief, to the point, lavishly illustrated... This book is a user guide, but it is to user guides what Kernighan and Ritchie's The C Programming Language is to language manuals. Every question I had was answered within a paragraph or two of being raised; every explanation made sense... I think we'll all be better off if this book will become the standard against which other end-user documentation will be measured."" Wow!
That review was written by Greg Wilson, who, coincidentally, is one of the authors of a fascinating paper called Mining Student CVS Repositories for Performance Indicators [PDF], which is an interesting look at the same kind of data on performance variation between student programmers as I presented recently in Hitting the High Notes.
Moving right along... there's an audio interview of me online now at IT Conversations, talking about the book I just edited, The Best Software Writing I. In that interview, I praised a book called Internationalization with Visual Basic by Michael Kaplan. I really didn't understand Unicode until I read that book, and since it's out of print, it usually costs around $100 on Amazon, but it saved our skin making FogBugz and CityDesk work right.
Kaplan is writing a lot on his blog Sorting It All Out; he's one of the best Microsoft bloggers out there. Hopefully we'll see another book on international software from him soon.
	"
https://www.joelonsoftware.com/2005/08/08/news-110/,News,2005-08-08T00:07:48+00:00,,Joel Spolsky,News,"
	Project Aardvark Ships
Hurrah! Fog Creek Copilot 1.0 just went live. Congratulations to Fog Creek summer interns Ben, Tyler, Yaron, and Michael who have been working hard all summer to make this happen.
	"
https://www.joelonsoftware.com/2005/08/04/news-109/,News,2005-08-04T00:07:47+00:00,,Joel Spolsky,News,"
	FusionAuthority has the first review of Fog Creek Copilot: ""Everyone I demonstrated the service to was impressed. The screen resolution/quality is high (there is built in JPG compression to speed the screen drawing), mouse reactivity is almost real-time (over broadband) and when we disconnected, the executable was deleted from the desktop, leaving no remnants to clutter the system. By far the best feature of the service is the zero configuration required to bypass firewalls/routers and connect to the host computer.""
Not sure why they want to cook our interns, though...
	"
https://www.joelonsoftware.com/2005/09/19/news-115/,News,2005-09-19T00:07:53+00:00,,Joel Spolsky,News,"
	Wanted: Tech Support Engineers
My company, Fog Creek Software, is hiring Tech Support Engineers in New York City. Great conditions and benefits, of course. Much of the job consists of supporting FogBugz by phone and email, for example, helping people get FogBugz up and running on their own Windows and Unix servers. Read all about it, then email your resume to jobs@fogcreek.com.
	"
https://www.joelonsoftware.com/2005/10/30/a-minor-redesign/,A Minor Redesign,2005-10-30T00:08:06+00:00,,Joel Spolsky,News,"
	Here's what I'm trying to accomplish with the slightly redesigned homepage you see here.
Notice the new column of text over on the left? That's the first big change. What used to be there was a lot of links and little graphic blobs and other bits and pieces of the flotsam and jetsam that bloggers like to put in their marginalia that links to other stuff. Most people on the web today have learned to completely tune out the navigation column; it seems about as exciting as the credits at the end of a movie.
The trouble was that new users would land on my site, having followed a link from somewhere, and they would have absolutely no idea what was going on. They were on some kind of site, there was this guy, Joel, he was saying things, so what? The home page, like the home page of many blogs, wasn't really serving first-time visitors.
I was finally motivated to get off my butt and fix it by reading Jakob Nielsen's recent post about Weblog Usability. 
The theory here is to divide the home page into two columns, one for first-time visitors and one for everybody else, and by using narrative and full sentences in the navigation/first time visitor column, I'll actually seduce some people into checking out what's over there.
There are two other small changes. My public calendar has moved up to the top right corner. And home page postings will now have titles, instead of dates, because the RSS people kept complaining about that.
Non goals: I made no attempt to be slick. A long time ago I paid a top web designer, Dave Shea, who created a stunningly beautiful design for me to use. It ended up looking a little bit too shiny, though, so I never used it. This is a site designed by me, badly, using my poor Corel PHOTO-PAINT skills and my crappy amateur photos and my affection for the font ""Georgia"" and my poor eyesight (thus the largish font). It's not some kind of corporate blog developed by the marcomm department at a company that desperately wants to get people to pay attention to their new brand of laundry detergent. The more it looks like it was designed by a geek, not a graphic designer, the happier I am, because I am a geek.
The changes haven't completely permeated the inner pages yet, but that's only a matter of time.
	"
https://www.joelonsoftware.com/2005/10/26/fog-creek-software-management-training-program/,Fog Creek Software Management Training Program,2005-10-26T00:08:05+00:00,,Joel Spolsky,News,"
	Until now, most of our hires have been programmers. That's a start, but we need to start hiring the next generation of management too. So today we're launching the Fog Creek Software Management Training Program, an intensive three year program designed to teach you everything we know about the software industry.
	"
https://www.joelonsoftware.com/2005/10/25/why-ebay-bought-skype/,Why eBay Bought Skype,2005-10-25T00:08:04+00:00,,Joel Spolsky,News,"
	What caused me to fly off the handle about architecture astronauts was, indeed, this conference, organized by Union Square Ventures, a local VC. You can try to read the transcript online and see why I was so agitated, or just read the post-mortem, including my ungracious comment, on USV's blog-site. 
I had to install Lisp in a Box and start working through Seibel's new book on Common Lisp until my brain started functioning again.
eBay and Skype
Here's my highly irresponsible, off-the-cuff theory of why eBay bought Skype, because none of us believes that nonsense about how this would ""allow people to talk to each other during auctions."" (Hint: eBay didn't need to buy Skype just to allow people to talk to each other during auctions. Skype worked fine for that purpose without being owned by eBay. So that couldn't possibly be the reason).
My theory goes like this.
EBay generates a lot of profit, which gives them a lot of cash, which they have to reinvest somehow or else give it back to the shareholders. If they give it back to the shareholders, the executives at eBay won't be able to justify their ginormous salaries. So that leaves reinvestment.
A lot of big, profitable tech companies - Amazon, Microsoft, and Google - especially Google - hired carefully and have very good software development organizations. Especially Google. When they have extra money, they try to build something new. Whether it's A9, .Net, or Gmail, it's designed and built in-house in hopes of getting into a new business.
But eBay somehow got taken over by a swarm of MBAs way too soon and became an organization that was basically incapable of developing software. The evidence for this is the whole BillPoint/PayPal fiasco, in which eBay tried to create their own payment system, BillPoint, but found themselves so constitutionally incompetent at creating software by themselves that a scrappy team of outsiders at PayPal made a system that eBay users preferred 2 to 1, despite the fact that eBay repeatedly tried to force auctioneers into using BillPoint instead. (Eric Jackson wrote a very good book about it, The PayPal Wars.)
Full credit to eBay for recognizing their weakness, though. Since eBay realized they couldn't build things, they have to use their cash to buy things instead. This is what MBAs like to do anyway. They don't completely understand how to make companies but they do enjoy buying and selling them.
Good for eBay. The only problem is that this kind of acquisition, especially combined with Google's blockbuster IPO, is leading people to think there's a new bubble underway somehow, which is causing investors to try and figure out if del.icio.us (say) might be the next Skype because they're both ""Peer Production"" or something. Hint: Skype has nothing to do with del.icio.us. Nothing. I don't care if you manage to come up some architectural abstraction with that seems to include both. It's not going to make del.icio.us worth $2.6b, because del.icio.us, architecturally, doesn't have that ""free phone call"" feature.
	"
https://www.joelonsoftware.com/2005/10/24/something-rotten-in-adsense/,Something Rotten in AdSense,2005-10-24T00:08:03+00:00,,Joel Spolsky,News,"
	Something Rotten in AdSense
Google AdSense is a system for web publishers of all sizes, from big newspapers to tiny bloggers. They sign up with Google to place a small box full of text ads on their site. You've probably seen it, but if you haven't, check out Michael's techInterview site for an example.
Advertisers pay Google to have their ads appear in little sidebars. Well, that's not technically correct. Advertisers actually pay Google if anyone clicks on those ads. In turn, Google gives a percentage of the money to the web site owner. As a web site owner, you can make some serious spending cash this way. Popular sites make hundreds or thousands of dollars a month.
The minute you put AdSense on your site, you might start thinking, hmm, gosh, what happens if I click on the ads on my own site? Will I make more money?
Probably not much. This problem, called clickfraud, is a tricky one, and Google claims to have algorithms to prevent it. They won't tell us what they are, justifiably, I think, because that would it easier to defeat the algorithms. Still, how would you explain complaints like this one from an advertiser:
When I activate my AdSense campaign, not much more than 5 minutes go by before they are all over it.. Multiple clicks from the same Internet IP's in Malaysia, Poland, Hongkong etc. (I tried to exclude certain countries in my AdSense account, but they seem to go through proxies, so its not much use)..
Tried just now and within 2 minutes I had around 20 clicks, which were clearly fraudulent (they seem to use some kind of tool - no pictures on the site were loaded according to my log). I guess that was around 20 euro, which went up in smoke there. The super-duper top secret internal Google clickfraud prevention system, which is supposed to deduct the invalid clicks at the end of the month, only seems to catch an extremely small fraction of the clicks, but not nearly enough. I can't see which clicks I actually pay for in the invoice from Google, so it's a bit hard to say.
When you connect the dots, what seems to be happening is that scammers are doing four things.
First, they create a lot of fake blogs. There are slimy companies that make easy to use software to do this for you. They scrape bits and pieces of legitimate blogs and repost them, as if they were just another link blog. It is very hard to tell the difference between a fake blog and a real blog until you read it for a while and realize there's no human brain behind it, like one of those Jack Format radio stations that fired all their DJs, or maybe FEMA.
Then, they sign up for AdSense.
Then you buy or rent a network of zombie PCs (that is, home computers that are attached to the Internet permanently which have been infected by a virus allowing them to be controlled remotely).
Finally, use those zombie PCs to simulate clicks on the links on your blog. Because the zombie PCs are all over the Internet, they appear to be legit links coming from all over the Internet.
There might be a technical solution to this, although I can't think of one offhand. The minute companies start cutting checks to ""affiliates"" at the end of the month that are based on nothing more than clicks, you're bound to get the AllAdvantage phenomenon. AllAdvantage was probably one of the most spectacularly stupid business ideas to come out of the first Dot Com bubble: a company that paid you to look at ads. That's because they fell victim to one of the better business ideas from the first Dot Com bubble: hiring armies of low-paid workers to look at AllAdvantage ads.
Eventually, it stops benefiting the advertiser, and the advertiser figures it out, and stops paying for the whole charade.
It is important to remember that AdSense is just one part of Google's revenue. A more significant part is AdWords, which covers the ads that appear on Google's own site. AdWords are still susceptible to some fraud, although you can't make money clicking on those ads, so it's much less of a problem. There is a minor problem where advertisers hire clickers to click on their competitors' ads, which cause their competitors to waste money, but that's penny-ante stuff, and rare enough that advertising through AdWords still works well. 
Still, with Google rapidly approaching 50% of the global search market, they can double the number of searches they get on their home page, but not much more than that, unless they can get more page views somehow. Which is why they are frantically trying to sign up non-fraudulent web sites for AdSense (they call me every two months) and constantly seeking new sources of ad inventory, which sounds a heck of a lot like what the web portals of the 90s tried to do.
This is where Google is actually hurt by the long tail world of millions of small sites. It's easy to evaluate the top 100 or 1000 web sites to make sure they're reasonably legit. It's much harder to monitor 1,000,000 blogs to make sure that none of them were machine generated for the purpose of scamming AdSense revenue. Still, I don't think Google has a choice: I predict that you'll see a massive expulsion of smaller AdSense sites by Google, and it better happen soon, or AdSense will ruin Google's reputation among advertisers, something which could be deadly.
	"
https://www.joelonsoftware.com/2005/10/21/architecture-astronauts-are-back/,Architecture Astronauts Are Back,2005-10-21T00:08:02+00:00,,Joel Spolsky,News,"
	Architecture Astronauts Are Back
I'm starting to see a new round of pure architecture astronautics: meaningless stringing-together of new economy buzzwords in an attempt to sound erudite.
When I wrote my original complaint about architecture astronauts more than four years ago, it was P2P this and messaging that.
""That's one sure tip-off to the fact that you're being assaulted by an Architecture Astronaut: the incredible amount of bombast; the heroic, utopian grandiloquence; the boastfulness; the complete lack of reality. And people buy it! The business press goes wild!""
Now it's tagging and folksonomies and syndication, and we're all supposed to fall in line with the theory that cool new stuff like Google Maps, Wikipedia, and Del.icio.us are somehow bigger than the sum of their parts. The Long Tail! Attention Economy! Creative Commons! Peer production! Web 2.0!
The term Web 2.0 particularly bugs me. It's not a real concept. It has no meaning. It's a big, vague, nebulous cloud of pure architectural nothingness. When people use the term Web 2.0, I always feel a little bit stupider for the rest of the day. To quote the line from Billy Madison:
Principal: Mr. Madison, what you've just said is one of the most insanely idiotic things I have ever heard. At no point in your rambling, incoherent response were you even close to anything that could be considered a rational thought. Everyone in this room is now dumber for having listened to it. I award you no points, and may God have mercy on your soul.
Billy Madison: Okay, a simple no would've done just fine. 
Not only that, the very 2.0 in Web 2.0 seems carefully crafted as a way to denegrate the clueless ""Web 1.0"" idiots, poor children, in the same way the first round of teenagers starting dotcoms in 1999 dissed their elders with the decade's mantra, ""They just don't get it!""
I'll do my part. I hereby pledge never again to use the term ""Web 2.0"" on this blog, or to link to any article that mentions it. You're welcome.
And While I'm In A Bitchy Mood
Boy, am I glad I don't work at Microsoft any more. The joy is gone when adding an easter egg is ""immediate grounds for termination,"" and a fun video they made for a conference doesn't have a soda can in it because ""none of the soda companies would give permission for their product to appear in this video.""
Still, it beats the hell out of listening to one of those podcasts about podcasting or reading one of those blogs about blogging. Unsub-frickin'-scribed.
And now, back to my normal sunshiny self.
	"
https://www.joelonsoftware.com/2005/10/20/news-123/,News,2005-10-20T00:08:01+00:00,,Joel Spolsky,News,"
	VentureVoice ran an interesting (MP3) interview with VC Brad Feld, who built a consulting company and discovered that consulting doesn't scale as well as products. ""We determined that the profit level we were generating at 20 people, well, if we grew to 40 people we'd obviously double the revenue, our profit would probably be exactly the same."" He also talks about why it's really hard to make the leap from consulting to products. Great interview.
While I'm on the subject, VentureVoice also ran an excellent piece about launching companies at the DEMO Conference.
	"
https://www.joelonsoftware.com/2005/10/18/news-122/,News,2005-10-18T00:08:00+00:00,,Joel Spolsky,News,"
	Now I'm really excited... I saw the preview of the upcoming Project Aardvark movie and it's simply amazing. You're going to really dig this movie.
	"
https://www.joelonsoftware.com/2005/10/17/news-121/,News,2005-10-17T00:07:59+00:00,,Joel Spolsky,News,"
	We're accepting applications for summer internships (2006) at Fog Creek. The deadline is February 2006.
Microsoft Jet
I'm glad Microsoft is upgrading the Jet engine once again. Even though they tried to tell application developers that we needed to move to MSDE/Sql Server Express, we know that our customers want their data in a single file and don't want to have to install and administer SQL Server just to get to that file.
In the minus column, Erik Rucker seems to be saying that the new Jet engine won't be redistributable. ""Developers can still program against the Access engine, but since it isn't part of the system any more, application users will need Access on their machines."" Great. That makes it nearly useless to typical ISVs developing Windows apps, so I guess we're stuck with the creaky old Jet 4.0.
I haven't heard the whole story yet, but Erik also says that the main big new Jet feature is this clever way of doing many-to-many relations between tables that was done solely to benefit SharePoint. That's nice, hon', but it doesn't seem like such a big deal. I'm hoping Erik has a Jobsian ""just one more thing"" up his sleeve.
What I'd much rather see is real, authentic, fast full-text search. Access (Jet) 4.0 just doesn't have full-text search at all, and it will be pretty darn disappointing if Access 12 doesn't have a good, instant full-text search feature that's native and built in to the engine at the deepest levels.
When we work on FogBugz, whether with Access (Jet), SQL Server, or MySQL as the backend, we spend way too much time trying to get full-text search to work even moderately well. SQL Server 2000, even though it technically has a full-text search feature, actually has a very-badly grafted-on full-text engine that is poorly integrated, slow, unreliable, and assumes that programmers have nothing better to do than think about when the indexes are built and where they are stored. In production, the full text engine grafted onto SQL Server 2000 falls down all the time. In particular, if you use a lot of databases and frequently detach and re-attach them (what we were told we have to do in order to use SQL Server as a ""file oriented"" database like Jet), the full text search indexes get all screwed up. They rely on insanely complex chunks of registry data to associate indices, stored in files, with databases. It is almost monumentally difficult to backup and restore full text indexes.
The fact that it's 2005 and I can't buy a relational database from Microsoft that has full text search integrated natively and completely, and that works just as well as ""LIKE"" clauses, is really kind of depressing. 
A very senior Microsoft developer who moved to Google told me that Google works and thinks at a higher level of abstraction than Microsoft. ""Google uses Bayesian filtering the way Microsoft uses the if statement,"" he said. That's true. Google also uses full-text-search-of-the-entire-Internet the way Microsoft uses little tables that list what error IDs correspond to which help text. Look at how Google does spell checking: it's not based on dictionaries; it's based on word usage statistics of the entire Internet, which is why Google knows how to correct my name, misspelled, and Microsoft Word doesn't.
If Microsoft doesn't shed this habit of ""thinking in if statements"" they're only going to fall further behind.
	"
https://www.joelonsoftware.com/2005/10/16/news-120/,News,2005-10-16T00:07:58+00:00,,Joel Spolsky,News,"
	Visiting Cambridge (Massachusetts [USA]) for a party at Y-combinator made me jealous about how much more vibrant the hacker/startup scene is in the Boston area than it is in the New York area. Or maybe it just seems that way, because Paul Graham and his crew have done a remarkable job of attracting a first rate flock of smart young entrepreneurs by providing seed funding for a bunch of new startups. I probably talked to a couple of dozen people and they all seemed really, really smart and enthusiastic.
Is New York just lame compared to Boston? Or does it just seem that way? Why is that... is it because of MIT? or all the other high tech stuff going on there? Is it the high cost of living in New York? Or the fact that we have too many distractions, and it's not a good place to concentrate on making a startup? Or maybe it's because investment banks, hedge funds, advertising agencies, and media companies suck up all the oxygen? One bright young Harvard grad I met at the party has a job as the full-time, personal system administrator maintaining the PC of a famous hedge fund manager ... (Dude, come work for Fog Creek... we can waste your talent in a much more laid back environment.)
Multitasking in the Workplace
New York Times: Big screens are good, interruptions are bad, etc. The stuff about how long it takes to pick up a train of thought after being interrupted is really cool; I've been claiming this based on my own experience but I never had anything remotely scientific to prove it. You can read the original papers by Gloria Mark on her web site. 
She also tries to pin down whether it's more productive to be ""collocated"" or not, by which, I think, she's comparing the number of interruptions suffered by people in private offices vs. open spaces. The bizarre thing she claims, which could be true, is that open-space-dwellers actually get voluntarily interrupted less because people can quickly see whether they're interruptible or not. She does mention that open-spacers do frequently decide to ""interrupt themselves"" to participate in another conversation that they overheard, something which is probably net beneficial for the team's productivity but which drives me crazy.
I keep claiming that private offices are more productive than open space plans or cubicles, but the one advantage of open space which people keep bringing up is all the accidental, serendipitous knowledge transfer that takes place when everyone overhears everyone else. I think it's not worth the productivity loss caused by an increased number of interruptions. This summer when we had four interns building a new product, we had to put them all in a single open space because we ran out of offices (oops). Watching the four of them work together, you could clearly see that ad-hoc, impromptu conversations were somewhat valuable, but you could also see that anything that interrupted one person (e.g. when I wandered over to discuss some tiny issue with one of the interns) it ended up interrupting everybody - those tiny issues inevitably became conversations with everybody, thus interrupting 3 people who had no reason to be interrupted and who would take an average of 25 minutes to return to what they were doing.
Also, I think that private offices have remarkable benefits in terms of your ability to attract and retain talent and people's general happiness at work, which leads to increased productivity because you're hiring better people and they're happier. We're doubling the size of the Fog Creek offices as soon as we can, and our goal remains to put every developer in a private office.
	"
https://www.joelonsoftware.com/2005/10/15/news-119/,News,2005-10-15T00:07:57+00:00,,Joel Spolsky,News,"
	Paul Graham: "" The fact is, simplicity takes effort-genius, even. The average programmer seems to produce UI designs that are almost willfully bad. I was trying to use the stove at my mother's house a couple weeks ago. It was a new one, and instead of physical knobs it had buttons and an LED display. I tried pressing some buttons I thought would cause it to get hot, and you know what it said? ""Err."" Not even ""Error."" ""Err."" You can't just say ""Err"" to the user of a stove. You should design the UI so that errors are impossible. And the shocking thing is, the boneheads who designed this stove had an example of such a UI to work from: the old one. You turn one knob to set the temperature and another to set the timer. What was wrong with that? It just worked.""
Fax to FogBugz
I'm rather pleased with myself that for the first time in Fog Creek's history, purchase orders which arrive by fax will not actually be printed on paper and then moved from manila file folder to manila file folder to indicate their status. That's because I changed our fax system so that anything faxed to Fog Creek automatically becomes a bug in our FogBugz database. Here's how we did it.
First, we installed a fax modem in one of the servers in the closet. Remember fax modems? The top of the line models these days are about $16 and you probably have boxes of them in your attic.
Step two, we installed Snappy Fax Server on that server. Their network fax software costs $69 and does all kinds of handy things with faxes, but the only thing we needed it to do was receive incoming faxes and forward them to an email address. 
Step three: set up a devoted email address to receive the faxes, and added a new Mailbox in FogBugz to check incoming email at that address and forward it to the normal customer service queue.
That's all it took! Now when a fax is received, if it's a purchase order, we just move it into a ""Purchase Orders"" project in FogBugz where we keep a complete history of invoices sent, payments received, etc. using FogBugz's usual history mechanism. This will make it especially easy to keep a record of overdue purchase orders, what's been done about them, etc., and now that they're not in a file in my office, anyone handling customer service can quickly check on the status of a purchase order that a customer sent in.
 
 
	"
https://www.joelonsoftware.com/2005/11/22/reading-list/,Reading List,2005-11-22T00:08:12+00:00,,Joel Spolsky,News,"
	I've posted a very preliminary reading list for the Fog Creek Software Management Training Program.
Who do I imagine will be interested in this program? Based on the applications we've received so far, it's the kind of people who would have gone into entry-level associates programs at management consulting firms and technology integrators. They're expecting to work like crazy for two or three years, either as preparation for graduate school (especially MBA programs, the best of which require several years of real-world work experience for admission), or in hopes of delaying the inevitable decision about real life.
Those programs have a fatal flaw though: they really only care about getting cheap labor that will work hard and can be billed out at high hourly rates. Life as a recent BA graduate in a management consulting firm consists of tons of travel, never to pleasant places, living out of a suitcase in a hotel somewhere unlovely, and working ridiculous hours on the most mundane aspects of a project, all for the sake of ""paying your dues"" in hopes of a better career later. Only a small fraction of the people that start these programs end up working as management consultants.
As long as you're ready to work hard, why not do it at Fog Creek? We'll actually teach you everything we know about the software industry instead of giving you grunt work, we won't make you travel, and by the end of three years you'll be far more qualified to lead technology projects and technology companies.
Venture Voice
Gregory Galant came by the Fog Creek office a couple of weeks ago and interviewed me for his podcast Venture Voice; the MP3 interview is now available for download (it's about 55MB).
Aardvark'd: 12 Weeks With Geeks
More about this crazy movie: it has now been accepted to both the Los Angeles and New York Independent Film and Video festivals! Congratulations to Lerone Wilson of Boondoggle Films, the filmmaker.
So that's one place you can see it. We have completely sold out of the first DVD printing and are desperately trying to get more replicated. If you order the DVD now, you'll probably get it around December 15th. This is probably your last chance to order copies this year. Someone emailed me to ask about region codes: this DVD is not region locked and will play anywhere, although for best results you should get the right format (NTSC or PAL) for your country. There are English subtitles.
	"
https://www.joelonsoftware.com/2005/11/18/price-as-signal/,Price as Signal,2005-11-18T00:08:11+00:00,,Joel Spolsky,News,"
	Forbes: ""EMI Group boss Alain Levy said at press conference today that he believed Jobs would introduce multiple price points for iTunes music within the next year.""
The story they're trying to tell you is that ""older, less popular songs could be discounted, and in-demand singles could go for more than a dollar.""
Let's think this through, because I think the recording industry is lying about why they want different prices.
Before I start with that, have you ever noticed that movie theaters charge the same price for all movies, whether they are Steven Spielberg blockbusters or crappy John Travolta religious quackery disguised as science fiction that nobody in their right mind would want to see?
Theoretically, when a super-duper-blockbuster comes out, like, say, Lord of the Rings, there's so much demand that the movie theaters just end up turning people away. Econ 101 says that they should raise the price on these ultra-popular movies. As long as the movie is sold out, why not jack up the price and make more money?
Similarly, when stinkers like Lesbian Gangster Yoga with Ben Affleck come out, the movie theatre is going to be pretty much empty anyway ... so Econ 101 says they should lower the price and try to get a few more bucks filling up the theater with price-sensitive moviegoers.
And indeed this is what the recording industry is telling you that they want to do on iTunes. But they don't do it in movie theaters. Why not?
The answer is that pricing sends a signal. People have come to believe that ""you get what you pay for."" If you lowered the price of a movie, people would immediately infer from the low price that it's a crappy movie and they wouldn't go see it. If you had different prices for movies, the $4 movies would have a lot less customers than they get anyway. The entertainment industry has to maintain a straight face and tell you that Gigli or Battlefield Earth are every bit as valuable as Wedding Crashers or Star Wars or nobody will go see them.
Now, the reason the music recording industry wants different prices has nothing to do with making a premium on the best songs. What they really want is a system they can manipulate to send signals about what songs are worth, and thus what songs you should buy. I assure you that when really bad songs come out, as long as they're new and the recording industry wants to promote those songs, they'll charge the full $2.49 or whatever it is to send a fake signal that the songs are better than they really are. It's the same reason we've had to put up with crappy radio for the last few decades: the music industry promotes what they want to promote, whether it's good or bad, and the main reason they want to promote something is because that's a bargaining chip they can use in their negotiations with artists.
Here's the dream world for the EMI Group, Sony/BMG, etc.: there are two prices for songs on iTunes, say, $2.49 and $0.99. All the new releases come out at $2.49. Some classic rock (Sweet Home Alabama) is at $2.49. Unwanted, old, crap, like, say, Brandy (You're A Fine Girl) - the crap we only know because it was pushed on us in the 70s by paid-off disk jockeys - would be deliberately priced at $0.99 to send a clear message that $0.99 = crap.
And now when a musician gets uppity, all the recording industry has to do is threaten to release their next single straight into the $0.99 category, which will kill it dead no matter how good it is. And suddenly the music industry has a lot more leverage over their artists in negotiations: the kind of leverage they are used to having. Their favorite kind of leverage. The ""we won't promote your music if you don't let us put rootkits on your CDs"" kind of leverage.
And Apple? Apple wants the signaling to come from what they promote on the front page of the iTunes Music Store. In the battle between Apple and the recording industry over who gets to manipulate what songs you buy, Apple (like movie theaters) is going to be in favor of fixed prices, while the recording industry is going to want variable prices.
Brief News
The Fog Creek Copilot team has launched monthly subscriptions. This lets you remote control computers over the Internet whenever you need to without entering payment information each time. There are a variety of plans offering 0 - 5000 minutes per month.
If you're interested in watching the story of the summer interns who built Fog Creek Copilot 1.0, or watching my silver-screen premiere, we're taking orders for the movie Aardvark'd: 12 Weeks With Geeks on DVD. You can watch the trailer on Google Video. The number of orders we've received has surprised us; even though we tripled our order for DVDs it looks like we're pretty close to selling out.
If you are a student looking for a summer internship in software development, hurry up and apply; applications are due February 1.
	"
https://www.joelonsoftware.com/2005/11/07/aardvarkd-dvd-goes-on-sale/,Aardvark’d DVD Goes on Sale,2005-11-07T00:08:10+00:00,,Joel Spolsky,News,"
	Last March, when we were starting to plan our summer internships, I was disappointed by the massive bogusness of the so-called ""business challenges"" on the TV show The Apprentice. From the posts over on the discussion groups, it was apparent to me that people were really excited to see each new episode, and then consistently disappointed when the management challenge turned out to consist of two hours of inspecting chocolate bars in a factory, or hawking on street corners to get people to go into a restaurant. Management challenge, indeed! Those are two of the lowest-paying jobs in New York City. Most of the people on the streets handing out flyers are homeless and working for minimum wage.
At the same time, I noticed that there were very few decent documentaries about the software development process. Since the idea of our summer internship was to build a new product, from beginning to end, during the course of one summer, I thought it would be a great opportunity to have a filmmaker come into our offices and film the whole thing. And I thought that the audience that's excited to see inside the business world would be just as enthusiastic to get a view of the software development process at Fog Creek.
So I put out a call for a documentary filmmaker. We got a half-dozen serious applications and picked Lerone Wilson, a recent NYU grad, to invade our office for the summer and make a movie. Instead of paying for the production ourselves, we provided a minimum subsidy, so the filmmaker could maintain complete editorial control. My friends at Thought Equity, a stock footage company, loaned Lerone a great HDV camera. Dan Bricklin, the co-creator of VisiCalc, the first electronic spreadsheet, agreed to appear, as did Lisp-luminary and e-commerce pioneer Paul Graham, currently a partner in Y Combinator, which provides seed funding for startups.
The movie is called Aardvark'd: 12 Weeks With Geeks and it's in the final phases of editing now. So far, I've only seen an early cut of the movie, but it looks great, if I say so myself. The only other recent documentaries I've seen about software development, Code Rush and Startup.com, totally pale in comparison.
Of course, we'll try to get this movie into multiplexes worldwide, but you probably shouldn't hold your breath. In the meantime we've negotiated with Lerone to make DVDs available to Joel on Software readers as cheaply as we can make them: $19.95 (free shipping in the US, cheap shipping elsewhere). The DVDs are not quite ready yet but they will be shipping by December 1st. Given the holidays coming up, it's very hard to find DVD manufacturing capacity this time of year, so we're not sure how many we're going to be able to produce in time for the holidays. We're now taking pre-orders on our website for guaranteed shipment on December 1st, but once the initial manufacturing run has been sold out we can't guarantee delivery before the holidays, so order early if you plan on giving this as a gift. There's a trailer online in Windows Media and Quicktime formats if you want to preview it, and the order form is here.
Update-June, 2011-The entire film is now available on YouTube for free. Watch Aardvark'd Online Free.
	"
https://www.joelonsoftware.com/2005/11/03/asterisk-ajax-and-astronauts/,"Asterisk, Ajax, and Astronauts",2005-11-03T00:08:09+00:00,,Joel Spolsky,News,"
	 CIO Magazine Technology Editor Christopher Lindquist has a podcast up interviewing me about Asterisk, Ajax, and Astronauts. 
	"
https://www.joelonsoftware.com/2005/11/03/webstock-a-web-conference-in-new-zealand/,Webstock: a Web Conference in New Zealand,2005-11-03T00:08:08+00:00,,Joel Spolsky,News,"
	I'm looking forward to speaking at Webstock, a web conference next May in Wellington, New Zealand.
This will be fun. I haven't been to New Zealand since 1987. It's such a long trip from New York City (something like 24 hours, I think) that I really should to try to combine this trip with some other meetings or conferences in the South Pacific / Australia / New Zealand area.
	"
https://www.joelonsoftware.com/2005/11/02/massive-frontal-pr-is-incompatible-with-ship-early-and-often/,Massive Frontal PR is incompatible with Ship Early and Often,2005-11-02T00:08:07+00:00,,Joel Spolsky,News,"
	Microsoft's new (beta!) portal page, live.com, doesn't work in Firefox, and doesn't work too great in IE either. The first thing I used it for was to search for ""firefox market share."" 
Like every search engine, you get a list of search results. I clicked on the first one, read the article, and then clicked ""back"" to find the next result.
Oops! What happened to the search results?
Live.com uses dynamic HTML in a broken way such that clicking ""back"" takes you all the way back to the home page, not the search results. Which makes it pretty unusable as a search engine. I noticed this right away, because just yesterday we spent a lot of time thinking about this very issue in our own product, FogBugz.
I played around with the RSS subscription feature for a minute or two. It crashed IE. Oh well. I don't remember Microsoft ever shipping anything quite this half-baked. Maybe that means that they're moving firmly into the ""agile"" camp: ship early and often. 
Does ship-early-and-often really work for a huge company doing massive PR pushes that's going to get millions of people checking out their early release?
I don't think it does. This is a classic example of what I've always called the Marimba Phenomenon. The Marimba Phenomenon is what happens when you spend more on PR and marketing than on development. ""Result: everybody checks out your code, and it's not good yet. These people will be permanently convinced that your code is simple and inadequate, even if you improve it drastically later.""
The Marimba Phenomenon is very hard to avoid when you spend too much money trying to launch a new product. It's easy to spend on marketing and PR, since that just takes cash, but it's hard to spend on software development, because that actually takes time and talent. So cash-rich companies, whether Microsoft or VC-backed startups, run the risk of launching to a bigger audience than they really should have, getting millions of people to be thoroughly unimpressed by version 1.0 and never bothering to come back again to see if 2.0 might have gotten it right.
By contrast, small companies that don't have great marketing budgets are in a great position to launch early and often. In the first few weeks after we launched our remote assistance product, Fog Creek Copilot, we found some pretty serious bugs handling proxy servers that affected about 5% of our customers. But we only had a few customers every day, since the service was new and didn't have a superbowl ad. We fixed the bugs in a matter of days and now there are only a tiny number of people wandering around who had a bad experience with Copilot. And now as the service builds in popularity we've rolled out dozens of new builds and fixed hundreds of bugs and even added some major cool features, like automatic screen resizing, which makes it easy to control a computer with a large monitor from a computer with a smaller monitor.
By the way, Firefox is probably around 10%.
Jason Lefkowitz: ""Live.com is the perfect example: as far as I can tell, it's just a customizable portal page. We had those in 1998 and they sucked then. Seven years later, they haven't gotten any better.""
PS. I don't get the difference between start.com and live.com, two remarkably similar Microsoft websites. Start.com already works in Firefox, launches search results in a new browser window, which is awkward but not as bad as what live.com does, and seems to be more polished.
	"
https://www.joelonsoftware.com/2005/12/29/test-yourself/,Test Yourself,2005-12-29T07:25:32+00:00,2017-02-24T19:01:22+00:00,Joel Spolsky,News,"
	By the time I got to Penn for my first year of college, I thought I was already a pretty good programmer. Completely self-taught, I had written two major systems in Turbo Pascal ... one of them was a complete inventory system for a small factory, while the other scheduled all the production at one of Israel's largest bakeries.
It took me until the midterm exams to realize I wasn't as smart as I thought. I completely screwed up some questions, because I still didn't get pointers and I still didn't get recursion.
Never one to hold a grudge, I share those midterm questions with you... see if you can do better than I did freshman year.
1a. (MIT-Scheme) Using the function
(define (accumulate combiner null-value l) 
 (if (null? l)
 null-value
 (combiner (car l)
 (accumulate combiner
 null-value
 (cdr l)))))
Implement sum-of-squares, which calculates the sum of squares of a list, for example
(sum-of-squares '(1 2 3 4 5))
should evaluate to 55.
(For the answer, select the text in the box:)
(define (sum-of-squares l)
 (accumulate (lambda (x y) (+ (* x x) y))
 0
 l))
1b. (JavaScript) OK, maybe Scheme is not your thing. This question is equivalent to 1a, in JavaScript.
Using the function
function accumulate(combiner, nullValue, l)
{
	if (l.length == 0)
	return nullValue;
	var first = l.shift();
	return combiner(first, accumulate(combiner, nullValue, l));
}
Implement sumOfSquares, which calculates the sum of squares of a list, for example
sumOfSquares([1,2,3,4,5])
should evaluate to 55.
(For the answer, select the text in the box:)
function sumOfSquares(lst)
{
	return accumulate(function(x,y){return x*x+y}, 0, lst);
}
2. (ANSI C) Write a C program of the following form:
#include <stdio.h>
int main(int argc, char **argv)
{
 ???
}
such that, after compiling it, it can be executed as
% ./a.out could harold eat eight salami elephants
and it will print the first letter of every argument (in this case, ""cheese"").
(For the answer, select the text in the box:)
#include <stdio.h>
int main(int argc, char** argv)
{
 int i;
 for (i=1; i<argc; i++)
 {
 putchar(argv[i][0]);
 }
 putchar('\n');
 return 0;
}
3. (ANSI C) What is the output of the following C program?
#include <stdio.h>
char *fn(int i, char *s)
{
 while (i)
 {
 s++;
 i--;
 }
 return s;
}
int main(int argc, char** argv)
{
 int a = 2;
 static char c[] = ""test"";
 printf(""%s\n"", fn(a,c));
 return 0;
}
(For the answer, select the text in the box:)
st (followed by a newline)
For more programming challenges, check out TopCoder.
	"
https://www.joelonsoftware.com/2005/12/29/the-perils-of-javaschools/,The Perils of JavaSchools,2005-12-29T00:08:21+00:00,2016-12-10T02:40:12+00:00,Joel Spolsky,News,"
	""A sure sign of my descent into senility is bitchin' and moanin' about 'kids these days,' and how they won't or can't do anything hard any more.""
The Perils of JavaSchools
	"
https://www.joelonsoftware.com/2005/12/28/saporasaki/,Saporasaki,2005-12-28T00:08:20+00:00,,Joel Spolsky,News,"
	The Japanese version of Joel on Software (the book) is out! I want to thank Yasushi Aoki who translated it and Ohmsha, the publisher.
So far, the book is available in English, Italian, Korean, Chinese, and Japanese. I'm certain the Japanese translation will be excellent because Yasushi-san worked closely with me on many small points of translation and worked very hard to correctly translate all those weird cultural references and inside jokes I always put in my articles. The quality of the physical book is much nicer than the English original (why do they have such nice paper in Japan?)
One of my dad's books on educational linguistics was translated to Japanese when I was a kid. I got a primer on Japanese and deciphered the cover, and was thrilled that our name in Japanese is usually pronounced sa-po-ra-sa-ki, which sounds like a cross between an alcoholic drink and a rad motorcycle.
UPDATE Paul Jensen emails: ""As a student of linguistics and Japanese, I feel I should point out that your last name in Japanese is actually su-po-ru-su-ki. In Japanese, /u/ is generally silent following /s/, so your name would come out as [sporuski], which is pretty close to how it's pronounced in English.""
	"
https://www.joelonsoftware.com/2005/12/14/interesting-links/,Interesting Links,2005-12-14T00:08:19+00:00,,Joel Spolsky,News,"
	I can't figure out who's writing it, but Enplaned, a blog about commercial aviation, is one of the best blogs I've come across in a long time, full of insightful, in-depth articles about the airline industry.
Reddit is a website with a cute alien mascot, featuring user-submitted and user-rated links. If you've already seen the Aardvark'd movie you saw the developers of reddit, Steve Huffman and Alexis Ohanian.
I've subscribed and unsubscribed to a lot of Podcasts trying to keep entertained on the subway, and the bottom line is that there are only two I can tolerate on a regular basis: TWiT and VentureVoice. TWiT made me understand why Leo Laporte was so beloved on Tech TV, and John C. Dvorak will charm your socks off in his role as the cuddly curmudgeon, channeling Jerry Pournelle. VentureVoice gets great interviewees on topics close to my heart and does them with great journalistic values and high production quality... don't miss the episodes on launching VideoEgg at Demo (#14 and #15).
I had to stop listening to the Gilmore Gang because the sound quality made it inaudible on the streets of New York. (Do they listen to their podcasts after they record them?) I had to stop listening to Adam Curry because all he does is talk about was how great podcasts are. Show us, Adam, don't tell us. Adam Curry is one of the best DJs in the world, but his show is 10% great DJing, 60% crappy drivel about podcasting, and 30% late-night-infomercial-quality promos for podcasts about garden slugs, followed by Adam talking for 20 minutes about how great it is that there are podcasts about garden slugs. I unsubscribed, and spent the next two hours listening to Jason Robert Brown's hilarious and uplifting I Could Be In Love With Someone Like You again and again and again.
	"
https://www.joelonsoftware.com/2005/12/14/shipping-update/,Shipping Update,2005-12-14T00:08:18+00:00,,Joel Spolsky,News,"
	We discovered that 2 people working in tandem can ship an order every 12 seconds using the new system. So the actual labor costs are down to 24 seconds per order, in a process which requires literacy and two hands but little else. That gives us a throughput of 2400 orders per day before we have to build a parallel workstation... should last a while.
In an article called In Defense of Not-Invented-Here Syndrome, written in 2001, I said, ""[I]f you've ever had to outsource a critical business function, you realize that outsourcing is hell. Without direct control over customer service, you're going to get nightmarishly bad customer service - the kind people write about in their weblogs when they tried to get someone, anyone, from some phone company to do even the most basic thing. If you outsource fulfillment, and your fulfillment partner has a different idea about what constitutes prompt delivery, your customers are not going to be happy, and there's nothing you can do about it, because it took 3 months to find a fulfillment partner in the first place, and in fact, you won't even know that your customers are unhappy, because they can't talk to you, because you've set up an outsourced customer service center with the explicit aim of not listening to your own customers.""
	"
https://www.joelonsoftware.com/2005/12/14/behold-the-copilot-beer-pong-table/,"Behold, the Copilot Beer Pong Table",2005-12-14T00:08:17+00:00,,Joel Spolsky,News,"
	
	"
https://www.joelonsoftware.com/2005/12/14/shipping-atoms/,Shipping Atoms,2005-12-14T00:08:16+00:00,,Joel Spolsky,News,"
	How to Ship Anything, in which we cut the amount of labor it takes to ship orders from 3 minutes to 35 seconds.
	"
https://www.joelonsoftware.com/2005/12/13/how-to-ship-anything/,How to Ship Anything,2005-12-13T00:15:48+00:00,2016-12-05T19:31:32+00:00,Joel Spolsky,"Fog Creek Software, News","
	When we started selling the Aardvark DVDs on our website, we didn't think it would be so hard to pack and ship them. First of all, we didn't expect there would be so many, and we conveniently forgot some of the little problems like filling out customs forms which turned out to be big nightmares.
For the first batch that we shipped we did things in a very ad-hoc way. I used Microsoft Word's Mail Merge feature to print many of the labels; for international orders I wrote a little Access application that filled out forms on the USPS web site, and so on. 
The actual shipping turned out to be quite difficult. It was amazing how small ergonomic problems turn into huge headaches when you're shipping thousands of orders to 60 different countries. For example, the customs form generated by the USPS web site needed to be signed. We had tons of these. We tried to ""sign"" them by running them through the laser printer again and printing a couple of signature images in the correct place. This worked OK on one printer, but every other printer in the office jammed up when you gave it paper that had already come out of a laser printer. Why is that? Eventually, of course, the printer which could print signatures ran out of toner. It was a Dell. Dell doesn't let office products stores sell their toner. The only way to get toner was to order it from Dell and pay a lot of money for overnight delivery.
My estimate was that it took about three minutes of labor per order, and we only got it that low because we were batching them up. Worse, it took someone skilled in SQL queries and Mail Merge to create the labels.
Last weekend, I thought, there's got to be an easier way. I spent some time researching tools on the Internet for making this stuff easier, and on Monday, I started building our new Super Duper Shipping System, aka FogShip, which took about three days to set up, program, and debug.
Here's what the physical system looks like.
The whole process is controlled by a single computer running Microsoft Access. The shipping data itself lives in SQL Server.
Every day when you're ready to ship things, you click on a button in Access which causes a stack of packing slips to print out. A typical packing slip is shown at right.
Why Microsoft Access? I was skeptical myself. I've never, ever used the Access ""report"" feature in my life; I always imagined it was intended for old-fashioned people who need to have their data printed out for some obscure reason and can't fathom the idea of looking things up on a computer.
Well, it turns out that Access reports are perfect for generating packing slips. This is what they were born to do. Since the data is already in SQL Server, it took no more than a couple of hours to layout and design the report exactly the way I wanted it.
Two other things you'll notice about our packing slips, learned from hard experience. First of all, instead of printing them on a standard-sized sheet of paper, I printed them on 5x8 cards. This has two big advantages. First, they fit into the envelopes we use for shipping most books, CD-ROMs, and DVDs without folding. This really makes a difference when you have a lot of shipping to do. Second, because the card stock is a little bit stiffer than paper, it's easier to shove them into the envelope.
You'll also notice the bar code printed in the top corner. There are many different schemes for printing barcodes, but if you're printing your own barcodes, the easiest barcode system to use is something called Code 39. Other barcode systems want you to add a checksum at the end of the barcode and that means you have to write a little bit of code to calculate the checksum. But Code 39 embeds the the error correction protocol in each letter, which means that you can get a Code 39 font that works just like a font without writing any software.
When you're ready to start shipping you grab a packing slip and scan it.
I didn't really know which barcode scanner to buy, and no matter how hard I tried, I couldn't find any online reviews of barcode scanners. I did find out that the kind of scanner I wanted was a USB keyboard wedge scanner. That means that it has a USB port, which makes connection simple, and it behaves exactly like a keyboard as far as your computer is concerned. I also found out that I wanted a laser scanner, not a CCD scanner, because it works at a distance. I ended up buying a Wasp WLS-9000 along with the stand which you can see in the picture. So far it's been great.
Setting up the barcode reader was the easiest thing in the world. Plug it in to a USB port, and you're done. It comes with a whole book of barcodes that you can scan to configure it to behave in many interesting ways, which you can throw away. Without any setup, when you scan a barcode, your scanner will type the letters that barcode represents on the keyboard and press Enter.
In FogShip, scanning the barcode launches a VBA process which does three things.
First, it marks the order as shipped in our online database, so the customer gets an email to let them know their order is on the way. Technically speaking, it would be more accurate to tell them their order shipped when the post office actually came by and picked up their order, but that enhancement will take more programming and will have to wait.
The second thing that happens when you scan the barcode is that it displays the information from the packing slip on a second large screen in a giant font. That way you can immediately shove the packing slip into the envelope... you don't have to keep it around any more just to keep track of what you're packing. This was a lesson learned from the first round of shipping, where we had to keep the packing slip outside the envelope until the last minute so that we would know what to pack and what the shipping method was; keeping the packing slip out until the last minute was just one more annoying thing that made the whole process less fluid.
Third, it prints a mailing label, and, for international orders, a customs slip.
To print USPS mailing labels with postage, you really only have three choices. You can use the USPS website (""Click 'n' Ship""), but that is designed for home users shipping one or two items. It is not designed to be automated and it always prints lots of instructions which you throw away. Since it relies on Adobe Acrobat Reader for the label, the process of printing is cumbersome and doesn't work well unless you use expensive, full page 8.5 x 11 labels from a laser printer. Anyway, Click 'n' Ship is not the way to go.
The other two choices are Stamps.com and Endicia. Both of them have ways to programmatically print a label.
Endicia had a couple of advantages over Stamps.com for our application: it had a decent tool for laying out custom forms and labels exactly the way you wanted, and it had all the documentation on their website. Stamps.com required you to sign up for a developer program, so it took a while to get the documentation we needed, and we needed that thing yesterday, so we just went with Endicia.
Endicia's system for printing labels couldn't be easier. You create an XML file with all the shipping information and launch their app with the name of that XML file on the command line. It spits out a label and exits, creating a new XML file with tracking information and status information. The stamps.com system, as far as I know, is based on ActiveX, which would have worked fine for our application, too.
Now... let's talk about spitting out a label. If you're doing more than three or four labels a day, you'll want a label printer, and if you want the whole process to go quickly, you'll want a really fast label printer, not a laser printer that has to warm up. Everybody recommended Zebra which makes high-end, industrial strength label printers. We went with the Z4Mplus, which spits out a 4x6 label in less than a second. Not only that, it peels the label for you if you get the optional peeler (sign me UP!) This thing is really, really cool. And if you get Direct Thermal labels, you don't need to buy a ribbon or ink or toner or anything... it sort of burns the print onto the label.
Next problem: customs forms for international orders. A customs form looks like this:
The green bit on the left is a sticky label which you peel off and stick to the envelope. The white part is just plain paper, attached via perforation. You have to fill out the whole thing with details like price, an exact description of the products, how much they weigh, and you have to sign both sides. Filling these things out is a pain in the butt.
The first trick was to find a printer that could print on 4"" x 7"" paper, the size of the customs forms, without messing up the sticky label part. It also had to be able to print pretty close to the edge of the page, it couldn't depend on manually feeding each form, and it had to look good enough so that an image of the signature wouldn't look too fake. It had to be fast at printing and not take a long time warming up, or it would slow down the process.
The printer we found which met all these criteria was the HP LaserJet 2420. We bought two of them (the other one prints the packing cards). It can hold about 100 blank forms in the envelope tray... it turned out that these forms are almost exactly the size of Monarch envelopes which is a standard format for most programs.
The setup software that comes with this printer is completely awful and crashed trying to install on a brand new Windows XP computer. It took several hours of fooling around with the drivers before this thing would print properly. In the meantime, it was printing, but super-slowly, and we couldn't figure out why. I'm pretty shocked that in this day and age HP is still shipping printers that just can't be set up by normal humans.
Back to Microsoft Access, where I created a report for the customs form. Using a ruler I carefully measured the position of each of the fields on the paper form and set up the Access report accordingly. It worked great, even producing a decent facsimile of a signature on the signature line!
The last step in the process is attaching any other flotsam, like Airmail or Priority Mail stickers.
And, tada! You're done. 
Shipping an international order now takes about 35 seconds, down from 3 minutes, and can be done by anyone, whether or not they have SQL and Mail Merge skills. Domestic orders are even faster since they don't need customs forms. Most of all, it's all really fun.
	"
https://www.joelonsoftware.com/2005/12/08/news-124/,News,2005-12-08T00:08:15+00:00,,Joel Spolsky,News,"
	
We have this big empty loft next door where we're about to start construction on another eleven offices. In the meantime it's serving as a temporary ping-pong room.
	"
https://www.joelonsoftware.com/2005/12/07/fog-creek-goes-to-etech/,Fog Creek Goes to ETech,2005-12-07T00:08:14+00:00,,Joel Spolsky,News,"
	
We gave all the Fog Creek programmers a choice of which conference to attend this spring, from a long list of about 12 conferences, and all of them wanted to go to ETech. So that's where you'll find us next March. It was incredibly interesting last year - most of the presentations, especially the ones that weren't given by the sponsors, were great, but the best part was interacting with the interesting attendees.
	"
https://www.joelonsoftware.com/2006/01/30/great-design-table-of-contents/,Great Design – Table of Contents,2006-01-30T00:16:51+00:00,,Joel Spolsky,Design,"
	Articles in gray are still being written. Many of these articles are derived from chapters in User Interface Design for Programmers.
(* = first draft)
Introduction
Introduction to Great Design*What is Design?*What Makes It Great?*
Good Design
User Model vs. Program ModelChoicesAffordances and MetaphorsBroken MetaphorsConsistency and HobgoblinsModesPut users in controlDesign for ExtremesUsers don't readUsers can't control the mouseUsers can't remember anythingActivity Based DesignUsability TestingRelativity (UI Time Warps)How Do It Know?Tricks of the TradeUIs that KillBeta TestingThe Onion in the VarnishInformation Design / Answering the Right QuestionShipping is a Feature
Great Design
Introduction to Black Magic of Great DesignAestheticsEmotional DesignDesigning the Social InterfaceBuilding CommunitiesObsessive Attention to DetailTaking Things AwayPlaying with Fire (making things worse)User happiness vs. user success
	"
https://www.joelonsoftware.com/2006/01/30/what-makes-it-great-first-draft-2/,What Makes It Great? (First Draft),2006-01-30T00:16:50+00:00,2016-12-12T05:06:58+00:00,Joel Spolsky,Design,"
	Now that we've more-or-less defined ""design,"" since the working title of this series is Great Design, I better come up with a working definition of ""great.""
Just about every product category has its blue-chip, gold-plated stars. Movie stars? Brad Pitt. Best rock song of all time? Sweet Home, Alabama, of course. Office chairs? The Herman Miller Aeron. Portable MP3 players? Clearly the Apple iPod.
What do these products have in common?
Brad Pitt can attract millions of people to the box office. He's very good looking, and very charismatic, and it's not even clear if he can act, but who cares?
Sweet Home, Alabama is one of the catchiest songs of all time. It's extremely popular despite the fact that it's impossible to sing or hum (the refrain requires harmony), the melody is awkward, and the lyrics include a couple of reprehensible lines defending Alabama's racist and segregationalist governor George Wallace, but few people really notice the flaws, they just enjoy the song.
The Aeron chair became the symbol of high end office chairs. It's expensive and looks like a giant cockroach, but when the directors of 24 need to show the canonical ""super luxury office chair"" for the White House, they use an Aeron.
And finally, the iPod. Ah, the iPod. It's way more expensive than any competitive MP3 player. It has fewer features than the competition. The iPod nano, the tiny one that everybody's raving about, is the only product I've ever seen that can be scratched beyond all recognition just by touching it lightly with your finger, and the shiny mirror back will be permanently covered in greasy fingerprint smudges from the moment you take it out of the elegant package until the battery wears out and you have to throw away the whole thing and buy another. But who cares?
The blue chip product in every category can usually be thought of as being popular despite obvious design flaws. Weird.
As the design gets better and better, as the product becomes more and more suitable to its users needs, it becomes more likely to be chosen by customers. So the 40GB MP3 player, all else being equal, will outsell the 20GB MP3 player. The easy-to-use phone will outsell the hard-to-use phone. All else being equal. That part is not weird. 
But that only gets you so far, as Creative, makers of the unloved ZEN MP3 players, are learning the hard way. Despite having products that are better than the iPod by just about every reasonable metric, they are unable to even come close to Apple iPod's dominant market share. They're cheaper. They have more memory. They support more file formats. Etc. Doesn't matter: they still have single-digit market share while iPod is probably in the 80s somewhere.
That's because good design can only take you so far. Getting every aspect of the design perfect, making a usable product, making the right tradeoffs between price and functionality, between flexibility and ease of use, between weight and battery life, etc., etc., etc., is all really important, but the most it can possibly get you is to #2.
It's like beauty. A wannabe model can be tall, with a perfectly symmetrical face, beautiful skin, lovely eyes, and perfectly straight white teeth, and still be considered unattractive. On the other hand, you can have a gigantic broken nose, or be completely lacking in eyebrows, or have a giant gap between your two front teeth, and still be People Magazine's Sexiest Whatever of the Year.
How do you get to be #1? That's the mystery here. And since certain markets (graphical operating systems, online auctions, and apparently MP3 players) seem to be winner-take-all markets, being #2 or #3 may not be good enough.
So this is what I'm talking about when I say ""Great Design."" It's that ineffable quality that certain incredibly successful products have that makes people fall in love with them despite their flaws. It's extremely hard to pull off. I sure as heck can't do it. But, if you bear with me, I think I have some theories as to what's happening. While these theories do not exactly add up to a recipe for making good products into great products, they may give you a clue as to what's going on when people go crazy about the Aeron chair or Julia Roberts.
Here's the overall plan for this series of articles. First, I'm going to go through good design, namely, all the things you should know to get your design adequate given the current state of the art. Ease of use is a fundamental part of that so I'll spend a lot of time on usability.
Later, once I've got all the obvious things taken care of, you'll have a really usable design and one which meets your customers' needs, and in fact, if you pay more attention to these usability things than your competitors, you may have the best design, but that's not going to get you to #1.
""Every time I read Jakob Nielsen,"" I wrote in 2000, ""I get this feeling that he really doesn't appreciate that usability is not the most important thing on earth. Sure, usability is important (I wrote a whole book about it). But it is simply not everyone's number one priority, nor should it be. You get the feeling that if Mr. Nielsen designed a singles bar, it would be well lit, clean, with giant menus printed in Arial 14 point, and you'd never have to wait to get a drink. But nobody would go there; they would all be at Coyote Ugly Saloon pouring beer on each other.""
So in the final articles, roughly the last third of the series, I'll peek under the covers at the black magic of great design. You may not be able to pull it off. It takes real talent, not just hard work. But at least I hope you'll recognize some of the things that are going on that make certain gadgets, software, songs, movie stars, and office chairs make that leap from merely throroughly good to truly and significantly great.
Note
I've put up a very high-level index of the articles in this series. The list of upcoming articles may change and be rearranged a bit by the time I get there, and I may not deliver them all in order, but this is the general, big picture outline of what's coming. You may recognize many of the chapters from the online edition, or the longer printed edition, of User Interface Design for Programmers. Those chapters will be expanded, updated, and reevaluated but the key ideas will remain the same.
The paragraph about Sweet Home Alabama has been reworded since I posted it yesterday.
	"
https://www.joelonsoftware.com/2006/01/30/what-makes-it-great-first-draft/,What Makes It Great? (First Draft),2006-01-30T00:14:42+00:00,,Joel Spolsky,"Software designer, Design","
	Now that we've more-or-less defined ""design,"" since the working title of this series is Great Design, I better come up with a working definition of ""great.""
Just about every product category has its blue-chip, gold-plated stars. Movie stars? Brad Pitt. Best rock song of all time? Sweet Home, Alabama, of course. Office chairs? The Herman Miller Aeron. Portable MP3 players? Clearly the Apple iPod.
What do these products have in common?
Brad Pitt can attract millions of people to the box office. He's very good looking, and very charismatic, and it's not even clear if he can act, but who cares?
Sweet Home, Alabama is one of the catchiest songs of all time. It's extremely popular despite the fact that it's impossible to sing or hum (the refrain requires harmony), the melody is awkward, and the lyrics include a couple of reprehensible lines defending Alabama's racist and segregationalist governor George Wallace, but few people really notice the flaws, they just enjoy the song.
The Aeron chair became the symbol of high end office chairs. It's expensive and looks like a giant cockroach, but when the directors of 24 need to show the canonical ""super luxury office chair"" for the White House, they use an Aeron.
And finally, the iPod. Ah, the iPod. It's way more expensive than any competitive MP3 player. It has fewer features than the competition. The iPod nano, the tiny one that everybody's raving about, is the only product I've ever seen that can be scratched beyond all recognition just by touching it lightly with your finger, and the shiny mirror back will be permanently covered in greasy fingerprint smudges from the moment you take it out of the elegant package until the battery wears out and you have to throw away the whole thing and buy another. But who cares?
The blue chip product in every category can usually be thought of as being popular despite obvious design flaws. Weird.
As the design gets better and better, as the product becomes more and more suitable to its users needs, it becomes more likely to be chosen by customers. So the 40GB MP3 player, all else being equal, will outsell the 20GB MP3 player. The easy-to-use phone will outsell the hard-to-use phone. All else being equal. That part is not weird. 
But that only gets you so far, as Creative, makers of the unloved ZEN MP3 players, are learning the hard way. Despite having products that are better than the iPod by just about every reasonable metric, they are unable to even come close to Apple iPod's dominant market share. They're cheaper. They have more memory. They support more file formats. Etc. Doesn't matter: they still have single-digit market share while iPod is probably in the 80s somewhere.
That's because good design can only take you so far. Getting every aspect of the design perfect, making a usable product, making the right tradeoffs between price and functionality, between flexibility and ease of use, between weight and battery life, etc., etc., etc., is all really important, but the most it can possibly get you is to #2.
It's like beauty. A wannabe model can be tall, with a perfectly symmetrical face, beautiful skin, lovely eyes, and perfectly straight white teeth, and still be considered unattractive. On the other hand, you can have a gigantic broken nose, or be completely lacking in eyebrows, or have a giant gap between your two front teeth, and still be People Magazine's Sexiest Whatever of the Year.
How do you get to be #1? That's the mystery here. And since certain markets (graphical operating systems, online auctions, and apparently MP3 players) seem to be winner-take-all markets, being #2 or #3 may not be good enough.
So this is what I'm talking about when I say ""Great Design."" It's that ineffable quality that certain incredibly successful products have that makes people fall in love with them despite their flaws. It's extremely hard to pull off. I sure as heck can't do it. But, if you bear with me, I think I have some theories as to what's happening. While these theories do not exactly add up to a recipe for making good products into great products, they may give you a clue as to what's going on when people go crazy about the Aeron chair or Julia Roberts.
Here's the overall plan for this series of articles. First, I'm going to go through good design, namely, all the things you should know to get your design adequate given the current state of the art. Ease of use is a fundamental part of that so I'll spend a lot of time on usability.
Later, once I've got all the obvious things taken care of, you'll have a really usable design and one which meets your customers' needs, and in fact, if you pay more attention to these usability things than your competitors, you may have the best design, but that's not going to get you to #1.
""Every time I read Jakob Nielsen,"" I wrote in 2000, ""I get this feeling that he really doesn't appreciate that usability is not the most important thing on earth. Sure, usability is important (I wrote a whole book about it). But it is simply not everyone's number one priority, nor should it be. You get the feeling that if Mr. Nielsen designed a singles bar, it would be well lit, clean, with giant menus printed in Arial 14 point, and you'd never have to wait to get a drink. But nobody would go there; they would all be at Coyote Ugly Saloon pouring beer on each other.""
So in the final articles, roughly the last third of the series, I'll peek under the covers at the black magic of great design. You may not be able to pull it off. It takes real talent, not just hard work. But at least I hope you'll recognize some of the things that are going on that make certain gadgets, software, songs, movie stars, and office chairs make that leap from merely throroughly good to truly and significantly great.
 
	"
https://www.joelonsoftware.com/2006/01/30/what-makes-it-great/,What Makes It Great?,2006-01-30T00:08:29+00:00,,Joel Spolsky,News,"
	""Just about every product category has its blue-chip, gold-plated stars. Movie stars? Brad Pitt. Best rock song of all time? Sweet Home, Alabama, of course. Office chairs? The Herman Miller Aeron. Portable MP3 players? Clearly the Apple iPod.
""What do these products have in common?""
What Makes It Great?, first draft, is the third and final part of the introduction to Great Design.
	"
https://www.joelonsoftware.com/2006/01/30/conferences/,Conferences,2006-01-30T00:08:28+00:00,,Joel Spolsky,News,"
	Jeff Jarvis: ""Too many conferences suck.""
Robert Scoble: ""But, wanna do a 1,000 attendee conference? Costs per attendee start going up exponentially."" Apparently the problem is that the big convention centers rip you off, charging $1000 for an urn of coffee.
	"
https://www.joelonsoftware.com/2006/01/27/translations/,Translations,2006-01-27T00:08:27+00:00,,Joel Spolsky,News,"
	A few years ago, a few hundred volunteers graciously offered their time to make Joel on Software available in over 30 languages. You can see the extraordinary results of their hard work here. I'm extremely grateful.
Just managing that translation project was a huge effort. I did as much as I could, then I turned it over to a brilliant and talented part time staffer, a student from Austria living in New York. Coordinating all the manuscripts, converting from Word to HTML, getting the hyperlinks to work - it took a lot of manual labor, and was costing quite a lot of money.
Since then, I'm still receiving a trickle of translations, and of course, there are many articles, old and new, that have never been translated. The translated versions of Joel on Software were static, in fact, they were more or less stuck because I simply don't have time to post new manuscripts.
And there are always three ways to translate any one item, so I end up getting endless requests to change a phrase in, say, Dutch. Speakers of the Flemish dialect ask me to change it one way, then speakers of Netherlands Dutch suggest putting it back, and I have no idea what they're talking about!
Sadly, I fell down in face of the effort needed to maintain 30-odd local language versions. Such a job can't be coordinated by one person, especially when that person is me.
Luckily, in the time since 2002, the Wiki has been invented.
Well, OK, it was invented before that, but nobody thought it would work.
Well, actually, most people thought it would work, but I was too stupid to see it. I kept saying, ""Wikis? Those will never work. Anyone can change the definition of, say, Podcasting, to 'fart fart fart,' and then what happens?""
Lo and behold, I was wrong, Wrong, WRONG.
Wikis work great.
So, I'm going to use a Wiki for the Joel on Software translations.
It's all set up and ready to go. Blank as the day it was born.
If you speak any language fluently, you can help. 
If you don't speak any language other than English, but know how wikis work, you can help by organizing the new wiki, setting up tables of contents, copying over the old translations, and helping translators upload their translations to the wiki and get them formatted.
If you have a lot of time, you can translate something. Anything. A page from Joel on Software that you liked, a page from Joel on Software that you didn't like, a whole article, the whole dang UI book.
If you're feeling naughty, add some fart jokes to somebody's excellent translation. We'll see if the community spots it and fixes it.
If you have a little bit of time, look at the articles that were already translated. Find mistakes. Fix them. Find some jokes that got translated badly, and translate them better. Look for hyperlinks in the Klingon translation that go to the English version when there's now a Klingon translation of the linked article you can point to, and fix it.
Help set policies and guidelines. Collate people's collective knowledge of what obscure jokes mean, and how best to translate them. Create tables of contents, indexes, and cross references. Create local communities.
Don't wait for me. It's all set up and ready to go. Blank as the day it was born.
	"
https://www.joelonsoftware.com/2006/01/26/great-design-what-is-design-first-draft/,Great Design: What is Design? (First Draft),2006-01-26T00:14:49+00:00,,Joel Spolsky,"Software designer, Design","
	OK, buckle down, we've got a lot of ground to cover.
In our last episode, I introduced the tentative title ""Great Design"" for this series of articles. I have something very specific in mind when I use the words ""great"" and ""design,"" and it's worth spending some time defining it. 
First, ""design.""
You know those gorgeous old brownstones in New York City? With the elaborate carvings, gargoyles, and beautiful iron fences? Well, if you dig up the old architectural plans, the architect would often just write something like ""beautiful fretwork"" on the drawing, and leave it up to the artisan, the old craftsman from Italy to come up with something, fully expecting that it will be beautiful.
That's not design. That's decoration. What we, in the software industry, collectively refer to as Lipstick on a Chicken. If you have been thinking that there is anything whatsoever in design that requires artistic skill, well, banish the thought. Immediately, swiftly, and promptly. Art can enhance design but the design itself is strictly an engineering problem. (But don't lose hope - I'll talk more about beauty in future articles).
Design, for my purposes, is about making tradeoffs.
Let's design a trashcan for a city street corner, shall we?
Let me give you some design constraints.
It has to be pretty light, because the dustboys, er, sanitation engineers come by and they have to pick it up to dump the trash in the garbage truck.
Oh, and it has to be heavy, or it will blow away in the wind or get knocked over. (True story: I once got in an accident because a trash can blew in front of our car. Nobody was hurt, not even the trashcan.)
It has to be really big. People throw away a lot of trash throughout the day and at a busy intersection if you don't make it big enough, it overflows and garbage goes everywhere. When that happens, one of the little six-pack plastic ringy-dingies will get in the ocean, and a cute little birdy will get ensnared in it, and choke to death. YOU DON'T WANT TO KILL BIRDIES, DO YOU?
Oh, also, it needs to be pretty small, because otherwise it's going to take up room on the sidewalk, forcing the pedestrians to squeeze past each other, which, possibly, when the Effete Yuppie Listening to His iPod gets distracted by a really funny joke on the Ricky Gervais podcast and accidentally brushes against the Strangely Haunted Vietnam-Era Veteran, can result in an altercation of historic proportions.
Ok, light, heavy, big, and small. What else. It should be closed on the top, so rubbish doesn't fly away in the wind. It should be open on the top, so it's easy to throw things away. 
It should be really, really, really cheap.
Notice a trend? When you're designing something, you often have a lot of conflicting constraints.
In fact, that's a key part of design: resolving all of these conflicting goals. 
The only goal that usually doesn't conflict is the requirement that whatever you design be really, really cheap. 
Every design decision involves tradeoffs, whether it's finding space for all your icons on the toolbar, picking the optimal balance of font size and information density, or deciding how best to use the limited space for buttons on a cellphone.
Every new feature is a tradeoff, between the people who could really use such a feature and the people who are just going to get overwhelmed by all the options. The reason 1950s-era telephones were so much easier to use than modern office phones is that they just didn't do much. Without voicemail, conference calling, three-way calling, and Java games, all you need is a way to dial numbers and hang up on the man claiming to be selling police benevolence.
By which I mean to say: even if you think your new feature is all good and can't hurt because ""people who don't care can just ignore it,"" you're forgetting that the people who allegedly don't care are still forced to look at your feature and figure out if they need it. 
""How could a mute button on a sound system hurt?"" After all, if you don't want to waste time learning about the mute button, you can just ignore it completely, right?
No. Because at some point, someone will hit it by mistake, and no sound will come out of the speakers, and if they don't know about ""mute,"" they'll start trying to turn up the volume knob all the way, so when they do finally unmute the thing, the speakers will blow out with an ear-shattering boom that creates permanent, concave warps in each of the walls of the room where the sound system was installed (and a matching hump in the floor of the apartment upstairs).
And since the mute button takes up space on the control panel, now all the other control panel buttons have to be a bit smaller, making them harder to read, and there are more buttons, so the whole interface looks scarier. I swear, it's gotten to the point where I don't dare try to use the clock radio in a hotel room to wake me up. With all the options they have I can never quite tell if I'm setting the alarm clock to wake me up in time for my Very Important Meeting, or programming the damn thing to download the latest news from Mongolia on the half-hour.
""So,"" you think, ""simplicity, is that it?"" No! I wish it was that easy!
Because without conference calling, you're just not going to sell any office telephones. 
If the nifty graphics application you developed doesn't give users 16777216 choices for colors, you're not going to sell a copy to Yale, which needs Yale Blue (Pantone 289) for all their documents.
You see? There are two requirements: lots of features and few features. Ah! And that is where the zen-like mystery of design comes in. When you're designing, you're satisfying lots of difficult constraints. One false move, and you fall into the abyss. It's frigging hard to get this right. You think I know how to solve the Motorola RAZR phone power-switch button? Heck no! I'm sure that the design team over there spent weeks working on this. I'm sure that some engineer or team of engineers went to absolutely heroic lengths, staying up late and coming in on weekends, to make the RAZR keyboard light up right away when you press the ON button, even though you don't notice this in daylight, because they know about the problem I whined about in the introduction and just couldn't do anything about it because turning on a modern cellphone requires booting up a computer, and not a very fast computer, for that matter, before you can get things on the main screen to light up.
Design Adds Value Faster Than It Adds Cost
The Motorola RAZR is now selling at a rate of about four million units each month - 1.5 per second. If Motorola spends another $million or two improving the design, they can make it back in a day.
Design is something you only have to pay for once for your product. It's a part of the fixed costs in the equation, not the variable costs. But it adds value to every unit sold. That's what Thomas C. Gale, the famous Chrysler automobile designer who retired in 2001, meant when he said that ""Good design adds value faster than it adds cost."" 
(Footnote: AUTOS ON FRIDAY/Design; He Put a New Face on Chrysler, The New York Times, Published: February 9, 2001, by By JIM MCCRAW , Late Edition - Final, Section F, Page 1, Column 1)
That's what makes it so important. By the time I've finished this series of articles, I think you'll be utterly convinced that nothing matters more to a product's success - whether it's a software product, website, cell phone, or garbage can - than good design. And as for great design? Well, that's coming up in the next installment. Stay tuned.
 
	"
https://www.joelonsoftware.com/2006/01/26/what-is-design/,What is “Design”?,2006-01-26T00:08:26+00:00,,Joel Spolsky,News,"
	""You know those gorgeous old brownstones in New York City? With the elaborate carvings, gargoyles, and beautiful iron fences? Well, if you dig up the old architectural plans, the architect would often just write something like ""beautiful fretwork"" on the drawing, and leave it up to the artisan, the old craftsman from Italy to come up with something, fully expecting that it will be beautiful.
""That's not design. That's decoration.""
Great Design: What is Design? (First draft).
	"
https://www.joelonsoftware.com/2006/01/25/introduction-to-great-design-first-draft/,Introduction to Great Design (First Draft),2006-01-25T00:16:48+00:00,,Joel Spolsky,Design,"
	Confession: I'm afraid to turn off my cell phone.
Not because I'm afraid of being out of touch, mind you. Heck, I could care less if people can reach me. If you have something to tell me that's so important it would be worth interrupting Will and Grace, well, I think I'd rather have another 45 minutes of ignorant bliss before I find out about it. That's my motto: Will and Grace First, Earthquakes and Floods Later.
Here's why I'm afraid to turn off my cell phone: because I can't always seem to muster the brain cells necessary to turn it back on.
It has two buttons on it, a happy green button and a scary red button. They have funny icons on them that don't mean very much to me.
You might think that the green button turns it on. Green means go, right? 
Wrong.
I tried that. Nothing doing. I tried pressing and holding the green button, because sometimes these phones want you to press-and-hold so that you won't accidentally take a picture of your ear, or disconnect the phone call in the middle of an important job interview, or whatnot.
It turns out it's the red button that turns it on.
When you press the red button, usually, nothing actually happens, so you suspect you might have done something wrong.
It turns out that you have, actually, turned on the phone, and if you're in a dark room, you would have noticed that the keyboard flashed when you turned it on. In a bright room, nothing happens for six seconds. That's usually long enough to think that you've done something wrong. So that's when I start trying the other buttons, like the happy green button. In any case, I wind up feeling frustrated and not in control of my life.
Once you do learn that the red button turns the phone on, and you don't have to hold it, you start to get frustrated that the time it takes the phone to boot up and load the pretty background picture and get on the network is something like 30 seconds. That's frustrating, too. It seems like in the Olden Days you didn't have to wait for half a minute to turn on an appliance. There was a switch, up was on (unless you lived in Europe, where they had a terrible war and couldn't afford appliances), you switched it, the thing went on and started spinning or shining or whatever it is that the thing was supposed to do. Instantly. End of story.
Indeed, it's surprising just how many of today's devices and gadgets and remote controls have actually made TVs, stoves, and telephones harder to use. Suddenly, bad computer user interface design is seeping into the entire world.
Six years ago, with the total dominance of the consistent GUI interface of Mac and Windows, it seemed like the state of the art in software UI design was getting pretty good. Nothing fabulous, mind you, but pretty good. You could sit down with a new Windows app that you'd never seen before and have a pretty good chance of being able to operate it correctly.
That's when I wrote a book called User Interface Design for Programmers, thinking, great! It's time to get everybody on the same page here on how to design user interfaces, and then life will be wonderful.
Unfortunately, that was about the same time as there was a huge wave of new consumer gadgets, and, of course, that web thing hit us.
The web didn't really have a standard UI. You could make anything be a link. We didn't have dropdown menus, so we made do with all kinds of differently-behaved simulations of dropdown menus.
Gadgets? Gadgets were even worse. They had tiny keyboards and tinier screens. Combined with rampant featuritis, these damn devices did more and more things but just figuring out how to do them took a degree in engineering (or a bright 12 year old, but slavery has been abolished, especially for 12 year olds.)
Maybe nobody told the people who design gadgets and gizmos and websites (and even software) that they need to work on their user interface skills.
So, this is their wake up call.
While most products were became increasingly incomprehensible, like the typical home entertainment remote control, with dozens of mushy little buttons marked ""MTS"" or ""SURR"" or ""PTY"" that nobody has any hope of understanding, something else was happening: a very few, very good designers were, somehow, coming up with truly great designs that were beautiful, easy to understand, fun, and which made people happy. You know who they are because those products became bestsellers. The Apple iPod. TiVo. Google. Even the Motorola RAZR, which is so hard to turn on, is, in most ways, a great design.
Over the next weeks and months, if all goes well, I'm going to write a series of articles right here, on this website, on UI design for the modern age. The whole series will be, tentatively, named Great Design.
If all goes well, we're going to look at some of the original principles of good UI design, much of which I covered in the first book, and revisit them and see how they apply to today's world of miniature gadgets, websites, and street-corner garbage cans. 
Then, if we're really lucky, we're going even farther. We're going to look at what it takes to make the leap from a servicable, decent product design to a Mindbogglingly Great, Earth-Shaking, History-Changing product design. I have some theories about that, too.
Administatrivia
First, one change that you'll notice. I'm going to publish each article twice. The first appearance will be a rough draft. Later, I'll revise and edit the article, taking into account some of the feedback I received, and republish it as a second draft. I'm doing it this way because it lets me publish something almost as soon as I've written it, without too much editing, secure in the knowledge that I can edit it to death later.
There are three ways to follow along:
Come back to www.joelonsoftware.com regularly
Subscribe to the Joel on Software RSS feed with your favorite feed reader (I like Bloglines, personally, but there are heaps)
Or get an email subscription by entering your email address at the bottom of the page.
 
	"
https://www.joelonsoftware.com/2006/01/25/introduction-to-great-design-second-draft-in-progress/,"Introduction to Great Design (Second Draft, In Progress)",2006-01-25T00:14:43+00:00,,Joel Spolsky,"Software designer, Design","
	Confession: I'm afraid to turn off my cell phone.
Not because I'm afraid of being out of touch, mind you. Heck, I could care less if people can reach me. If you have something to tell me that's so important it would be worth interrupting Will and Grace, well, I think I'd rather have another 30 minutes of ignorant bliss before I find out about it. That's my motto: Will and Grace First, Earthquakes and Floods Later.
Here's why I'm afraid to turn off my cell phone: because I can't always seem to muster the brain cells necessary to turn it back on.
It has two buttons on it, a happy green button and a scary red button. They have funny icons on them that don't mean very much to me.
You might think that the green button turns it on. Green means go, right? 
Wrong.
I tried that. Nothing doing. I tried pressing and holding the green button, because sometimes these phones want you to press-and-hold so that you won't accidentally take a picture of your ear, or disconnect the phone call in the middle of an important job interview, or whatnot.
It turns out it's the red button that turns it on.
When you press the red button, usually, nothing actually happens, so you suspect you might have done something wrong.
It turns out that you have, actually, turned on the phone, and if you're in a dark room, you would have noticed that the keyboard flashed when you turned it on. In a bright room, nothing happens for six seconds. That's usually long enough to think that you've done something wrong. So that's when I start trying the other buttons, like the happy green button. In any case, I wind up feeling frustrated and not in control of my life.
Once you do learn that the red button turns the phone on, and you don't have to hold it, you start to get frustrated that the time it takes the phone to boot up and load the pretty background picture and get on the network is something like 30 seconds. That's frustrating, too. It seems like in the Olden Days you didn't have to wait for half a minute to turn on an appliance. There was a switch, up was on (unless you lived in Europe, where they had a terrible war and couldn't afford appliances), you switched it, the thing went on and started spinning or shining or whatever it is that the thing was supposed to do. Instantly. End of story.
Indeed, it's surprising just how many of today's devices and gadgets and remote controls have actually made TVs, stoves, and telephones harder to use. Suddenly, bad computer user interface design is seeping into the entire world.
Six years ago, with the total dominance of the consistent graphical interface of Mac and Windows, it seemed like the state of the art in software UI design was getting pretty good. Nothing fabulous, mind you, but pretty good. You could sit down with a new Windows app that you'd never seen before and have a pretty good chance of being able to operate it correctly.
That's when I wrote a book called User Interface Design for Programmers, thinking, great! It's time to get everybody on the same page, here, about how we design user interfaces, and then life will be wonderful.
Unfortunately, that was about the same time as there was a huge wave of new consumer gadgets, and, of course, that web thing hit us.
The web didn't really have a standard UI. You could make anything be a link. We didn't have dropdown menus, so we made do with all kinds of differently-behaved simulations of dropdown menus.
Gadgets? Gadgets were even worse. They had tiny keyboards and tinier screens. Combined with rampant featuritis, these damn devices did more and more things but just figuring out how to do them took a degree in engineering (or a bright 12 year old, but slavery has been abolished, especially for 12 year olds.)
Maybe nobody told the people who design gadgets and gizmos and websites (and even software) that they need to work on their user interface skills.
So, this is their wake up call.
While most products were becoming increasingly incomprehensible, like the typical home entertainment remote control, with dozens of mushy little buttons marked ""MTS"" or ""SURR"" or ""PTY"" that nobody has any hope of understanding, something else was happening: a very few, very good designers were, somehow, coming up with truly great designs that were beautiful, easy to understand, fun, and which made people happy. You know who they are because those products became bestsellers. The Apple iPod. TiVo. Google. Even the Motorola RAZR, which is so hard to turn on, is, in most ways, a great design.
Over the next weeks and months, if all goes well, I'm going to write a series of articles right here, on this website, on UI design for the modern age. The whole series will be, tentatively, named Great Design.
If all goes well, we're going to look at some of the original principles of good UI design, much of which I covered in the first book, and revisit them and see how they apply to today's world of miniature gadgets, websites, and street-corner garbage cans. 
Then, if we're really lucky, we're going even farther. We're going to look at what it takes to make the leap from a servicable, decent product design to a Mindbogglingly Great, Earth-Shaking, History-Changing product design. I have some theories about that, too.
 
	"
https://www.joelonsoftware.com/2006/02/10/processing-internship-applications/,Processing Internship Applications,2006-02-10T00:08:34+00:00,,Joel Spolsky,News,"
	The senior developers at Fog Creek are spending much of this week evaluating the 400+ applications we received for our five available summer internships. 
We got about half as many applications as last year. This is mainly because we were careful to keep our job listings off of Monster.com and eRecruiting. I'm not 100% sure of this, but it seems like when you post an internship to Monster or eRecruiting, candidates can apply for that job simply by clicking one link. As a result, last year we got flooded with seriously unqualified candidates. This is not just Joel Being an Elitist Snob. I'm talking about people whose only experience was working at Dunkin' Donuts and who had no programming experience.
We did get a lot more good applications. Really good applications. Not just kids from Indiana. Students from all over. Illinois. Missouri. Well, OK, maybe not Missouri. Missouri is crazy talk.
During the first stage of evaluating resumes, we go through looking for six objective things (I won't tell you what they are) that we think are good predictors of success. Each candidate gets a letter code indicating which of these six things they have, for example, ADF or BCF or ABCDEF. Again, these are all just things that you can tell objectively from a cover letter and resume, so there's not too much controversy at this stage.
The system is designed to be flexible, so we don't just rule people out because they didn't go to the right school or get the right grades. When we find a candidate who is officially missing something, but who looks like a great candidate for some other reason, we add some + signs... someone who doesn't have E or F but who has a really good excuse and looks ""smart/gets things done"" might get ABCD++. 
That said, we're not going to tell a student with perfect grades from MIT or Stanford or Rose Hulman to take a hike just because ""grades aren't everything."" 
When we finished that process this afternoon it looked like we had 60 candidates with either 5 or 6 scores (which we consider ""equivalent within a margin of error""). So the next stage is whittling down that list of 60 to about 30 that we can phone interview. For this whittling phase, each cover letter and resume is scrutinized by three senior developers. They assign a score of +1 (""I want this person""), -1 (""Unlikely to work out""), or 0 (indifferent) to each candidate. Here it's a lot more subjective, but when you're looking at a small pile of resumes sometimes you just know who the great ones are and who the good-on-paper ones are. When we add up all the scores for each candidate, they end up with a number between -3 and 3 and we simply sort by that number and then work down the list in numerical order until about 15 have passed a phone screen.
The phone screen stage takes between half an hour and an hour. Anyone who gets through that gets flown out to New York City, all expenses paid including up to three nights in a luxury hotel, and goes through the wringer in person.
Elitist, Arrogant Bastard
Some people feel like our process is elitist, or arrogant, or overkill. I've heard comments along the lines of ""why do you need such superstars for writing a [holding nose] bug tracking application?""
Well, part 1. It's not my fault that 400 people applied. Well, OK, it is my fault: we have free housing, lunches, Broadway shows, unlimited free subway passes, high salaries, a boat trip, a Yankees game, two parties and a walking tour. But once all those students applied, it's the least we can do to consider each application with the utmost care and fairness, and give the internships to the people we think have the best chance of working out well, for them and for us.
Part 2, if you think Fog Creek is still about bug tracking applications, you've lost the plot somewhere. Last summer's interns developed Copilot.com, pretty much all by themselves. Copilot is our fastest growing business.
Our FogBugz team spends a lot of their time these days doing Ajax development. Our newest hire Stefan is developing a pretty shockingly sophisticated automatic testing system and actually needs Don Box books to get his work done. When you work on FogBugz you're just as likely to be working on Thistle, our Java-based VBScript compiler (which now emits two things: PHP and a form of VBScript with tracing information built in for testing code-coverage tracking).
And finally part 3, when you hire superstars you make a lot of money in terms of revenue-per-employee. That means we can have cushy private offices and high-end workstations and Aeron chairs without running out of money.
But
... I'm still not happy with the traditional ""cover letter/resume"" system, because it discriminates against the non-traditional, and many of the most brilliant programmers and software developers I know just look awful on paper. Adam Bosworth likes to make fun of me, because he majored in, oh, I don't remember, History? Whatever, and he says to me ""you never would have hired me, or Anders Hejlsberg, etc..."" because supposedly Adam and Anders are lacking in the ""ABCDEF"" qualifications on my list, but actually, that's kind of absurd, because of course we would hire Adam and Anders to work on our stinkin' bug trackin' application if they wanted to, and in fact, when we started Fog Creek, one of our actual real-life business goals was ""to create a company where someone like Adam Bosworth would want to work.""
He's at Google, now, by the way.
I don't really think we can reinvent the application process. A couple of years ago we asked interns to submit writing samples (like a paper from any class), recommendations from professors, and transcripts, but we found that they gave us no additional information we didn't already have.
	"
https://www.joelonsoftware.com/2006/02/09/more-on-calendars/,More on Calendars,2006-02-09T00:08:33+00:00,,Joel Spolsky,News,"
	One online calendar I neglected to check out is Airset. Thanks to a couple of alert readers who emailed me, I tried it out tonight. It's much, much better than the proof-of-conceptware that people are hyperventilating about. In fact, it's the first online calendar I've found that seems like it might work for me.
Why didn't I evaluate it before? Well - to be honest - I went to the website, and couldn't find any screenshots or specific technical information, or an easy way to try it without signing up, so I gave up. It didn't help that Walter Mossberg had chosen Trumba over Airset and for some reason I let that influence me into not trying Airset. Dang, that was dumb.
I still have a list of feature requests for the Airset developers, though! If you know someone who works over there let me know.
	"
https://www.joelonsoftware.com/2006/02/08/vmware-server-now-free/,VMWare Server Now Free!,2006-02-08T00:08:32+00:00,,Joel Spolsky,News,"
	I have always been a huge fan of VMWare Workstation. ""The basic idea is that it lets you run a whole PC inside a window, with its own operating system and hard drive."" 
I've dreamed of the day when I could use something similar for servers. VMWare has had a couple of server products for a while now, GSX and ESX, but they were expensive and complicated.
No longer. VMWare Server is going free. Wow. Mike Gunderloy explains why this is ""a market-changing move."" This is great stuff, and it's not half baked.
	"
https://www.joelonsoftware.com/2006/02/08/too-many-ajax-calendars/,Too Many Ajax Calendars,2006-02-08T00:08:31+00:00,,Joel Spolsky,News,"
	For all the Ajax calendars that are appearing, it's a shame I can't find one which really meets my needs.
I tried out Trumba, Kiko, 30 Boxes, Yahoo! Calendar, and Spongecell. I couldn't recommend any of them. 
My needs are probably weird, but not that weird. Here's what I need a calendar to be able to do:
Enter flights. Many of these calendars only lets me enter things that start on 15 minute intervals, and flights are just not scheduled that way. Many of these calendars insist I specify the duration, which I don't know - I know when the flight lands, but not the duration.
Understand enough about time zones so I can enter a flight. Flights from New Zealand to Los Angeles arrive before they departed. It's confusing but it's true and if I can't enter them properly on my calendar I'm back to typing itineraries in Word.
Allow my assistant to enter appointments and see my schedule, although some things may be private. Many calendars have this feature.
Notify me in advance of a meeting using some reliable mechanism. Surprisingly many of the hot new Ajax calendars omitted this basic feature because they're web apps. At the very least, I'd like something to pop up on Windows, which means a downloadable widget, and an SMS message on my cell phone. Different meetings need different advance warnings ... I need to be notified 3 hours before a flight at Kennedy but 3 minutes before a meeting in my office.
Print out something reasonable that I can take with me before a trip listing my complete schedule for the trip. Some of my appointments have driving directions or complicated notes attached. I just want a list of where I need to be, when, and it's surprising that very few online calendars can handle this.
Listen, I know that everybody is saying that the cool thing to do these days is Ship Early and Often, but when you ship half-baked ajax calendars that don't do much and then get Scoble to go nuts about how great they are, well, you're going to have a lot of people like me checking it out and realizing that, for example, no thought whatsoever has gone into printing, which is fine, it's a 1.0 release, but you know what? I'm not going to look at 30 Boxes again - I've spent enough time evaluating it. G'bye. I've talked about this before - it's the Marimba phenomenon - when you get premature publicity, lots of people check out your thing, and it's not done yet, so now most of the people that tried your thing think it's lame, and now you have two problems: your thing is lame and everybody knows it.
Why so many Ajax calendars? My theory is that about a year ago, there was a lot of buzz (possibly true, possibly false) about Google shipping a calendar, and everybody thought, oh gosh, it's gonna be really good, like Gmail, and then Yahoo! is going to be embarrassed again, and run out and buy the best Ajax calendar company they can find, just like they did with Oddpost, making those very funny kids millionaires overnight. So people aren't really building calendars to sell to people like me who need calendars: they're building calendar companies to sell to Yahoo!, which, for some reason, has given up on the old concept of hiring programmers to write code, and is going with this new age concept of buying entire companies on the hopes that they might contain a good programmer or two, which, by the way, is a sure sign of trouble for a technology company.
But anyway, how many Ajax Calendar Companies do you think Yahoo! is gonna buy? You don't build a product for one customer. It's just too risky.
	"
https://www.joelonsoftware.com/2006/02/03/fogbugzsnagit/,FogBugz/SnagIt,2006-02-03T00:08:30+00:00,,Joel Spolsky,News,"
	
Andy created a FogBugz and SnagIt Mashup. Cool!
	"
https://www.joelonsoftware.com/2006/03/31/best-software-writing-volume-ii/,Best Software Writing – Volume II,2006-03-31T00:08:39+00:00,,Joel Spolsky,News,"
	Last year, working with Apress, I put together a book called The Best Software Writing I full of great articles about software development from around the web. I was hoping to encourage better writing about software, as I wrote in the introduction:
The software development world desperately needs better writing. If I have to read another 2000 page book about some class library written by 16 separate people in broken ESL, I'm going to flip out. If I see another hardback book about object oriented models written with dense faux-academic pretentiousness, I'm not going to shelve it any more in the Fog Creek library: it's going right in the recycle bin. If I have to read another spirited attack on Microsoft's buggy code by an enthusiastic nine year old Trekkie on Slashdot, I might just poke my eyes out with a sharpened pencil. Stop it, stop it, stop it!
Anyway, that book was a big hit so I think it's time for volume II.
Here's how it works. Nominate your favorite articles by posting links using the discussion group. All nominations must include the nominator's full name and correct email address or they will not be considered.
Check out some of the articles that are already there and add your comments. Nominations will be accepted until April 15th.
	"
https://www.joelonsoftware.com/2006/03/20/whats-the-joel-reddit/,What’s the Joel Reddit?,2006-03-20T00:08:38+00:00,,Joel Spolsky,News,"
	The new reddit site at joel.reddit.com is a place for you, my readers, to post links to sites and articles on the web that you found interesting.
In addition to posting and browsing links, you can vote them up or down. The newest links with the highest vote show up on the main ""hot"" page. There is also a ""new"" page which lists all the newly-posted links, and some other nifty features which I'm sure you'll discover soon enough.
What's the point?
The main idea is to share interesting links from around the Internet with other Joel on Software readers and with me. Anything is fair game... post whatever you want, but use your voting power to vote for things you found interesting (and vote down spam, duplicates, and boring things). If all goes well, a bunch of interesting stuff will float to the top.
Check out my thing!
Every day I get at least a half dozen emails of the form, ""check out my thing!"" with a URL for some startup or widget or interesting article that someone wrote. I love 'em but I don't always have time to read them and it's vanishingly unlikely that I will ever link to them, because that's not really what this site is all about. Well, the Joel reddit will solve this problem. If you wrote something interesting that you want to publicize, just put it up on the reddit. If it really is interesting, other people will vote it up and it will get noticed. If it isn't interesting, go work on making it more interesting and post it again.
OK, Stop Asking Question and post some interesting links!
Special thanks to Alexis, Steve, and all the kind folks at reddit.com for setting this up, and special thanks to Alexis for drawing ""Blowhard Pundit Joel,"" with microphone and podium, to match their cool reddit alien mascot.
	"
https://www.joelonsoftware.com/2006/03/16/software-development-productivity-awards/,Software Development Productivity Awards,2006-03-16T00:08:37+00:00,,Joel Spolsky,News,"
	Fog Creek Copilot won the Software Development 16th Annual Productivity Award in the ""Utilities"" category. All credit for this cool award goes to the interns who developed it in one summer: Tyler, Ben, Michael, and Yaron!
FogBugz 4.0 won the Productivity Award in the ""Defect Tracking, Change, and Configuration Management"" category. Congratulations to the whole FogBugz team!
Productivity Awards are sort of like runners-up for the Jolt Awards... there are three Productivity winners in each category but only one Jolt. In the Utilities category, the Jolt went to TechSmith for Camtasia, the demo-making software we use and love here at Fog Creek (check out the flash demo of FogBugz we made with Camtasia last year).
Software Development magazine, which gives the awards each year, started out as Computer Language, and now they just announced that they are merging with Dr. Dobbs Journal and taking over the Dr. Dobbs name. Eric Sink's blog post about the eventual death of developer magazines seems prescient.
	"
https://www.joelonsoftware.com/2006/03/07/usability-in-one-easy-step-first-draft/,Usability in One Easy Step (First Draft),2006-03-07T00:16:52+00:00,,Joel Spolsky,Design,"
	Bad usability in the design of aircraft controls can result in what is cheerfully referred to as CFIT: Controlled Flight Into Terrain.
The usability of your product may not be quite as critical. If you're lucky, the mistakes you make in usability design will merely cause people to lose limbs, or, heck, even just thumbs. No biggie!
In fact if you're extremely lucky, your unusable design will do nothing more than make people sad. They'll try to accomplish things, and either fail, or struggle, and for very real reasons this will literally make them unhappy. I'll explore the psychological reasons for that in a future article, but for now, suffice it to say that making the users of your design unhappy is not likely to be precisely the result you were looking for, unless you're designing a French film.
So, usability. That's really at the heart of good design, and I'm going to spend a lot of time on it.
The good news is that I can teach you everything I know about usability while standing on one foot. Ready? Here we go:
Something is usable if it behaves exactly as expected.
That's it! That's the whole story! As Hillel said, all the rest is commentary.
Let me run a little example by you.
Which is Easier to Use: Windows or Mac?
When you're designing a product for humans, it helps to keep imaginary users in mind. The more realistic the imaginary user is, the better you'll do thinking about how they use your thing. 
My imaginary user is Pete.
Pete is an accountant for a technical publisher who has used Windows for six years at the office, and a bit at home. He is fairly competent and technical. He installs his own software; he reads PC Magazine, and he has even programmed some simple Word macros to help the secretaries in his office send invoices. He has a cable modem at home. Pete has never used an Apple Macintosh. ""They're too expensive,"" he'll tell you. ""You can get a 3.6 GHz PC with 2 gigs of RAM for the price of..."" OK, Pete. We get it.
One day Pete's friend Gena asks him for some computer help. Now, Gena has a Macintosh iBook, because she loves white computers. When Pete sits down and tries to use Gena's Macintosh, he quickly gets frustrated. ""I hate these things,"" he says. He is, finally, able to help Gena, but he's grumpy and unhappy. ""The Macintosh has such a clunky user interface.""
Clunky? What's he talking about? Everybody knows that the Macintosh has an elegant user interface, right? The very paradigm of ease-of-use?
Well.
On the Macintosh, when you want to resize a window, you have to grab the bottom right hand corner to resize it. On Windows, you can resize from any edge. When Pete was helping Gena, he tried to widen a window by dragging the right edge. Frustratingly, the whole window moved, rather than resizing as he expected.
On Windows, when a message box pops up, you can tab to a button and hit the space bar to press that button. On the Mac, space doesn't work. When Pete got alerts, he tried to dismiss them using the space bar, like he's been doing subconsciously for the last six years. 
The first time Pete tried that on the Mac, nothing happened. Without even being aware of it, Pete banged the space bar harder, since he thought that the problem must be that the keyboard did not register his tapping the space bar. Actually, it did-but it didn't care! Eventually he used the mouse. Another tiny frustration.
Pete has also gotten into the habit of using Alt+F4 to close windows. On the Mac, this actually changes the volume of the speakers. At one point, Pete wanted to click on the Internet Explorer icon on the desktop, which was partially covered by another window. So he hit Alt+F4 to close the window and immediately double-clicked where the icon would have been. The Alt+F4 raised the volume on the computer and didn't close the window, so his double click actually went to the Help button in the toolbar on the window which he wanted closed anyway, and that immediately started bringing up a help window, slowly, so now, he's got two windows open which he has to close.
Another small frustration. But, boy, does it add up. At the end of the day, Pete is grumpy and angry. When he tries to control things, they don't respond. The space bar and the Alt+F4 key ""don't work""-for all intents and purposes, it's as if those keys were broken. The window disobeys him when he tries to make it wider, playing a little prank where it just moves over instead of widening. Bad window. Even if the whole thing is subconscious, the subtle feeling of being out of control translates into unhappiness. ""I like my computer,"" Pete says. ""I have it all set up so that it works exactly the way I like it. But these Macs are clunky and hard to use. It's an exercise in frustration. If Apple had been working on MacOS all these years instead of mucking about with video iPods and other toys, their operating system wouldn't be such a mess.""
Right, Pete. We know better. His feelings come despite the fact that the Macintosh really is quite easy to use-for Mac users. It's totally arbitrary which key you press to close a window. The Microsoft programmers probably thought that they were adding a cool new feature by letting you resize windows by dragging any edge. The Apple programmers probably thought they were adding a cool new feature when they let you move windows by dragging any edge.
All those flame wars you read on the OS bigot websites about user interface issues focus on the wrong thing. Windows is better because it gives you more ways to resize the window. So what? That's missing the point. The point is, does the UI respond to the user in the way in which the user expected it to respond? If it didn't, the user is going to feel like they can't control the interface, and they're going to be unsuccessful. That's all there is to it. Something is usable if it behaves exactly as expected. Tattoo this on your forehead. Backwards, so you can read it in the mirror.
If you follow along in future articles, you'll see that just about everything I can teach you about usable design is going to relate back to this simple rule, so if for some reason aliens land in your garden tonight and whisk you away to the planet Kij8zxwrk, where you have no access to the Earth's Internet because TCP/IP doesn't work well when packets take hundreds of years to arrive, you already know enough to get a job as a pretty decent usability designer.
 
	"
https://www.joelonsoftware.com/2006/03/07/usability-in-one-easy-step/,Usability in One Easy Step,2006-03-07T00:08:36+00:00,,Joel Spolsky,News,"
	""Bad usability in the design of aircraft controls can result in what is cheerfully referred to as CFIT: Controlled Flight Into Terrain.
""The usability of your product may not be quite as critical. If you're lucky, the mistakes you make in usability design will merely cause people to lose limbs, or, heck, even just thumbs. No biggie!""
Read on: Usability in One Easy Step
(You may recognize this article as an extensively rewritten version of beginning of my book UI for Programmers. Indeed, I'm in the process of expanding and revising most of that book, and that's what you're reading here.)
	"
https://www.joelonsoftware.com/2006/03/05/a-lot-of-travelling/,A lot of travelling,2006-03-05T00:08:35+00:00,,Joel Spolsky,News,"
	Somewhere in the world, there's a conference organizing school, and they must teach you there that all conferences have to be held during March. This month I'll be in California more than New York:
First stop: O'Reilly ETech in San Diego, where I'll give a quick status report on the state of affairs in UI design. At another session, I'll give some tips on usability testing.
Then to Austin for SXSW where I'm on some kind of panel entitled Sink or Swim: The Five Most Important Startup Decisions. Here's a good startup decision: work on your products instead of hanging out at ""interactive festivals"" in Texas.
Next, it's back to California for SDWest 2006 where Tyler and I will take questions at a screening of Aardvark'd and, hopefully, bring home some lucite beverages.
After a few minutes at home, I'll be appearing at Eclipsecon (Is Java the new Cobol?) and visiting Y Combinator.
	"
https://www.joelonsoftware.com/2006/04/15/muriel-spark-1918-2006/,"Muriel Spark, 1918-2006",2006-04-15T00:08:43+00:00,,Joel Spolsky,News,"
	""'You begin,' he said, 'by setting your scene. You have to see your scene, either in reality or in imagination. For instance, from here you can see across the lake. But on a day like this you can't see across the lake, it's too misty. You can't see the other side.' Rowland took off his reading glasses to stare at his creative writing class, whose parents' money was being thus spent: two boys and three girls around sixteen to seventeen years of age, some more, some a little less. 'So,' he said, 'you must just write, when you set your scene, ""the other side of the lake was hidden in mist."" Or if you want to exercise imagination, on a day like today, you can write, ""The other side of the lake was just visible."" But as you are setting the scene, don't make any emphasis as yet. It's too soon, for instance, for you to write, ""The other side of the lake was hidden in the fucking mist."" That will come later. You are setting your scene. You don't want to make a point as yet.'"" 
- from The Finishing School
	"
https://www.joelonsoftware.com/2006/04/11/the-development-abstraction-layer/,The Development Abstraction Layer,2006-04-11T00:08:42+00:00,2016-12-12T05:31:44+00:00,Joel Spolsky,News,"
	A young man comes to town. He is reasonably good looking, has a little money in his pocket. He finds it easy to talk to women.
He doesn't speak much about his past, but it is clear that he spent a lot of time in a soulless big company.
He is naturally friendly and outgoing, and quietly confident without being arrogant. So he finds it easy to pick up small gigs from the job board at the local Programmer's Cafe. But he rapidly loses interest in insurance database projects, vanity web pages for housewives, and financial calculation engines.
The Development Abstraction Layer
	"
https://www.joelonsoftware.com/2006/04/10/internship-in-graphic-design/,Internship in Graphic Design,2006-04-10T00:08:41+00:00,,Joel Spolsky,News,"
	
If you know a student in graphic design or web design looking for a paid summer internship in New York City, tell them about Fog Creek!
	"
https://www.joelonsoftware.com/2006/04/07/foreword-to-8220eric-sink-on-the-business-of-software8221/,Foreword to “Eric Sink on the Business of Software”,2006-04-07T00:15:04+00:00,2016-12-05T19:38:27+00:00,Joel Spolsky,"Startup founder, News","
	Eric Sink has been hanging around Joel on Software since the early days. He was one of the creators of the Spyglass web browser, he created the AbiWord open-source word processor, and now he's a developer at SourceGear, which produces source code control software.
But most of us around here know him from his contributions as host of The Business of Software, a discussion group that has become the hub for the software startup crowd. He coined the term micro-ISV, he's been writing about the business of software on his blog for several years, and he wrote an influential series of articles for MSDN. He just published a full-fledged, dead-trees paper book called Eric Sink on the Business of Software, and he asked me to write the foreword, which appears here.
 
Did I ever tell you the story of my first business?
Let me see if I can remember the whole thing. I was fourteen, I think. They were running some kind of a TESOL summer institute at the University of New Mexico, and I was hired to sit behind a desk and make copies of articles from journals if anybody wanted them.
There was a big urn full of coffee next to the desk, and if you wanted coffee, you helped yourself and left a quarter in a little cup. I didn't drink coffee, myself, but I did like donuts and thought some nice donuts would go well with the coffee. 
There were no donut stores within walking distance of my little world, so, being too young to drive, I was pretty much cut off from donuts in Albuquerque. Somehow, I persuaded a graduate student to buy a couple of dozen every day and bring them in. I put up a handwritten sign that said ""Donuts: 25cents (Cheap!)"" and watched the money flow in.
Every day, people walked by, saw the little sign, dropped some money in the cup, and took a donut. We started to get regulars. The daily donut consumption was going up and up. People who didn't even need to be in the institute lounge veered off of their daily routes to get one of our donuts.
I was, of course, entitled to free samples, but that barely made a dent in the profits. Donuts cost, maybe, a dollar a dozen. Some people would even pay a dollar for a donut just because they couldn't be bothered to fish around in the money cup for change. I couldn't believe it!
By the end of the summer, I was selling two big trays a day... maybe 100 donuts. Quite a lot of money had piled up... I don't remember the exact amount, but it was hundreds of dollars. This is 1979, you know. In those days, that was enough money to buy, like, every donut in the world, although by then I was sick of donuts and starting to prefer really, really spicy cheese enchiladas.
So, what did I do with the money? Nothing. The chairman of the linguistics department took it all. He decided that the money should be used to hold a really big party for all the institute staff. I wasn't allowed to come to the party because I was too young.
The moral of the story?
Um, there is no moral.
But there is something incredibly exciting about watching a new business grow. It's the joy of watching the organic growth that every healthy business goes through. By ""organic,"" I mean, literally, ""of or designating carbon compounds."" No, wait, that's not what I mean. I mean plant-like, gradual growth. Last week you made $24. This week you made $26. By this time next year you might be making $100.
People love growing businesses for the same reason they love gardening. It's really fun to plant a little seed in the ground, water it every day, remove the weeds, and watch a tiny sprout grow into a big bushy plant full of gorgeous hardy mums (if you're lucky) or stinging nettles (if you got confused about what was a weed, but don't lose hope, you can make tea out of the nettles, just be careful not to touch 'em).
As you look at the revenues from your business, you'll say, ""gosh, it's only 3:00, and we've already had nine customers! This is going to be the best day ever!"" And the next year nine customers will seem like a joke, and a couple of years later you'll realize that that intranet report listing all the sales from the last week is unmanageably large.
One day, you'll turn off the feature that emails you every time someone buys your software. That's a huge milestone.
Eventually, you'll notice that one of the summer interns you hired is bringing in donuts on Friday morning and selling them for a buck. And I can only hope that you won't take his profits and use it for a party he's not invited to.
	"
https://www.joelonsoftware.com/2006/04/07/eric-sink-on-the-business-of-software/,Eric Sink on the Business of Software,2006-04-07T00:08:40+00:00,,Joel Spolsky,News,"
	""Did I ever tell you the story of my first business?
""Let me see if I can remember the whole thing. I was fourteen, I think. They were running some kind of a TESOL summer institute at the University of New Mexico, and I was hired to sit behind a desk and make copies of articles from journals if anybody wanted them.
""There was a big urn full of coffee next to the desk, and if you wanted coffee, you helped yourself and left a quarter in a little cup. I didn't drink coffee, myself, but I did like donuts and thought some nice donuts would go well with the coffee.""
Foreword to ""Eric Sink on the Business of Software""
	"
https://www.joelonsoftware.com/2006/05/17/fogbugz-50-ships/,FogBugz 5.0 Ships,2006-05-17T00:08:46+00:00,,Joel Spolsky,News,"
	""What's shipping today is really something like FogBugz 41/2, but we're calling it 5.0 anyway, because life is confusing enough without fractions.""
FogBugz 41/2 and Subjective Well-Being
	"
https://www.joelonsoftware.com/2006/05/16/fogbugz-412-and-subjective-well-being/,FogBugz 4½ and Subjective Well-Being,2006-05-16T00:16:03+00:00,2016-12-05T19:31:25+00:00,Joel Spolsky,"Fog Creek Software, News","
	Let me tell you the story of how we came to be shipping FogBugz 5.0 about six months earlier than expected.
It's kind of a long story.
It turns out that students in Canada like to organize their own conferences, and a couple of years back they organized one and invited me to speak.
College students make great audiences. They'll laugh at anything. I gathered together a bunch of random ideas and some funny slides I downloaded from the Internet (one of which is shown at right, proving that there's life on Mars) and they were rolling in the aisles.
One theme from that speech was based on the most important thing that I learned in Psych 110, the idea that when people are successful at controlling their environment they become happier, and when they can't control their environment, they get grumpy.
(Actually, using words like ""happiness"" and ""grumpy"" tends to inhibit tenure, so a real psychologist would say something like ""repeated failure inhibits the experience of agency, decreasing subjective well-being."")
Put people in direct control of the stuff around them and they will, more or less, on average, be happier. It explains why some people like stick shifts, it explains why lethargic user interfaces make you frustrated and depressed, and it explains why people get so goddamn mad when Sony decides to install viruses on their computers just because they tried to listen to a CD.
If you're a software designer, this is it. This is your big chance to do something meaningful to improve the world. Design software that puts the user in control and you'll increase happiness, even if your product is the most boring accounting software imaginable. You can do this at the most microscopic levels:
The bookkeeping software I've been using for the last six years makes a beep when you record a transaction.
The Apple iPod includes a tiny internal speaker so that the thumbwheel sounds like it's clicking when you rotate it.
The Sonos digital music system has a handheld controller with a motion sensor built in. The instant you pick it up, the screen lights up.
You can also screw it up:
Most modern cell phones have mushy on/off buttons that take forever to turn on. It's hard to tell if you didn't press hard enough because the phone acts like it's ignoring you.
The people who make DVD movies seem to think that it's OK to disable the Menu and Fast Forward buttons while they're showing you advertisements and ridiculous FBI warnings.
Web browsers deal with the security problem by displaying a seemingly endless series of modal popups asking you to confirm that you really want to have three NFL linebackers come into your home and force-feed you a football.
That Sonos controller has a thumbwheel that's too sensitive to choose menu items without a lot of futzing around. Or maybe it's just because I have fat thumbs.
In the last year or so a lot of web developers have been working hard on improving their applications using techniques now known as Ajax. These applications use JavaScript code so that when you click on something, you get immediate feedback, rather than waiting for the web server to send you a new page at its own leisurely pace. When they do need more information from the server, they often download the small fragment they need, rather than waiting for the server to build a whole new page. The net result is faster, crisper feedback that makes you feel in control and creates ""subjective well-being,"" a.k.a. happiness, a feeling that is biochemically NO DIFFERENT THAN EATING LARGE QUANTITIES OF CHOCOLATE.
Just a minute... I have to pause for some fact checking ...
... ok, I'm back. To summarize, Ajax = Chocolate = Happiness, and so we knew, when we started planning FogBugz 5.0, that Ajax features would be an important part of this release.
The two places FogBugz users spend most of their time is in the single case page, where you view and edit cases, and the list page, where you browse, sort, slice and dice cases. With 5.0 we basically took the approach that we would go crazy with those two pages, improving everything we can about the experience using JavaScript and Ajax.
On the list page, for example, Ben added the ability to drag and drop columns, lots of intuitive new ways to select multiple bugs, the ability to resize columns and add arbitrary columns of data. It's all done on the client and it's all very fast.
On the single case page, where you're looking at a single bug or email, Brett made it so that commands like Edit or Reply happen instantaneously, on the client side, in the browser, without a round trip to the server. The net result is that when you're working through a lot of cases, you need about half as many round-trips to the server making the whole experience feel much, much more responsive. You feel in control, and you are happier. It works!
Brett also snuck in a feature he's been itching for: lots and lots and lots of keyboard shortcuts. There's only one keyboard shortcut you have to memorize, though: Ctrl+; switches FogBugz into keyboard mode and little letters light up reminding you what the shortcuts are for various commands around the screen. It's really pretty cool to be able to work through a bunch of cases, assigning, editing, and reprioritizing, without ever reaching for the mouse. Combined with the speed and responsiveness from Ajax, FogBugz has almost reached the level of speed and fluidity of my dry cleaner's DOS 2.0 character mode database application. And that's pretty darn responsive for a web app.
Anyway, because FogBugz is not a hosted product-we sell the software to our customers, who install it on their own servers-we try not to have too many releases, and we try to make each release really, really solid. But we do have our own FogBugz server which runs the company-it sorts incoming email, tracks bugs and features under development, serves as our recruiting database and resume file, routes incoming faxes, and manages purchase orders; I'm even using FogBugz to edit the next edition of Best Software Writing.
In a rather extreme form of eating our own dogfood, the developers put their latest build up every few days so we can all bang on it.
The more we played with the new Ajax features the more we fell in love, and the more we realized that this was the single greatest thing we had done in FogBugz in a looooong time. So we decided to ship the new features as soon as possible. We would take a few months going through a complete beta cycle, and get this stuff out to our customers right away rather than waiting for the other planned 5.0 features.
And that's where we are today. What's shipping today is really something like FogBugz 41/2, but we're calling it 5.0 anyway, because life is confusing enough without fractions. We're only on year six of the ""great software takes ten years"" rule, but I'd say we're more than 60% there. Check out the FogBugz homepage; there's an online demo at try.fogbugz.com.
 
	"
https://www.joelonsoftware.com/2006/05/05/lazy-programmer-didnt-handle-exception/,"Lazy Programmer, Didn’t Handle Exception",2006-05-05T00:08:45+00:00,,Joel Spolsky,News,"
	
try(){...}catch(Exception *){ print(""call customer service"");}// i guess i'm done! 
I called the numbers listed, and went through several layers of menus and waiting. Of course, the person who answered at Cingular had no idea what to do. He found someone walking around his call center who told him to call some other number. He called that number, went through voice menu hell, and finally got told to call some other number. Now he's calling that, and of course, it's just ringing the guy next to him, who has no idea what to do, either. Of course they don't. It's a friggin' unhandled exception.
Eventually they got me to another customer service representative who had been trained just to ask me what I was trying to do (add another couple of lines to my account) and do it. That's not really a solution.
One of the hallmarks of a broken system is when there's just no possible way that the programmer who is writing code that talks to customers can ever get feedback from those customers about bugs, because the call center is outsourced to a different company than the software development project is outsourced to. Everyone is trying their hardest to do their job but management has set it up so that it's impossible.
Now, on to wireless companies in the USA. In the last ten years I can't think of one time when a wireless company has been able to handle the basic things I've asked for (new service, cancel service, port a phone number) without 45 minutes of unbelievably incompetent service. Over the years I've used Sprint, the old AT&T, Cingular, and BellAtlantic, and they're all pretty much equally messed up. All of them suffer from hard working shlubs who are stuck in a situation created by incompetent managers, who have built esoteric mountains of complicated and brittle systems with a million moving parts, 3/4's of them outsourced, where it's simply impossible to get anything done.
What does your code do to contact you when things go badly wrong? We use BugzScout to report unhandled problems directly into our own FogBugz database. But even if you call our customer service line you get a human who is sitting right next to the programmer.
	"
https://www.joelonsoftware.com/2006/05/02/aardvarkd-screening-in-new-york/,Aardvark’d Screening in New York,2006-05-02T00:08:44+00:00,,Joel Spolsky,News,"
	When our summer internship candidates flew into New York City for their interviews, we made sure they got a hotel room with a DVD player and we left them a copy of Aardvark'd, the documentary about last summer's interns. Despite the filmmaker's fondness for stories about tomato plants and cockroaches, the movie works great as a recruiting tool.
This summer we have six interns, including our first-ever graphic design intern and our first-ever intern in program management. Again, we had hundreds of applications, and we had so many good candidates we only interviewed about half of the candidates we wanted to before the new office space filled up. Interns get free housing, free lunch, Aeron chairs, dual-Xeon workstations with 30"" LCD monitors, and weekly cultural events like Broadway shows, a Yankees game, and tours around New York City.
If you're going to be in New York City next Tuesday, May 9th, join me for the premiere of Aardvark'd at the New York International Independent Film and Video Festival, at 8pm at the Village East Cinemas (Details | Order Tickets | Windows Trailer | Quicktime Trailer). If you're not in New York, you can still buy the movie on DVD.
 
	"
https://www.joelonsoftware.com/2006/06/16/my-first-billg-review/,My First BillG Review,2006-06-16T00:08:49+00:00,2016-12-05T19:42:22+00:00,Joel Spolsky,"Startup founder, News","
	In the olden days, Excel had a very awkward programming language without a name. ""Excel Macros,"" we called it. It was a severely dysfunctional programming language without variables (you had to store values in cells on a worksheet), without locals, without subroutine calls: in short it was almost completely unmaintainable. It had advanced features like ""Goto"" but the labels were actually physically invisible.
The only thing that made it look reasonable was that it looked great compared to Lotus macros, which were nothing more than a sequence of keystrokes entered as a long string into a worksheet cell.
On June 17, 1991, I started working for Microsoft on the Excel team. My title was ""Program Manager."" I was supposed to come up with a solution to this problem. The implication was that the solution would have something to do with the Basic programming language.
Basic? Yech!
I spend some time negotiating with various development groups. Visual Basic 1.0 had just come out, and it was pretty friggin' cool. There was a misguided effort underway with the code name MacroMan, and another effort to make Object-Oriented Basic code-named ""Silver."" The Silver team was told that they had one client for their product: Excel. The marketing manager for Silver, Bob Wyman, yes that Bob Wyman, had only one person he had to sell his technology to: me.
MacroMan was, as I said, misguided, and it took some persuading, but it was eventually shut down. The Excel team convinced the Basic team that what we really needed was some kind of Visual Basic for Excel. I managed to get four pet features added to Basic. I got them to add Variants, a union data type that could hold any other type, because otherwise you couldn't store the contents of a spreadsheet cell in a variable without a switch statement. I got them to add late binding, which became known as IDispatch, a.k.a. COM Automation, because the original design for Silver required a deep understanding of type systems that the kinds of people who program macros don't care about. And I got two pet syntactic features into the language: For Each, stolen from csh, and With, stolen from Pascal.
Then I sat down to write the Excel Basic spec, a huge document that grew to hundreds of pages. I think it was 500 pages by the time it was done. (""Waterfall,"" you snicker; yeah yeah shut up.)
In those days we used to have these things called BillG reviews. Basically every major important feature got reviewed by Bill Gates. I was told to send a copy of my spec to his office in preparation for the review. It was basically one ream of laser-printed paper.
I rushed to get the spec printed and sent it over to his office.
Later that day, I had some time, so I started working on figuring out if Basic had enough date and time functions to do all the things you could do in Excel.
In most modern programming environments, dates are stored as real numbers. The integer part of the number is the number of days since some agreed-upon date in the past, called the epoch. In Excel, today's date, June 16, 2006, is stored as 38884, counting days where January 1st, 1900 is 1.
I started working through the various date and time functions in Basic and the date and time functions in Excel, trying things out, when I noticed something strange in the Visual Basic documentation: Basic uses December 31, 1899 as the epoch instead of January 1, 1900, but for some reason, today's date was the same in Excel as it was in Basic. 
Huh?
I went to find an Excel developer who was old enough to remember why. Ed Fries seemed to know the answer.
""Oh,"" he told me. ""Check out February 28th, 1900.""
""It's 59,"" I said.
""Now try March 1st.""
""It's 61!""
""What happened to 60?"" Ed asked.
""February 29th. 1900 was a leap year! It's divisible by 4!""
""Good guess, but no cigar,"" Ed said, and left me wondering for a while.
Oops. I did some research. Years that are divisible by 100 are not leap years, unless they're also divisible by 400.
1900 wasn't a leap year.
""It's a bug in Excel!"" I exclaimed.
""Well, not really,"" said Ed. ""We had to do it that way because we need to be able to import Lotus 123 worksheets.""
""So, it's a bug in Lotus 123?""
""Yeah, but probably an intentional one. Lotus had to fit in 640K. That's not a lot of memory. If you ignore 1900, you can figure out if a given year is a leap year just by looking to see if the rightmost two bits are zero. That's really fast and easy. The Lotus guys probably figured it didn't matter to be wrong for those two months way in the past. It looks like the Basic guys wanted to be anal about those two months, so they moved the epoch one day back.""
""Aargh!"" I said, and went off to study why there was a checkbox in the options dialog called 1904 Date System.
The next day was the big BillG review.
June 30, 1992.
In those days, Microsoft was a lot less bureaucratic. Instead of the 11 or 12 layers of management they have today, I reported to Mike Conte who reported to Chris Graham who reported to Pete Higgins, who reported to Mike Maples, who reported to Bill. About 6 layers from top to bottom. We made fun of companies like General Motors with their eight layers of management or whatever it was.
In my BillG review meeting, the whole reporting hierarchy was there, along with their cousins, sisters, and aunts, and a person who came along from my team whose whole job during the meeting was to keep an accurate count of how many times Bill said the F word. The lower the f***-count, the better.
Bill came in.
I thought about how strange it was that he had two legs, two arms, one head, etc., almost exactly like a regular human being.
He had my spec in his hand.
He had my spec in his hand!
He sat down and exchanged witty banter with an executive I did not know that made no sense to me. A few people laughed. 
Bill turned to me.
I noticed that there were comments in the margins of my spec. He had read the first page! 
He had read the first page of my spec and written little notes in the margin!
Considering that we only got him the spec about 24 hours earlier, he must have read it the night before.
He was asking questions. I was answering them. They were pretty easy, but I can't for the life of me remember what they were, because I couldn't stop noticing that he was flipping through the spec...
He was flipping through the spec! [Calm down, what are you a little girl?]
... and THERE WERE NOTES IN ALL THE MARGINS. ON EVERY PAGE OF THE SPEC. HE HAD READ THE WHOLE GODDAMNED THING AND WRITTEN NOTES IN THE MARGINS.
He Read The Whole Thing! [OMG SQUEEE!]
The questions got harder and more detailed.
They seemed a little bit random. By now I was used to thinking of Bill as my buddy. He's a nice guy! He read my spec! He probably just wants to ask me a few questions about the comments in the margins! I'll open a bug in the bug tracker for each of his comments and makes sure it gets addressed, pronto!
Finally the killer question.
""I don't know, you guys,"" Bill said, ""Is anyone really looking into all the details of how to do this? Like, all those date and time functions. Excel has so many date and time functions. Is Basic going to have the same functions? Will they all work the same way?""
""Yes,"" I said, ""except for January and February, 1900.""
Silence.
The f*** counter and my boss exchanged astonished glances. How did I know that? January and February WHAT?
""OK. Well, good work,"" said Bill. He took his marked up copy of the spec
...wait! I wanted that...
and left.
""Four,"" announced the f*** counter, and everyone said, ""wow, that's the lowest I can remember. Bill is getting mellow in his old age."" He was, you know, 36.
Later I had it explained to me. ""Bill doesn't really want to review your spec, he just wants to make sure you've got it under control. His standard M.O. is to ask harder and harder questions until you admit that you don't know, and then he can yell at you for being unprepared. Nobody was really sure what happens if you answer the hardest question he can come up with because it's never happened before.""
""Can you imagine if Jim Manzi had been in that meeting?"" someone asked. ""'What's a date function?' Manzi would have asked.""
Jim Manzi was the MBA-type running Lotus into the ground.
It was a good point. Bill Gates was amazingly technical. He understood Variants, and COM objects, and IDispatch and why Automation is different than vtables and why this might lead to dual interfaces. He worried about date functions. He didn't meddle in software if he trusted the people who were working on it, but you couldn't bullshit him for a minute because he was a programmer. A real, actual, programmer.
Watching non-programmers trying to run software companies is like watching someone who doesn't know how to surf trying to surf.
""It's ok! I have great advisors standing on the shore telling me what to do!"" they say, and then fall off the board, again and again. The standard cry of the MBA who believes that management is a generic function. Is Ballmer going to be another John Sculley, who nearly drove Apple into extinction because the board of directors thought that selling Pepsi was good preparation for running a computer company? The cult of the MBA likes to believe that you can run organizations that do things that you don't understand.
Over the years, Microsoft got big, Bill got overextended, and some shady ethical decisions made it necessary to devote way too much management attention to fighting the US government. Steve took over the CEO role on the theory that this would allow Bill to spend more time doing what he does best, running the software development organization, but that didn't seem to fix endemic problems caused by those 11 layers of management, a culture of perpetual, permanent meetings, a stubborn insistance on creating every possible product no matter what, (how many billions of dollars has Microsoft lost, in R&D, legal fees, and damage to reputation, because they decided that not only do they have to make a web browser, but they have to give it away free?), and a couple of decades of sloppy, rapid hiring has ensured that the brainpower of the median Microsoft employee has gone way down (Douglas Coupland, in Microserfs: ""They hired 3,100 people in 1992 alone, and you know not all of them were gems."")
Oh well. The party has moved elsewhere. Excel Basic became Microsoft Visual Basic for Applications for Microsoft Excel, with so many (TM)'s and (R)'s I don't know where to put them all. I left the company in 1994, assuming Bill had completely forgotten me, until I noticed a short interview with Bill Gates in the Wall Street Journal, in which he mentioned, almost in passing, something along the lines of how hard it was to recruit, say, a good program manager for Excel. They don't just grow on trees, or something.
Could he have been talking about me? Naw, it was probably someone else.
Still.
	"
https://www.joelonsoftware.com/2006/06/15/gates-to-step-down/,Gates to Step Down,2006-06-15T00:08:48+00:00,,Joel Spolsky,News,"
	As of now, Microsoft stock is surprisingly quiet given the announcement that Bill Gates will step down. It should probably be going down. Ozzie is smart but not in the same class as Bill Gates. And it's really Ballmer that needs to go.
	"
https://www.joelonsoftware.com/2006/06/15/there-are-easier-ways/,There are easier ways…,2006-06-15T00:08:47+00:00,,Joel Spolsky,News,"
	
 Paul Boutin struggles with remote desktop assistance. ""It took me most of an hour to do the installations and find the right combination of settings,"" he reports. Dude, try Copilot. Secure out of the box, works through all firewalls, and never takes more than a couple of minutes to get working.
	"
https://www.joelonsoftware.com/2006/07/31/why-dellcom-still-feels-like-buying-a-used-car/,Why Dell.com Still Feels Like Buying a Used Car,2006-07-31T00:08:56+00:00,,Joel Spolsky,News,"
	A looong time ago I complained that ""Dell doesn't think like their users think. When you go to their website, the first question they ask is what kind of buyer you are: home, small business, large business, etc. I don't know what I am!""
They've never stopped trying to segment their customers. They seem to know that people hate it. Today on their corporate blog (where, I daresay, you'll never see comments about politics), they brag about their new homepage design. They mention the three things that everyone told them they needed to fix, and number 3 was that whole segmentation business. Quoting Dell:
We still ask you to identify what 'segment' you best represent. 
Why? Just show me all the products you offer and let me decide . . . 
Seems like a fairly easy thing to do... Can't be that hard, right?
Unfortunately, it is a bit more complicated than just changing links. When you call Dell on the phone we have specific phone numbers depending on your customer type. This way we can offer you the right product, the best solutions & accessories, and the proper warranty/services coverage for your system. 
We think this creates greater value by providing information that is relevant to your specific needs.
This business about creating ""greater value"" is a bit of a whitewash. We all know exactly what's going on. They're trying to charge business customers more. That's all there is to it. It's Pricing 101. Camels and Rubber Duckies. Please don't make up stories about how you're offering us the right system. Somehow Apple and IBM/Lenovo have been happy to sell computers on the Internet to people without needing to know their ""customer type.""
The reason this pisses people off is that nobody likes to feel like they're getting ripped off. You feel less ripped off buying a way-overpriced Apple MacBook Pro because everyone else is paying the same price, and Apple is hardcore about not letting any dealers sell it for less. 
Whenever we buy servers from Dell, even though they eventually offer us a price that beats the competition, we still have to spend a week or two negotiating, gathering competitive bids, etc. By the time we place our order the price we pay is about 20% to 30% less than the price advertised on the web, and we're still not sure if we could have paid less.
Bottom line: I'd love to just order the damn servers from their website, clicking on the links to configure it. Dell would have my money sooner and wouldn't have to pay any sales people to talk to me on the phone. But you've trained me to negotiate every time if I don't want to pay the sucker price, so now I have no choice.
Unfortunately, this is obviously a decision that starts all the way at the top, and the poor designers working on fixing the website clearly don't have the authority to change the way Dell does business.
	"
https://www.joelonsoftware.com/2006/07/30/private-offices-redux/,Private Offices Redux,2006-07-30T00:08:55+00:00,,Joel Spolsky,News,"
	Adam Barr writes about Workplace Advantage, a new project going on at Microsoft to rethink how offices are arranged. ""This is the plan to have people working in flexible space that can be quickly reconfigured into offices, cubicles, open desks, pods, or whatever you want,"" writes Barr.
Microsoft is famous throughout the tech industry for putting literally everyone in individual, private offices, about half of which have windows. There's not much debate that this is the most productive environment for programmers, but not everyone at Microsoft is a programmer. ""The goal of Workplace Advantage is to reconfigure offices to fit the 4 employee types that were identified after studying the workforce: travelers, orchestrators, concentrators, and providers (examples of which, respectively, are sales, program management, dev/test, and IT),"" Barr reported in an earlier post. Makes a lot of sense: private offices aren't right for every type of work.
Not every programmer in the world wants to work in a private office. In fact quite a few would tell you unequivocally that they prefer the camaradarie and easy information sharing of an open space. 
Don't fall for it. They also want M&Ms for breakfast and a pony. Open space is fun but not productive. Last summer, the Project Aardvark interns were all in a big open space. The net result was that there was no such thing as a conversation between two people. Every time I went out there to talk to one of them, it became a conversation with all of them; every time two people had to talk, instead of going off to a quiet space somewhere, they just spoke directly to each other, interrupting the other two's concentration. Although this slightly helps keep everyone ""in the loop,"" it also knocks programmers out of flow causing them to lose their concentration and devastating productivity, so I prefer to keep people in the loop using more formal methods, like weekly email status reports, and through informal methods like eating lunch together every day, which is why we have free catered lunches and a really big table.
This summer, we have much more private niches (not quite offices) for the summer interns, and I've noticed that when I talk to one of them, the others don't even notice and certainly don't stop cranking away at their work. I don't think it has hurt communication much, either.
	"
https://www.joelonsoftware.com/2006/07/29/travelers-insurance-drop-dead/,Travelers Insurance: Drop Dead.,2006-07-29T00:08:54+00:00,,Joel Spolsky,News,"
	Travelers Insurance is running an ad in Inc. Magazine with the headline:
""To catch a geek, you have to think like a geek.""
There's a picture of a person wearing pants that don't fit, frayed red socks, and untied shoes.
The advertisement says, ""Fashion sense aside, today's high-tech criminals are evolving constantly... Give your independent agent a call, and spend your time taking your business to the next level. Instead of worrying about a crook in ill-fitting pants.""
Am I nuts, or is this ad really offensive? First of all, the implication that geeks are somehow a threat. The whole tone of the ad is that you need their excellent insurance because the world is swarming with nerds and geeks who are going to break into your business systems and steal from you. So buy our insurance.
Second. What is this, high school? With the bullies who fail all their classes have such an inferiority complex they have to make fun of the geeks? If this is high school, Travelers is the neanderthal jock beating up geeks for their lunch money. ""Protection"" money.
Third. I can't really think of anyone less qualified to ""protect"" you from ""geeks"" than a bunch of insurance salesmen. Get over yourselves. Have you looked at your own actuaries? Have you noticed how insurance people dress?
Fourth. Can you imagine anyone more harmless than a geek? A skinny nerd happily entertaining himself playing Dungeons and Dragons, or quietly playing practical jokes on bandwidth-thieves, or laughing hysterically at reinterpretations of 19th century light opera? What exactly is the threat, fat necks? What are you afraid of?
I'm sorry, Travelers, maybe the current Bush presidency has given you the idea that it's ok to make fun of the scientists, inventors, researchers and programmers who are creating the future, finding cures for your diseases, building the spreadsheets you use to figure out how much commission you're making, and educating your idiot progeny. Maybe a know-nothing in the White House has given you the idea that it's somehow acceptable now to poke fun of geeks and nerds, in big two-page ad spreads on the inside front cover of a magazine for founders of startups. But you know what, morons? You probably forgot that most of the people that read Inc. are geeks. And we buy insurance. Lots of insurance. Like me. And in fact I used to buy it from you. But not any more.
	"
https://www.joelonsoftware.com/2006/07/28/search-box/,Search Box,2006-07-28T00:08:53+00:00,,Joel Spolsky,News,"
	I got a nice blue box in the mail:
It seems Seth Godin persuaded Google to donate one of their new Google Mini appliances to power Joel on Software. Thanks, Google! If you use the search box, above, you can try it out.
At first I was worried that since it didn't really use the Google infrastructure for searching, it wouldn't be able to rank things very well. But somehow, it does. For example, if you just search for ""Joel"" the first result is The Joel Test, which is probably the #1 article on this site ranked by incoming links. So I guess it is communicating with Google to get PageRank information for public pages.
Overall, setting it up was reasonable: an hour or two to get the appliance racked up, most of which was spent following an infuriating procedure to get the IP address on the thing set up, and an hour or two getting the thing configured, most of which was spent following a very non-appliance-like, infuriating procedure to upgrade the software to the latest version (hey, Google, it's on the network, why can't it upgrade itself?)
Anyway, the point is, except for a couple of rough edges, everything was very easy to get set up, and now we have nice search results and I have a little bit more control over the results. I can do simple things like block the printer friendly versions from coming up as duplicates, and all kinds of complex things which I haven't even figured out like synonyms, XSLT templates, and all kinds of complicated stuff. I can't quite figure out how to make my changes to the main settings take effect right away. I tried to make it so that when you search for ""mindless complexity"" you get the search results for "".NET"", because I am the KING of witty, but for some reason it's not happening ... maybe I have to wait for another crawl. And the administration UI is, well, not pretty or GoogleFriendly. It's more High Geek:
What do you think about the idea of appliances instead of software?
Correction 8/1/06: Google informs me that the Mini never phones home, even to get public PageRank information; the search results it produces are entirely based on whatever documents you told it to crawl.
	"
https://www.joelonsoftware.com/2006/07/20/open-house/,Open House,2006-07-20T00:08:52+00:00,,Joel Spolsky,News,"
	Here at Fog Creek Software we recently finished a big expansion of our office space. If you'd like to check it out, meet the Fog Creek team and this year's crop of bright-eyed-and-bushy-tailed summer interns, please come to our open house, next Thursday, July 27th, at 5:00 pm. There will be snacks and wine.
 
 
Fog Creek is at 535 8th Ave., near 37th St., New York NY, on the 18th floor.
 
	"
https://www.joelonsoftware.com/2006/07/20/wanted-system-network-administrator/,Wanted: System / Network Administrator,2006-07-20T00:08:51+00:00,,Joel Spolsky,News,"
	Yesterday, the net sum of what I managed to accomplish consisted, approximately, of creating one new email address. 
Sure, there were extenuating factors: it was the first email address on the fogcreek.de domain, the German registry doesn't understand that the order of your domain's name servers should not make any difference, it was a Bad Hayfever Day, and lots of people interrupt me all day long. And the combination of Postfix + Cyrus + ActiveDirectory authentication over LDAP is a little bit too much for my rapidly shrinking brain to handle.
But still, it's gotten to the point where my personal to do list now consists of 75% system administration tasks. There's a big stack of seven Dell PowerEdge 2850 servers outside my office that need to be configured and installed somewhere. This is getting ridiculous. It's time to get a full time sysadmin.
So, before I post this on the Fog Creek Jobs board... do any of you happen to know a brilliant system/network administrator who would be interested in working at Fog Creek?
We're still a small friendly company and we all eat lunch together every day at one big table.
We need someone with extensive experience administering mixed networks (Windows, Linux, NetBSD, and Macintosh). We operate two small data centers and will be building a third.
Some of the things we need maintained: DNS and BIND, Postfix, Cyrus, BSD firewalls and routing, LDAP and Windows 2003 Active Directory, Nagios, IPSec VPNs, Subversion, Dell server hardware, Veritas Backup Exec, Microsoft SQL Server 2000/2005, IIS 6.0, and VMWare Server. We need someone who can program well enough to write maintenance applications (for example, SQL Log Mirroring to create warm backups) and scripts for monitoring applications (like GFI Network Monitor), and who has the good sense to document everything extensively. We don't care about certifications.
We're in New York City. We pay well and have great benefits, like free lunch, stock options, Aeron chairs and private offices. You get four weeks of paid vacation and six holidays, health insurance, a dental plan, gym membership, and relocation expenses paid. We'll consider applicants from anywhere in the US. We will not consider telecommuting. Please email resumes to jobs@fogcreek.com and I'll look at them.
Fine print: Fog Creek Software, Inc. does not discriminate in employment matters on the basis of race, color, religion, gender, national origin, age, military service eligibility, veteran status, sexual orientation, marital status, disability, or any other protected class. We support workplace diversity.
	"
https://www.joelonsoftware.com/2006/07/03/a-solution-to-tabs-vs-spaces/,A solution to tabs-vs.-spaces,2006-07-03T00:08:50+00:00,,Joel Spolsky,News,"
	
Nick Gravgaard: ""Rather than saying that a tab character (a ""hard tab"") will move the cursor until the cursor's position is a multiple of N characters, we should say that a tab character is a delimiter between table cells...""
	"
https://www.joelonsoftware.com/2006/08/25/my-three-favorite-firefox-extensions/,My three favorite Firefox extensions,2006-08-25T00:09:09+00:00,,Joel Spolsky,News,"
	Here are three Firefox extensions I can't live without.
IETab
IETab takes advantage of the fact that Internet Explorer is available as an ActiveX control, which is available to be embedded in any Windows application, to open certain websites in Firefox using Internet Explorer. Whenever a website comes up complaining that you need to get ""Netscape 4.0 or some other modern browser"" you can just right click on the tab and it'll pop up right in Firefox being rendered by Internet Explorer. You can set up a list of websites that always come up in IE tabs:
This is extremely useful for Microsoft websites, SQL Reporting Services, and other Microsoft stuff that just hasn't been tested with Firefox (or degrades terribly, like the MSDN site.) You can also toggle a tab back and forth between IE and Firefox which is helpful when you're developing a website.
Web Developer Extension
Which leads me to Chris Pederick's Web Developer Extension (click the image to see the whole thing):
It is impossible to imagine developing web software without this. Probably the feature I use the most often is the resize menu, which makes it easy to check how your site will look on smaller screens. You can also use it to quickly turn off JavaScript, Cookies, CSS, etc., to make sure your site will work in these awkward conditions.
I'm constantly finding new features that make my life easier. Just yesterday I wanted to check that some code I was writing would work even if malicious users evaded the maxlength attribute of my <input> tags. It took me about 5 seconds to find the ""Forms | Remove Maximum Lengths"" command. Tada!
Adblock
Finally, for general browsing, I installed Adblock. This is a utility that lets you set up regular expressions of URLs that you never want to see.
Now, let me say, I don't generally mind advertisements on the web and I do understand that this is how sites support themselves. I don't have some kind of ideological opposition to commerce or advertising. Sometimes ads are the best part of the content: this month's GQ magazine has 100 pages of full-color, full-page ads before you even get to the first page of quote-unquote ""editorial"" content. That's why people buy the magazine. I guess. To see cute models wearing Izod Jeans. Did you even know that Izod made jeans?
Where was I. Oh yeah. I installed Adblock because flashing ads give me headaches.
It turns out this is not an accident. Human eyes and brain has evolved together so that your attention is drawn to things that move. Everything about vision is designed to force you to look at things in the periphery, like lions and snakes and stuff, that might be a threat. Of course, that's why the ads are blinking.
When you're trying to read a page with flashing crap in the corners, you can literally get a headache trying to drag your eyes back to the content that's not flashing. You're trying to defeat millions of years of evolution and it's painful. I'm sorry, but if websites and advertisers have so little respect for me that they are willing to subject me to headaches just to sell a few more dancing hamsters, well, to hell with 'em.
	"
https://www.joelonsoftware.com/2006/08/24/links/,Links,2006-08-24T00:09:08+00:00,,Joel Spolsky,News,"
	David Pogue: ""Listen up, LG dudes: I'm sorry, but if your primary control system requires seven warnings in your manual, maybe you should reconsider your system.""
Eric Sink: ""Everybody knows how powerful word-of-mouth and buzz can be. Lots of ink has been spilled about all the nice things that happen when people are talking about your product. But this is a little bit like explaining the nice things that rich people can buy. It is obvious that good results are good. We don't need to be told that. What we need to know is how to make those good results happen.""
	"
https://www.joelonsoftware.com/2006/08/24/loved-or-feared/,Loved or Feared?,2006-08-24T00:09:07+00:00,,Joel Spolsky,News,"
	Sean Silverthorne: ""Is it better to be loved or feared?""
The annoying thing about everything that comes out of Harvard Business School is that the conclusion is so infuriatingly wishy-washy. ""Expanding your self-awareness, situational awareness, and ability to adapt your leadership style increases your overall range of effectiveness as a leader,"" they say. What a bold thought.
	"
https://www.joelonsoftware.com/2006/08/23/superstitious-faq-writers/,Superstitious FAQ Writers,2006-08-23T00:09:06+00:00,,Joel Spolsky,News,"
	Have you noticed that FAQ pages for online services almost never include instructions for how to cancel your account?
It's like they're all subject to the same bizarre superstition ... if you don't tell people how to cancel, maybe they'll lose interest and keep paying you.
A long time ago I wrote an article called Let Me Go Back! The gist of it was that if you want to attract new customers, you have to give them the confidence that there is no risk in signing up or converting from whatever they were using before.
This superstition, the superstition that leaving cancellation instructions off of the website will somehow help your business, is actually probably the result of misapplied scientific method. It's very likely that somebody did an A-B test and convinced themselves that more people cancel if you tell them how to cancel. You see, that's a very easy test to do. What's not easy to test is how many people never sign up in the first place because they're afraid that canceling is going to be a nightmare.
So what you have here is a somebody doing a cost/benefit analysis where they are measuring the benefit while ignoring the cost.
Here's what we do at Fog Creek: we've always had an unconditional 90 day money back guarantee on everything we sell. I've even had people return the movie Aardvark'd because they just didn't like the movie. Our online, subscription-based service, Copilot, states clearly on the sign-up page that ""you may cancel at any time, on the Web, without hassle.""
Since we started the company in 2000, the moneyback guarantee has cost us precisely 2% of revenues, which also includes chargebacks, credit card fraud, and people who accidentally ordered twice. That figure that has remained remarkably stable through the years and which I think is well worth it, but then again, I'm only measuring the cost, because the benefit is too hard to measure!
	"
https://www.joelonsoftware.com/2006/08/22/library-apps-for-macintosh/,Library Apps for Macintosh,2006-08-22T00:09:05+00:00,,Joel Spolsky,News,"
	OK! Last night I downloaded a couple of Macintosh software packages for library management.
The first one goes by the quirky and charming name Delicious Library; the company is Delicious Monster. Due to its very appealing visual design it seems to be the darling of the Macintosh world. Within a matter of minutes, I was able to scan in five or six books using the built-in video camera on my MacBook Pro. 
It quickly connected to Amazon.com, downloaded images, descriptions, prices, etc., and put charming little pictures of the books on a charming simulated wood bookshelf.
Here's the problem, though: Delicious Library does not have any way to import data from the Library of Congress.
I really want to be able to shelve our books according to their Library of Congress card catalog number. When you do this, books on similar topics tend to wind up near each other on the shelves. This is a very useful feature if you don't know the exact title you're looking for, or if you just want to, for example, browse a bunch of books about Ruby to find one you like. 
Somebody has gone to a lot of trouble choosing a card catalog number that put similar books next to each other, and I've always found that open-shelved libraries with books in order according to some reasonable card catalog system are far superior to libraries with books in order according to acquisition date, size, color, IQ, or IDENTITY column.
The second package I checked out was called Booxter.
This does, pretty much, everything that Delicious Library does, in a slightly simpler user interface almost completely devoid of wood paneling. Booxter, on the other hand, does connect to the Library of Congress and import their card catalog numbers, which makes it much more useful for my application. Neither these programs, regrettably, has any way to print out labels to put on the spine so that it would be possible to shelve the books correctly. If I can't find anything better, I suppose I could export all the data and try to use something like Word's mail merge feature to print labels, which would be a real hemorrhoid since the person applying the labels would have to figure out which label goes on which book. Printing a spine label at scan time would make for a vastly easier workflow.
I haven't checked out any of the PC or web-based packages yet; I don't really care whether the software runs on a Mac or PC.
	"
https://www.joelonsoftware.com/2006/08/21/theres-got-to-be-a-way-to-do-this/,There’s got to be a way to do this…,2006-08-21T00:09:04+00:00,,Joel Spolsky,News,"
	Here's what I want to be able to do.
We've got a ton of books in the Fog Creek library, in no particular order, and it's gotten to the point where it's actually easier to order a new copy of a book from Amazon than to find a book we already have!
What I'm looking for is software that will let me scan in the barcodes on all these books, you know, with the ISBN numbers, and then it will look them up online somewhere and download card catalog information and the Library of Congress number, and add this information to a database, and print out a little sticker on the spot with a card catalog number that I can put on the spine so that the books can be shelved like in a real library, and found again easily.
Do you know of anything that can do this?
 
	"
https://www.joelonsoftware.com/2006/08/10/the-identity-management-method/,The Identity Management Method,2006-08-10T00:09:03+00:00,,Joel Spolsky,"Tech lead, News","
	When you're trying to get a team all working in the same direction, we've seen that Command and Control management and Econ 101 management both fail pretty badly in high tech, knowledge- oriented teams.
That leaves a technique that I'm going to have to call The Identity Method. The goal here is to manage by making people identify with the goals you're trying to achieve. That's a lot trickier than the other methods, and it requires some serious interpersonal skills to pull off. But if you do it right, it works better than any other method.
The problem with Econ 101 management is that it subverts intrinsic motivation. The Identity Method is a way to create intrinsic motivation.
To be an Identity Method manager, you have to summon all the social skills you have to make your employees identify with the goals of the organization, so that they are highly motivated, then you need to give them the information they need to steer in the right direction.
How do you make people identify with the organization? 
It helps if the organizational goals are virtuous, or perceived as virtuous, in some way. Apple creates almost fanatic identification, almost entirely through a narrative that started with a single Superbowl ad in 1984: we are against totalitarianism. Doesn't seem like a particularly bold position to take, but it worked. Here at Fog Creek, we stand bravely in opposition to killing kittens. Yaaaay!
A method I'm pretty comfortable with is eating together. I've always made a point of eating lunch with my coworkers, and at Fog Creek we serve catered lunches for the whole team every day and eat together at one big table. It's hard to understate what a big impact this has on making the company feel like a family, in the good way, I think. In six years, nobody has ever quit.
I'm probably going to freak out some of our summer interns by admitting this, but one the goals of our internship program is to make people identify as New Yorkers, so they're more comfortable with the idea of moving here after college and working for us full-time. We do this through a pretty exhausting list of extra-curricular summer activities: two Broadway shows, a trip to the Top of the Rock, a boat ride around Manhattan, a Yankees game, an open house so they can meet more New Yorkers, and a trip to a museum; Michael and I host parties in our apartments, both as a way of welcoming the interns but also as a way for interns to visualize living in an apartment in New York, not just the dorm we stuck them in.
In general, Identity Management requires you to create a cohesive, jelled team that feels like a family, so that people have a sense of loyalty and commitment to their coworkers.
The second part, though, is to give people the information they need to steer the organization in the right direction. 
Earlier today Brett came into my office to discuss ship dates for FogBugz 6.0. He was sort of leaning towards April 2007; I was sort of leaning towards December 2006. Of course, if we shipped in April, we would have time to do a lot more polishing, and improve a lot of areas of the product; if we shipped in December, we'd probably have to cut a bunch of nice new features.
What I explained to Brett, though, is that we want to hire six new people in the spring, and the chances that we'll be able to afford them without FogBugz 6.0 are much smaller. So the way I concluded the meeting with Brett was to make him understand the exact financial motivations I have for shipping earlier, and now that he knows that, I'm confident he'll make the right decision... not necessarily my decision. Maybe we'll have a big upswing in sales without FogBugz 6.0, and now that Brett understands the basic financial parameters, he'll realize that maybe that means we can hold 6.0 for a few more features. The point being that by sharing information, I can get Brett to do the right thing for Fog Creek even if circumstances change. If I tried to push him around by offering him a cash reward for every day before April that he ships, his incentive would be to dump the existing buggy development build on the public tonight. If I tried to push him around using Command and Control management by ordering him to ship bug free code on time, dammit, he might do it, but he'd hate his job and leave.
Conclusion
There are as many different styles of management as there are managers. I've identified three major styles: two easy, dysfunctional styles and one hard, functional style, but the truth is that many development shops manage in more of an ad-hoc, ""whatever works"" way that may change from day to day or person to person.
	"
https://www.joelonsoftware.com/2006/08/09/the-econ-101-management-method/,The Econ 101 Management Method,2006-08-09T00:09:02+00:00,,Joel Spolsky,"Tech lead, News","
	Joke: A poor Jew lived in the shtetl in 19th century Russia. A Cossack comes up to him on horseback. 
""What are you feeding that chicken?"" asks the Cossack.
""Just some bread crumbs,"" replies the Jew.
""How dare you feed a fine Russian chicken such lowly food!"" says the Cossack, and hits the Jew with a stick.
The next day the Cossack comes back. ""Now what are you feeding that chicken?"" ask the Jew.
""Well, I give him three courses. There's freshly cut grass, fine sturgeon caviar, and a small bowl of heavy cream sprinkled with imported French chocolate truffles for dessert.""
""Idiot!"" says the Cossack, beating the Jew with a stick. ""How dare you waste good food on a lowly chicken!""
On the third day, the Cossack again asks, ""What are you feeding that chicken?""
""Nothing!"" pleads the Jew. ""I give him a kopeck and he buys whatever he wants.""
(pause for laughter)
(no?)
(ba dum dum)
(still no laughter)
(oh well).
I use the term ""Econ 101"" a little bit tongue-in-cheek. For my non-American readers: most US college departments have a course numbered ""101"" which is the basic introductory course for any field. Econ 101 management is the style used by people who know just enough economic theory to be dangerous.
The Econ 101 manager assumes that everyone is motivated by money, and that the best way to get people to do what you want them to do is to give them financial rewards and punishments to create incentives.
For example, AOL might pay their call-center people for every customer they persuade not to cancel their subscription.
A software company might give bonuses to programmers who create the fewest bugs.
It works about as well as giving your chickens money to buy their own food.
One big problem is that it replaces intrinsic motivation with extrinsic motivation.
Intrinsic motivation is your own, natural desire to do things well. People usually start out with a lot of intrinsic motivation. They want to do a good job. They want to help people understand that it's in their best interest to keep paying AOL $24 a month. They want to write less-buggy code.
Extrinsic motivation is a motivation that comes from outside, like when you're paid to achieve something specific.
Intrinsic motivation is much stronger than extrinsic motivation. People work much harder at things that they actually want to do. That's not very controversial.
But when you offer people money to do things that they wanted to do, anyway, they suffer from something called the Overjustification Effect. ""I must be writing bug-free code because I like the money I get for it,"" they think, and the extrinsic motivation displaces the intrinsic motivation. Since extrinsic motivation is a much weaker effect, the net result is that you've actually reduced their desire to do a good job. When you stop paying the bonus, or when they decide they don't care that much about the money, they no longer think that they care about bug free code.
Another big problem with Econ 101 management is the tendency for people to find local maxima. They'll find some way to optimize for the specific thing you're paying them, without actually achieving the thing you really want.
So for example your customer retention specialist, in his desire to earn the bonus associated with maintaining a customer, will drive the customer so crazy that the New York Times will run a big front page story about how nasty your customer ""service"" is. Although his behavior maximizes the thing you're paying him for (customer retention) it doesn't maximize the thing you really care about (profit). And then you try to reward him for the company profit, say, by giving him 13 shares of stock, and you realize that it's not really something he controls, so it's a waste of time.
When you use Econ 101 management, you're encouraging developers to game the system.
Suppose you decide to pay a bonus to the developer with the fewest bugs. Now every time a tester tries to report a bug, it becomes a big argument, and usually the developer convinces the tester that it's not really a bug. Or the tester agrees to report the bug ""informally"" to the developer before writing it up in the bug tracking system. And now nobody uses the bug tracking system. The bug count goes way down, but the number of bugs stays the same.
Developers are clever this way. Whatever you try to measure, they'll find a way to maximize, and you'll never quite get what you want.
Robert Austin, in his book Measuring and Managing Performance in Organizations, says there are two phases when you introduce new performance metrics. At first, you actually get what you wanted, because nobody has figured out how to cheat. In the second phase, you actually get something worse, as everyone figures out the trick to maximizing the thing that you're measuring, even at the cost of ruining the company.
Worse, Econ 101 managers think that they can somehow avoid this situation just by tweaking the metrics. Dr. Austin's conclusion is that you just can't. It never works. No matter how much you try to adjust the metrics to reflect what you think you want, it always backfires.
The biggest problem with Econ 101 management, though, is that it's not management at all: it's really more of an abdication of management. A deliberate refusal to figure out how things can be made better. It's a sign that management simply doesn't know how to teach people to do better work, so they force everybody in the system to come up with their own way of doing it.
Instead of training developers on techniques of writing reliable code, you just absolve yourself of responsibility by paying them if they do. Now every developer has to figure it out on their own. 
For more mundane tasks, working the counter at Starbucks or answering phone calls at AOL, it's pretty unlikely that the average worker will figure out a better way of doing things on their own. You can go into any coffee shop in the country and order a short soy caramel latte extra-hot, and you'll find that you have to keep repeating your order again and again: once to the coffee maker, again to the coffee maker when they forgot what you said, and finally to the cashier so they can figure out what to charge you. That's the result of nobody telling the workers a better way. Nobody figures it out, except Starbucks, where the standard training involves a complete system of naming, writing things on cups, and calling out orders which insures that customers only have to specify their drink orders once. The system, invented by Starbucks HQ, works great, but workers at the other chains never, ever come up with it on their own.
Your customer service people spend most of the day talking to customers. They don't have the time, the inclination, or the training to figure out better ways to do things. Nobody in the customer retention crew is going to be able to keep statistics and measure which customer retention techniques work best while pissing off the fewest bloggers. They just don't care enough, they're not smart enough, they don't have enough information, and they are too busy with their real job. 
As a manager it's your job to figure out a system. That's Why You Get The Big Bucks.
If you read a little bit too much Ayn Rand as a kid, or if you took one semester of Economics, before they explained that utility is not measured in dollars, you may think that setting up simplified bonus schemes and Pay For Performance is a pretty neat way to manage. But it doesn't work. Start doing your job managing and stop feeding your chickens kopecks.
""Joel!"" you yell. ""Yesterday you told us that the developers should make all the decisions. Today you're telling us that the managers should make all the decisions. What's up with that?""
Mmm, not exactly. Yesterday I told you that your developers, the leaves in the tree, have the most information; micromanagement or Command and Control barking out orders is likely to cause non-optimal results. Today I'm telling you that when you're creating a system, you can't abdicate your responsibility to train your people by bribing them. Management, in general, needs to set up the system so that people can get things done, it needs to avoid displacing intrinsic motivation with extrinsic motivation, and it won't get very far using fear and barking out specific orders.
Now that I've shot down Command and Control management and Econ 101 management, there's one more method managers can use to get people moving in the right direction. I call it the Identity method and I'll talk about it more tomorrow. 
	"
https://www.joelonsoftware.com/2006/08/08/the-command-and-control-management-method/,The Command and Control Management Method,2006-08-08T00:09:01+00:00,,Joel Spolsky,"Tech lead, News","
	Frederick the Great [PDF]: ""Soldiers should fear their officers more than all the dangers to which they are exposed.... Good will can never induce the common soldier to stand up to such dangers; he will only do so through fear."" 
The Command and Control form of management is based on military management. Primarily, the idea is that people do what you tell them to do, and if they don't, you yell at them until they do, and if they still don't, you throw them in the brig for a while, and if that doesn't teach them, you put them in charge of peeling onions on a submarine, sharing two cubit feet of personal space with a lad from a farm who really never quite learned about brushing his teeth.
There are a million great techniques you can use. Rent the movies Biloxi Blues and An Officer and a Gentleman for some ideas.
Some managers use this technique because they actually learned it in the military. Others grew up in authoritarian households or countries and think it's a natural way to gain compliance. Others just don't know any better. Hey, it works for the military, it should work for an internet startup!
There are, it turns out, three drawbacks with this method in a high tech team.
First of all, people don't really like it very much, least of all smarty-pants software developers, who are, actually, pretty smart and are used to thinking they know more than everyone else, for perfectly good reasons, because it happens to be true, and so it really, really bothers them when they're commanded to do something ""because."" But that's not really a good enough reason to discard this method... we're trying to be rational here. High tech teams have many goals but making everyone happy is rarely goal number one.
A more practical drawback with Command and Control is that management literally does not have enough time to micromanage at this level, because there simply aren't enough managers. In the military, it's possible to give an order simultaneously to a large team of people because it's common that everyone is doing the same thing. ""Clean your guns!"" you can say, to a squad of 28, and then go take a brief nap and have a cool iced tea on the Officer's Club veranda. In software development teams everybody is working on something else, so attempts to micromanage turn into hit and run micromanagement. That's where you micromanage one developer in a spurt of activity and then suddenly disappear from that developer's life for a couple of weeks while you run around micromanaging other developers. The problem with hit and run micromanagement is that you don't stick around long enough to see why your decisions are not working or to correct course. Effectively, all you accomplish is to knock your poor programmers off the train track every once in a while, so they spend the next week finding all their train cars and putting them back on the tracks and lining everything up again, a little bit battered from the experience.
The third drawback is that in a high tech company the individual contributors always have more information than the ""leaders,"" so they are really in the best position to make decisions. When the boss wanders into an office where two developers have been arguing for two hours about the best way to compress an image, the person with the least information is the boss, so that's the last person you'd want making a technical decision. I remember when Mike Maples was my great grand-boss, in charge of Microsoft Applications, he was adamant about refusing to take sides on technical issues. Eventually people learned that they shouldn't come to him to adjudicate. This forced people to debate the issue on the merits and issues were always resolved in favor of the person who was better at arguing, er, I mean, issues were always resolved in the best possible way.
If Command and Control is such a bad way to run a team, why does the military use it?
This was explained to me in NCO school. I was in the Israeli paratroopers in 1986. Probably the worst paratrooper they ever had, now that I think back.
There are several standing orders for soldiers. Number one: if you are in a mine field, freeze. Makes sense, right? It was drilled into you repeatedly during basic training. Every once in a while the instructor would shout out ""Mine!"" and everybody had to freeze just so you would get in the habit.
Standing order number two: when attacked, run towards your attackers while shooting. The shooting makes them take cover so they can't fire at you. Running towards them causes you to get closer to them, which makes it easier to aim at them, which makes it easier to kill them. This standing order makes a lot of sense, too.
OK, now for the Interview Question. What do you do if you're in a minefield, and people start shooting at you?
This is not such a hypothetical situation; it's a really annoying way to get caught in an ambush.
The correct answer, it turns out, is that you ignore the minefield, and run towards the attackers while shooting.
The rationale behind this is that if you freeze, they'll pick you off one at a time until you're all dead, but if you charge, only some of you will die by running over mines, so for the greater good, that's what you have to do.
The trouble is that no rational soldier would charge under such circumstances. Each individual soldier has an enormous incentive to cheat: freeze in place and let the other, more macho soldiers do the charging. It's sort of like a Prisoners' Dilemma.
In life or death situations, the military needs to make sure that they can shout orders and soldiers will obey them even if the orders are suicidal. That means soldiers need to be programmed to be obedient in a way which is not really all that important for, say, a software company.
In other words, the military uses Command and Control because it's the only way to get 18 year olds to charge through a minefield, not because they think it's the best management method for every situation.
In particular, in software development teams where good developers can work anywhere they want, playing soldier is going to get pretty tedious and you're not really going to keep anyone on your team.
	"
https://www.joelonsoftware.com/2006/08/07/three-management-methods-introduction/,Three Management Methods (Introduction),2006-08-07T00:09:00+00:00,,Joel Spolsky,"Tech lead, News","
	If you want to lead a team, a company, an army, or a country, the primary problem you face is getting everyone moving in the same direction, which is really just a polite way of saying ""getting people to do what you want.""
Think of it this way. As soon as your team consists of more than one person, you're going to have different people with different agendas. They want different things than you want. If you're a startup founder, you might want to make a lot of money quickly so you can retire early and spend the next couple of decades going to conferences for women bloggers. So you might spend most of your time driving around Sand Hill Road talking to VCs who might buy the company and flip it to Yahoo!. But Janice the Programmer, one of your employees, doesn't care about selling out to Yahoo!, because she's not going to make any money that way. What she cares about is writing code in the latest coolest new programming language, because it's fun to learn a new thing. Meanwhile your CFO is entirely driven by the need to get out of the same cubicle he has been sharing with the system administrator, Trekkie Monster, and so he's working up a new budget proposal that shows just how much money you would save by moving to larger office space that's two minutes from his house, what a coincidence!
The problem of getting people to move in your direction (or, at least, the same direction) is not unique to startups, of course. It's the same fundamental problem that a political leader faces when they get elected after promising to eliminate waste, corruption, and fraud in government. The mayor wants to make sure that it's easy to get city approval of a new building project. The city building inspectors want to keep getting the bribes they have grown accustomed to.
And it's the same problem that a military leader faces. They might want a team of soldiers to charge at the enemy, even when every individual soldier would really just rather cower behind a rock and let the others do the charging.
Here are three common approaches you might take:
The Command and Control Method
The Econ 101 Method
The Identity Method
You will certainly find other methods of management in the wild (there's the exotic ""Devil Wears Prada"" Method, the Jihad Method, the Charismatic Cult Method, and the Lurch From One Method To Another Method) but over the next three days, I'm going to examine these three popular methods and explore their pros and cons. 
	"
https://www.joelonsoftware.com/2006/09/27/stevey-on-agile/,Stevey on Agile,2006-09-27T00:09:27+00:00,,Joel Spolsky,News,"
	Steve Yegge: ""Up until maybe a year ago, I had a pretty one-dimensional view of so-called 'Agile' programming, namely that it's an idiotic fad-diet of a marketing scam making the rounds as yet another technological virus implanting itself in naive programmers who've never read 'No Silver Bullet', the kinds of programmers who buy extended warranties and self-help books and believe their bosses genuinely care about them as people, the kinds of programmers who attend conferences to make friends and who don't know how to avoid eye contact with leaflet-waving fanatics in airports and who believe writing shit on index cards will suddenly make software development easier.""
See also Extreme Programming Refactored: The Case Against XP.
	"
https://www.joelonsoftware.com/2006/09/21/followup-on-freezing-macbook-pro/,Followup on freezing MacBook Pro,2006-09-21T00:09:26+00:00,,Joel Spolsky,News,"
	Remember when I complained that my Mac kept freezing with bouncing beach balls?
A lot of people suggested it might be a hardware problem, but the diagnostics on the setup disks didn't find anything.
Well, Daniel Jalkut over at Red Sweater Software suggested that I look in the console app to see what was going wrong, and lo and behold, there were lots and lots of messages that said:
Sep 19 22:56:39 joel-spolskys-computer lookupd[711]: NetInfo connection failed for server 127.0.0.1/local
This totally corresponded to what I was seeing... suddenly any app that tried to do a DNS lookup of any sort would go into permanent beachball mode and never recover. 
Some Googling around led me to a page by John Bafford that said ""Lookupd has a bug (rdar://3632865) in its cache cleanup code that causes it to randomly crash. CrashReporter, the system crash log agent, does not properly handle lookupd crashes, and as a result, when lookupd crashes, the process is not terminated. Since lookupd has not terminated, mach_init does not respawn lookupd. From this point, any application that attempts to access lookupd, either directly or indirectly, will hang.""
Hmmph. Kindly, John provides Unlockupd, a daemon that watches lookupd and restarts it if it gets jammed up.
I'll try this for a while and see if it helps. In the meantime, if it's true, it's odd that Apple hasn't fixed this bug in over two years. If somebody inside Apple wants to peek into that bug (link only works inside Apple) and let me know what they see there, I'll update this article!
	"
https://www.joelonsoftware.com/2006/09/19/amazing-x-ray-glasses-from-sprint/,Amazing X-Ray Glasses from Sprint!,2006-09-19T00:09:25+00:00,,Joel Spolsky,"Software designer, News","
	Over the last six months, Sprint has been trying to get bloggers (like me) to write about their new Power Vision Network by sending us free phones and letting us download music and movies and use the phones for free.
That's rather nice of them, but honestly, I have a really strong aversion to writing about things just because some PR person wanted me to. Basically, there's no better way to make me not want to write about something than to ask me to write about it. I accepted the free phone because, gosh, well, it's a free phone, but I decided that I simply wouldn't write about it no matter how much I liked it.
As it turns out, I had the opposite problem. The phone they sent me, an LG Fusic, is really quite awful, and the service, Power Vision, is tremendously misconceived and full of dumb features that don't work right and cost way too much. So I'm going to review the dang phone anyway, even though if anybody from Sprint is paying attention they're going to lose their lunch and some executive bonehead over there is going to go nuts and I sincerely hope that this doesn't put an end to the entire free-phones-for-bloggers boondoggle, because I'd hate to get beaten up at Etech next year by all the other bloggers who would hate me for spoiling all the fun.
Now, on to the review. I was pretty excited to try out this phone because I've been longing for one that could double as a decent MP3 player. Most days, I get to work via a combination of subway and walking, which takes about half an hour, and listening to podcasts makes the commute much more pleasant. So I've been carrying a phone (a Motorola RAZR) and an iPod (Nano) with me everywhere. Merging the two into one device would be great.
When it finally arrived, the physical appearance of the phone was rather disappointing. If you've been spoiled by Motorola's latest phones, or the seamless, screwless, elegant iPod, the LG Fusic will strike you as butt-ugly. Where a Motorola RAZR has a solid case made out of almost sensual matte-black steel that just feels great, the LG Fusic is made out of the cheapest kind of gray plastic, the same material you find on a $3 toy. Where Motorola goes to great lengths to hide the screws, and minimize bumps and seams, the LG Fusic has dozens of ugly protuberances, gaps, holes, screws, seams, etc. Worst of all, the LG Fusic has no less than three of those evil, flimsy, rubbery plug-caps that are connected to the phone by the thinnest of filaments. You know, those stupid rubber plugs that you have to pull away to plug anything into the phone, and then they just dangle there like chicken wattles (when they're not getting in the way of the thing you're trying to plug in) for a couple of weeks until they finally tear off. The phone is almost twice as thick as a RAZR. It comes with a break-offable front plate which can be used to change the accent color of the very front of the phone. Your choices are Barbie Pink, Barbie Green, Barbie Blue, and Black which would be the only stylish choice, if only it didn't clash so badly with the rest of the phone. (Believe me, it is hard to make black clash with anything, but LG did it.) Overall this phone seriously looks like a Fisher Price toy, not a top-of-the-line cell phone.
OK, maybe you're not so vain that appearances are a big deal. I tried to get over it. I really did. I promise I won't talk about the style thing any more.
I opened the clamshell and turned on the phone.
The screen lit up instantly! Wow, something about this phone is nice.
Oh, wait a minute. What's going on there?
The main screen shifts between pictures of Mount Fuji, the Eiffel Tower, etc. That's charming. But what's that bus?
There's a cheezy little black and white child's drawing of a bus bouncing up and down in front of the cheezy tourist pictures. Again with the Fisher Price Toy theme. The first thing I try to do is find a better screen saver. Everything looks like some kid's 6th grade BASIC graphics project. Oooh, look, colored squares flying around. Terrible clip art of a ""DJ"". One of the screen savers is called ""Funny."" You get a silhouette of a lizard climbing around on a pink background. Bwa ha ha! That is funny. TO TWO YEAR OLDS.
OK, ok, I promised I'd stop talking about style. On to UI design.
The main menu was really, really confusing. 
The first thing you see when you click on the Menu button is that you missed some alerts: 
Although, it turns out, you didn't, that's just the name of the menu item that comes up first.
You can't see all the icons at once because someone had the bright idea of using a weird 3-D perspective, and the currently selected icon comes zooming out in front, covering up some of the other icons. All the unselected icons are shown in silhouette, so at first they just look like a background. It took me quite a while to figure out just what the menu was and how to find things I wanted from the main menu.
But don't worry... there are random bits of sparkle that fly around on the screen. That's the important part. The random bits of sparkle, again, a 6th grader's BASIC graphics project.
Now, on to the whole reason I wanted this phone: the MP3 player.
There's no desktop integration, no ITunes integration, no feature for subscribing to Podcasts, nothing like that. When you plug the phone into your computer using the supplied USB cable, it thinks you want to use the phone as a modem. Yes, one day I might want to do that, that's true, but for now I just wanted to get MP3s onto the thing. Somehow, somewhere, I managed to stumble on a menu that made the phone act like a USB hard drive. Tada! The phone pops up on my computer looking like a hard drive. And then there was already a MUSIC folder there, and I could drag MP3 files in. Yay! I downloaded TWiT episode 69 manually and headed off to the subway to listen to it.
Wait... I need headphones. Ahh, here they are. Wait a minute. The headphone cord is only about 8 inches long. Am I supposed to hold the phone up to my chin to listen to music?
Oh, I see, there are two cords. You have to plug the headphone cord into the microphone cord and plug that into the phone. Now it's long enough. OK, it's awkward, but I can live with that.
To listen to the MP3s you've downloaded:
Hit the MENU button
Find the ON DEMAND menu item (I demand to hear MP3s!)
Nope, that's not what you wanted
Hit BACK
Nothing happens (darn!)
OK, try END
Do you want to exit this application? 
YES is already highlighted. Click OK.
Huh? The application didn't exit.
Click END again.
YES is already highlighted... oh... wait a minute! Maybe NO is highlighted? There's no way to tell the difference. There are two choices, one is white and one is blue, it's hard to see which is highlighted.
Fool around with the cursor keys until you're pretty sure that YES is highlighted. This is confusing, because the two-item menu wraps around, so the up button moves down and the down button moves up, or vice versa.
Remove the battery and put it in again. That should get you back to the main menu.
Media player? Is that what you want?
Yeah, there's something in here called Music...
It has about 50 options. What do they mean? SIRIUS hits? MUSIC CHOICE? SIRIUS MUSIC? Some of them are listed as My Channels and some are listed as Available Channels. Which is which? The UI here is really getting confusing.
OK, none of those options lets you listen to MP3s. It turns out there's something called MUSIC on the Main Menu.
Ahh, that brings up the happy ""booting Java"" screen which is so heartwarming. Thank you Sun Microsystems for bringing programming language advertisements into consumer electronics.
The Java applet has two tabs, ""Store"" and ""Player."" Try buying a song. It's $5 for 3 songs. That's a ripoff, Sprint. Apple already established that the fair price for one song is $0.99.
OK, I just want to listen to Leo Laporte, dammit. Maybe the Player tab?
Gotta choose between ""All My Music"" and ""Create Playlist..."".
W00t! THERE'S TWiT!
Click on it, and listen to TWiT.
All right. TWiT is more than an hour long, and I only listened to half of the episode by the time I got home. Luckily, there's a handy PAUSE button on the outside of the clamshell. Unluckily, it doesn't work. Pressing it once informs you that the buttons are locked, and you have to press and hold the pause button to unlock. So you do that, and the key guard goes off, and you press the pause button again, and nothing happens, so you press it again, and finally you've paused the music. 
In the meantime, if, say, hypothetically, you were pausing because you live in a country where the police brutalize people, and a policeman was brutalizing you, and you wanted to stop the music so you could try to figure out what the policeman wanted and perhaps there was some way if you could just hear him that you could get him to stop beating you with a riot bat, you're already DEAD by the time you figure out how to make the pause button actually pause.
While the MP3 player is paused, the backlight on the external display just won't go off. So inadvertently, the phone almost completely runs down its battery overnight staying in ""Pause"" mode.
Why not turn the phone off overnight? Well, because then I'd have to listen to the first half of TWiT all over again. Can't you fast forward? No. Doesn't it remember where you're up to like an iPod? No. Pause is your only hope.
The next morning, with a single bar of battery juice left, I got into the subway and resumed listening to the podcast, and I'm a wise guy, so I decided to see what the battery looked like, and of course, the phone lost power, oops, lost my place in the Podcast. 
Put back the battery. Turn on the phone. Go into the MP3 player again. There's no signal, and, guess what? You can't get into to the MP3 player unless you can establish a network connection to the Sprint Music Store. Even to play your own MP3s!
OK, so this is an MP3 player that doesn't really work on the subway and won't work on a plane, the two places I'm most likely to listen to MP3s. Not very appealing.
A little bit more exploring and I discovered that there's another entirely separate MP3 player on this device. It's hard to find. You have to go to Tools, then Memory Card, then to the Music folder, and another MP3 player starts up which you can use to listen to your MP3s. For this player, you don't have to be on the network, so it works in the subway, but-get this-the minute you close the clamshell, the music stops! I am literally not making this up. There are two bad MP3 players on this device, neither one of which remembers where you're up to, neither one of which can be used on the subway with the phone folded in my pocket, neither one of which has a fast-forward feature.
I have literally never seen such a useless MP3 player.
OK, onward. Yes, you can watch movies on this phone. For example, for $5.95 a month, you can get something called mFLIX. Until you pay the money, there's no way to find out what mFLIX is or what it is you're getting for your $5.95. I'll tell you what you get: a bunch of garbage film-student videos that nobody would ever vote up on YouTube, in a tiny blurry window that reminds you of QuickTime 1.0 (""look! It's on a computer but it's moving!""). 
That was disappointing. I thought this thing was supposed to have full length movies somewhere. Ah yes, how about ""MSpot Movies?"" It says I'm going to get ""Full-length Hollywood movies."" Only $6.95 a month. Yes. Buy buy buy. (Thankfully Uncle Sprint is paying for this). Oh look... you can preview before you commit to spending! Clicking Preview brings up a page that says PREVIEW with a ""Done"" button. That's it.
OK, maybe they don't want me to preview. Fine. After you click Buy, you're thrown back to a main menu somewhere and then you have to remember what the hell you bought and go find it again. Annoying UI, again.
OK, MSpot Movies. A menu comes up with a bunch of folders:
Animaland
Classic Cartoons
Freestyle Motorcross
Nightmare In Blood
The Projectionist
Heart of a Champion
One Love
I don't understand. Are these movie titles? Not movie titles I've ever heard of. Yep, it's true. What you get for $7/month is about 10 movies that seem to be in the public domain. Literally nothing worth watching, least of all on a smudgy 1 5/8"" (diagonal), pixelated screen. I did, actually, as a part of my sacred duty as a reviewer, try to watch a whole movie. I could only stand about the first 1/3rd of it, and the battery was dying, and the phone was getting too hot to hold. I cannot imagine anybody finding any value in MSpot Movies. If Sprint makes any money off of them, it's probably by mistake. This service is literally as much of a scam as those X-Ray glasses they used to advertise in comic books to steal a few bucks from some little kids.
The only kind of content you might really want to watch on this device is the stuff you find on YouTube, or video podcasts like The Show with zefrank. But that's not what Sprint gives you. Instead they give you $7/month, ripoff, non-previewable scammy garbage.
A long time ago, I was working on MSN 1.0, and there was a long line of content providers working to make deals with Microsoft to put their content on the Microsoft Network, but in those days, it wasn't clear exactly who should be paying who, so hardly any deals got made. In the meantime, the whole Web thing happened, where anybody could provide content without signing a deal with a Microsoft executive, and there was tons of content, and some of it was garbage, yes, but some of it was good, and we found the good stuff, and it floated to the top, and all was well, but Sprint doesn't get this. They relish their ability to serve as the gatekeeper to what they hope will become a new medium, because the gatekeeper gets to charge tolls. And it's 2006, and I almost can't believe I'm writing this, because way back in 2000 I wrote almost exactly the same thing about WAP, and how cell phone companies keep failing to insert themselves as toll collectors because they're so darn clueless about how the Internet works, and about the value of many-to-many networks instead of broadcast networks.
And now suddenly someone at Sprint read some book by Scoble and then they read Malcolm Gladwell's theories of tipping points in the airport and Hey Presto! Maybe we can make this work by finding the tipping point people! You know, the bloggers! And all the bloggers get free cell phones, and Sprint gets tons of publicity, but frankly all the publicity in the world is not going to help them foist on us a product that is utterly pathetic. The phones they send us are so lame there is literally no area you can go into without being disappointed and shocked at just how shoddy everything is and how much it costs and what a rip off scam they're trying to run here with the music that costs too much and the movies that you don't want to watch on the screen that makes them unwatchable and you just KNOW that if you call to cancel the extra $7/month, their customer service department is going to give you the phone menu runaround and then put you on hold for an hour and then you'll get some cancellation specialist with an incomprehensible accent who will spend 15 minutes trying to talk you out of canceling the useless service until you just give up and let them have the goddamned $7 a month. No amount of pampering bloggers and calling them Ambassadors is going to get around the fact that you're sending us plastic junk phones that look like bath toys. (Hey, does it float?) All the ""tipping point"" theories in the world won't protect Sprint from the basic truth that the LG Fusic user interface could basically serve as an almost complete textbook for a semester-long course in user interface design, teaching students of usability exactly what NOT to do.
Wait a minute.
Wait just one minute.
Maybe I completely missed the point.
Maybe this phone is for four year olds!
It all makes sense now!
The nonsensical menus don't matter-four year olds can't read! The toy-like appearance-duh! The ripoff movies-who cares, as long as the kids press BUY by mistake and the parents keep paying the bills!
Now I get it.
So really the only stupid thing that Sprint did is to send this phone to a bunch of know-it-all, hipster-wannabe, pretentious early-adopter engadget-reading 41-year-old bloggers, with our pretentious black iPods and our sleek gun metal RAZRs and our MacBook Pros and our so-called ""Podcast"" listening habits, watching zefrank tell potty jokes about The Decider.
No no no no no. This phone is for 4 year olds, albeit spoiled 4 year olds with rich parents. They'll love the colors, the plastic, the impossible UI, they can watch the one 1936 movie that inadvertently fell into the public domain in class when the teacher is getting boring, and they sure as heck aren't going on a subway with that thing.
Ohhhhhhhhh kay. 
I gave the phone to a friend's 4-year-old.
NEVER MIND!
	"
https://www.joelonsoftware.com/2006/09/19/getting-markdown-and-smartypants-working-with-editpad-pro/,Getting MarkDown and SmartyPants working with EditPad Pro,2006-09-19T00:09:24+00:00,,Joel Spolsky,News,"
	MarkDown is a simple processor that converts text to HTML. For example, it converts *text surrounded by asterisks* to italics.
SmartyPants replaces ""straight quotes"" with ""curly quotes"" and makes a few other typographic improvements.
EditPad Pro is a very respectable text editor for Windows. It's fast and contains scrillions of useful features. It's not the fanciest thing in the world, but if you're still using Notepad for the occasional bits of text, it's a fine drop-in replacement.
Here's what it takes to get them all working together on a typical Windows setup:
Install Perl, if you don't already have it. For Windows, the easiest way to do this is from ActiveState's download page. Just download the Windows MSI package and run it. Make sure to choose the option to associate .pl files with Perl.
Go into c:\Perl and make a directory called markdown.
Download Markdown and SmartyPants. Open the ZIP files and put Markdown.pl and SmartyPants.pl in the directory you just made, c:\perl\Markdown.
Also in that directory, make a little batch file named md.bat:
@echo off c:\perl\markdown\Markdown.pl %1 > ""%~dpn1.tmp"" c:\perl\markdown\SmartyPants.pl ""%~dpn1.tmp"" > ""%~dpn1.html"" del ""%~dpn1.tmp"" start """" ""%~dpn1.html""
In EditPad Pro, choose Tools | Configure Tools. Click New. Set the Caption to ""MarkDown"", and set the Command Line to c:\perl\markdown\md.bat ""%FILE%"". You may want to check the box in the Files tab that says ""Save the current file if it has unsaved changes.""
Now you have a menu item Tools|Markdown which will save the file you're working on and generate an HTML version of it (replacing the extension you used with .html), then it pops it up in a web browser so you can check it.
	"
https://www.joelonsoftware.com/2006/09/12/optimizing-method-calls/,Optimizing method calls,2006-09-12T00:09:23+00:00,,Joel Spolsky,News,"
	Avi Bryant describes a method for making method calls really fast, even if they do happen to be duck-typed. Cool!
(Ruby's still slow. Film at 11.)
	"
https://www.joelonsoftware.com/2006/09/12/ruby-performance-revisited/,Ruby Performance Revisited,2006-09-12T00:09:22+00:00,,Joel Spolsky,News,"
	Jack Herrington emailed me, in reference to the issue of Ruby on Rails performance, to write:
I agree with you about unicode. And I agree that Rails needs some time to evolve. But I use a bunch of web technologies and they all have issues.
I do disagree with the scalability statements. I don't think Rails has scaling issues that can't be gotten around, and which don't have cousins in other technologies.
What I would ask is that you at least put some framing around your scalability comments. Tell us about the scalability problems. Even if we don't fix it for you, the entire community can gain from your experience.
David Heinemeier Hansson wrote:
Rails is for the vast majority of web applications Fast Enough. We got sites doing millions of dynamic page views per day. If you end up being with the Yahoo or Amazon front page, it's unlikely that an off-the-shelve framework in ANY language will do you much good. You'll probably have to roll your own. But sure, I'd like free CPU cycles too. I just happen to care much more about free developer cycles and am willing to trade the former for the latter.
By way of clarification, I'm not concerned with Rails performance, I'm concerned with Ruby performance, and here's why.
I've seen lots of comparisons of Ruby's performance with bytecode languages like Java which I would consider slow, and I see a lot of reports of performance claiming Ruby is 10x slower, 50x slower, etc. Besides the random blogobuzz, Ruby comes pretty darn close to dead last in the Computer Language Shootout Benchmarks.
Without knowing much about the implementation of Ruby, I would guess that the biggest issue is around late binding and especially duck typing, which prevents type inference or strong typing, which means that function calls will always be slow because you can never get something compiled down to the point where a function call is just a single CALL instruction (on x86)... you always have to be exploring the object, possibly even scanning a hash table to find the function you want to call. Calling methods on objects is really, really, really, really common, especially in pure OO languages, and that bit of the code needs to get down to at least a CALL indirect on the CPU for Ruby to offer the same performance as languages where the type of the object can be determined at compile time and therefore the instruction where you're jumping to can be gotten either at compile time (like in C) or with a single indirection through a single vtable (like in C++).
I understand the philosophy that developer cycles are more important than cpu cycles, but frankly that's just a bumper-sticker slogan and not fair to the people who are complaining about performance. Even though our product, FogBugz, seems like something that should be perfect for Ruby on Rails, we have several parts of code where performance is extremely important. In FogBugz 6 there's one place where we need to do literally millions of calculations to display a single chart on a single web page. We have gotten it down to 3 seconds or so in our current development environment with a lot of optimization, but frankly with a duck-typed function call I really don't think we could do it before the web browser gave up and timed out and the sun cooled down a couple of degrees. We also have to scan incoming email messages for spam using Bayesian filtering. This is compute-intensive can take 1 sec. per message. Receiving one email per second is not unreasonable for many of our customers so we are very close to being CPU pegged. That is using a language which we know to be orders of magnitude faster than Ruby at this type of code. We would be absolutely dead on Ruby.
Even classic, simple CRUD applications - the kind of application that basically just shows you a table from a database and gives you operations to add, delete, and edit records - often discover somewhere down the line that there's something enormously computationally intensive that they want to do, for example, blog software might want to add Bayesian filtering to eliminate spam from comments. This is where you suddenly realize that if your language of choice is 10x slower than the competition, you may be simply unable to add that feature, or you may have to call out to another language (with all the marshalling overhead that implies). 
This doesn't apply to everyone, but when people say they have performance problems with Ruby or that they just need to be able to run code faster than the core Ruby language engine can run it, it doesn't help to have Ruby advocates singing hymns about developer cycles vs. CPU cycles. Even if you aren't doing compute-intensive things, if you find yourself needing to buy 100 servers instead of 10 servers, you may suddenly revisit the whole developer cycle vs. CPU cycle equation.
I understand that there are plans for Ruby to address performance with some kind of bytecode compiler and that will be nice. When these things happen and when Ruby starts getting competitive benchmarks it will be a lot more appropriate for a lot more types of applications. In the meantime I stand by my claim that it's not appropriate for every situation.
	"
https://www.joelonsoftware.com/2006/09/11/composing-in-textmate-with-markdown/,Composing in TextMate with MarkDown,2006-09-11T00:09:21+00:00,,Joel Spolsky,News,"
	Normally I use CityDesk to compose things for Joel on Software, but the long articles on recruiting were written from home where I have a MacBook Pro (CityDesk is Windows only).
I was trying to find appropriate software that I could use to compose long articles that felt smooth on a Mac, that generated extremely clean HTML, and that generated curly quotes ("""") which I've grown fond of, especially for longer articles.
The combination I found that made me happiest was TextMate in Markdown mode. It was a surprisingly good experience. TextMate is an ""emacs inspired"" editor for the Mac, with tons of build-in stuff for editing different types of text files that they call Bundles. Markdown is a very simple way to format text, for example, putting *asterisks* around text that you want italicized; it generates nice clean HTML. Even Markdown source is quite clean and still highly readable, useful if you need to post the same content to Usenet or use it in plain text somewhere.
I have a few complaints though:
OS X antialiasing, especially, it seems, with the monospaced fonts, just isn't as good as Windows ClearType. Apple has some room to improve in this area; the fonts were blurry on the edges.
Also, I don't understand all these people who say that Macs never crash. I probably had to reboot the MacBook Pro (hard reboot - hold down the power button for five seconds) about every two hours. It was always the same problem: the Wifi network would go down for a second, something which happens to everyone, but on Windows, it just comes back, while on the Mac, I get a spinning colored ball and everything is frozen. Everything. Forever. If I try to wait it out the beachball will still be spinning the next morning. If anybody is aware of this problem and knows of a specific fix I'd love to hear of it. It was like a Windows 3.1 deja vu all over again thing.
I still have to say that composing large amounts of text with Word 2007 on Windows XP is a better experience, all told, because of the autocorrection and the better screen display.
One more note - all the pictures I've published in the last few days are of the Fog Creek office, of course, taken recently by photographer Gregg Conde.
	"
https://www.joelonsoftware.com/2006/09/08/now-accepting-summer-internship-applications/,Now accepting summer internship applications,2006-09-08T00:09:20+00:00,,Joel Spolsky,News,"
	Last year we set the application deadline for internships to February 1st, which was fine, and the deadline did a good job of forcing students to get off their butts and apply, but we made the mistake of not considering applications until they were all in, which we thought would be most fair. It was fair, but it also meant that by the time we even looked at the resumes, some great applicants had already accepted summer jobs at Microsoft. Grr...
This year summer internship applications will be accepted on a first-come, first-served basis, so basically, if you're a college student looking for an internship, you pretty much should just apply now, instead of puttering around indecisively.
	"
https://www.joelonsoftware.com/2006/09/08/installing-vista-rc1-in-vmware-workstation/,Installing Vista RC1 in VMWare Workstation,2006-09-08T00:09:19+00:00,,Joel Spolsky,News,"
	If you are trying to install Windows Vista RC1 in VMWare Workstation, you may see setup appear to hang on the text-mode screen that says ""Windows is loading files..."".
Actually what has happened is that Vista Setup is already in graphics mode trying to do things, but something about the way it switches the display adapter into graphics mode is not working right on VMWare.
If I were VMWare I'd be pretty ticked off at Microsoft right now; since Microsoft makes a competitive product, Virtual PC, it is Highly Suspicious that they come out with a major new test release of an operating system that just happens to not work on VMWare Workstation, something which is practically the de facto standard for developers testing new operating systems. Shabby and slimy, Microsoft. They're probably testing Windows Vista with tens of thousands of applications; not testing with VMWare is inexcusable.
There's a workaround, for now, while VMWare works on the problem: edit the virtual machine's .vmx file to include 
svga.maxWidth = ""640"" svga.maxHeight = ""480"" 
You can get Vista installed in VGA 16 color 640x480 mode (it will look awful) and then when you get everything running, install VMWare tools and take out those two lines and you'll be good to go. Thanks to anonymous user echelon9 from the VMWare board for this tip.
I'm assuming that the Aero/Glass UI's heavy demands on the graphic card may mean that it can't be tested under VMWare, but I'd love to be wrong.
	"
https://www.joelonsoftware.com/2006/09/08/sorting-resumes/,Sorting Resumes,2006-09-08T00:09:18+00:00,2016-12-12T00:05:41+00:00,Joel Spolsky,News,"
	""To top programmers, the most maddening thing about recruiters is their almost morbid fascination with keywords and buzzwords. The entire industry of professional headhunters and recruiters is bizarrely fixated on the simple algorithm of matching candidates to positions by looking for candidates that have the complete list of technology acronyms that the employer happens to be looking for. It becomes especially infuriating to realize that most of these recruiters have no idea what any of these technologies are. 'Oh, you don't have MSMQ experience? Never mind.' At least when real estate agents prattle on about Subzero refrigerators and Viking stoves, they at least know what these things are (although any stainless steel refrigerator counts as 'Subzero' these days). The easiest way to catch-out a technical recruiter is when they inevitably insist on 5 years of experience with Ruby on Rails, or refuse to consider someone for a 'Windows API' job when they only have 'Win32' on their resume.""
- From today's third and final installment in The Guerrilla Guide to Hiring, Sorting Resumes.
	"
https://www.joelonsoftware.com/2006/10/30/job-seeker-statistics/,Job seeker statistics,2006-10-30T00:09:34+00:00,,Joel Spolsky,News,"
	In the three weeks since we added geographic search to the job listings, I've been collecting detailed statistics on where people are searching for jobs. This is not merely out of curiosity, but because we constantly get email from companies outside of the main tech centers wondering if they should bother placing an ad. ""We're in Italy... do you have anybody looking for jobs in Italy?"" Well, yes, as a matter of fact: 80 people searched for jobs in Italy in the last 21 days, so if you place an ad for a job in Italy, it's fair to guess that about 80 people who are specifically searching for jobs in Italy will see it. That's in addition to the far larger number of casual visitors who don't do a geographic search.
My theory of Joel on Software readers is that they're pretty smart, ergo, they already have good jobs, for the most part, but thanks to the power of RSS, a lot of people have set up subscriptions to find out about new jobs in their area. So, for example, if you're in Austin, happily employed, but willing to consider new opportunities, you go into the search page, search for Austin, and then when you subscribe to the RSS feed you'll get all new Austin jobs right in your reader. The way the statistics engine works, you get a custom RSS feed, and as long as you keep checking it, you'll be adding one to the 174 other people looking for jobs in Austin. When you unsubscribe, after 21 days, you'll stop counting towards that number. And this, in turn, encourages companies with jobs in the Austin area to post their jobs, knowing they're certain to reach a certain number of job seekers, and even if they don't, we're still (as far as I know) the only job board that gives them their money back if they're unsatisfied, so there's really no risk at all.
The number of job seekers in the last 21 days is 307,764 with one major caveat: due to the way we keep statistics, as soon as you go into the search page and change your search, you get counted twice. I did this because someone who is willing to work either in Chicago or Boston should show up in the Chicago count and the Boston count, and they might actually want to subscribe to two RSS feeds, so even though they're one person, they're counted as two. Also, job seekers who delete cookies will get counted again. But for the most part if you just keep coming back to the site checking out the jobs, we won't double count you, and we'll even remember your geographic search for the next time you come back.
	"
https://www.joelonsoftware.com/2006/10/30/internships/,Internships,2006-10-30T00:09:33+00:00,,Joel Spolsky,News,"
	
The Boston Globe quoted me saying, ""The good employers have relationships with professors and they forward students who seem exceptional."" Which reminded me that we're in the middle of recruiting season for our summer internships, so if you have a student who you consider to be particularly capable, please tell me about them. 
	"
https://www.joelonsoftware.com/2006/10/25/the-guerrilla-guide-to-interviewing-version-30/,The Guerrilla Guide to Interviewing (version 3.0),2006-10-25T00:15:20+00:00,2016-12-05T19:34:54+00:00,Joel Spolsky,"Recruiter, News","
	A motley gang of anarchists, free-love advocates, and banana-rights agitators have hijacked The Love Boat out of Puerto Vallarta and are threatening to sink it in 7 days with all 616 passengers and 327 crew members unless their demands are met. The demand? A million dollars in small unmarked bills, and a GPL implementation of WATFIV, that is, the esteemed Waterloo Fortran IV compiler. (It's surprising how few things the free-love people can find to agree on with the banana-rights people.)
As chief programmer of the Festival Cruise programming staff, you've got to decide if you can deliver a Fortran compiler from scratch in seven days. You've got a staff of two programmers to help you.
Can you do it?
""Well, I suppose, it depends,"" you say. One of the benefits of writing this article is that I get to put words into your mouth and you can't do a darn thing about it.
On what? 
""Um, will my team be able to use UML-generating tools?""
Does that really matter? Three programmers, seven days, Waterloo Fortran IV. Are UML tools going to make or break it?
""I guess not.""
OK, so, what does it depend on? 
""Will we have 19 inch monitors? And will we have access to all the Jolt we can drink?""
Again, does this matter? Is caffeine going to determine whether you can do it?
""I guess not. Oh, wait. You said I have a staff of two programmers?""
Right.
""Who are they?""
Does that matter?
""Sure! If the team doesn't get along, we'll never be able to work together. And I know a few superstar programmers who could crank out a Fortran compiler by themselves in one week, and lots of programmers who couldn't write the code to print the startup banner if they had six months.""
Now we're on to something!
Everybody gives lip service to the idea that people are the most important part of a software project, but nobody is quite sure what you can do about it. The very first thing you have to do right if you want to have good programmers is to hire the right programmers, and that means you have to be able to figure out who the right programmers are, and this is usually done in the interview process. So this chapter is all about interviewing.
(The in-person interview is just one part of the hiring process, which starts with sorting resumes and a phone screen. This article only covers in-person interviews.)
You should always try to have at least six people interview each candidate that gets hired, including at least five who would be peers of that candidate (that is, other programmers, not managers). You know the kind of company that just has some salty old manager interview each candidate, and that decision is the only one that matters? These companies don't have very good people working there. It's too easy to fake out one interview, especially when a non-programmer interviews a programmer. 
If even two of the six interviewers thinks that a person is not worth hiring, don't hire them. That means you can technically end the ""day"" of interviews after the first two if the candidate is not going to be hired, which is not a bad idea, but to avoid cruelty you may not want to tell the candidate in advance how many people will be interviewing them. I have heard of companies that allow any interviewer to reject a candidate. This strikes me as a little bit too aggressive; I would probably allow any senior person to reject a candidate but would not reject someone just because one junior person didn't like them.
Don't try to interview a bunch of people at the same time. It's just not fair. Each interview should consist of one interviewer and one interviewee, in a room with a door that closes and a whiteboard. I can tell you from extensive experience that if you spend less than one hour on an interview you're not going to be able to make a decision.
You're going to see three types of people in your interviews. At one end of the scale, there are the unwashed masses, lacking even the most basic skills for this job. They are easy to ferret out and eliminate, often just by asking two or three quick questions. At the other extreme you've got your brilliant superstars who write lisp compilers for fun, in a weekend, in Assembler for the Nintendo DS. And in the middle, you have a large number of ""maybes"" who seem like they might just be able to contribute something. The trick is telling the difference between the superstars and the maybes, because the secret is that you don't want to hire any of the maybes. Ever.
At the end of the interview, you must be prepared to make a sharp decision about the candidate. There are only two possible outcomes to this decision: Hire or No Hire. There is no other possible answer. Never say, ""Hire, but not for my team."" This is rude and implies that the candidate is not smart enough to work with you, but maybe he's smart enough for those losers over in that other team. If you find yourself tempted to say ""Hire, but not in my team,"" simply translate that mechanically to ""No Hire"" and you'll be OK. Even if you have a candidate that would be brilliant at doing your particular task, but wouldn't be very good in another team, that's a No Hire. In software, things change so often and so rapidly that you need people that can succeed at just about any programming task that you throw at them. If for some reason you find an idiot savant that is really, really, really good at SQL but completely incapable of ever learning any other topic, No Hire. You'll solve some short term pain in exchange for a lot of long term pain.
Never say ""Maybe, I can't tell."" If you can't tell, that means No Hire. It's really easier than you'd think. Can't tell? Just say no! If you are on the fence, that means No Hire. Never say, ""Well, Hire, I guess, but I'm a little bit concerned about..."" That's a No Hire as well. Mechanically translate all the waffling to ""no"" and you'll be all right.
Why am I so hardnosed about this? It's because it is much, much better to reject a good candidate than to accept a bad candidate. A bad candidate will cost a lot of money and effort and waste other people's time fixing all their bugs. Firing someone you hired by mistake can take months and be nightmarishly difficult, especially if they decide to be litigious about it. In some situations it may be completely impossible to fire anyone. Bad employees demoralize the good employees. And they might be bad programmers but really nice people or maybe they really need this job, so you can't bear to fire them, or you can't fire them without pissing everybody off, or whatever. It's just a bad scene.
On the other hand, if you reject a good candidate, I mean, I guess in some existential sense an injustice has been done, but, hey, if they're so smart, don't worry, they'll get lots of good job offers. Don't be afraid that you're going to reject too many people and you won't be able to find anyone to hire. During the interview, it's not your problem. Of course, it's important to seek out good candidates. But once you're actually interviewing someone, pretend that you've got 900 more people lined up outside the door. Don't lower your standards no matter how hard it seems to find those great candidates.
OK, I didn't tell you the most important part-how do you know whether to hire someone?
In principle, it's simple. You're looking for people who are
Smart, and
Get things done.
That's it. That's all you're looking for. Memorize that. Recite it to yourself before you go to bed every night. You don't have enough time to figure out much more in a short interview, so don't waste time trying to figure out whether the candidate might be pleasant to be stuck in an airport with, or whether they really know ATL and COM programming or if they're just faking it.
People who are Smart but don't Get Things Done often have PhDs and work in big companies where nobody listens to them because they are completely impractical. They would rather mull over something academic about a problem rather than ship on time. These kind of people can be identified because they love to point out the theoretical similarity between two widely divergent concepts. For example, they will say, ""Spreadsheets are really just a special case of programming language,"" and then go off for a week and write a thrilling, brilliant whitepaper about the theoretical computational linguistic attributes of a spreadsheet as a programming language. Smart, but not useful. The other way to identify these people is that they have a tendency to show up at your office, coffee mug in hand, and try to start a long conversation about the relative merits of Java introspection vs. COM type libraries, on the day you are trying to ship a beta.
People who Get Things Done but are not Smart will do stupid things, seemingly without thinking about them, and somebody else will have to come clean up their mess later. This makes them net liabilities to the company because not only do they fail to contribute, but they soak up good people's time. They are the kind of people who decide to refactor your core algorithms to use the Visitor Pattern, which they just read about the night before, and completely misunderstood, and instead of simple loops adding up items in an array you've got an AdderVistior class (yes, it's spelled wrong) and a VisitationArrangingOfficer singleton and none of your code works any more.
How do you detect smart in an interview? The first good sign is that you don't have to explain things over and over again. The conversation just flows. Often, the candidate says something that shows real insight, or brains, or mental acuity. So an important part of the interview is creating a situation where someone can show you how smart they are. The worst kind of interviewer is the blowhard. That's the kind who blabs the whole time and barely leaves the candidate time to say, ""yes, that's so true, I couldn't agree with you more."" Blowhards hire everyone; they think that the candidate must be smart because ""he thinks so much like me!""
The second worst kind of interviewer is the Quiz Show Interviewer. This is the kind of person who thinks that smart means ""knows a lot of facts."" They just ask a bunch of trivia questions about programming and give points for correct answers. Just for fun, here is the worst interview question on Earth: ""What's the difference between varchar and varchar2 in Oracle 8i?"" This is a terrible question. There is no possible, imaginable correlation between people that know that particular piece of trivia and people that you want to hire. Who cares what the difference is? You can find out online in about fifteen seconds! Remember, smart does not mean ""knows the answer to trivia questions."" Anyway, software teams want to hire people with aptitude, not a particular skill set. Any skill set that people can bring to the job will be technologically obsolete in a couple of years, anyway, so it's better to hire people that are going to be able to learn any new technology rather than people who happen to know how to make JDBC talk to a MySQL database right this minute.
But in general, the way to learn the most about a person is to let them do the talking. Give them open-ended questions and problems.
So, what do you ask?
My personal list of interview questions originates from my first job at Microsoft. There are actually hundreds of famous Microsoft interview questions. Everybody has a set of questions that they really like. You, too, will develop a particular set of questions and a personal interviewing style which helps you make the Hire/No Hire decision. Here are some techniques that I have used that have been successful.
Before the interview, I read over the candidates resume and jot down an interview plan on a scrap of paper. That's just a list of questions that I want to ask. Here's a typical plan for interviewing a programmer: 
Introduction 
Question about recent project candidate worked on 
Easy Programming Question 
Pointer/Recursion Question
Are you satisfied? 
Do you have any questions? 
I am very, very careful to avoid anything that might give me some preconceived notions about the candidate. If you think that someone is smart before they even walk into the room, just because they have a Ph.D. from MIT, then nothing they can say in one hour is going to overcome that initial prejudice. If you think they are a bozo because they went to community college, nothing they can say will overcome that initial impression. An interview is like a very, very delicate scale-it's very hard to judge someone based on a one hour interview and it may seem like a very close call. But if you know a little bit about the candidate beforehand, it's like a big weight on one side of the scale, and the interview is useless. Once, right before an interview, a recruiter came into my office. ""You're going to love this guy,"" she said. Boy did this make me mad. What I should have said was, ""Well, if you're so sure I'm going to love him, why don't you just hire him instead of wasting my time going through this interview."" But I was young and naive, so I interviewed him. When he said not-so-smart things, I thought to myself, ""gee, must be the exception that proves the rule."" I looked at everything he said through rose-colored glasses. I wound up saying Hire even though he was a crappy candidate. You know what? Everybody else who interviewed him said No Hire. So: don't listen to recruiters; don't ask around about the person before you interview them; and never, ever talk to the other interviewers about the candidate until you've both made your decisions independently. That's the scientific method.
The introduction phase of the interview is intended to put the candidate at ease. I ask them if they had a nice flight. I spend about 30 seconds telling the person who I am and how the interview will work. I always reassure candidates that we are interested in how they go about solving problems, not the actual answer.
Part two is a question about some recent project that the candidate worked on. For interviewing college kids, ask them about their senior thesis, if they had one, or about a course they took that involved a long project that they really enjoyed. For example, sometimes I will ask, ""what class did you take last semester that you liked the most? It doesn't have to be computer-related."" When interviewing experienced candidates, you can talk about their most recent assignment from their previous job.
Again, ask open-ended questions and sit back and listen, with only the occasional ""tell me more about that"" if they seem to stall.
What should you look for during the open ended questions?
One: Look for passion. Smart people are passionate about the projects they work on. They get very excited talking about the subject. They talk quickly, and get animated. Being passionately negative can be just as good a sign. ""My last boss wanted to do everything on VAX computers because it was all he understood. What a dope!"" There are far too many people around that can work on something and not really care one way or the other. It's hard to get people like this motivated about anything.
Bad candidates just don't care and will not get enthusiastic at all during the interview. A really good sign that a candidate is passionate about something is that when they are talking about it, they will forget for a moment that they are in an interview. Sometimes a candidate comes in who is very nervous about being in an interview situation-this is normal, of course, and I always ignore it. But then when you get them talking about Computational Monochromatic Art they will get extremely excited and lose all signs of nervousness. Good. I like passionate people who really care. (To see an example of Computational Monochromatic Art try unplugging your monitor.) You can challenge them on something (try it-wait for them to say something that's probably true and say ""that couldn't be true"") and they will defend themselves, even if they were sweating five minutes ago, because they care so much they forget that you are going to be making Major Decisions About Their Life soon.
Two: Good candidates are careful to explain things well, at whatever level. I have rejected candidates because when they talked about their previous project, they couldn't explain it in terms that a normal person could understand. Often CS majors will just assume that everyone knows what Bates Theorem is or what O(log n) means. If they start doing this, stop them for a minute and say, ""could you do me a favor, just for the sake of the exercise, could you please explain this in terms my grandmother could understand."" At this point many people will still continue to use jargon and will completely fail to make themselves understood. Gong! You don't want to hire them, basically, because they are not smart enough to comprehend what it takes to make other people understand their ideas.
Three: If the project was a team project, look for signs that they took a leadership role. A candidate might say, ""We were working on X, but the boss said Y and the client said Z."" I'll ask, ""So what did you do?"" A good answer to this might be ""I got together with the other members of the team and wrote a proposal..."" A bad answer might be, ""Well, there was nothing I could do. It was an impossible situation."" Remember, Smart and Gets Things Done. The only way you're going to be able to tell if somebody Gets Things Done is to see if historically they have tended to get things done in the past. In fact, you can even ask them directly to give you an example from their recent past when they took a leadership role and got something done-overcoming some institutional inertia, for example.
Most of the time in the interview, though, should be spent letting the candidate prove that they can write code.
Reassure candidates that you understand that it's hard to write code without an editor, and you will forgive them if the whiteboard gets really messy. Also you understand that it's hard to write bug-free code without a compiler, and you will take that into account.
For the first interview of the day, I've started including a really, really easy programming problem. I had to start doing this during the dotcom boom when a lot of people who thought HTML was ""programming"" started showing up for interviews, and I needed a way to avoid wasting too much time with them. It's the kind of problem that any programmer working today should be able to solve in about one minute. Some examples:
Write a function that determines if a string starts with an upper-case letter A-Z
Write a function that determines the area of a circle given the radius
Add up all the values in an array
These softball questions seem too easy, so when I first started asking them, I had to admit that I really expected everyone to sail right through them. What I discovered was that everybody solved the problem, but there was a lot of variation in how long it took them to solve.
That reminded me of why I couldn't trade bonds for a living.
Jared is a bond trader. He is always telling me about interesting deals that he did. There's this thing called an option, and there are puts, and calls, and the market steepens, so you put on steepeners, and it's all very confusing, but the weird thing is that I know what all the words mean, I know exactly what a put is (the right, but not the responsibility, to sell something at a certain price) and in only three minutes I can figure out what should happen if you own a put and the market goes up, but I need the full three minutes to figure it out, and when he's telling me a more complicated story, where the puts are just the first bit, there are lots of other bits to the story, I lose track very quickly, because I'm lost in thought (""let's see, market goes up, that mean interest rates go down, and now, a put is the right to sell something..."") until he gets out the graph paper and starts walking me through it, and my eyes glazeth over and it's very sad. Even though I understand all the little bits, I can't understand them fast enough to get the big picture.
And the same thing happens in programming. If the basic concepts aren't so easy that you don't even have to think about them, you're not going to get the big concepts.
Serge Lang, a math professor at Yale, used to give his Calculus students a fairly simple algebra problem on the first day of classes, one which almost everyone could solve, but some of them solved it as quickly as they could write while others took a while, and Professor Lang claimed that all of the students who solved the problem as quickly as they could write would get an A in the Calculus course, and all the others wouldn't. The speed with which they solved a simple algebra problem was as good a predictor of the final grade in Calculus as a whole semester of homework, tests, midterms, and a final.
You see, if you can't whiz through the easy stuff at 100 m.p.h., you're never gonna get the advanced stuff.
But like I said, the good programmers stand up, write the answer on the board, sometimes adding a clever fillip (Ooh! Unicode compliant! Nice!), and it takes thirty seconds, and now I have to decide if they're really good, so I bring out the big guns: recursion and pointers.
15 years of experience interviewing programmers has convinced me that the best programmers all have an easy aptitude for dealing with multiple levels of abstraction simultaneously. In programming, that means specifically that they have no problem with recursion (which involves holding in your head multiple levels of the call stack at the same time) or complex pointer-based algorithms (where the address of an object is sort of like an abstract representation of the object itself).
I've come to realize that understanding pointers in C is not a skill, it's an aptitude. In first year computer science classes, there are always about 200 kids at the beginning of the semester, all of whom wrote complex adventure games in BASIC for their PCs when they were 4 years old. They are having a good ol' time learning C or Pascal in college, until one day the professor introduces pointers, and suddenly, they don't get it. They just don't understand anything any more. 90% of the class goes off and becomes Political Science majors, then they tell their friends that there weren't enough good looking members of the appropriate sex in their CompSci classes, that's why they switched. For some reason most people seem to be born without the part of the brain that understands pointers. Pointers require a complex form of doubly-indirected thinking that some people just can't do, and it's pretty crucial to good programming. A lot of the ""script jocks"" who started programming by copying JavaScript snippets into their web pages and went on to learn Perl never learned about pointers, and they can never quite produce code of the quality you need.
That's the source of all these famous interview questions you hear about, like ""reversing a linked list"" or ""detect loops in a tree structure.""
Sadly, despite the fact that I think that all good programmers should be able to handle recursion and pointers, and that this is an excellent way to tell if someone is a good programmer, the truth is that these days, programming languages have almost completely made that specific art unnecessary. Whereas ten years ago it was rare for a computer science student to get through college without learning recursion and functional programming in one class and C or Pascal with data structures in another class, today it's possible in many otherwise reputable schools to coast by on Java alone.
A lot of programmers that you might interview these days are apt to consider recursion, pointers, and even data structures to be a silly implementation detail which has been abstracted away by today's many happy programming languages. ""When was the last time you had to write a sorting algorithm?"" they snicker.
Still, I don't really care. I want my ER doctor to understand anatomy, even if all she has to do is put the computerized defibrillator nodes on my chest and push the big red button, and I want programmers to know programming down to the CPU level, even if Ruby on Rails does read your mind and build a complete Web 2.0 social collaborative networking site for you with three clicks of the mouse.
Even though the format of the interview is, superficially, just a candidate writing some code on the whiteboard, my real goal here is to have a conversation about it. ""Why did you do it that way?"" ""What are the performance characteristics of your algorithm?"" ""What did you forget?"" ""Where's your bug?""
That means I don't really mind giving programming problems that are too hard, as long as the candidate has some chance of starting out, and then I'm happy to dole out little hints along the way, little toeholds, so to speak. I might ask someone, say, to project a triangle onto a plane, a typical graphics problem, and I don't mind helping them with the trig (SOH-CAH-TOA, baby!), and when I ask them how to speed it up, I might drop little hints about look-up tables. Notice that the kinds of hints I'm happy to provide are really just answers to trivia questions-the kinds of things that you find on Google.
Inevitably, you will see a bug in their function. So we come to question five from my interview plan: ""Are you satisfied with that code?"" You may want to ask, ""OK, so where's the bug?"" The quintessential Open Ended Question From Hell. All programmers make mistakes, there's nothing wrong with that, they just have to be able to find them. With string functions in C, most college kids forget to null-terminate the new string. With almost any function, they are likely to have off-by-one errors. They will forget semicolons sometimes. Their function won't work correctly on 0 length strings, or it will GPF if malloc fails... Very, very rarely, you will find a candidate that doesn't have any bugs the first time. In this case, this question is even more fun. When you say, ""There's a bug in that code,"" they will review their code carefully, and then you get to see if they can be diplomatic yet firm in asserting that the code is perfect.
As the last step in an interview, ask the candidate if they have any questions. Remember, even though you're interviewing them, the good candidates have lots of choices about where to work and they're using this day to figure out if they want to work for you.
Some interviewees try to judge if the candidate asks ""intelligent"" questions. Personally, I don't care what questions they ask; by this point I've already made my decision. The trouble is, candidates have to see about five or six people in one day, and it's hard for them to ask five or six people different, brilliant questions, so if they don't have any questions, fine.
I always leave about five minutes at the end of the interview to sell the candidate on the company and the job. This is actually important even if you are not going to hire them. If you've been lucky enough to find a really good candidate, you want to do everything you can at this point to make sure that they want to come work for you. Even if they are a bad candidate, you want them to like your company and go away with a positive impression.
Ah, I just remembered that I should give you some more examples of really bad questions.
First of all, avoid the illegal questions. Anything related to race, religion, gender, national origin, age, military service eligibility, veteran status, sexual orientation, or physical handicap is illegal here in the United States. If their resume says they were in the Marines, you can't ask them, even to make pleasant conversation, if they were in Iraq. It's against the law to discriminate based on veteran status. If their resume says that they attended the Technion in Haifa, don't ask them, even conversationally, if they are Israeli, even if you're just making conversation because your wife is Israeli, or you love Felafel. It's against the law to discriminate based on national origin.
Next, avoid any questions which might make it seem like you care about, or are discriminating based on, things which you don't actually care about or discriminate based on. The best example of this I can think of is asking someone if they have kids or if they are married. This might give the impression that you think that people with kids aren't going to devote enough time to their work or that they are going to run off and take maternity leave. Basically, stick to questions which are completely relevant to the job for which they are interviewing.
Finally, avoid brain teaser questions like the one where you have to arrange 6 equal length sticks to make exactly 4 identical perfect triangles. Or anything involving pirates, marbles, and secret codes. Most of these are ""Aha!"" questions-the kind of question where either you know the answer or you don't. With these questions knowing the answer just means you heard that brain teaser before. So as an interviewer, you don't get any information about ""smart/get things done"" by figuring out if they happen to make a particular mental leap.
In the past, I've used ""impossible questions,"" also known as ""back of the envelope questions."" Classic examples of this are ""How many piano tuners are there in Seattle?"" The candidate won't know the answer, but smart candidates won't give up and they'll be happy to try and estimate a reasonable number for you. Let's see, there are probably... what, a million people in Seattle? And maybe 1% of them have pianos? And a piano needs to be tuned every couple of years? And it takes 35 minutes to tune one? All wrong, of course, but at least they're attacking the problem. The only reason to ask a question like this is that it lets you have a conversation with the candidate. ""OK, 35 minutes, but what about travel time between pianos?""
""Good point. If the piano tuner could take reservations well in advance they could probably set up their schedule to minimize travel time. You know, do all the pianos in Redmond on Monday rather than going back and forth across 520 three times a day.""
A good back-of-the-envelope question allows you to have a conversation with the candidate that helps you form an opinion about whether they are smart. A bad ""Aha!"" pirate question usually results in the candidate just sort of staring at you for a while and then saying they're stuck.
If, at the end of the interview, you've convinced yourself that this person is smart and gets things done, and four or five other interviewers agree, you probably won't go wrong in hiring them. But if you have any doubts, you're better off waiting for someone better.
The optimal time to make a decision about the candidate is about three minutes after the end of the interview. Far too many companies allow interviewers to wait days or weeks before turning in their feedback. Unfortunately, the more time that passes, the less you'll remember.
I ask interviewers to write immediate feedback after the interview, either a ""hire"" or ""no hire"", followed by a one or two paragraph justification. It's due 15 minutes after the interview ends.
If you're having trouble deciding, there's a very simple solution. NO HIRE. Just don't hire people that you aren't sure about. This is a little nerve wracking the first few times-what if we never find someone good? That's OK. If your resume and phone-screening process is working, you'll probably have about 20% hires in the live interview. And when you find the smart, gets-things-done candidate, you'll know it. If you're not thrilled with someone, move on.
	"
https://www.joelonsoftware.com/2006/10/25/the-guerrilla-guide-to-interviewing-version-30-now-shipping/,The Guerrilla Guide to Interviewing: version 3.0 now shipping!,2006-10-25T00:09:32+00:00,2016-12-11T23:31:14+00:00,Joel Spolsky,News,"
	""A motley gang of anarchists, free-love advocates, and banana-rights agitators have hijacked The Love Boat out of Puerto Vallarta and are threatening to sink it in 7 days with all 616 passengers and 327 crew members unless their demands are met. The demand? A million dollars in small unmarked bills, and a GPL implementation of WATFIV, that is, the esteemed Waterloo Fortran IV compiler. (It's surprising how few things the free-love people can find to agree on with the banana-rights people.)""
The Guerrilla Guide to Interviewing (version 3.0)
The original version of the Guerrilla Guide, published here in 2000, was an internal Fog Creek hiring guide. Version 2.0 was a major revision that appeared in the book Joel on Software. This 3.0 version is another major rewrite which reflects some of the changes in the industry over the last few years, and incorporates some new things I've learned about interviewing.
	"
https://www.joelonsoftware.com/2006/10/24/the-phone-screen/,The Phone Screen,2006-10-24T00:09:31+00:00,2016-12-11T23:32:46+00:00,Joel Spolsky,News,"
	""Before moving on to a full-fledged in-person interview, we usually use a phone screen to make sure that we're not wasting time and money on someone who is just seriously not smart.""
The Phone Screen
	"
https://www.joelonsoftware.com/2006/10/12/book-review-beyond-java/,Book Review: Beyond Java,2006-10-12T00:09:30+00:00,,Joel Spolsky,News,"
	Programmers under the age of thirty probably don't realize why Aged Senile Programmers like me are so slow to adopt exciting new programming languages the day they come out, and why we roll our eyes at hip bandwagon ideas that sell books and consulting engagements (forgive me if I don't seem excited enough about your new book, ""Extreme UML Refactoring Patterns"").
It's probably because we read No Silver Bullet, a stunningly important essay from way back in 1986, by Frederick P. Brooks (he of Mythical Man-Month) that has proven again and again to be spot-on.
Programming consists of overcoming two things: accidental difficulties, things which are difficult because you happen to be using inadequate programming tools, and things which are actually difficult, which no programming tool or language is going to solve. An example of an accidental difficulty is manual memory management, e.g. ""malloc"" and ""free,"" or the singleton classes people create in Java because they don't have top level functions. An example of something which is actually difficult is dealing with the subtle interactions between different parts of a program, for example, figuring out all the implications of a new feature that you just added.
Improvements in programming languages can eliminate accidental difficulties, but after you've done that, you're left with the actual complexity of software development, so the No Silver Bullet theory basically warns us to expect diminishing returns from new technologies. I'm not really doing justice to Brooks' argument, so if you haven't read No Silver Bullet recently, I would highly recommend it.
There have been about five great advances, since the 1950s, in eliminating accidental difficulties in programming. These are, very broadly:
Assemblers
Algebraic languages (including Fortran)
Structured languages (Algol-60 and C)
Declarative languages (including SQL)
Memory-managed languages (including Lisp, VB, and Java)
So the question is, what's number 6? 
Bruce Tate's book Beyond Java tries to address that, and does a good job of explaining why so many experienced Java programmers are getting fed up with that language and moving to Python and Ruby.
On page 56 and page 57, Steve Yegge, who didn't actually write the book, but plays an important walk-on role, bangs out the list. These are actually the most important two pages of the book, because these are the things that Python and Ruby (and, underappreciated, JavaScript) actually solve.
Although Stevey lists lots of accidental difficulties in Java, when you read the book, you will notice a theme, which seems to be that it's explicit typing, where the programmer is asked to declare the type of things, that leads to most of the problems. For example, the inability to express data in Java code is mostly just a side effect of the requirement that types be declared explicitly. Yes, there are other problems in Java, but this is The Big Hairy Problem right at the heart.
To a historian, it's starting to look like type declarations are one of those accidental difficulties that good programming languages can eliminate. Beyond Java is a good summary of the arguments and worth reading.
	"
https://www.joelonsoftware.com/2006/10/11/dzhoel-o-programmirovanii-only-250-rubles/,Джоэл о программировании – only 250 rubles!,2006-10-11T00:09:29+00:00,,Joel Spolsky,News,"
	The Russian version of Joel on Software just came out!
I have no idea who those people are on the cover.
	"
https://www.joelonsoftware.com/2006/10/09/new-feature-job-search/,New Feature: Job Search,2006-10-09T00:09:28+00:00,,Joel Spolsky,News,"
	When we opened the job listings section I had originally imagined people would just read through the entire list to see if there were any interesting jobs.
In the first month, though, we got about 420 listings; there are 174 live right now: too many to scan. So we added a new search feature:
The best part is that once you set up a search, you can subscribe to it using RSS. I imagine this will be especially interesting if you're looking for a job outside of Silicon Valley or New York. Right now 50% of the job listings are for jobs within 100 miles of either New York, NY or Palo Alto, CA, but if you're from, say, Atlanta, and you want to stay there, but would love to hear about new opportunities, run the search and subscribe to the RSS feed and you'll automatically find out when new jobs are posted in your area.
Intern Noah, shown at right wearing the official Fog Creek intern uniform while singing the Fog Creek anthem, coded the UI for this, but Stanford wanted him back for classes, so I finished implementing the search feature myself over the last two weeks. I got the ZIP Code database from zipcodeworld.com and the Canadian postal code data from zipcodedownload.com (inexplicably missing H0H 0H0, the Postal code for Santa Claus at the North Pole, but that might be because they couldn't decide what to put in the longitude column). I got the formula for great circle distances using Ed Williams' Aviation Formulary and double-checked the results using the incredibly cool Great Circle Mapper. Of course, when you're looking for points that are within 20 miles of a given longitude and latitude, it's not that big a deal to pretend the Earth is flat and just use the Pythagorean Theorem, but of course, then you have to convert degrees to miles and suddenly it's just as hard to do it the wrong way as it would be to do it the right way.
	"
https://www.joelonsoftware.com/2006/11/30/pump-n-dump-spam/,Pump ‘n’ dump spam,2006-11-30T00:09:44+00:00,,Joel Spolsky,News,"
	Laura Frieder and Jonathan Zittrain: ""The average investor who buys a stock on the day it is most heavily touted and sells it 2 days after the touting ends will lose approximately 5.5%. For the top half of most thoroughly touted stocks, ... a spammer who buys at the ask price on the day before unleashing touts and sells at the bid price on the day his or her touting is the heaviest will, on average, earn 5.79%.""
Leonard Richardson has a site which monitors daily stock spam activity. You can see from his charts that buying these scammy penny stocks is a guaranteed way to lose money.
Leonard, by the way, is the co-author of Ruby Cookbook, 906 pages of shiny, nearly perfect Ruby code with detailed explanations of everything, this book is a fantastic way to learn Ruby. 
His wife works at Fog Creek Software; if you've emailed us lately and heard back from someone named Sumana, that's her.
	"
https://www.joelonsoftware.com/2006/11/29/using-source-control-tools-on-huge-projects/,Using source control tools on huge projects,2006-11-29T00:09:43+00:00,,Joel Spolsky,News,"
	Of all the things broken at Microsoft, the way they use source control on the Windows team is not one of them.
A young Windows engineer writes:
""... prior to the restart effort of Longhorn, there were about seven [branches], reverse-integrating into one main branch every two or three weeks perhaps. Now, imagine several thousand developers checking in directly into seven branches. This will lead to two things:
""1. you check in frequently, and there's a very high chance of either breaking the build, or breaking functionality in the OS, or 2., as a counter-reaction, you don't check in very often, which clearly is bad, since now you don't have a good delta history of what you did.
""So this clearly didn't scale. As part of the restart effort, we decided that each team would get its own feature branch, each feature area (multiple teams) would go up to an aggregation branch, and those would lead up to the final main branch. (As such there's now north of a hundred branches in tiers, leading up to about six aggregation branches.) Teams were free to choose how many sub-feature branches they wanted, if any, and they were free to choose how often they wanted to push up their changes to the aggregation branch. As part of the reverse-integration (RI, i.e. pushing up) process, various quality gates had to pass, including performance tests. Due to how comprehensive those gates ended up being, this would take at least a day to run, plus perhaps a day or two to triage issues if any cropped up; so there was a possibly considerable cost to doing an RI in the first place. However, these gates were essential in upholding the quality of the main branch, and had they not existed, the OS would have never shipped. I suppose it's one of those 'what doesn't kill you...' type deals.
""Some teams did manage to manufacture pathological cases for themselves where changes wouldn't RI up for several months, but that's the individual team's fault (or their release management), and not the process. Generally, the more disciplined teams were about quality, the faster and more frequently they'd RI. From what you know about the varying levels of stability/quality of components of the OS, it's pretty easy to map that back to RI velocity and so forth, since it all goes hand-in-hand pretty nicely.""
 When you're working with source control on a huge team, the best way to organize things is to create branches and sub-branches that correspond to your individual feature teams, down to a high level of granularity. If your tools support it, you can even have private branches for every developer. So they can check in as often as they want, only merging up when they feel that their code is stable. Your QA department owns the ""junction points"" above each merge. That is, as soon as a developer merges their private branch with their team branch, QA gets to look at it and they only merge it up if it meets their quality bar.
 The best way to imagine this is to look at this screenshot from Accurev. As you can see there are a lot of ""leaf"" branches but as things get merged up towards the trunk, they have to pass through QA which basically just checks that it's OK and then merges it closer to the trunk. By the way, Accurev makes a nice source control system that is designed for this style of intensive branching and merging. The Windows team itself uses their own source control system which, it is rumoured, is just an old version of Perforce for which they bought a source license; Perforce has a reputation among developers for being expensive, solid, and extremely fast when working with extremely large source code bases.
	"
https://www.joelonsoftware.com/2006/11/28/shutdown-in-os-x/,Shutdown in OS X,2006-11-28T00:09:42+00:00,,Joel Spolsky,News,"
	Arno Gourdol on the design of the off button in Mac OS X: ""And finally, how often do you need to manually set your computer to Sleep? I just close the lid of my MacBook and it goes to sleep: a simple mechanical, physical interaction: no need for a software command.""
Right. Here's what the current Mac OS X shut down dialog looks like:
PS: We still have a few hundred copies of Aardvark'd (the movie) in stock. That's the documentary about summer internships at Fog Creek and the making of Copilot. They make great gifts.
	"
https://www.joelonsoftware.com/2006/11/24/how-many-microsofties-does-it-take-to-implement-the-off-menu/,How many Microsofties does it take to implement the Off menu?,2006-11-24T00:09:41+00:00,,Joel Spolsky,News,"
	Moishe Lettvin, who spent a year working on the menu I criticized yesterday: ""So that nets us a conservative estimate of 24 people involved in this feature.""
Every piece of evidence I've heard from developers inside Microsoft supports my theory that the company has become completely tangled up in bureaucracy, layers of management, meetings ad infinitum, and overstaffing. The only way Microsoft has managed to hire so many people has been by lowering their hiring standards significantly. In the early nineties Microsoft looked at IBM, especially the bloated OS/2 team, as a case study of what not to do; somehow in the fifteen year period from 1991 - 2006 they became the bloated monster that takes five years to ship an incoherent upgrade to their flagship product.
	"
https://www.joelonsoftware.com/2006/11/21/choices-headaches/,Choices = Headaches,2006-11-21T00:09:40+00:00,,Joel Spolsky,"Software designer, News","
	I'm sure there's a whole team of UI designers, programmers, and testers who worked very hard on the OFF button in Windows Vista, but seriously, is this the best you could come up with?
Every time you want to leave your computer, you have to choose between nine, count them, nine options: two icons and seven menu items. The two icons, I think, are shortcuts to menu items. I'm guessing the lock icon does the same thing as the lock menu item, but I'm not sure which menu item the on/off icon corresponds to.
On many laptops, there are also four FN+Key combinations to power off, hibernate, sleep, etc. That brings us up to 13 choices, and, oh, yeah, there's an on-off button, 14, and you can close the lid, 15. A total of fifteen different ways to shut down a laptop that you're expected to choose from.
The more choices you give people, the harder it is for them to choose, and the unhappier they'll feel. See, for example, Barry Schwartz's book, The Paradox of Choice. Let me quote from the Publishers Weekly review: ""Schwartz, drawing extensively on his own work in the social sciences, shows that a bewildering array of choices floods our exhausted brains, ultimately restricting instead of freeing us. We normally assume in America that more options ('easy fit' or 'relaxed fit'?) will make us happier, but Schwartz shows the opposite is true, arguing that having all these choices actually goes so far as to erode our psychological well-being.""
The fact that you have to choose between nine different ways of turning off your computer every time just on the start menu, not to mention the choice of hitting the physical on/off button or closing the laptop lid, produces just a little bit of unhappiness every time.
Can anything be done? It must be possible. iPods don't even have an on/off switch. Here are some ideas.
If you've spoken to a non-geek recently, you may have noticed that they have no idea what the difference is between ""sleep"" and ""hibernate."" They could be trivially merged. One option down.
Switch User and Lock can be combined by letting a second user log on when the system is locked. That would probably save a lot of forced-logouts anyway. Another option down.
Once you've merged Switch User and Lock, do you really need Log Off? The only thing Log Off gets you is that it exits all running programs. But so does powering off, so if you're really concerned about exiting all running programs, just power off and on again. One more option gone.
Restart can be eliminated. 95% of the time you need this it's because of an installation which prompted you to restart, anyway. For the other cases, you can just turn the power off and then turn it on again. Another option goes away. Less choice, less pain.
Of course, you should eliminate the distinction between the icons and the menu. That eliminates two more choices. We are down to:
Sleep/HibernateSwitch User/LockShut Down
What if we combined Sleep, Hibernate, Switch User and Lock modes? When you go into this mode, the computer flips to the ""Switch User"" screen. If nobody logs on for about 30 seconds, it sleeps. A few minutes later, it hibernates. In all cases, it's locked. So now we've got two options left:
(1) I am going away from my computer now(2) I am going away from my computer now, but I'd like the power to be really off
Why do you want the power off? If you're concerned about power usage, let the power management software worry about that. It's smarter than you are. If you're going to open the box and don't want to get shocked, well, just powering off the system doesn't really completely make it safe to open the box; you have to unplug it anyway. So, if Windows used RAM that was effectively nonvolatile, by swapping memory out to flash drives during idle time, effectively you would be able to remove power whenever you're in ""away"" mode without losing anything. Those new hybrid hard drives can make this super fast.
So now we've got exactly one log off button left. Call it ""b'bye"". When you click b'bye, the screen is locked and any RAM that hasn't already been copied out to flash is written. You can log back on, or anyone else can log on and get their own session, or you can unplug the whole computer.
Inevitably, you are going to think of a long list of intelligent, defensible reasons why each of these options is absolutely, positively essential. Don't bother. I know. Each additional choice makes complete sense until you find yourself explaining to your uncle that he has to choose between 15 different ways to turn off a laptop.
This highlights a style of software design shared by Microsoft and the open source movement, in both cases driven by a desire for consensus and for ""Making Everybody Happy,"" but it's based on the misconceived notion that lots of choices make people happy, which we really need to rethink.
	"
https://www.joelonsoftware.com/2006/11/15/from-the-you-call-this-agile-department/,From the “you call this agile?” department,2006-11-15T00:09:39+00:00,,Joel Spolsky,News,"
	Dmitri Zimine has a hypothetical story of how interrupting a programmer for a two hour emergency request needed to close some sale can actually waste two weeks. ""If Sarah spends just two hours thinking of her old project, she loses a day of productive work on the new one,"" he says.
I agree that context switching is harmful. Absolutely.
Dmitri points out that the development manager should ""tell the developer to stick to the original plan. Offer to protect her from switching her mind context. Remind her how cool it is to work single-mindedly on an important and interesting project. Ensure her that I'll handle the pressure."" 
This sounds like something I would agree with, too. I completely agree that management has a responsibility to provide an abstraction layer for programmers, so programmers can pretend that the outside world doesn't exist while they work on code.
However, something in the conclusion here strikes me as odd. Dmitri is only looking at one side of the cost/benefit equation. He's laid out a very convincing argument why Sarah should not interrupt her carefully planned two week iteration, but he hasn't even mentioned arguments for the other side: the important sale that will be lost.
Agile development is supposed to be about agility. It's supposed to mean that you can change plans quickly. It's not supposed to be about rigid programming teams who are so slavishly devoted to their Two Week Plans that they can't rearrange their schedule a bit to serve the needs of the customer. Dmitri's conclusion, I'm afraid, strikes me as the very opposite of agile development. Agile is not supposed to be about swapping out one set of bureaucratic, rigid procedures for another equally rigid set of procedures that still doesn't take customer's needs into account.
I don't know the details of this hypothetical example. Maybe in real life the customer's needs weren't really that urgent. But maybe they were? Maybe this customer would have saved the company and made everyone a web 3.0 millionaire, but Sarah's doctrinaire insistence on following the Two Week Plan (because it was ""agile"") made them lose interest? Not sure... there's only one side of the story here.
Recently Microsoft released a new version of Internet Explorer. They introduced a bug in proxy detection code which caused a very small number of Copilot customers to experience crashes. Meanwhile, the Copilot development team, informally known inside Fog Creek as ""Ben,"" was busy trying to get Copilot 2.0 out the door. But you know what? Our customers who had installed IE 7 were experiencing crashes. This was not acceptable. Ben stopped what he was doing, installed the old version of the compiler, checked out the old source code, fixed the crash, and pushed a patch out to the server. It interrupted and delayed Copilot 2.0, and the context switching was harmful. But it was still the right decision to make. Being able to do mentally difficult things like context switching makes our product better. This Is Why Programmers Get The Big Bucks. The whole reason you gave them Aeron chairs, unlimited M&Ms, free catered lunches, and the kickass computers with the 30"" LCDs is so they can deal with new bugs Microsoft introduced in their code by messing up a DLL that used to work.
Yes, context switching is painful. Yes, you need to take into account the costs of context switching when you interrupt someone's work. But every decision has pros and cons and when I hear a manager who is just talking about the cons without considering the pros, that manager is not doing their job.
	"
https://www.joelonsoftware.com/2006/11/09/oh-the-emails-youll-get/,"Oh, the emails you’ll get…",2006-11-09T00:09:38+00:00,,Joel Spolsky,News,"
	A management consultant at Bain wrote me a nice email, that included the following sentence:
""Our team is conducting a benchmarking effort to gather an outside-in view on development performance metrics and best practice approaches to issues of process and organization from companies involved in a variety of software development (and systems integration).""
I didn't understand a thing he wrote. The email contained a lot of words (""benchmarking,"" ""outside in,"" ""performance metrics,"" ""best practice,"" ""process and organization"") each of which set off a loud buzzing alarm-like sound in my head. The noise from the buzzing was so loud and so distracting that I found myself completely unable to parse the email.
I think it was something about measuring performance in software organizations? aHA! YES! I know all about that. You can't do that. Quit it. Stop it.
Listen. Let me tell you a secret about management consulting companies and software organizations.
Here is how the game is played.
Big Consulting Company calls up Big Oil Company. ""Hey,"" they say, ""do you guys need help being more productive developing software?""
Big Oil Company says, ""Yeah, sure, whatever, we'll buy anything,"" and they buy a $1,000,000 software productivity consulting deal.
The consulting company comes on site, measures a bunch of bogus things like Lines of Code Per Developer, or, if they're really fancy shmancy, Number of Function Points Per Programmer Per Day. Then they tell the oil company, ""Gosh, you're only getting 73.844% productivity. Pay us another $2,000,000 and we'll double your productivity.""
Oil company pays the $2m.
Consulting company comes in, gets all the programmers in a room, tells them all about Function Points and stuff, and how productivity is REALLY IMPORTANT.
Programmers remember that scene from Office Space where Bob and Bob, the consultants, recommended all the people to get fired.
Programmers start writing a heck of a lot more function points. For example you can triple the number of function points in your code simply by round tripping everything through an XML file. Big waste of time, prone to bugs, does nothing, but each file you touch adds a function point. W00t!
Consulting company comes back, measures again, and lo and behold, with all the round trips through XML the function point count is up drastically. Consultant announces that Oil Company is now at 151.29% productivity. MISSION ACCOMPLISHED.
But there's one more step. Now the consultant goes to another Oil Company. ""Hey, did you know your peers are getting 151.29% productivity? How are you doing?""
Oil Company #2 is scared. They pay for the initial study. They're only getting 83.948% productivity. Shit. And the cycle starts anew. 
The whole fraud is only possible because performance metrics in knowledge organizations are completely trivial to game. The best part is that most management consultants, the stunningly good-looking, bright, earnest chipmunks with 4.0s in Russian Lit from Harvard who work for these companies, have absolutely no way of knowing this, so they can go through this whole exercise without even knowing that they're doing it! They get all the way through the 2-year associate program on their way to MBA school without even realizing that they haven't done a goddamn thing about productivity, all they've done is caused a fairly pointless transfer of wealth from ExxonMobilConoco to BainMcKinseyGartner's senior partners. And it's a lot of fun! First class flights to Houston and Oslo! Helping the world be more productive! Rock on, young stunningly-good-looking Management Consultant.
	"
https://www.joelonsoftware.com/2006/11/09/the-infinite-music-collection/,The infinite music collection,2006-11-09T00:09:37+00:00,,Joel Spolsky,News,"
	Every Sunday morning when I was 12, I would listen to Casey Kasem on KQEO and write down a list of any new or upcoming songs. Then I would take my weekly allowance of $5 straight to the record store and spend it on 45s. They were a dollar each. Eventually I had a pretty good collection of, um, maybe 100 records, which my mother is now begging me to throw out.
What I never imagined is that when I grew up, I'd be able to expand my record collection to about 2,500,000 songs for just under $10 a month. I've been subscribing to Rhapsody (formerly Listen.com, now owned by Real) for the last four years or so, and it's a great way to listen to music at the computer. 
But laptops have lousy speakers, and I had been looking for a way to pump the music from the computer into other rooms of the house, so last January I finally got a Sonos system, which is probably the coolest piece of technology I've ever bought. Ever.
It's kind of a confusing system-a combination between a stereo and a computer and a wifi network-so let me explain a bit how it works.
First, you get some ZonePlayers: one for each room where you want music. There are two kinds of ZonePlayers. The big one has its own amplifier. You just plug speakers into it. The little one doesn't have an amplifier. You plug it in as an aux input on an existing stereo system.
You can get up to 32 of these. I bought three: one in the living room, one in the kitchen, and one in a bathroom. Usually, you put one of the ZonePlayers near your computer and connect it with an ethernet connection to your network; all the other ZonePlayers magically find each other using WiFi, so you don't have to connect anything. It really is magical. The ease of configuration and setup is astonishing. It's about ten times easier than installing a printer. It's fifty times easier than getting Bluetooth to work. The Sonos developers obviously put a huge amount of work into making setup and configuration completely painless.
Next, you get one (or more) handheld controllers. These also use WiFi, and they also find the rest of the system pretty much automatically. They have a terrific user interface, an iPod-like thumbwheel, a big bright LCD color screen, and all kinds of brilliant UI touches. For example, to save batteries, the screen dims when you put it down, but if you pick it up again, a motion detector lights up the screen.
Finally, you can install the controller software on any home computers you have: Windows or Mac. This is a desktop application that more or less behaves exactly like the handheld controllers.
Now you pick up any of the controllers anywhere in the house, tell it what rooms you want to control, and browse through your music collection. You can play any music files stored on any attached computer: MP3s, WMAs, AACs, OGGs, etc. You can play internet radio stations-I use this to listen to Seattle's NPR station to hear All Things Considered three hours later than I can get it in New York. If you want to play music from an iPod, an old vinyl turntable, or an eight track tape player, just plug it into the back of any ZonePlayer.
And, in the ultimate coolness, if you get a subscription to Rhapsody Unlimited, you can browse and play any of Rhapsody's 2,500,000 songs anywhere in your house.
So now if one of my guests is complaining about the music, I hand them the controller, and they browse around for something they like and play that instead.
The one thing I can't stop talking about is what a nice job Sonos has done with the user interface. This really is a zero-configuration system. Everything is easy. A long time ago I wrote: ""Every time you provide an option, you're asking the user to make a decision. That means they will have to think about something and decide about it."" Users don't want to decide if the WiFi network should use WEP or WPA. They do want to decide whether to listen to the Big Mountain version of Baby, I Love Your Way or the Peter Frampton version. Or one of the ten other versions Rhapsody has online (check out Mig Ayesa's). No extra charge.
Geek Stuff
I asked Nick Millington, the Director of Software Engineering at Sonos, to tell me a little bit about the software development environment. It turns out the controller and the ZonePlayers are running Linux. ""We started with a standard Linux kernel,"" he told me, ""then added some of our own device drivers for audio, our buttons, scroll wheel, and other controls, and networking (the latter employing strict Office Hungarian in its source code I might add, in possibly a 'first' for Linux kernel modules)."" 
More from Nick: ""All of our applications use a shared code layer written in C++ for their basic network communications protocol stack. The controller applications share a 'household' data model that manages knowledge of the set of ZonePlayers that you own, how they are linked together, what music is playing, and so forth. Finally, there is a platform specific UI layer for each controller: a custom-built UI layer on the CR100, a Win32 UI based on WTL (Windows Template Library) on Windows, and a Cocoa/Objective C UI layer on the Macintosh. WTL and Cocoa have both worked out well for us. WTL succeeds in taking away a lot of the drudgery of programming directly against the metal without hiding how Windows actually works to the point of being dangerous because developers forget how to fly without the autopilot. Cocoa has been nice as well-I'm sure everyone in the Mac world knows about this, but coming from Windows I found its approach to memory management (where each pump of the message loop gets you effectively a fresh 'heap' that is automatically cleared when returning to the message loop) pretty cool. It allows you to actually write code that returns something like a string, without putting in place the overhead of a garbage collection scheme.
""We use the de facto 'native' compilers for the platform we are building on (gcc for Linux, MSVC for Windows, and the gcc that comes with Xcode on the Mac). It has been relatively easy to keep our code portable across these 3 compilers, which we enforce by doing daily builds on all the platforms. The build is all wrapped up into one nightly cron job that checks everything out of source control, kicks off the Linux builds, contacts the Windows and Mac build machines to do their part of the work, and waits for everything to finish up. Then end product is an 'online update' package that gets posted directly to our intranet upgrade server and allows testers to install our daily builds on all the hardware in their test systems.""
	"
https://www.joelonsoftware.com/2006/11/09/fogbugz-as-a-help-desk-application/,FogBugz as a help desk application,2006-11-09T00:09:36+00:00,,Joel Spolsky,News,"
	
Kiere: ""After using my new help desk system for about 100 tickets and 45 knowledge base articles, I can honestly say this has been my favorite tool yet. It is fast, productive and simple.""
	"
https://www.joelonsoftware.com/2006/11/01/whats-a-sql-injection-bug/,What’s a SQL Injection Bug?,2006-11-01T00:09:35+00:00,,Joel Spolsky,News,"
	I tried to sign up for an online site.
The signup page wanted a secret question and secret answer. For the secret question, I put ""what is aunt Vera's cat's color"". It complained about the apostrophe in the question. OK, fine. I deleted that apostrophe.
For the secret answer, I put ""Aunt Vera doesn't have a cat.""
And I got this:
1064: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 't have a cat', 'male')' at line 1
This means that the programmers are in the habit of taking strings that they got from the user (i.e. GET or POST parameters) and concatenating them together with other bits and pieces of SQL to generate SQL statements.
For example, in PHP with PostgreSQL:
$x = pg_query(""select * from accounts where name='"" . $_GET[""name""] . ""'"");
(For non-PHP programmers: ""."" is the string concatenation operator).
I'm not surprised that they are in the habit of doing this; a lot of programming books, tutorials, and documentation use examples like this. 
Unfortunately it's a gigantic security hole called SQL injection. 
The user, if malicious, can close the string that you opened, finish your select statement, put in a semicolon (the SQL statement separator), and then type any SQL code they want, and it will run.
So, for example, if the user supplies this as name:
foo'; delete from accounts --
... the SQL statement executed will be:
select * from accounts where name='foo'; delete from accounts --'
... which will do exactly what it looks like: it will delete the entire table of accounts.
This is an extremely common problem: Michael Sutton did a little research project and found that 11.3% of web applications have SQL injection vulnerabilities.
	"
https://www.joelonsoftware.com/2006/12/28/bribing-bloggers/,Bribing Bloggers,2006-12-28T00:09:52+00:00,,Joel Spolsky,News,"
	There's an interesting debate going on about whether bloggers should accept gifts from vendors. 
Lately Microsoft, working through their PR agency, Edelman, has been getting rather aggressive about trying to buy good coverage from bloggers. A few months ago they invited bloggers out to Seattle to meet Bill Gates, with all expenses paid (hotel, airfare, etc). Last week they send out a round of expensive laptops with Vista preinstalled. These are not loans, by the way: they're completely free laptops (""yours to keep!""). Here's the offer I received from a Microsoft employee:
I'm working on getting some hardware out to key community folks, and I'd like to offer you a review PC. I'd love to send you a loaded Ferrari 1000 courtesy of Windows Vista and AMD. Are you interested?
This would be a review machine, so I'd love to hear your opinion on the machine and OS. Full disclosure - while I hope you will blog about your experience with the pc, you don't have to. Also, you are welcome to send the machine back to us after you are done playing with it, or you can give it away on your site, or you can keep it. My recommendation is that you give it away on your site, but it's your call. Just let me know your opinion on Windows Vista and what you plan to do with it when the time comes.
Sounds nice, huh? What could be wrong with that?
Robert Scoble says ""it's an awesome idea."" He says that as long as the bloggers disclose that they got the laptops free, they're acting ethically. And he says that Edelman is just ""doing their job,"" which is therefore by definition ethical:
On Edelman's side? Is sending out laptops ethical? Of course! That's their job.
Scoble is wrong.
Just because it's someones job to do something, doesn't make it ethical. Robert, your logic is faulty. Unless you want to assume that anything that Edelman does in the name of promoting Microsoft is automatically ethical, this logical argument you are making is simply false. For example, if Edelman paid a bribe to a government official to standardize on Windows, that would not be ethical, even though it's their job.
So. Does disclosure work?
The theory here is that if a blogger admits to receiving a gift, the reader can make up their mind as to whether that blogger has any credibility on this topic. Imagine this innocuous series of events:
Blogger gets free Vista PC
Tries it out
Feels obliged to blog about it
Writes ""I got a free Vista PC. It has a really sharp-looking on-screen clock!""
Reader thinks, ""hmm, no credibility, but that's a nice looking clock there. Maybe I'll get Vista.""
Effectively Microsoft has bought publicity and goodwill. And even though the blogger has fully disclosed what happened, their message is corrupting the medium.
I've been thinking long and hard about this, and the only conclusion I can come to is that this is ethically indistinguishable from bribery. Even if no quid-pro-quo is formally required, the gift creates a social obligation of reciprocity. This is best explained in Cialdini's book Influence (a summary is here). The blogger will feel some obligation to return the favor to Microsoft.
These gifts reduce the public trust in blogs. Recently I wrote a nice article, for example, about Sonos. I bought the system with my own money, liked it, thought it had some great UI that programmers should pay attention to. Most people understood the article to be what it was: a positive review about a good product, influenced only by the fact that the product was good. But some people thought it was just a paid advertisement.
This is the most frustrating thing about the practice of giving bloggers free stuff: it pisses in the well, reducing the credibility of all blogs. I'm upset that people trust me less because of the behavior of other bloggers. Don't even get me started about PayPerPost.
Anyway. I do not have clean hands. I accepted that stupid cell phone from Sprint fully intending to never write about it, and later decided it was so bad I should just write a negative review. For a couple of years, I accepted a donation of colocation space and facilities from Peer 1 Network, but only because they were the best colocation facility and backbone provider I could find, and only because Joel on Software is really a non-profit, advertising-free site and I was happy to accept the sponsorship. Google donated a Search Appliance to provide search for Joel on Software, also mostly as a community service on their part, which was very nice. They probably intended to get some free publicity out of it. They did.
Microsoft's crazy offer, though, made me think a lot more about this whole thing, and I've decided that from this point forward I'm not accepting anything, full stop. Even if my moral logic is faulty, and there's nothing wrong with accepting gifts, I personally feel that it's not worth the reduced credibility. Who are the most trusted reviewers out there? Consumer Reports, probably. They don't take anything from vendors. They even buy everything they review at retail, which is what I'm going to do.
Today, Fog Creek Software pays the Peer 1 bills. I declined the Microsoft offer and bought my own fully-loaded Dell laptop (a D620) to try out Vista. My conclusions:
Do not, under any circumstances, consider upgrading an XP system to Vista... even if it's fairly new and even if it's Vista Supremo Premium Ultra-Capable.
When you get a new computer, if it comes with Vista pre-installed, that's when you'll upgrade.
Don't buy a new computer now just to get Vista. If your current system meets your needs, stick with it until you really need a new system. Vista is not reason enough for a new PC.
Need more details? Read Paul Thurrott's review.
It's impossible to be completely pure here. I'm not an isolated test lab in the middle of nowhere doing nothing other than testing products. The ways in which I am influenced are many. Disclosure is not always possible. I may forget things. Things can get blurry. I might have gone to a bookstore, looked at the Apress section (my publisher) to see if they have anything new and interesting, seen a good book, bought it, given it to one of my summer interns, and then it shows up in a critical scene in the Aardvark'd movie. And Gary Cornell, the publisher of Apress, is a close personal friend. OK, was that unethical? I'd have to live in a monastery to completely avoid those kinds of conflicts of interest. I'd have to bore everyone to tears to disclose them, and I might forget stuff, so disclosure is not even a practical answer.
I'll keep trying, though, to earn your trust.
This message was brought to you in part by Fog Creek Software, a company I started, which pays my salary and which allows me to work on Joel on Software during working hours using their equipment, and which also hosts the website Joel on Software, bought the rack of servers it's running on, and pays all the bandwidth bills. Fog Creek and I hope that you will feel goodwill towards us as a result and hopes you will consider evaluating our software products, and, if you find they meet your needs, we hope you will buy them so that we can afford to not only pay our programmers, staff, landlord, and bandwidth bills, but perhaps have a little bit of money left over to give the owners a dividend which, in my case, will probably go towards a new hot tub. By reading this article you are contributing, at least indirectly, to the Joel Gets a Hot Tub fund.
	"
https://www.joelonsoftware.com/2006/12/23/explaining-steve-gillmor/,Explaining Steve Gillmor,2006-12-23T00:09:51+00:00,,Joel Spolsky,News,"
	Nobody I know can understand a thing Steve Gillmor is talking about, mainly because he makes so many obscure references without explaining them. I thought as a public service I would provide a detailed exposition of his latest blog post, Bad Sinatra. My goal here was to explain just about everything, and I hope it's not too tedious. It works like the Talmud. First I've got a paragraph quoted directly from Steve. I've taken the liberty of adding hyperlinks, which are not in the original article, and correcting an accidental edit which renders one of the paragraphs nonsensical.
Then I went ahead and bolded all the terms that needed definition, including names that were relevant. Those are defined in the ""Rashi"" section below each paragraph.
Finally, I added my own commentary in the ""Tosefot"" section. The idea is that the Rashi stuff helps you understood what Gillmor literally meant, while the Tosefot section contains more in-depth commentary addressing the actual points he's trying to make.
It took me over three hours to research and explain all this, and, as you'll see if you follow closely, Gillmor's entire argument fell apart under scrutiny, so I don't think I'm going to be doing in-depth explanation like this again.
So without further ado, here's Bad Sinatra, with Rashi and Tosefot.
Bad Sinatra, by Steve Gillmor.
""Jonathan Schwartz has a problem. Me. I read his blog today, starting with the most recent post and eventually landing on one a few days ago about the resurgence of the thick client. Let me weigh in thusly : what a load of shit this is. When Sun leadership starts moving away from the Google sweet spot and toward god knows what users-love-client-code idiocy, it's big trouble for the Sun boys. Dave Winer is swimming in muddy waters too with his anti-Lucovsky Google-is-deprecating-SOAP of all things in favor of the Ajax RESTian Web-only API that Mark is evangelizing on Scoble's show.""
Rashi
Jonathan Schwartz: CEO and President of Sun Microsystems and blogger. Thick client: A software architecture in which custom applications are run on the desktop talking to a server. Compare to thin client, in which only a web browser is run on the desktop. Sun leadership: Schwartz. The Google sweet spot: Ajax, that is, web-based applications like Gmail which are neither too thin (plain HTML) nor too thick (heavyweight Java applets that need to be downloaded or custom applications) and with just the right compromise between functionality and simplicity. Users-love-client-code idiocy: Theory that desktop applications provide a better user experience. Dave Winer: Blogger and pundit. Lucovsky: (Mark), Google developer formerly of Microsoft. SOAP: Complex protocol for remote procedure calls, implemented by sending XML over HTTP (usually). RESTian: Using REST, a much simpler alternative to SOAP, implemented by sending a URL to a web server and getting back XML (usually). Mark: Lucovsky. Evangelizing: promoting. Scoble: (Robert), blogger and video interviewer.
""First, Jonathan. I went to a Sun press party tonight that was remarkable in its failure to deliver any promised executives. Dan Farber found a few lurking in the rear of the room, but no Jonathan, no Papadopoulos, no Fowler. I found myself longing for the good old McNealy days, when Scott's Microsoft jabs and hockey jive kept the room moving. A Google party a few weeks ago was in full swing before Sergey and Larry showed up, and their presence almost came as an afterthought. Marc Benioff threw a luncheon to announce the latest iterations of the Salesforce build-out, and instead of playing to the middle of the pack, excelled in a detail-rich deep dive into his company's mining of its customer base as the evolution of Microsoft's developer strategy. That's entertainment, folks.""
Rashi
Deliver: be attended by. Dan Farber: editor of ZDNet and CNET. Papadopoulos: (Greg), CTO and VP of R&D, Sun Microsystems. Fowler: (John), EVP Systems, Sun Microsystems. McNealy: (Scott), ex-CEO Sun, preceded Jonathan Schwartz, characterized by almost perpetual denigration of Microsoft in public. Hockey: McNealy liked ice-hockey. Sergey: Brin, co-founder of Google. Larry: Page, co-founder of Google. Marc Benioff: CEO, Salesforce.com. Salesforce: Web sales-force management software. Playing to the middle of the pack: Avoiding technical detail so as to remain comprehensible to mainstream journalists.
Tosefot
Mining Gillmor is president of and was a co-founder of AttentionTrust, a non-profit organization tightly connected to the for-profit startup RootMarkets, so it's safe to assume that he agrees with their belief that users on the Internet should own their attention data. For example, if a user goes to Amazon and visits certain product pages, Amazon obtains data about what that user is paying attention to. Under current practice, Amazon ""owns"" that data. Briefly, the AttentionTrust/RootMarkets idea is that the user should have a right to control that data, delete it from Amazon's servers if they choose, sell it to the highest bidder, etc. The ""sell it to the highest bidder"" part is where they hope to make their money, creating an exchange, Root Exchange where user's ""intentions"" can be traded. In practice this means trading leads: contact information for customers who have expressed a desire to purchase some commodity. For example a user might go to a website and say they're buying a house and want a mortgage; this lead would be traded on an exchange just like a stock or bond and lenders who wanted to write mortgage loans would bid on it. Participants in this exchange would be (presumably) required to abide by strict privacy rules and the principle that users own their attention data (i.e. they have the right to control the information that they are interested in a mortgage right now), which makes this an attempt to create a legitimate and ethical version of what has traditionally been a shady, boiler-room operation characterized by illicit markets for names and phone numbers of the elderly and the feeble-minded who are likely to fall for scams (c.f. Glengarry Glen Ross). Whether it works or not remains to be seen. In any case it is fair to assume that Gillmor strongly objects to Benioff's mining his customer database, which, according to the AttentionTrust philosophy, amounts to theft. 
Microsoft's developer strategy Benioff and Salesforce.com have a history of overstating the importance of their own work. Even though their product is primarily a sales force automation product, Salesforce.com advertising historically focused only on the way it was delivered, as a hosted web application, as if this was a more important aspect than the functionality of the web service itself. I was at a Salesforce.com presentation that started out with a quick five minute summary of the evolution of programming (Eniac, mainframes, minicomputers, microcomputers, and web-based applications) and then presented Salesforce's latest feature as if this was the next big step in the evolution of programming, on a par, say, with the shift from PCs to the web. The latest feature? Custom Fields. The highly savvy audience literally laughed at the pretense. Now, Microsoft's ""developer strategy"" probably refers to their massively successful strategy of creating platforms, especially Windows, and doing everything imaginable to make it easy and profitable for developers to create software for that platform, thus strengthening the value of the platform and creating massive network effects. Presumably what happened at the Salesforce.com luncheon was that Benioff described his company's efforts to mine its customer data as if this were an accomplishment on a par with Microsoft's greatly successful strategy of courting third-party developers. Gillmor mocks the hubris of this comparison. On the other hand, it seems more likely that Gillmor might just have been conflating two things Benioff was talking about: their own customer data mining and Salesforce.com's new platform strategy which encourages developers to write their own enterprise applications to run on Salesforce.com.
""I thought I would miss the end of the Gang more than I have. Mike Arrington's flareup with Sethi and his revolving news desk door would have made for a lively session or two, but Mike's week-later wrap of the Sethi situation blew away the bullshit and out-ValleyWagged Denton to boot. I've been pitching in with Jason to tighten up his Cast for the Kids, letting me troll the blogosphere for news bites without having to work too hard or miss the roundtable so much. I spent a great three days or so with Doc, Phil Windley, Kaliya, Dick Hardt, and Kim Cameron among others in the Identity Workshop, talked with Mike Vizard and Dana Gardner intermittently, and watched Robert Anderson and Cori Schlegel cross the line and merge GestureBank with the AttentionTrust only a few weeks behind schedule. And Gabe Rivera chimed in a few days ago in email asking what it would look like if I resurfaced. An eight-foot invisible rabbit.""
Rashi
Gang: The Gillmor Gang, Gillmor's group podcast, which recently ceased production. Mike Arrington: Editor and creator of TechCrunch and a sometime-member of The Gillmor Gang. Sethi: (Sam), former editor of the UK version of TechCrunch, fired by Arrington for reasons which this margin is too narrow to contain. Valleywag: Snarky, for-profit Silicon Valley gossip site. Denton: (Nick), creator of Valleywag. Jason: Calacanis, occasional member of The Gillmor Gang. Cast: Calacanis's new podcast. Troll the blogosphere: Read weblogs. Roundtable: The Gillmor Gang. Line: Finish line (he doesn't mean crossing an ethical line). GestureBank: Gillmor had left AttentionTrust for a period of time to set up GestureBank, which, with his return to AttentionTrust in September, was merged in.
Tosefot
Lively session or two: The Gillmor Gang often devoted a substantial amount of time to discussing fights and rows; most of the final two episodes were devoted to Jason Calacanis's departure from AOL.
Rabbit: Most of this paragraph appears to be here primarily to bring us up to date on Gillmor's latest doings, it is not related to the entry's main points about Jonathan Schwartz's comments on the thin client or Dave Winer's comments on web protocols.
""The thick client: why is Jonathan floating this lead balloon? To get some blogoversy? Probably. His slick sales pitches don't register, and one of the best guys on his feet in the business seems hamstrung by his day job. He should take a look at what Jon Udell is doing. The new show business is actionable information on demand, spiced with a healthy disrespect for marketing bullshit and strategic kindergarten. Take Edelman's alliance with Newsgator to provide pre-gamed conversations. Nice: avoid the messy run-up to PayPerPost stench, and go right for the stupid notion that people won't immediately look not at the approved conversation but at the telltale odor of the missing links. Attention: the ""customers"" are listening now. Think of the stream as meditation.""
Rashi
Blogoversy: Weblog controversy. Slick sales pitches: Most of Schwartz's weblog posts are earnest and unsubtle sales pitches for Sun's products. Don't register: As a result Schwartz's weblog has very little influence and is rarely linked to by other bloggers. It has only 2342 incoming links as reported by Technorati compared to, say, Scoble, who has 16,090. Hamstrung: Unable to write what he really thinks on his weblog. John Udell: Former InfoWorld columnist who recently joined Microsoft as a professional blogger. Actionable information: News You Can Use. Strategic kindergarden: Childish strategies attempting to get publicity through weblogs. Edelman: Large, old, established public relations firm. PR firms attempt to gain publicity for their clients by creating news stories, as opposed to advertising firms which simply purchase paid ads. Newsgator: RSS software company. PayPerPost: Loathsome, despicable company which proposes to pay bloggers to mention products, pissing in the well and destroying what little trust we had earned. Stream: list of URLs which the web user visits in the order they visited them.
Tosefot
The thick client. After a brief sojourn in his social calendar, Gillmor threatens to return to the topic at hand, the critique of the blog post by Schwartz.
New show business. Jonathan Schwartz's slick marketing weblog is ineffective because readers are on the lookout for marketing BS and attempts to create bogus product placements on weblogs.
Stupid notion. PR agencies have traditionally done very well by building up relationships with journalists and news outlets so that when one of their clients has a product to push, they can get news stories about that product into the media. This is far more effective than advertising, because readers consider editorial content to be more credible than the advertising, which has almost no credibility at all. As more and more attention shifts from mainstream media (MSM) to the web and especially weblogs, PR firms are naturally concerned about how to do PR in this new environment. Their initial attempts consist almost entirely of treating popular bloggers as if they were traditional media outlets, so, for example, I get at least half a dozen ""press releases"" every day from PR firms, written in the style of a newspaper article, as if Joel on Software were some kind of newfangled newspaper. These releases are sent by completely clueless PR professionals who have absolutely no idea what's going on; not only are they clueless, but they actually think they're clever by adding a few bloggers to their spam directories. What they're really doing is training bloggers' bayesian spam filters to ignore the company they're supposedly promoting, and generating ill-will towards their clients by spamming on their behalf. Steve Rubel of Edelman has been blogging for quite a while and certainly knows more than most PR professionals how blogging works, however, the Edelman/Newsgator plan, besides being almost impossible to understand, won't work, because readers will immediately see it for what it is: paid advertising. Gillmor argues that users will recognize it as paid advertising because it lacks hyperlinks which are characteristic of genuine blog posts.
""Microsoft's market standards into a commodity. Spare me the garbage that we need real code running on the client. If you want to know what a vendor is afraid of, figure out what competitor they're more afraid of. Is it Adobe with Apollo, eroding Java's device penetration lead? It's certainly not Microsoft? If you want to see why I'm so relaxed, go look at CrittendenIV's post about this five tags bullshit. He mentioned me at the end so it bubbled up in my vanity feed, but there's no way I can match or even come close to this guy. A star is born. By contrast, Jonathan's bizarre thesis that the browser is a Winerian locked trunk is a) probably true, and b) so the fuck what. Mozilla forever put the lie to that theory when Firefox jujitsued Microsoft's market standards into a commodity. Papadopoulos levels about Sun's difficulty in driving sales in the Web 2 value chain no matter how right they are in their technology bets. Jonathan changes the subject to clients. Why?""
Rashi
Apollo: Project by Adobe to allow Flash applications to run on the desktop on any operating system. CrittendenIV: Oregon blogger. Five tags: Blog game in which a blogger writes five things that their readers did not know about them, and then tags five other bloggers who are expected to then do the same thing. Vanity feed: Tracking mentions of oneself on the Internet. Winerian locked trunk: Metaphor by Dave Winer in which a large company creates a platform that allows small companies to participate in a market, but only as second class participants and at the whim of the large company. Papadopoulos: (Greg), CTO of Sun. 
Tosefot
Microsoft's market There appears to have been an inadvertent edit between the time the text was written and the way it appears on the web. I have redacted the text to the way that I believe Gillmor originally wrote it.
Firefox jujitsued The success of the web browser and the fact that it is a commodity, available for free on every platform, and the fact that developers now develop most new code to run over the web in the browser, has removed a lot of Microsoft's market standards power. When all your applications run on a browser, Windows is just another commodity platform for running web browsers, no better than Macintoshes or Linux machines.
Levels Not sure where this ""leveling"" is taking place. Lately Papadopoulos has been talking about how the world only needs 5 computers, by which he means megacomputer clusters like Google, live.com, Yahoo!, etc. None of those clusters is running very much Sun hardware, so somewhere Gillmor might have read Papadopoulos admitting this.
Why? It appears that Gillmor is interpreting Schwartz's claim in favor of ""rich clients"" as meaning that people will write Java applications to run on the desktop, as opposed to Ajax web applications. This is why he brings up Apollo, which, if successful, would directly compete with Java as a platform for building desktop clients. Gillmor makes several errors here. First, ""Spare me the garbage that we need real code running on the client..."" Gillmor himself considers Ajax applications in web browsers the ""sweet spot"", and those involve an awful lot of real code running on the client. Second, in evaluating competitors, it is almost absurd to consider Apollo, which is still in beta and has virtually no penetration, as a serious competitor. It might become one, but that would be years away. The CEO of Sun doesn't spend his days worrying about every project under development when he has real, current competitors to think about. (One of the frequent failings of pundits is a strong tendency to extrapolate wildly about trends which haven't even begun yet, and assume that they will take over the world. There was a maddening dialog on one of the last episodes of The Gillmor Gang about whether Microsoft Office would move to the web, like Google Documents, in which Steve Gillmor and Jason Calacanis repeatedly talked about ""flipping the switch,"" as if porting hundreds of megabytes of Windows code to the web was a simple matter of ""flipping the switch."" There was no recognition that web-based word processors and spreadsheets, while amusing, have merely a sliver of the capabilities of Windows-based apps.) The third mistake is even more drastic; Schwartz's argument in favor of rich clients, if you read it, is actually an argument in favor of Ajax clients. Schwartz simply redefines those as ""rich"" clients. He writes: ""In my book, it's inaccurate to say Google or YouTube are 'thin clients' - they're services that leverage someone else's thick client. A browser.... Innovation on clients is back - we see it in a flurry of Web 2.0 companies investing in creative desktop interaction and the resurgence of JavaScript..."" So actually, Gillmor's entire ""argument"" with Schwartz is one based on a misinterpretation of what Schwartz is saying, and in fact they both seem to agree that the ""Google sweet spot"" is where the world is moving.
""Similarly, Dave is changing the subject from god knows what to JSON and Ajax API and for what reason? Dave is one of the most efficient if not the supreme political pragmatist, so why is he bringing up these subjects? Who am I supposed to be scared of? Google? Nope, if the Ajax API and the terms of service around including unaltered adsense are so counter to user interest, that will precipitate a decline in usage and therefore less adoption of Google properties. Seems self-correcting to me: user votes, user wins. Why do we need saving here?""
Rashi
JSON: JavaScript Object Notation, the most efficient and concise way to transmit data from a web server to JavaScript code running on a browser. Unaltered adsense: Google's requirement that if you use their API to perform search queries, you must show the sponsored links that come back with those results, unaltered.
Tosefot
Why is he bringing up these subjects? Dave recently misinterpreted the goal of JSON, thinking that it was an interop technology - reinventing the wheel that he himself invented in the form of XML/RPC and its successor SOAP. His readers corrected him, and he accepted the correction and moved on gracefully.
""Who, then, is Dave's competitor? Is he caught, like Microsoft, competing against his own success? RSS won, and Dave did it. I'll wait while nobody argues with this. Good. Now we live in an RSS world. What to do next? I say it's gestures, but I don't care what you think about that. Let's say I'm right, that the world will move from inference to direct testimony, from links to gesture feeds, from push to accept, from pressure to permission. In that world, do we need protection? Or does Dave need to reinvent himself in this brave new world he launched?""
Rashi
Nobody argues with this: Winer's frequent insistence on getting credit for RSS leads many people to tease him by denying or downplaying his role, which makes him angry. Gestures: An esoteric astronaut architecture.
""It's tough to teach an old dog new tricks, the saying goes. But Dave is not your average bear. He's tough, cunning, honest, and vulnerable. There's an opening to ignore what I'm saying as personal, but honestly all politics are local, and deeply personal. I'm not counting Dave, or Jonathan, out. But they need to face the music. They've outgrown the jobs they invented for themselves, and it's time to grow again.""
Rashi
Bear: Affectionate term for a husky, large man with a lot of body hair.
Tosefot
Outgrown the jobs: There are, it seems, two main points in Gillmor's post. First, Jonathan Schwartz is wrong about rich clients. It appears that Schwartz was just being clever and using the term rich client to mean Web Browser + JavaScript plus a few other cutesy toys, nothing to be alarmed about, and Gillmor and Schwartz don't seem to disagree at all. So that point evaporates. The other point is about why Dave Winer is changing the subject (what, are we only allowed to have one subject on the entire internet?), and it turns out that was just a simple misunderstanding, which is common on blogs: bloggers will frequently post something before fully researching a subject. Gillmor's entire thesis about old dogs and new tricks thus completely collapses in a puff of smoke. And it only took me 3 hours to figure it out. Luckily there's one more unrelated paragraph:
""Oh, and Microsoft, you guys better step up right now and cut this RSS patent cancer out before we do it without anesthesia.""
Tosefot
Before we do it: Microsoft recently applied for a patent on RSS, a disgraceful attempt to patent things that other people invented long before Microsoft was paying any attention. Gillmor's saber rattling is endearing but completely impotent.
	"
https://www.joelonsoftware.com/2006/12/20/new-years-resolution-get-a-better-job/,New year’s resolution: get a better job!,2006-12-20T00:09:50+00:00,,Joel Spolsky,News,"
	Here are three ideas for getting a better job next year.
1. Apply for the Fog Creek Software Management Training Program in New York. We have one opening right now. In addition to paying your salary, Fog Creek pays your tuition and reimburses all educational expenses for a Masters degree in technology management. Here's what Sumana Harihareswara ('08) says:
""Before I came to Fog Creek, I couldn't tell where my odd collection of aptitudes fit in. I'm extroverted and geeky, but I didn't code and didn't know any of That Business Stuff. My work experience showed that I'd dabbled in tech writing, customer service, QA, marketing, and I don't know what-all. Then I visited New York City for the first time, and while I was away, that blogger Joel Spolsky posted about the new Fog Creek Software Management Training Program. I woke up in the middle of the night the day after I read about it, knowing I had to apply. I couldn't believe that I got called back, then interviewed, then hired - and it all happened in just a few weeks!
""I've been here almost a year now. It can be tough, working and learning all day and going to class at night, but I get out of it what I put into it. The program's like a mirror, showing me my strengths and my weaknesses both. No matter what I do here - learning FogBugz to do sales, learning SQL Server to do customer support, or even reconciling the credit card bill - I feel empowered in a way I've never felt at another workplace. Once I'm done with my Fog Creek training and my degree from Columbia, I'll be a superlatively hireable package.""
2. Apply for one of the great jobs listed on the Jobs Board. Work on robots that perform minimally invasive surgery, get the BBC to work on mobile phones, make virtual worlds for The Electric Sheep Company, get teachers the resources they need at DonorsChoose.org, or any number of things that are probably a lot more interesting than what you're doing right now.
3. If you have a great job at a cool, high-Joel Test-scoring company, consider hiring some of the 568,000 job seekers looking for a new gig on the jobs board. I'll make it easy for you: use the coupon code BETTERJOBS-0-070 and get 200 dollars off a job listing, good this year only [Update: this coupon is no longer valid]. If you know of companies that you think would be good fits for Joel on Software readers, please pass this coupon on to them. If you know of companies that are noisy, fluorescent, cubicle farms working 90 hour weeks, where the CTO refuses to use source code control because he's afraid people will blame him for the horrible code he writes, please don't tell them about this offer.
	"
https://www.joelonsoftware.com/2006/12/20/half-a-million-bugs/,Half a million bugs!,2006-12-20T00:09:49+00:00,,Joel Spolsky,News,"
	Last night, at some point, we passed case number 500,000 in the Fog Creek in-house FogBugz database.
Yikes. OK, it's nowhere near a half million bugs. All our faxes go in there, all our customer email goes in there, developers use it for to-do lists, job applications, phone messages, sysadmin notifications, automatic crash reports, etc. More significantly, incoming spam gets assigned a case number, even though it usually lands in a spam folder and gets deleted after seven days, so most of those cases are spam. We actually have 66,443 real cases and 489,022 historical events. We have replied to 33,692 customer emails using FogBugz, fixed 7,303 bugs, and implemented 909 features.
815 bugs could not be reproduced.
	"
https://www.joelonsoftware.com/2006/12/18/new-stuff/,New Stuff!,2006-12-18T00:09:48+00:00,,Joel Spolsky,News,"
	If you're using FogBugz and Microsoft Visual Studio 2005, you'll want to check out the brand-spanking-new FogBugz for Visual Studio add-in.
It's an easy way to access FogBugz from a tool window inside the Visual Studio IDE.
In the long run, I think, FogBugz for Visual Studio will be available as a premium feature available for a small extra charge, but for the time being, since it's brand new, you can download it for free.
To make the FogBugz for Visual Studio add-in possible, we implemented a new FogBugz API, now in version 1.0. Because FogBugz has been shipping for a while without an API, we provide a couple of files you have to install on your FogBugz server to make the API work. As soon as FogBugz 6.0 comes out, the API will be built-in, and it will support a lot of additional functionality. This 1.0 version basically just gives you a way to get a list of open cases. If you're interested in developing add-ins for FogBugz or other tools that use the FogBugz API, please email Fog Creek customer service and let them know what kind of features you'd like to see.
Eclipse users: check out EclipseBugz. EclipseBugz was written before the API came out, so it uses RSS to track bugs.
	"
https://www.joelonsoftware.com/2006/12/15/elegance/,Elegance,2006-12-15T00:09:47+00:00,,Joel Spolsky,"Software designer, News","
	Alain de Botton, writing in The Architecture of Happiness (Pantheon Books, 2006) has a section on elegance that any software designer will find familiar.
He compares the Salginatobel Bridge, in Switzerland...
 
...to the Clifton Suspension Bridge, in England:
... in one of the most amazing books about architecture I've ever read:
""Both Robert Maillart's Salginatobel and Isambard Brunel's Clifton Suspension bridges are structures of strength; both attract our veneration for carrying us safely across a fatal drop-and yet Maillart's bridge is the more beautiful of the pair for the exceptionally nimble, apparently effortless way in which it carries out its duty. With its ponderous masonry and heavy steel chains, Brunel's construction has something to it of a stocky middle-aged man who hoists his trousers and loudly solicits the attention of others before making a jump between two points, whereas Maillart's bridge resembles a lithe athlete who leaps without ceremony and bows demurely to his audience before leaving the stage. Both bridges accomplish daring feats, but Maillart's possesses the added virtue of making its achievement look effortless-and because we sense it isn't, we wonder at it and admire it all the more. The bridge is endowed with a subcategory of beauty we can refer to as elegance, a quality present whenever a work of architecture succeeds in carrying out an act of resistance-holding, spanning, sheltering-with grace and economy as well as strength; when it has the modesty not to draw attention to the difficulties it has surmounted.""
In that context, I'd like revisit my recent themes of choices and simplicity and add a third concept, elegance.
People, for the most part, are not playing with their software because they want to. They're using the software as a tool to accomplish something else that they would like to do. Maybe they are using a chat program to try and seem witty, in hopes that the person they are chatting with will want to spend time with them, so that, ultimately, they have a better chance of getting laid, so that, ultimately, their selfish DNA will get to replicate itself. Maybe they are using a spreadsheet to try and figure out if they can afford a bigger apartment, so that, ultimately, dates will be more impressed when they come over, increasing their chance of getting laid, again, benefitting the DNA. Maybe they're working on a PowerPoint for the boss so that they will get a promotion so that they'll have more money which they can use to rent a larger apartment that would attract mates, thus increasing their chance of getting laid, (getting the idea yet?) so the selfish DNA can replicate. Maybe they are looking for a recipe for goat cheese ravioli on the Internet, etc., etc., ... DNA.
Unless they're software reviewers for a living, they don't really care about the software itself, and the more they notice it, the more annoyed they're going to be.
Choices, therefore, can be good or bad. They're good when they support the task the user is trying to accomplish fairly directly. I want to be able to choose who to chat with (duh.) They're bad when they represent an intrusion into the user's actual DNA-replication goals. Every few days some crappy software I can't even remember installing pops up noisy bulletins asking me if I want to upgrade something or other. I could not care LESS. I'm doing something. Leave me alone! I'm sure that the team at Sun Microsystems who just released this fabulous new version of the Java virtual machine have been thinking about the incremental release night and day for months and months, but the other 5,000,000,000 of us here on the planet really don't give a flying monkey. You just cannot imagine how little I want to spend even three seconds of my life thinking about whether or not to install that new JVM. Somebody out there is already firing up Gmail to tell me that the JVM mustn't just upgrade itself ""because that might break something."" Yeah, if the entire collective wisdom of the Java development team doesn't know if it's going to break something, how am I supposed to know? Sheeesh.
If you're using the term simplicity to mean ""grace and economy"" or ""elegance,"" that's terrific. A great example of this is the difference between the way you search for music on Rhapsody and the way you search for music on iTunes. Rhapsody makes you decide if you want to search for albums, tracks, or artists. iTunes doesn't give you any choice: it just searches all fields, which works just as well and is easier. Economy means power, in this case, and it's a feature.
On the other hand, if you're using simplicity to mean a lack of power, a lack of features, that's fine, if you want to be in the paper clip business, good luck with that, but the chances that your product will solve my exact problems starts to shrink and your potential market share does, too.
	"
https://www.joelonsoftware.com/2006/12/09/simplicity/,Simplicity,2006-12-09T00:09:46+00:00,,Joel Spolsky,"Software designer, News","
	Donald Norman concludes that simplicity is overrated: ""But when it came time for the journalists to review the simple products they had gathered together, they complained that they lacked what they considered to be 'critical' features. So, what do people mean when they ask for simplicity? One-button operation, of course, but with all of their favorite features.""
A long time ago, I wrote: ""A lot of software developers are seduced by the old '80/20' rule. It seems to make a lot of sense: 80% of the people use 20% of the features. So you convince yourself that you only need to implement 20% of the features, and you can still sell 80% as many copies. 
""Unfortunately, it's never the same 20%. Everybody uses a different set of features. In the last 10 years I have probably heard of dozens of companies who, determined not to learn from each other, tried to release 'lite' word processors that only implement 20% of the features. This story is as old as the PC. Most of the time, what happens is that they give their program to a journalist to review, and the journalist reviews it by writing their review using the new word processor, and then the journalist tries to find the 'word count' feature which they need because most journalists have precise word count requirements, and it's not there, because it's in the '80% that nobody uses,' and the journalist ends up writing a story that attempts to claim simultaneously that lite programs are good, bloat is bad, and I can't use this damn thing 'cause it won't count my words.""
Making simple, 20% products is an excellent bootstrapping strategy because you can create them with limited resources and build an audience. It's a Judo strategy, using your weakness as a strength, like the way the Blair Witch Project, filmed by kids with no money at all, used the only camera they could afford, a handheld video camera, but they invented a plot in which that was actually a virtue. So you sell ""simple"" as if it were this wonderful thing, when, coincidentally, it's the only thing you have the resources to produce. Happy coincidence, that's all, but it really is wonderful!
What works for bootstrapping, I believe, will not work as a good long term strategy, because there's very little to prevent the next two-person startup from cloning your simple app, and because eventually you can't fight human nature: ""The people want the features,"" says Norman. Just because handheld video was perfect for Blair Witch, doesn't mean every Hollywood blockbuster will use it.
Devotees of simplicity will bring up 37signals and the Apple iPod as anecdotal proof that Simple Sells. I would argue that in both these cases, success is a result of a combination of things: building an audience, evangelism, clean and spare design, emotional appeal, aesthetics, fast response time, direct and instant user feedback, program models which correspond to the user model resulting in high usability, and putting the user in control, all of which are features of one sort, in the sense that they are benefits that customers like and pay for, but none of which can really be described as ""simplicity."" For example, the iPod has the feature of being beautiful, which the Creative Zen Ultra Nomad Jukebox doesn't have, so I'll take an iPod, please. In the case of the iPod, the way beauty is provided happens to be through a clean and simple design, but it doesn't have to be. The Hummer is aesthetically appealing precisely because it's ugly and complicated.
I think it is a misattribution to say, for example, that the iPod is successful because it lacks features. If you start to believe that, you'll believe, among other things, that you should take out features to increase your product's success. With six years of experience running my own software company I can tell you that nothing we have ever done at Fog Creek has increased our revenue more than releasing a new version with more features. Nothing. The flow to our bottom line from new versions with new features is absolutely undeniable. It's like gravity. When we tried Google ads, when we implemented various affiliate schemes, or when an article about FogBugz appears in the press, we could barely see the effect on the bottom line. When a new version comes out with new features, we see a sudden, undeniable, substantial, and permanent increase in revenue.
If you're using the term ""simplicity"" to refer to a product in which the user model corresponds closely to the program model, so the product is easy to use, fine, more power to ya. If you're using the term ""simplicity"" to refer to a product with a spare, clean visual appearance, so the term is nothing more than an aesthetic description much in the same way you might describe Ralph Lauren clothes as ""Southampton WASP,"" fine, more power to ya. Minimalist aesthetics are quite hip these days. But if you think simplicity means ""not very many features"" or ""does one thing and does it well,"" then I applaud your integrity but you can't go that far with a product that deliberately leaves features out. Even the iPod has gratuitous Solitaire game. Even Ta-da List supports RSS.
Anyway, I gotta go ... it's time to go upgrade my cellphone to one that includes high speed internet access, email, a podcast catcher, and an MP3 player.
	"
https://www.joelonsoftware.com/2006/12/05/lego-programming/,Lego Programming,2006-12-05T00:09:45+00:00,,Joel Spolsky,News,"
	Frequently, the mainstream media, reporting on computer programming tools, gets the story horribly wrong.
What happens is that some kind of vendor of programming technologies has come up with some product they are claiming makes programming easier. The journalists don't really understand. What they hear is ""programming is going to be easier."" Usually there's some kind of Lego allusion.
Om Malik (November, 2006): ""... these startups are building development environments that let the user cobble together software packages as easily as snapping together Lego bricks.""
He admits: ""... the transition to this type of platform is going to be slow; I believe it could take about three years to realize its potential.""
Three years?
BusinessWeek ran a cover-story about object oriented programming way back in September, 1991, accompanied by a picture of a baby in diapers programming a computer. They also used the Lego metaphor: ""Indeed, at the software startup they now head, Objective Technologies Inc., programming seems downright juvenile: Instead of mucking around in tangles of C code-writing arcane statements such as printf (""%s/n"", curr str)-they mainly connect boxes on the screens of their NeXT Computer Inc. workstations and fill in blanks. In minutes, they have industrial-strength programs that run right the first time and that can be modified without brain surgery. Says Bergerson, 27: 'I showed my mother, and she said, ""You're still playing with Lego blocks, like when you were a kid!""'""
""Eventually, a whole new way of selling software may emerge. In a market of interchangeable, plug-and-play objects, you might shop for pieces separately and compile your own custom software.""
None of them believed Frederick P. Brooks, in 1987: ""Not only are there no silver bullets now in view, the very nature of software makes it unlikely that there will be any-no inventions that will do for software productivity, reliability, and simplicity what electronics, transistors, and large-scale integration did for computer hardware.... I believe the hard part of building software to be the specification, design, and testing of this conceptual construct, not the labor of representing it and testing the fidelity of the representation.... If this is true, building software will always be hard. There is inherently no silver bullet.""
	"
https://www.joelonsoftware.com/2007/01/30/founders-at-work/,Founders at Work,2007-01-30T00:09:58+00:00,,Joel Spolsky,News,"
	Jessica Livingston, a partner at Y Combinator, has just published a book of interviews with 32 high tech company founders called Founders at Work.
She posted a couple of chapters online, including the interview with me, which is probably the most complete story of the early days of Fog Creek Software in print.
""There's a bunch of people out there doing certain types of things and they seem to be pretty incompetent, but they're getting huge valuations. Surely if I did those same things, knowing that I am less incompetent-merely semi-incompetent as opposed to extremely incompetent-I should be able to achieve at least their level of success.""
I haven't read the book yet... still waiting for my copy to arrive from Amazon, which appears to be beyond semi-incompetent with regards to what ""overnight shipping"" might mean when you order something on Thursday. Check out the list of interviews, though: virtually everyone starting a high tech company will be all over this book like senators on cake.
	"
https://www.joelonsoftware.com/2007/01/26/copilot-20-ships/,Copilot 2.0 ships!,2007-01-26T00:09:57+00:00,,Joel Spolsky,"Fog Creek Software, News","
	Hoorah! Fog Creek Copilot 2.0 is now online, with three, no wait, five, no, three new features.
Well, I guess it depends how you count. In a moment I'll count 'em. In the meantime, a little background.
Fog Creek Copilot is a remote tech support service that lets one person control another computer remotely, much like VNC or RDC, with the advantage that it requires zero configuration, works through firewalls, and installs nothing.
Two summers ago, we had four interns here who built it, all by themselves, over the course of their 12 week internship. The only thing we gave them was a spec, some desks, and computers. They put together the web site, the documentation, all the code for five major components, came up with the marketing plan, did usability testing, and demoed to the public at a trade show. They kept a blog, which you can still read, and someone even made a documentary movie made about their summer.
(Sidebar: One of the reasons they were able to accomplish so much in one summer is that they used open source software as a starting point. Of course, everything they did, with the exception of our proprietary back end server code, is available under the GPL license.)
OK. New features!
1. Support for Mac! OMG! All versions of Mac OS X from 10.2 on are now supported. I'm fairly confident that our Mac remote desktop implementation is second to none.
Oh, wait. Interruption. You may be wondering, if the interns did the whole thing over a summer, who wrote all this new code?
The answer is that two of the interns accepted full-time jobs at Fog Creek, Tyler and Ben. Tyler extended his summer until December, and then headed off for a leave of absence to finish his Masters degree at Stanford. Ben graduated from Duke last summer and has been cranking away on 2.0 since then. Ben, by the way, is the only person I know who writes code in C, C++, C#, and Objective C all in the same day, while writing a book about Smalltalk at night. We also had a Mac programming guru, Daniel Jalkut, get us started with the Mac port.
OK, next new big feature:
2. Direct Connect! We've always done everything we can to make sure that Fog Creek Copilot can connect in any networking situation, no matter what firewalls or NATs are in place. To make this happen, both parties make outbound connections to our server, which relays traffic on their behalf. Well, in many cases, this isn't necessary. So version 2.0 does something rather clever: it sets up the initial connection through our servers, so you get connected right away with 100% reliability. But then once you're all connected, it quietly, in the background, looks for a way to make a direct connection. If it can't, no big deal: you just keep relaying through our server. If you can make a direct peer-to-peer connection, it silently shifts your data onto the direct connection. You won't notice anything except, probably, much faster communication.
3. File transfer! An easy-to-use file upload and download feature makes this the PERFECT application for installing Firefox on all your relatives' computers. It's especially handy for tech support scenarios. Imagine this: your new software works great everywhere but this one guy has a wacky system that makes your software keep crashing. So you use Fog Creek Copilot to take over his system, and then you use the file transfer feature to copy new builds to his computer as you try to fix the problem.
4. Does this count as a feature? We lowered the price for day passes-24 hours of usage-from $10 to no, not $9, not $8, not $7, would you believe it's only FIVE DOLLARS? That's right, unlimited usage for 24 hours for five lonely bucks.
I guess I should explain the reasoning behind that. First of all, the direct connect feature (#2) should reduce our bandwidth bills in many situations, so we can pass that savings on. 
Second, we don't want anyone to have an excuse not to use Fog Creek Copilot. To avoid paying $10, you might actually be crazy enough to try to just talk your mom into uninstalling Norton Utilities, punching the appropriate holes in the Windows firewall, and setting up appropriate port-forwarding rules on her broadband router... but for $5, why go through the trouble? Or you might be willing to set up your own server outside the firewall, with VNC running as a listener, and walk your customers through setting up VNC and connecting back to you, but again, why bother for five bucks?
We think that's a negligible price to pay to know that all you need to tell your mom, or your customer, is ""Go to copilot.com, type in this number, and download and run the program you find there."" And to know that it will Just Work.
We're betting that the lower price will lead to more users, which will lead to more corporate subscriptions, which will lead to higher total revenues.
So. Congratulations to Tyler and Ben for a fantastic upgrade!
	"
https://www.joelonsoftware.com/2007/01/26/some-reviews/,Some reviews…,2007-01-26T00:09:56+00:00,,Joel Spolsky,News,"
	The Unofficial Apple Weblog: ""I'm not the only person who knows the joys of trying to talk a frustrated parent through some troubleshooting technique.""
Infinite Loop: ""Apple Remote Desktop costs mucho bucks, and these options usually require at least a little bit of configuration-configuration that, unless you set it up yourself, can be a challenge for computer-frustrated family members. Copilot, like similar other 'remote tech support' systems out there, does not require any sort of configuration on the part of the client, making it easy for you to have someone install it and you accessing their computer in no time.""
Daniel Jalkut: ""Up to now Fog Creek was 'the best software company that doesn't make Mac products.' Now I guess I'll have to drop that qualification.""
	"
https://www.joelonsoftware.com/2007/01/23/new-version-fogbugz-for-visual-studio/,New version: FogBugz for Visual Studio,2007-01-23T00:09:55+00:00,,Joel Spolsky,News,"
	I fixed a bunch of little bugs in FogBugz Add-in for Visual Studio. The new version, 2.1, is now available.
It now remembers its position when you exit Visual Studio, and works better with SSL and authenticated FogBugz installations. A complete list of bug fixes is here.
Thanks to Olivier, James, Matt, Jason, Alan, and Miguel for detailed bug reports which helped me track down and fix all these problems.
	"
https://www.joelonsoftware.com/2007/01/21/the-big-picture/,The Big Picture,2007-01-21T00:09:54+00:00,,Joel Spolsky,"Software designer, News","
	A review of Dreaming in Code, by Scott Rosenberg.
Eyes work using a page fault mechanism. They're so good at it that you don't even notice.
You can only see at a high-resolution in a fairly small area, and even that has a big fat blind spot right exactly in the middle, but you still walk around thinking you have a ultra-high resolution panoramic view of everything. Why? Because your eyes move really fast, and, under ordinary circumstances, they are happy to jump instantly to wherever you need them to jump to. And your mind provides this really complete abstraction, providing you with the illusion of complete vision when all you really have is a very small area of high res vision, a large area of extremely low-res vision, and the ability to page-fault-in anything you want to see-so quickly that you walk around all day thinking you have the whole picture projected internally in a little theatre in your brain.
This is really, really useful, and lots of other things work this way, too. Your ears are good at tuning in important parts of conversations. Your fingers reach around and touch anything they need to, whether it's a fine merino wool sweater or the inside of your nose, giving you a full picture of what everything feels like. When you dream, your mind asks all kinds of questions that it's used to asking the senses (what's that? Look over there!) but your senses are temporarily turned off (you are, after all, asleep), so they get back sort-of random answers, which you combine into a funny story in your brain called a dream. And then when you try to recount the dream to your boyfriend in the morning, even though it seemed totally, completely realistic, you suddenly realize that you don't know what happened, actually, so you have to make shit up. If you had stayed asleep for another minute or two your brain would have asked your senses what kind of mammal was swimming with you in the rose bush, and gotten back some retarded, random answer (a platypus!), but you woke up, so until you tried to tell the story, you didn't even realize that you needed to know what was in the rose bushes with you to make the story coherent to your partner. Which it never is. So please don't tell me about your dreams.
One of the unfortunate side effects is that your mind gets into a bad habit of overestimating how clearly it understands things. It always thinks it has The Big Picture even when it doesn't.
This is a particularly dangerous trap when it comes to software development. You get some big picture idea in your head for what you want to do, and it all seems so crystal clear that it doesn't even seem like you need to design anything. You can just dive in and start implementing your vision.
Say, for example, that your vision is to rebuild an old DOS personal information manager, which was really really great but totally unappreciated. It seems easy. Everything about how the whole thing works seems so obvious, you don't even try to design the thing... you just hire a bunch of programmers and start banging out code.
Now you've made two mistakes.
Number one, you fell for that old overconfidence trick of your mind. ""Oh, yeah, we totally know how to do this! It's all totally clear to us. No need to spec it out. Just write the code.""
Number two, you hired programmers before you designed the thing. Because the only thing harder than trying to design software is trying to design software as a team.
I can't tell you how many times I've been in a meeting with even one or two other programmers, trying to figure out how something should work, and we're just not getting anywhere. So I go off in my office and take out a piece of paper and figure it out. The very act of interacting with a second person was keeping me from concentrating enough to design the dang feature.
What kills me is the teams who get into the bad habit of holding meetings every time they need to figure out how something is going to work. Did you ever try to write poetry in a committee meeting? It's like a bunch of fat construction guys trying to write an opera while sitting on the couch watching Baywatch. The more fat construction guys you add to the couch, the less likely you are to get opera out of it. 
At least turn off the TV!
Now, it would be shockingly presumptuous of me to try to guess what happened on the Chandler team, and why it's taken them millions of dollars and several years to get to where they are now, which is, they have a pretty buggy and incomplete calendar application that's not very impressive compared to the 58 me-too Web 2.0 calendars that came out last year, each of which was developed by two college kids in their spare time, one of whom really mostly just drew mascots.
Chandler doesn't even have a mascot!
Like I say, I can't presume to know what went wrong. Maybe nothing. Maybe they feel like they're right on track. Scott Rosenberg's excellent new book, which was supposed to be a Soul of a New Machine for the hottest open source startup of the decade, ends up, in frustration, with Scott cutting the story short because Chandler 1.0 was just not going to happen any time soon (and presumably Rosenberg couldn't run the risk that we wouldn't be using books at all by the time it shipped, opting instead to absorb knowledge by taking a pill).
Still, it's a great look at one particular type of software project: the kind that ends up spinning and spinning its wheels without really going anywhere because the vision was too grand and the details were a little short. Near as I can tell, Chandler's original vision was pretty much just to be ""revolutionary."" Well, I don't know about you, but I can't code ""revolutionary."" I need more details to write code. Whenever the spec describes the product in terms of adjectives (""it will be extremely cool"") rather than specifics (""it will have brushed-aluminum title bars and all the icons will be reflected a little bit, as if placed on a grand piano"") you know you're in trouble.
The only concrete design ideas, as far as I could tell from Rosenberg's book, were ""peer-to-peer,"" ""no silos,"" and ""natural language date interpretation."" This may be the a limitation of the book, but the initial design sure seemed to be extremely vague.
""Peer-to-peer"" was the raison-d'etre of Chandler... why should you have to buy Microsoft Exchange Server to coordinate schedules? It turned out that peer-to-peer synchronization was too hard, or something, and this feature was cut. Now there's a server called Cosmo.
""No Silos"" was supposed to mean that instead of having your email in one silo, and your calendar in another silo, and your reminder notes in a third, there would just be a single unified silo holding everything.
As soon as you start asking questions about ""No Silos,"" you realize it's not going to work. Do you put your email on the calendar? Where? On the day when it arrived? So now I have 200 Viagra ads on Friday obscuring the one really important shareholder meeting?
Eventually ""No Silos"" got designed into this idea of stamps, so, for example, you could ""stamp"" any document or note or calendar item with an email stamp and suddenly that item could be mailed to anyone. Guess what? That feature has been in Microsoft Office for the last decade or so. They finally took it out in Office 2007 because nobody cared. There are too many easy ways to email people things.
Indeed, I think the idea of ""No Silos"" is most appealing to architecture astronauts, the people who look at subclasses and see abstract base classes, and who love to move functionality from the subclass into the base class for no good reason other than architectural aesthetics. This is usually a terrible user interface design technique. The way you make users understand your program model is with metaphors. When you make things look, feel, and most importantly, behave like things in the real world, users are more likely to figure out how to use the program, and the app will be easier to use. When you try to combine two very dramatically different real-world items (email and appointments) into the same kind of thing in the user interface, usability suffers because there's no longer a real-world metaphor that applies.
The other cool thing that Kapor kept telling everyone who would listen is that Agenda would let you type things like ""Next Tuesday"" and magically you'd get an appointment for next Tuesday. This is slicker than heck, but every half-decent calendar program for the last decade has done this. Not revolutionary.
The Chandler team also overestimated how much help they would get from volunteers. Open source doesn't quite work like that. It's really good at implementing copycat features, because there's a spec to work from: the implementation you're copying. It's really good at Itch Scratching features. I need a command line argument for EBCDIC, so I'll add it and send in the code. But when you have an app that doesn't do anything yet, nobody finds it itchy. They're not using it. So you don't get volunteers. Almost everyone on the Chandler dev team got paid.
Again I must forcefully apologize to the Chandler team if Rosenberg missed the point somehow, or if he gave a completely incorrect impression of what was really holding up progress, and my bias-to blame these kinds of debacles on a failure to design-is showing.
All that said, one good thing did come out of the project: a fascinating book in the style of Soul of a New Machine or Showstopper about a software development project that failed to converge. Highly recommended.
	"
https://www.joelonsoftware.com/2007/01/02/dreaming-in-code/,Dreaming in Code,2007-01-02T00:09:53+00:00,,Joel Spolsky,News,"
	It's quite rare for me to be so excited about a new book that I'll write about it even before I've read it. But I just got a copy of Scott Rosenberg's new Dreaming in Code, and I can't wait to read it.
Scott Rosenberg is a founder and editor of Salon. The reason I'm so excited about this book is this: Of all the journalists covering technology and especially software development I think Scott understands it the best. He's an excellent writer, too. Two years ago, Scott interviewed me for an article in Salon called The Shlemiel way of software. A lot of other people have interviewed me, but this was the only time I ever felt that the interviewer did a great job of capturing exactly what I think.
The other reason I can't wait to read this book is that it's about the development of Chandler. I've been watching Chandler closely ever since it was probably doomed by being breathlessly hailed by Wired Magazine as ""The Outlook Killer"" in January, 2003. Well, it's January 2007 now, Outlook isn't dead, and Chandler is up to 0.7alpha4. Being hyped by Wired Magazine is almost certainly a bad sign. I've been wondering what the heck went so wrong on the Chandler team, or perhaps it's just a matter of good software taking ten years? Usually the first useful version takes less than that, though.
Anyway, only three days after announcing my new policy of ""no gifts,"" I'm stuck with this copy of the book I got in the mail for free. Should I send it back and buy my own copy? The New York Times policy on Journalism Ethics says, ""Staff members may keep for their own collections-but may not sell or copy-books, recordings, tapes, compact discs and computer programs sent to them for review. Such submissions are considered press releases.""
	"
https://www.joelonsoftware.com/2007/02/23/chargebacks/,Chargebacks,2007-02-23T00:10:01+00:00,,Joel Spolsky,News,"
	A couple of days ago, tempting fate, I mentioned that our chargeback rate was 0%.
Some people speculated that I was rounding, and really meant, say, 0.45%.
Nope, I really meant zero. None. 
As soon as I wrote this, some wise guy decided to dispute a charge.
Now, a long time ago, I wrote some custom software to screen-scrape our credit card processor's online information system, and reconciles the transactions it finds there with QuickBooks, where we do the rest of our bookkeeping.
So today, for the first time in the history of that app running, it finds a chargeback on the statement, and doesn't know what to do with it. So it stops and says, ""Unrecognized entry: I don't know what account VISA CHARGEBACK should be posted to.""
We had to modify the software.
And that's how I know we've never had a chargeback... until today!
	"
https://www.joelonsoftware.com/2007/02/19/seven-steps-to-remarkable-customer-service/,Seven steps to remarkable customer service,2007-02-19T00:15:42+00:00,2016-12-05T19:28:53+00:00,Joel Spolsky,"CEO, News","
	As a bootstrapped software company, Fog Creek couldn't afford to hire customer service people for the first couple of years, so Michael and I did it ourselves. The time we spent helping customers took away from improving our software, but we learned a lot and now we have a much better customer service operation.
Here are seven things we learned about providing remarkable customer service. I'm using the word remarkable literally-the goal is to provide customer service so good that people remark.
1. Fix everything two ways
Almost every tech support problem has two solutions. The superficial and immediate solution is just to solve the customer's problem. But when you think a little harder you can usually find a deeper solution: a way to prevent this particular problem from ever happening again.
Sometimes that means adding more intelligence to the software or the SETUP program; by now, our SETUP program is loaded with special case checks. Sometimes you just need to improve the wording of an error message. Sometimes the best you can come up with is a knowledge base article.
We treat each tech support call like the NTSB treats airliner crashes. Every time a plane crashes, they send out investigators, figure out what happened, and then figure out a new policy to prevent that particular problem from ever happening again. It's worked so well for aviation safety that the very, very rare airliner crashes we still get in the US are always very unusual, one-off situations.
This has two implications.
One: it's crucial that tech support have access to the development team. This means that you can't outsource tech support: they have to be right there at the same street address as the developers, with a way to get things fixed. Many software companies still think that it's ""economical"" to run tech support in Bangalore or the Philippines, or to outsource it to another company altogether. Yes, the cost of a single incident might be $10 instead of $50, but you're going to have to pay $10 again and again.
When we handle a tech support incident with a well-qualified person here in New York, chances are that's the last time we're ever going to see that particular incident. So with one $50 incident we've eliminated an entire class of problems.
Somehow, the phone companies and the cable companies and the ISPs just don't understand this equation. They outsource their tech support to the cheapest possible provider and end up paying $10 again and again and again fixing the same problem again and again and again instead of fixing it once and for all in the source code. The cheap call centers have no mechanism for getting problems fixed; indeed, they have no incentive to get problems fixed because their income depends on repeat business, and there's nothing they like better than being able to give the same answer to the same question again and again.
The second implication of fixing everything two ways is that eventually, all the common and simple problems are solved, and what you're left with is very weird uncommon problems. That's fine, because there are far fewer of them, and you're saving a fortune not doing any rote tech support, but the downside is that there's no rote tech support left: only serious debugging and problem solving. You can't just teach new support people ten common solutions: you have to teach them to debug. 
For us, the ""fix everything two ways"" religion has really paid off. We were able to increase our sales tenfold while only doubling the cost of providing tech support.
2. Suggest blowing out the dust
Microsoft's Raymond Chen tells the story of a customer who complains that the keyboard isn't working. Of course, it's unplugged. If you try asking them if it's plugged in, ""they will get all insulted and say indignantly, 'Of course it is! Do I look like an idiot?' without actually checking.""
""Instead,"" Chen suggests, ""say 'Okay, sometimes the connection gets a little dusty and the connection gets weak. Could you unplug the connector, blow into it to get the dust out, then plug it back in?'
""They will then crawl under the desk, find that they forgot to plug it in (or plugged it into the wrong port), blow out the dust, plug it in, and reply, 'Um, yeah, that fixed it, thanks.'""
Many requests for a customer to check something can be phrased this way. Instead of telling them to check a setting, tell them to change the setting and then change it back ""just to make sure that the software writes out its settings.""
3. Make customers into fans
Every time we need to buy logo gear here at Fog Creek, I get it from Lands' End. 
Why? 
Let me tell you a story. We needed some shirts for a trade show. I called up Lands' End and ordered two dozen, using the same logo design we had used for some knapsacks we bought earlier.
When the shirts arrived, to our dismay, you couldn't read the logo.
It turns out that the knapsacks were brighter than the polo shirts. The thread color that looked good on the knapsacks was too dark to read on the shirts.
I called up Lands' End. As usual, a human answered the phone even before it started ringing. I'm pretty sure that they have a system where the next agent in the queue is told to standby, so customers don't even have to wait one ringy-dingy before they're talking to a human.
I explained that I screwed up.
They said, ""Don't worry. You can return those for a full credit, and we'll redo the shirts with a different color thread."" 
I said, ""The trade show is in two days.""
They said they would Fedex me a new box of shirts and I'd have it tomorrow. I could return the old shirts at my convenience.
They paid shipping both ways. I wasn't out a cent. Even though they had no possible use for a bunch of Fog Creek logo shirts with an illegible logo, they ate the cost.
And now I tell this story to everyone who needs swag. In fact I tell this story every time we're talking about telephone menu systems. Or customer service. By providing remarkable customer service, they've gotten me to remark about it.
When customers have a problem and you fix it, they're actually going to be even more satisfied than if they never had a problem in the first place.
It has to do with expectations. Most people's experience with tech support and customer service comes from airlines, telephone companies, cable companies, and ISPs, all of whom provide generally awful customer service. It's so bad you don't even bother calling any more, do you? So when someone calls Fog Creek, and immediately gets through to a human, with no voice mail or phone menus, and that person turns out to be nice and friendly and actually solves their problem, they're apt to think even more highly of us than someone who never had the opportunity to interact with us and just assumes that we're average.
Now, I wouldn't go so far as to actually make something go wrong, just so we have a chance to demonstrate our superior customer service. Many customers just won't call; they'll fume quietly. 
But when someone does call, look at it as a great opportunity to create fanatically devoted customer, one who will prattle on and on about what a great job you did.
4. Take the blame
One morning I needed an extra set of keys to my apartment, so on the way to work, I went to the locksmith around the corner.
13 years living in an apartment in New York City has taught me never to trust a locksmith; half of the time their copies don't work. So I went home to test the new keys, and, lo and behold, one didn't work. 
I took it back to the locksmith.
He made it again.
I went back home and tested the new copy.
It still didn't work.
Now I was fuming. Squiggly lines were coming up out of my head. I was a half hour late to work and had to go to the locksmith for a third time. I was tempted just to give up on him. But I decided to give this loser one more chance.
I stomped into the store, ready to unleash my fury.
""It still doesn't work?"" he asked. ""Let me see.""
He looked at it.
I was sputtering, trying to figure out how best to express my rage at being forced to spend the morning going back and forth.
""Ah. It's my fault,"" he said.
And suddenly, I wasn't mad at all.
Mysteriously, the words ""it's my fault"" completely defused me. That was all it took.
He made the key a third time. I wasn't mad any more. The key worked.
And, here I was, on this planet for forty years, and I couldn't believe how much the three words ""it's my fault"" had completely changed my emotions in a matter of seconds.
Most locksmiths in New York are not the kinds of guys to admit that they're wrong. Saying ""it's my fault"" was completely out of character. But he did it anyway.
5. Memorize awkward phrases
I figured, OK, since the morning is shot anyway, I might as well go to the diner for some breakfast.
It's one of those classic New York diners, like the one on Seinfeld. There's a thirty page menu and a kitchen the size of a phone booth. It doesn't make sense. They must have Star Trek technology to get all those ingredients into such a small space. Maybe they rearrange atoms on the spot.
I was sitting by the cash register. 
An older woman came up to pay her check. As she was paying, she said to the owner, ""you know, I've been coming here for years and years, and that waiter was really rather rude to me.""
The owner was furious.
""What do you mean? No he wasn't! He's a good waiter! I never had a complaint!'
The customer couldn't believe it. Here she was, a loyal customer, and she wanted to help out the owner by letting him know that one of his waiters needed a little bit of help in the manners department, but the owner was arguing with her!
""Well, that's fine, but I've been coming here for years, and everybody is always very nice to me, but that guy was rude to me,"" she explained, patiently.
""I don't care if you've been coming here forever. My waiters are not rude."" The owner proceeded to yell at her. ""I never had no problems. Why are you making problems?""
""Look, if you're going to treat me this way I won't come back.""
""I don't care!"" said the owner. One of the great things about owning a diner in New York is that there are so many people in the city that you can offend every single customer who ever comes into your diner and you'll still have a lot of customers. ""Don't come back! I don't want you as a customer!""
Good for you, I thought. Here's a 60-something year old man, owner of a diner, and you won some big moral victory against a little old lady. Are you proud of yourself? How macho do you have to be? Does the moral victory make you feel better? Did you really have to lose a repeat customer?
Would it have made you feel totally emasculated to say, ""I'm so sorry. I'll have a word with him?""
It's easy to get caught up in the emotional heat of the moment when someone is complaining. 
The solution is to memorize some key phrases, and practice saying them, so that when you need to say them, you can forget your testosterone and make a customer happy.
""I'm sorry, it's my fault.""
""I'm sorry, I can't accept your money. The meal's on me.""
""That's terrible, please tell me what happened so I can make sure it never happens again.""
It's completely natural to have trouble saying ""It's my fault."" That's human. But those three words are going to make your angry customers much happier. So you're going to have to say them. And you're going to have to sound like you mean it.
So start practicing. 
Say ""It's my fault"" a hundred times one morning in the shower, until it starts to sound like syllabic nonsense. Then you'll be able to say it on demand.
One more point. You may think that admitting fault is a strict no-no that can get you sued. This is nonsense. The way to avoid getting sued is not to have people who are mad at you. The best way to do this is to admit fault and fix the damn problem.
6. Practice puppetry
The angry diner owner clearly took things very personally, in a way that the locksmith didn't. When an irate customer is complaining, or venting, it's easy to get defensive.
You can never win these arguments, and if you take them personally, it's going to be a million times worse. This is when you start to hear business owners saying, ""I don't want an asshole like you for a customer!"" They get excited about their Pyrrhic victory. Wow, isn't it great? When you're a small business owner you get to fire your customers. Charming.
The bottom line is that this is not good for business, and it's not even good for your emotional well-being. When you win a victory with a customer by firing them, you still end up feeling riled up and angry, they'll get their money back from the credit card company anyway, and they'll tell a dozen friends. As Patrick McKenzie writes, ""You will never win an argument with your customer.""
There is only one way to survive angry customers emotionally: you have to realize that they're not angry at you; they're angry at your business, and you just happen to be a convenient representative of that business.
And since they're treating you like a puppet, an iconic stand-in for the real business, you need to treat yourself as a puppet, too.
Pretend you're a puppeteer. The customer is yelling at the puppet. They're not yelling at you. They're angry with the puppet.
Your job is to figure out, ""gosh, what can I make the puppet say that will make this person a happy customer?""
You're just a puppeteer. You're not a party to the argument. When the customer says, ""what the hell is wrong with you people,"" they're just playing a role (in this case, they're quoting Tom Smykowski in the movie Office Space). You, too, get to play a role. ""I'm sorry. It's my fault."" Figure out what to make the puppet do that will make them happy and stop taking it so dang personally.
7. Greed will get you nowhere
Recently I was talking with the people who have been doing most of the customer service for Fog Creek over the last year, and I asked what methods they found most effective for dealing with angry customers.
""Frankly,"" they said, ""we have pretty nice customers. We haven't really had any angry customers.""
Well, OK, we do have nice customers, but it seems rather unusual that in a year of answering the phones, nobody was angry. I thought the nature of working at a call center was dealing with angry people all day long.
""Nope. Our customers are nice.""
Here's what I think. I think that our customers are nice because they're not worried. They're not worried because we have a ridiculously liberal return policy: ""We don't want your money if you're not amazingly happy.""
Customers know that they have nothing to fear. They have the power in the relationship. So they don't get abusive.
The no-questions-asked 90-day money back guarantee was one of the best decisions we ever made at Fog Creek. Try this: use Fog Creek Copilot for a full 24 hours, call up three months later and say, ""hey guys, I need $5 for a cup of coffee. Give me back my money from that Copilot day pass,"" and we'll give it back to you. Try calling on the 91st or 92nd or 203rd day. You'll still get it back. We really don't want your money if you're not satisfied. I'm pretty sure we're running the only job listing service around that will refund your money just because your ad didn't work. This is unheard of, but it means we get a lot more ad listings, because there's nothing to lose.
Over the last six years or so, letting people return software has cost us 2%.
2%.
And you know what? Most customers pay with credit cards, and if we didn't refund their money, a bunch of them would have called their bank. This is called a chargeback. They get their money back, we pay a chargeback fee, and if this happens too often, our processing fees go up.
Know what our chargeback rate is at Fog Creek?
0%.
I'm not kidding.
If we were tougher about offering refunds, the only thing we would possibly have done is pissed a few customers off, customers who would have ranted and whined on their blogs. We wouldn't even have kept more of their money.
I know of software companies who are very explicit on their web site that you are not entitled to a refund under any circumstances, but the truth is, if you call them up, they will eventually return your money because they know that if they don't, your credit card company will. This is the worst of both worlds. You end up refunding the money anyway, and you don't get to give potential customers the warm and fuzzy feeling of knowing Nothing Can Possibly Go Wrong, so they hesitate before buying. Or they don't buy at all.
8. (Bonus!) Give customer service people a career path
The last important lesson we learned here at Fog Creek is that you need very highly qualified people talking to customers. A salesperson at Fog Creek needs to have significant experience with the software development process and needs to be able to explain why FogBugz works the way it does, and why it makes software development teams function better. A tech support person at Fog Creek can't get by on canned answers to common questions, because we've eliminated the common questions by fixing the software, so tech support here has to actually troubleshoot which often means debugging.
Many qualified people get bored with front line customer service, and I'm OK with that. To compensate for this, I don't hire people into those positions without an explicit career path. Here at Fog Creek, customer support is just the first year of a three-year management training program that includes a master's degree in technology management at Columbia University. This allows us to get ambitious, smart geeks on a terrific career path talking to customers and solving their problems. We end up paying quite a bit more than average for these positions (especially when you consider $25,000 a year in tuition), but we get far more value out of them, too.
	"
https://www.joelonsoftware.com/2007/02/19/customer-service/,Customer service,2007-02-19T00:10:00+00:00,,Joel Spolsky,News,"
	""Now I was fuming. Squiggly lines were coming up out of my head. I was a half hour late to work and had to go to the locksmith for a third time. I was tempted just to give up on him. But I decided to give this loser one more chance.""
Seven steps to remarkable customer service
	"
https://www.joelonsoftware.com/2007/02/02/the-microisv-show/,The MicroISV Show,2007-02-02T00:09:59+00:00,,Joel Spolsky,News,"
	
Bob Walsh and Michael Lehman interviewed me for The MicroISV Show.
	"
https://www.joelonsoftware.com/2007/03/30/scoble-show/,Scoble Show,2007-03-30T00:10:08+00:00,,Joel Spolsky,News,"
	
It's Friday, and you weren't going to get anything done anyway, so go watch Robert Scoble interview me for The Scoble Show. The full version is just over an hour. There's also a 6 minute edited version.
	"
https://www.joelonsoftware.com/2007/03/27/job-listings-for-india/,Job listings for India,2007-03-27T00:10:07+00:00,,Joel Spolsky,News,"
	OK, it's live! I've put up a new version of the job board specifically for jobs in India, jobs.joelonsoftware.co.in.
To help fill it up, posting a job is only $50-about 2200 rupees.
Unlike the huge boards, Monsterindia, Naukri.com, etc., a job posted to Joel on Software will get far fewer resumes, but they will be of much higher quality, and as usual, we'll return your money if you're not completely satisfied.
	"
https://www.joelonsoftware.com/2007/03/26/localizing-the-job-board/,Localizing the job board,2007-03-26T00:10:06+00:00,,Joel Spolsky,News,"
	The job board, jobs.joelonsoftware.com, has been rather successful. For the next upgrade, I was thinking about setting up a separate job board specifically focused on jobs in India, since there are so many Joel on Software readers there and I've only seen three jobs (in Bangalore) posted.
What should I do to localize the job board for India? Should I use jobs.joelonsoftware.in or .co.in? Or neither? How much should I charge? Right now the site only accepts credit cards... is there another payment method that would work better for India? Should I allow US employers willing to sponsor H1B visas? Or just jobs actually in India? What other changes should I consider to make a more suitable product for the Indian market?
Post your suggestions here.
	"
https://www.joelonsoftware.com/2007/03/26/office-search-continues/,Office search continues,2007-03-26T00:10:05+00:00,,Joel Spolsky,News,"
	We've looked at about ten potential office spaces and found three or four that might meet our needs. 
The biggest problem is that our desire to have (a) private offices with (b) lots of daylight is very hard to accomodate in New York City.
Let's say you have a building with a square floorplan:
The central part of the building is used for elevators, bathrooms, pipes, staircases, etc. This is called the core:
Offices go between the windows and the core. Now, you can have two rows of private offices with a corridor in between. The outer offices have direct windows. If you use glass walls, the inner offices still get plenty of daylight.
The trouble is, if you go any deeper than two offices, the innermost offices won't have daylight at all.
An office is about 10-12 feet deep; a corridor is 4-6 feet. That means that if the distance from the outside window to the core is more than, say, 30 feet, you either have to waste space or give someone a dark office.
Some of that interior space can be used for conference rooms, kitchens, and other areas where people don't spend too much time, but realistically, I'm discovering that if the distance from the outer wall to the inner core is more than 30 feet, it's wasted space.
Manhattan streets are exactly 264 feet apart. Those big office buildings you see that take up an entire city block might have floorplans that are 200 x 200 feet. Even taking the core into account, you can wind up with a depth of 60 or 70 feet. If you're building a sea of cubicles, this is very efficient. If you want 100% private offices, this doesn't work well at all.
The smaller office buildings that don't take up a whole block are likely to be hemmed in by their neighbors, so they don't even have windows on all sides. In this case the builder will often try to put the core on the windowless side, which results in even greater depths.
Wall Street firms need big trading floors. The ideal trading floor is a huge square, the bigger the better, without a single column. This motivates developers around here to brag about the size of their ""floorplates"" and to optimize buildings for huge, unobstructed floorplates, which is exactly the opposite of what software developers want.
	"
https://www.joelonsoftware.com/2007/03/13/fogbugz-auf-deutsch/,FogBugz auf Deutsch,2007-03-13T00:10:04+00:00,,Joel Spolsky,News,"
	Thanks to Branimir, Stefan, and Michael, FogBugz 5.0.31 is now shipping, our first multi-lingual version, supporting English and German!
Rather than have a different edition of FogBugz, the default edition now just supports both languages. Each user can choose their own language, or, by default, we just look at your browser's language setting.
To ensure that every string is localizable, our developers translate everything to Pig Latin first before handing it off to the German translators.
We have sales and support set up in Munich (call +49 89 14338776 from 9AM to 5PM CEST), and we're set up to respond in German or English to email sent to customer-service at fogcreek.com.
	"
https://www.joelonsoftware.com/2007/03/13/wanted-tech-writer/,Wanted: Tech Writer,2007-03-13T00:10:03+00:00,,Joel Spolsky,News,"
	We're looking for a tech writer to update Mike Gunderloy's book Painless Project Management with FogBugz to cover the new features in FogBugz 6.0.
More than just a manual, this book is a great introduction to software project management. Greg Wilson, writing in Dr. Dobb's Journal, said, ""I think we'll all be better off if this book will become the standard against which other end-user documentation will be measured.""
Mike Gunderloy is busy with other projects, so we need someone to revise the chapters and add about 40% more content to cover new features in FogBugz 6. As the UI of FogBugz has undergone a major refresh, all the screenshots will have to be reshot.
If you're interested in this project drop me an email describing your specific qualifications, and attach a writing sample. Update, 3/20/2007: It turns out Mike will have time to do the second edition, so we're not looking for a writer any more.
	"
https://www.joelonsoftware.com/2007/03/02/office-space-calculations/,Office Space Calculations,2007-03-02T00:10:02+00:00,,Joel Spolsky,News,"
	It's hard to believe that Fog Creek needs more office space already... it's been less than a year since we finished expanding to take over the whole 18th floor here at 535 Eighth. This summer, unfortunately, with all the summer interns, we're going to have some people doubling up in offices, and by May 2008 our lease here will have run out.
In calculating how much space we're going to need, I'm using this formula.
Offices: Most full time employees get 70 or 100 sqft. For summer interns, we're planning three interns per large office, 150 sqft.
Reception area: 250 sqft.
Bookshelves and mailing station: 75-100 sqft.
Supply room: 100-200sqft.
Server closet: 65 sqft.
Lunch room: 30 sqft per employee.
Kitchen: 200 sqft
Conference room / Lounge: 250 sqft.
Shower: 75 sqft
You take the total that gives you and add 30% for circulation (hallways and passageways) which gets you something often called the carpetable square footage. It would be really nice if office space listings were given in carpetable square feet, because that's what the tenant cares about, but the landlords instead make up some kind of number that includes:
building mechanicals
elevator shafts
exterior walls
common bathrooms
a percentage of the building's common areas including the lobby, loading dock, superintendent's office that you can't go in, roof deck that you can't get out on, and the building owner's house in Queens which if you tried to go near a goon would shoot you in the knees (despite his very fetching daughter trying to seduce you from her bedroom window).
Theoretically the building has something called a loss factor which converts between how much space you have to rent and how much actual room you get for offices and espresso stations, but in reality, this just gets you in the ballpark, and every space is different (long narrow spaces need more circulation space) so there's no alternative to having your architect take the floor plans and actually figure out how many offices will fit in there.
The other problem we're going to have is that we can assume that we'll be growing during the course of the typical 5-10 year lease, and we certainly can't afford to rent enough space for our 2017 needs right now. The brokers we spoke to suggested three ways to solve this problem:
Move frequently. Works best rents are going up, because you can get out of your lease early or sublet your old space. Increases the costs of construction and is a pain in the butt.
Get space + an option to expand. Landlords might be able to give you an option to expand at a particular date in the future in their building.
Get too much space and immediately sublet some of it. Landlords don't love this because they don't like their tenants competing against them to rent out space in their own building... the tenants are usually desperate to sublet their extra space and will always undercut the landlord.
We're also toying with a fourth idea: getting too much space and renting it out in small chunks to software startups that need an office or two while they're bootstrapping, and who would appreciate a working environment designed for programmers rather than a coffee shop or one of those coworking places. The trouble is that it would end up costing something on the order of $1500 a month for a private, Fog Creek-quality office, which might be out of the range of bootstrapped startups.
	"
https://www.joelonsoftware.com/2007/04/30/new-elevator-technology/,New elevator technology,2007-04-30T00:10:16+00:00,,Joel Spolsky,News,"
	I had a chance to visit 7 World Trade Center today, the newest office high rise to open in New York.
Instead of having up and down buttons outside the elevators, there's a numeric keypad, where you key in the floor number you're going to. Then an LED display tells you which elevator to wait for. Once you get in the elevator, you don't have to press any buttons (and there are none to press).
This is more efficient than the old system, in which two people who were going to the same floor might have taken separate elevators, adding an unnecessary trip. Presumably, during the early morning rush, it is able to clump people going to nearby floors into the same elevator, thus getting more people to their destinations faster by intelligently optimizing elevator schedules on-the-fly, instead of letting any arbitrary person force any arbitrary elevator to take them to any arbitrary floor.
Can you guess the usability bug?
(select this paragraph for the answer:) People who aren't used to the new system come into the lobby and see an elevator with an open door. They jump into it, and then get stuck going to some random floor because they can't key in their destination once they're inside. (end)
In that old Jack Lemmon / Shirley MacLaine movie The Apartment, a 1950's-era accounting firm accomplishes the same trick by putting human operators (""elevator girls"") in each and every elevator, and having a human traffic director in the lobby direct people to the elevator that will go to their floor.
 
	"
https://www.joelonsoftware.com/2007/04/26/zagreb-edinburgh/,Zagreb / Edinburgh,2007-04-26T00:10:15+00:00,,Joel Spolsky,News,"
	On May 17th I'll be speaking at Web.Start in Zagreb, Croatia. ""Web.Start is the first regional conference catering to the authors of Web projects, aiming to help them realize or improve their projects and helping them reach the knowledge and contacts that will help hem position themselves on the market, fund their projects and achieve success.""
Also.
Inadvertently, I referred to the UK as ""England.""
In my defense, I really did think that I was analyzing data on customers in England specifically. Later I realized that our order form dropdown only has a listing for the United Kingdom.
By way of apologies, if you're in Edinburgh when I pass through there on May 19th, let me buy you a pint. Sign up on this wiki page.
	"
https://www.joelonsoftware.com/2007/04/25/guest-editorial-in-inc/,Guest editorial in Inc.,2007-04-25T00:10:14+00:00,,Joel Spolsky,News,"
	Inc. (the magazine) is a great resource for entrepreneurs. For the last several years, I've been reading it cover-to-cover the day it arrives.
That's why I'm incredibly honored that they invited me to write a guest editorial about recruiting and internships in this month's issue. Thanks to professional editing, it feels a little bit polished compared to my usual style. I don't think I would write, ""Ah, college."" I do remember writing, ""Get me a frosty cold orange juice, hand-squeezed, and make it snappy!""
The picture that accompanies the article in the printed version shows last summer's interns at Top of the Rock:
	"
https://www.joelonsoftware.com/2007/04/25/vba-for-macintosh-goes-away/,VBA for Macintosh goes away,2007-04-25T00:10:13+00:00,,Joel Spolsky,News,"
	The first few versions of Excel (1.0 through 4.0) had a rudimentary macro programming capability using a programming language so embarassing that it never had a name, although it was sometimes called XLM (its file extension). 
In 1991, Visual Basic 1.0 had just shipped to rave reviews. Combining a graphical UI builder similar to NeXTSTEP's Interface Builder with a simple Basic programming language that was highly compatible with QuickBasic, it rapidly became the best selling programming language, a position it maintained until droves of developers switched to web development.
Much as professional programmers sneer at the Basic programming language, market research unambiguously showed that about 2/3rds of the kinds of accidental programmers who develop macros preferred Basic to other languages and perceived it to be easy.
Thus, the obvious choice for Excel's next macro language was some version of Visual Basic.
There were a bunch of complicated requirements, though. Excel was cross platform. The Mac version sold very well. To be a good Mac player, Microsoft had to support Apple's cross-application scripting architecture, Apple Events. Rather than implement two object models, the Excel team concluded that the object model for Excel had to be Apple Events compatible. For complicated reasons, the Visual Basic engine wasn't object oriented ""enough."" In particular, objects could have properties, but those properties couldn't, themselves, be objects. Visual Basic 1.0 didn't support things like ""rows(1).cells(2).value"" because the row object couldn't contain another object.
The VB team implemented an all-new version, for both Macintosh (System 7 on Motorola 68k) and Windows (3.0 on 16 bit processors). This became Visual Basic for Applications, and, soon thereafter, the standalone version, Visual Basic 4.0.
The whole effort took quite a bit of work. However, it was seen as extremely ""strategic."" Here's what that meant. Microsoft thought that if people wrote lots and lots of VBA code, they would be locked in to Microsoft Office. They thought that no matter how hard their competitors tried (in those days, they were Borland, Lotus, and, to a far lesser extent, Claris), they would not be able to emulate the VBA programming environment and the gigantic Excel object model perfectly. At some point, any Excel VBA macro they tried to run would get in trouble and crash. This is the same reason apps under Mono, Wine, etc. hardly ever work the first time out of the box: in any large API or programming interface, there are so many subtle, undocumented details of the behavior, which programmers may be depending on without even realizing it, that any emulation environment will inevitably be imperfect. In the brittle world of programming, such imperfections often mean your program crashes long before it does anything useful. You don't get partial credit when you try to emulate an API.
In essence, in addition to giving Excel users a nice programming language, Microsoft was building a highly strategic barrier to entry, and locking in Excel users, especially corporate users who are most likely to build large systems based on macros.
Eventually, all the Office apps came along: Word, Project, Access, Outlook. What was a strategic lock-in for Excel grew to have major strategic value for the whole Office system.
Last August Microsoft decided to drop VBA from the Macintosh versions of Office. Despite complicated technical explanations, every development decision like this is based on a cost/benefit analysis. Mac users are less likely than Windows users to have business-critical macros, simply because Macs are rarer in large business.
But what's really interesting about this story is how Microsoft has managed to hoist itself by its own petard. By locking in users and then not supporting their own lock-in features, they're effectively making it very hard for many Mac Office 2004 users to upgrade to Office 2008, forcing a lot of their customers to reevaluate which desktop applications to use. It's the same story with VB 6 and VB.Net, and it's the same story with Windows XP and Vista. When Microsoft lost the backwards-compatibility religion that had served them so well in the past, they threatened three of their most important businesses (Office, Windows, and Basic), businesses which are highly dependent on upgrade revenues.
PS: in researching this article, I tried to open some of my notes which were written in an old version of Word for Windows. Word 2007 refused to open them for ""security"" reasons and pointed me on a wild-goose chase of knowledge base articles describing obscure registry settings I would have to set to open old files. It is extremely frustrating how much you have to run in place just to keep where you were before with Microsoft's products, where every recent release requires hacks, workarounds, and patches just to get to where you were before. I have started recommending to my friends that they stick with Windows XP, even on new computers, because the few new features on Vista just don't justify the compatibility problems.
PPS: I was a member of the Excel Program Management team from 1991-1993, where I wrote the spec for VBA for Excel.
	"
https://www.joelonsoftware.com/2007/04/24/deriving-your-demand-curve-using-exchange-rate-fluctuations/,Deriving your demand curve using exchange rate fluctuations,2007-04-24T00:10:12+00:00,,Joel Spolsky,News,"
	When I wrote that article about how to set prices for software, I generally concluded that in many ways you were completely doomed:
""The more you learn about pricing, the less you seem to know... I've been nattering on about this topic for well over 5000 words and I don't really feel like we're getting anywhere.""
In particular, to set prices well, you need to be able to plot your customers' demand curves, and it's almost impossible to figure out what your demand curve is, because it's so hard to charge different customers different amounts and get any kind of reliable data.
Sometimes, though, you luck out.
If you've been selling a product priced in US dollars to customers in Europe, you might actually have a bit of useful data. You see, the US dollar has dropped a lot in the past year. As the dollar falls, your product has become cheaper and cheaper for Europeans.
I looked back on the last year of FogBugz data, dividing the price by the pound sterling exchange rate, and discovered that our single-user license have fluctuated between 64 and 74 pounds, while our ten packs have fluctuated between 49 and 56 pounds, approximately.
That gives me just enough data to plot a segment of the demand curve for English UK customers.
The data is not very conclusive, but it does support some things that I might have believed anyway:
Large customers (on the left, enjoying the volume discount) are not price sensitive. There does not appear to be any correlation between price and sales. These are larger businesses that are used to spending money on things, and it's not their money, anyway.
Small customers (on the right) are price sensitive. They're startups and small ISVs that are used to watching their budget. They exhibit a classic downward-sloping demand curve as economics would predict, and they like prices that end in 9 a bit better than prices around it (there's a small bump below 70 pounds).
On this curve, demand is measured in units purchased per day in England the UK. I've left the Y-axis unlabeled because it's confidential sales data, but the shape is accurate.
There are a lot of reasons to be skeptical about this data:
Since the dollar has basically been marching downwards, lower prices (in pounds) correspond to later dates. I've tried to adjust for this but there could be any number of other reasons why sales are increasing in England the United Kingdom.
The data are only based on sales in England the UK, where different economic factors may be in effect that don't apply to US customers.
Many of our customers may not be looking at the actual exchange rate, but estimating based on their imperfect approximate knowledge of exchange rates (just dividing by 2, for example, is probably common), or thinking in $.
Still, you may find this a useful technique to learn something about the demand curve for your product.
 
	"
https://www.joelonsoftware.com/2007/04/19/outlook-2007-downgrade-no-longer/,Outlook 2007: downgrade no longer,2007-04-19T00:10:11+00:00,,Joel Spolsky,News,"
	Search used to be horrible in Outlook. It was so bad that for all intents and purposes, you couldn't search your old email. Instead, you were encouraged to carefully sort it out into a hierarchy of folders (shudder).
A bunch of third party fixes appeared. My favorite was called Lookout. It provided blazingly fast full text search. Searches took less than a second and really found things. It was built on DotLucene (now called Lucene.Net) an excellent open source search engine.
Microsoft did the only thing that made sense: they bought Lookout (the company) and took the product off the market.
People complained.
Microsoft finally put Lookout back up for download, but they sure weren't happy about it. When Outlook 2007 runs, it checks to see if Lookout was running and disabled it if it was.
Theoretically, Outlook 2007 has search built in, although it's not really built-in: it's built on top of Windows Desktop Search, which comes with Vista and is available as a free download for XP.
The trouble is, Windows Desktop Search is just not that fast. When I ""upgraded"" from Outlook XP to Outlook 2007, the only new ""feature"" I noticed was that full text searches started taking about 30 seconds. About 100 times longer than they did with Lookout. And I couldn't install Lookout: of all the Outlook add-ins in existence, Outlook specifically refused to run Lookout.
The only possible explanation is that someone on the Outlook team is getting paid a bonus for convincing people to switch to Gmail.
The story has a happy ending. Last week Microsoft released a patch for Outlook 2007 which fixed the problem for me (I have a lot of big PST files, which, I'm told, is why search was so slow for me). Now I can search old email quickly enough that I don't forget what I was searching for by the time the results come up. It's not quite as fast as Lookout used to be, but it's a big improvement and makes Outlook less of a downgrade.
	"
https://www.joelonsoftware.com/2007/04/13/moveable-walls/,Moveable walls,2007-04-13T00:10:10+00:00,,Joel Spolsky,News,"
	Among other things, this week I've been working on the new office design with our architect, Roy Leone [flash site].
One of the problems with our cool office here on 8th Avenue is that we outgrew it too quickly. The construction of the second half of the office cost us $100 per square foot of which the landlord only paid $30. All of that money went into walls, desks, bookshelves, and a fishtank which we'll use for about two years and then abandon. There's a good chance that the next tenant will have their own ideas about workspace and demolish everything we did. All in all, it's a big waste of money and environmentally unsound.
Worse, when you spend money on construction like this, it's not really deductable. Here's an example. Let's say your revenue is $100. Your expenses were $80, leaving you with a profit of $20.
Now, let's say you spend that $20 on office construction (what the IRS calls ""leasehold improvements."") It's not deductible yet. You have $0 in the bank, but the IRS thinks you made a $20 profit. Now you have to pay the corporate income tax (35% federal plus 11% or so for New York) on the $20 even though you don't have the $20.
[Technicality: when you move out, you can deduct it all, and you can depreciate it at a rate of approximately 1/39th the amount per year, so you could really deduct fifty cents of the $20.]
We're going to need a much bigger space now: on the order of 15,000 square feet. To build that much office space could cost a couple of million dollars. With the lack of deductability, your bank account goes down by three million dollars. The landlord will pay a fraction of that, but not enough to make it affordable.
There's a loophole. Office furniture can be depreciated much faster than leasehold improvements, over 7 years. So for $20 of office furniture you can deduct about $3 a year: better than nothing. Even better, office furniture is a real asset, so you can lease it. Now you're not out any cash, just a convenient monthly payment, which is 100% deductable.
This is why companies build cubicle farms instead of walls, even though the dollar cost is comparable.
I think I've got a good workaround. We're looking into manufactured walls. They're reusable, recyclable, environmentally friendly, you can take them with you when you move, and you can finance the purchase. A reader who works for Haworth emailed me to suggest their Enclose walls system (illustration at right). I visited their New York showroom and they look great, so we're working on figuring out a totally standard set of parts we can order from Haworth for each private office to create the same extremely nice diagonal offices that we've built in the past out of drywall, metal studs, and acrylic.
[PS Please do not take tax advice from me. I am morbidly unqualified to give tax advice. Ask your tax lawyer or CPA.]
	"
https://www.joelonsoftware.com/2007/04/09/monday-morning-links/,Monday Morning Links,2007-04-09T00:10:09+00:00,,Joel Spolsky,News,"
	Tyler found out that the Grand Canyon Skywalk is a ripoff.
Gerry Gaffney interviews me about customer service for UXpod, the User Experience Podcast (23 minute MP3).
I just got back from a trip to Israel, having, in a fit of stupidity, decided that it wouldn't be such a bad thing to take Air France and change planes at CDG. Nothing surprises the ground crew at CDG more than the arrival of the daily, scheduled flight from Kennedy. Every single thing about that airport is broken and it's the worst place in the world to change planes.
	"
https://www.joelonsoftware.com/2007/05/25/cobranding-copilot/,Cobranding Copilot,2007-05-25T00:10:26+00:00,,Joel Spolsky,News,"
	
New feature: subscribers to Fog Creek Copilot can now cobrand Copilot with their own logo to provide seamless tech support to their clients.
	"
https://www.joelonsoftware.com/2007/05/25/big-company-life/,Big company life,2007-05-25T00:10:25+00:00,,Joel Spolsky,News,"
	
From a Meetup recruiting page: ""At Google, you get your free Google-approved haircut at the Googleplex by a Googler with an IQ in the 99% percentile of all haircutters. The average Googler Haircutter has over 45 RSS feeds in their Google Reader. The walls are very clean, and you will not need to interact with non-Googlers.""
	"
https://www.joelonsoftware.com/2007/05/14/travels/,Travels,2007-05-14T00:10:24+00:00,,Joel Spolsky,News,"
	I'm heading off to the airport to go to Web.Start in Croatia.
Branimir Dolicki, who distributes FogBugz in German-speaking countries, has lived in Zagreb, and was kind enough to make a Google map suggesting some nice places to visit while I'm there.
On the way home, I'll briefly stop in Edinburgh to meet some readers and make amends for trying to annex Scotland to England. I've been reassured by the hotel that I only have to buy the first round, and there'll be a cash bar thereafter.
	"
https://www.joelonsoftware.com/2007/05/12/happy-mothers-day/,Happy Mother’s Day!,2007-05-12T00:10:23+00:00,,Joel Spolsky,News,"
	And remember, Copilot is free today, so here's your chance to switch your mom over to Firefox and install all the latest patches.
	"
https://www.joelonsoftware.com/2007/05/10/typical-econ-101-management/,Typical Econ 101 management,2007-05-10T00:10:22+00:00,,Joel Spolsky,News,"
	Consumerist: ""A Best Buy employee emailed us on April 4, 2007 to confess to the type of behavior mentioned in the lawsuit. He claims that techniques for tricking customer into signing up for subscriptions (such as MSN) were taught to him by a manager and encouraged by Best Buy.""
Virtually all American consumer electronics chains, national ISPs, telephone companies, credit card companies, and cable companies use Econ 101 management. Instead of having smart people figure out how to train their frontline customer service workers to serve customers well and profitably, they make up metrics that sound good and let the low wage, high-turnover customer service people come up with their own systems, which, inevitably, involve scamming customers and ripping them off.
	"
https://www.joelonsoftware.com/2007/05/09/registered-users-on-the-discussion-groups/,Registered users on the discussion groups,2007-05-09T00:10:21+00:00,,Joel Spolsky,News,"
	Very small new feature. You can now sign up for an account over on the discussion groups. When you're logged on, a little green checkbox appears next to your name. You can also star favorite articles and return to them quickly later.
The software running the discussion groups is our in-house, under-development, unannounced version of FogBugz 6, which will be going to beta later this summer, and we're rolling it out now as a part of our continuing efforts to eat our own dogfood.
FAQ!
Q: Is this required? Do I need an account to post?
A: Not at this point. Totally optional.
Q: Is it free?
A: Yes.
Q: Do I have to identify myself?
A: You have to provide a real email address where you can receive email. Use mailinator if this bothers you.
Q: Who's the kiwi!
A: SHHHHHHH!! TOP SECRET! do NOT talk about the kiwi.
	"
https://www.joelonsoftware.com/2007/05/08/fix-your-moms-computer-for-mothers-day/,Fix your mom’s computer for mother’s day,2007-05-08T00:10:20+00:00,,Joel Spolsky,News,"
	This Sunday is Mother's Day. Why not fix your mom's computer?
You know: remove the spyware and adware, install Firefox, and make it so that weird toolbar toast doesn't pop up every 15 seconds.
To make it easy, this Sunday we're making Fog Creek Copilot absolutely free.
No strings attached. Just go to https://www.copilot.com on Sunday, get a free pass, and we'll email your mom a link she can click on to download the helper application. It's really easy.
P.S. Same deal applies for Father's Day, June 17.
	"
https://www.joelonsoftware.com/2007/05/07/edinburgh-reception/,Edinburgh reception,2007-05-07T00:10:19+00:00,,Joel Spolsky,News,"
	Drinks in Edinburgh (May 19) will be at the Radisson SAS hotel, in the St. Giles room. It will easily accommodate us all so don't hesitate to sign up if you can make it (but please do remove your name if you can't).
	"
https://www.joelonsoftware.com/2007/05/03/new-software-for-discussion-groups/,New software for discussion groups,2007-05-03T00:10:18+00:00,,Joel Spolsky,News,"
	As you may know already, the four main discussion groups on this site (Joel on Software, Business of Software, Design of Software, and .NET Questions) are implemented with FogBugz, my company's flagship project management system. The current shipping version of FogBugz is 5.0, but we've been developing 6.0 for a while now and want to do some testing of it under heavy load.
So, if you head on over to the discussion groups, what you'll see is actually running an early, unreleased pre-alpha version of FogBugz 6.0. For now, you won't notice any significant changes except for a slightly different font that matches the rest of FogBugz 6.0. Next week, if all goes well, we'll turn on a new feature which lets you register for an account so you can get one of those green checkboxes that appears in the discussion group next to the names of people who are logged on to FogBugz. At some point, if all goes really well, we'll try to turn on another new feature that makes FogBugz keep track of which posts you've already seen (as long as you're logged on) and show them in a different color... this is a feature we used to rely on the browser to do. This is one of the scarier features since it's kind of data-intensive for very large numbers of users. Which is why we're using you as guinea pigs before we inflict it on our beta testers.
	"
https://www.joelonsoftware.com/2007/05/03/more-about-elevators/,More about elevators,2007-05-03T00:10:17+00:00,,Joel Spolsky,News,"
	Elevators, actually, are a great usability subject, because so many people are familiar with them, and they seem like they should be so simple, but pitfalls are everywhere.
I couldn't resist telling you the second usability bug with those elevators where you select a floor before getting on. People who work in buildings with the new elevators but live in buildings with traditional elevators report that when they get home at night, they sometimes get into the elevator and then just stand there, expecting the elevator to know their floor already.
And one more story. Doug wrote in to say:
""A number of years ago a programmer friend of mine worked for a company that was brought in to optimize the elevators in a San Fran hotel. After doing their due diligence/study, they had the hotel install mirrors in the hallway where the elevators were. By the time the visitors were done preening, the elevator had arrived. Human engineering at its finest.""
	"
https://www.joelonsoftware.com/2007/06/29/management-books/,Management books,2007-06-29T00:10:35+00:00,,Joel Spolsky,News,"
	I'm reading two very good management books right now.
The first is a classic: Up the Organization, by Robert Townsend. Apparently this book first came out in 1970, was widely admired, and slowly fell off everyone's radar, until Wiley republished it last month. Townsend ran Avis back in the day, and when you start to read a management book written in the 1960s, you expect to find secretaries, two-martini lunches, executive golf club memberships, etc. What you find instead is rather refreshing even by today's standards. On Mergers:
If you have a good company don't sell out to a conglomerate.... Conglomerates will promise anything for your people... but once in the fold your company goes through the homogenizer along with all their other acquisitions of the week, and all the zeal and most of the good people leave.
PS for Y Combinator kids: Don't be smug because you think that conglomerates went the way of the dodo. ""Conglomerate"" is just an old word for what you call ""Yahoo, Microsoft, and Google."" Oh and Conde-Nast.
Anyway. Townsend on management consultants:
[They] waste time, cost money, demoralize and distract your best people, and don't solve problems. They are people who borrow your watch to tell you what time it is and then walk off with it.
It sounds like a cliche, right? Townsend probably invented that cliche, boychik. And it's still true, and the jibe at Booz Allen later on in the book is still 100% on the money.
Even better is his disdain for marketing departments:
Marketing... is the name of the game. So it had better be handled by the boss and his line, not by staff hecklers. Once or twice a year for three or four days the boss takes ten, twenty or thirty of his key people... away to some secluded spot. On average they spend twelve hours a day asking unaskable questions, rethinking the business (What are we selling? To whom? At what prices? How do we get it to him? In what form?), four hours a day relaxing and exercising, and eight hours a day sleeping. It's hard work. But more good marketing changes will come out of such meetings than out of any year-round staff department of ""experts"" with ""marketing"" signs on the door.
Boy, I sure wish I had learned that one a few months ago. Two years ago, Seth Godin wrote essentially the same thing.
Anyway, that's just a few of the M's. The whole book is full of great advice like that, albeit focused on larger corporations.
If you're looking for something a little more, er, contemporary, Michael Lopp and his alter-ego Rands have just published Managing Humans: Biting and Humorous Tales of a Software Engineering Manager, which originated with some essays on his excellent blog Rands in Repose. (You can do that?)
Lopp has worked at Netscape, Borland, and Apple. He's the quintessential Silicon Valley middle manager. I hope he doesn't find that term insulting: he's probably the best Silicon Valley middle manager there is. He's brilliant, charismatic, and a poet-philosopher, and I could imagine no better boss. 
You'll find that an awful lot of his book is about managing managers, big company politics, and the human side of getting technical teams to work together. And he has a style quite his own. You can get a taste of it from his classic Incrementalists & Completionists:
What was intriguing about my email repartee with the co-worker was that we weren't disagreeing about whether or not we should do something about the problem. We're arguing about how much we should do. The disagreement reminded me there are two distinct personalities when it comes to devising solutions to problems: Incrementalists and Completionists.
Incrementalists are realists. They have a pretty good idea of what is achievable given a problem to solve, a product to ship. They're intimately aware of how many resources are available, where the political landscape is at any given moment, and they know who knows what. They tend to know all the secrets and they like to be recognized for that fact.
Completionists are dreamers. They have a very good idea of how to solve a given problem and that answer is SOLVE IT RIGHT. Their mantra is, ""If you're going to spend the time to solve a problem, solve it in a manner that you aren't going to be solving it AGAIN in three months."" I used to think that architects were the only real Completionists in an organization, but I was wrong. Architects are the only RECOGNIZED Completionists in the company, but the personality is hiding all over the place.
Finally. One more book.
The same publicist who sent me Up the Organization also included a copy of Ben Casnocha's new book My Start-Up Life. Ben is a charismatic, energetic, brilliant 19 year-old who founded a successful software company, Comcate, at age 14. It's all very adorable. He's the Doogie Howser, MD of software startups, except for the fact that he probably has no idea who Doogie Howser is, given that the show went off the air when he was 4 years old, and, frankly, at age 4 he was probably too busy working on his second IPO to watch much television.
Ben is a seriously cool 19 year old. He's very smart. He's quite a good writer.
But.
But but but. 
His book, unfortunately, tells you almost nothing about starting a company. It's really, really thin on stories of what the actual company did and how things worked. Worse, the book is padded with really, really embarrassing sidebars in which Ben gives you jejune Great Thoughts about business management.
Great entrepreneurs show up, take small risks (and sometimes, large risks), raise their hand when they're confused, and try to figure out what's going on and how a situation could be made better.
When you show up and raise your hand, you've already outperformed 90 percent of the crowd.
And:
The person on the receiving end of the mentoring relationship should work hard to insure it's not totally a one-way street.
Ben Ben Ben. 
Yes, you're smart and good looking. Yes, you know more about starting a software company than practically any other 19 year old. And sure, I'll be happy to invest in your next startup, or hire you, or adopt you, whatever.
But. Mark my words. You're going to reach the ripe old age of 23, and you're going to look back on this book you wrote, and you're going to say, ""how on earth did anyone let me publish such self-important crap,"" and you're practically going to die of embarrassment. Trust me: I'm in my 40s, and I'm still morbidly embarrassed by the pompous, arrogant, self-important crap I write on this site here, up to and including this very sentence.
Feel free to skip this book.
	"
https://www.joelonsoftware.com/2007/06/21/fogbugz-world-tour/,FogBugz World Tour,2007-06-21T00:10:34+00:00,,Joel Spolsky,News,"
	In another month or two, FogBugz 6.0 (now in beta) will be shipping. It's cool. It's very cool. It has a kiwi.
Because I was born without the part of the brain that allows normal people to learn, over time, that Travel is Hell, I thought it would be fun to travel to a few cities around the world and demo it myself, in front of a live audience.
The demo will probably take about 30 - 45 minutes, and I'll leave lots of time for questions - not just questions about FogBugz, but anything about the software development process, really. It'll be completely free.
Anyway, I'm not sure where to do these. Silicon Valley? Yes. Boston, Seattle, London... almost certainly. But beyond that, I'm not sure. So I set up a little survey. If you're interested in attending, please fill out the survey and tell me where you're located. I'll collate the responses and figure out some good places to stop on the FogBugz World Tour of 2007.
	"
https://www.joelonsoftware.com/2007/06/21/web-designer-wanted/,Web designer wanted,2007-06-21T00:10:33+00:00,,Joel Spolsky,News,"
	
I'm looking for a freelance web designer located here in New York to redo our sites: fogcreek.com, copilot.com, etc. We need someone with strong xhtml/css skills, a history of making great looking, modern web sites, and some print experience. Know anyone?
	"
https://www.joelonsoftware.com/2007/06/20/fogcreekde/,fogcreek.de,2007-06-20T00:10:32+00:00,,Joel Spolsky,News,"
	Fogcreek.de is now completely live, offering full-service sales and support of FogBugz in German from Munich. FogBugz itself works in English or German, based on the user's choice.
This is our first real international distributor, and a major milestone for Fog Creek Software. If you're using FogBugz in Germany, Austria, or Switzerland, give Branimir a call to introduce yourself.
	"
https://www.joelonsoftware.com/2007/06/12/font-smoothing-anti-aliasing-and-sub-pixel-rendering/,"Font smoothing, anti-aliasing, and sub-pixel rendering",2007-06-12T00:10:31+00:00,,Joel Spolsky,"Software designer, News","
	Apple and Microsoft have always disagreed in how to display fonts on computer displays. Today, both companies are using sub-pixel rendering to coax sharper-looking fonts out of typical low resolution screens. Where they differ is in philosophy.
Apple generally believes that the goal of the algorithm should be to preserve the design of the typeface as much as possible, even at the cost of a little bit of blurriness.
Microsoft generally believes that the shape of each letter should be hammered into pixel boundaries to prevent blur and improve readability, even at the cost of not being true to the typeface.
Now that Safari for Windows is available, which goes to great trouble to use Apple's rendering algorithms, you can actually compare the philosophies side-by-side on the very same monitor and see what I mean. I think you'll notice the difference. Apple's fonts are indeed fuzzy, with blurry edges, but at small font sizes, there seems to be much more variation between different font families, because their rendering is truer to what the font would look like if it were printed at high resolution.
(Note: To see the following illustration correctly, you need to have an LCD monitor with pixels arranged in R,G,B order, like mine. Otherwise it's going to look different and wrong.)
The difference originates from Apple's legacy in desktop publishing and graphic design. The nice thing about the Apple algorithm is that you can lay out a page of text for print, and on screen, you get a nice approximation of the finished product. This is especially significant when you consider how dark a block of text looks. Microsoft's mechanism of hammering fonts into pixels means that they don't really mind using thinner lines to eliminate blurry edges, even though this makes the entire paragraph lighter than it would be in print.
The advantage of Microsoft's method is that it works better for on-screen reading. Microsoft pragmatically decided that the design of the typeface is not so holy, and that sharp on-screen text that's comfortable to read is more important than the typeface designer's idea of how light or dark an entire block of text should feel. Indeed Microsoft actually designed font faces for on-screen reading, like Georgia and Verdana, around the pixel boundaries; these are beautiful on screen but don't have much character in print.
Typically, Apple chose the stylish route, putting art above practicality, because Steve Jobs has taste, while Microsoft chose the comfortable route, the measurably pragmatic way of doing things that completely lacks in panache. To put it another way, if Apple was Target, Microsoft would be Wal-Mart.
Now, on to the question of what people prefer. Jeff Atwood's post from yesterday comparing the two font technologies side-by-side generated rather predictable heat: Apple users liked Apple's system, while Windows users liked Microsoft's system. This is not just standard fanboyism; it reflects the fact that when you ask people to choose a style or design that they prefer, unless they are trained, they will generally choose the one that looks most familiar. In most matters of taste, when you do preference surveys, you'll find that most people don't really know what to choose, and will opt for the one that seems most familiar. This goes for anything from silverware (people pick out the patterns that match the silverware they had growing up) to typefaces to graphic design: unless people are trained to know what to look for, they're going to pick the one that is most familiar.
Which is why Apple engineers probably feel like they're doing a huge service to the Windows community, bringing their ""superior"" font rendering technology to the heathens, and it explains why Windows users are generally going to think that Safari's font rendering is blurry and strange and they don't know why, they just don't like it. Actually they're thinking... ""Whoa! That's different. I don't like different. Why don't I like these fonts? Oh, when I look closer, they look blurry. That must be why.""
 
	"
https://www.joelonsoftware.com/2007/06/11/apple-safari-for-windows-the-worlds-slowest-web-browser/,Apple Safari for Windows: The world’s slowest web browser,2007-06-11T00:10:30+00:00,,Joel Spolsky,News,"
	Apple is advertising Safari for Windows as ""the world's fastest and easiest-to-use web browser."" Fast, maybe, in page rendering speed, but ridiculously slow to launch... on my brand new, 2.33 GHz Core-2 Duo laptop, it takes an insane amount of time to launch: 57 seconds, during which you don't even get an hourglass, so you don't even know it's launching.
By comparison, Firefox takes about 3 seconds and Internet Explorer takes about 2.
UPDATE: OK, I'm wrong. As far as I can tell, Safari is slow the first (few?) times you run it, while it does something, I don't know what, but once that thing is done, it launches as fast as other browers. Sorry!
Apple is and always has been severely dishonest in all their advertising when it comes to performance. This is the company that spent years telling us that the PowerPC was faster than Intel, only, suddenly, to change their claims midsentence without an explanation when reality caught up with them, in a scene almost exactly like the scene in 1984: ""Merely it became known, with extreme suddenness and everywhere at once, that Eastasia and not Eurasia was the enemy.""
This is the company that's about to release the iPhone on a slow, last-generation data network but is running TV ads that have edited out all downloads and waiting time that network entails.
These products may be cool, but I don't understand why Apple should be allowed to lie so blatently in their advertising about performance and get away with it. I'm sorry, but a web browser that takes a minute to launch is not going to win any converts on Windows. 
PS I know; the Apple press release about how ""fast"" Safari is refers to ""page rendering speed."" Frankly, that is almost completely irrelevant given that the bottleneck in displaying pages is mostly download speed and network throughput. Another case where the big print giveth and the fine print taketh away, it adds up to one thing: a lie. 
PPS Yes, I know it's a beta. Eventually, the Safari programmers will figure out the preloading tricks that IE and Firefox use to get quick startup time (at the cost of slow Windows startup; Raymond Chen explains it here). In the meantime, when Apple's marketing team goes around making untrue claims about performance, they make the company look like liars, not innovators.
PPPS Safari even managed to bring the inferior font rendering of the OS X platform to Windows, no easy trick.
PPPPS Safari for Windows means we don't have to buy as many Macs for compatibility testing.
PPPPPS 20 minutes later: The more I run Safari on Vista, the faster it launches. Am I hallucinating? Is there a cosmic force that means just when I complain about Safari taking 57 seconds to launch, as soon as that complaint is made public, it launches much more quickly? Am I going insane? Or is someone playing a clever prank on me? It's this kind of epistemological, reality-shifting shit that makes me not want to blog any more. We are at war with Eastasia. We were always at war with Eastasia. 2+2=5, and I love Steve Jobs.
	"
https://www.joelonsoftware.com/2007/06/08/paying-for-recruiting-trips/,Paying for recruiting trips?,2007-06-08T00:10:29+00:00,,Joel Spolsky,News,"
	bronek asks:
I'm from central Europe, looking for programming work in UK. After doing the phone interviews and more or less silly tests, it's time for some face-to-face interviews...
Now, I'm not quite comfortable of paying the expenses of flying and accommodation if they just want to chit-chat with one more candidate, and it's kind of hard to tell over the phone if this is the case.
What is your opinion about getting (or trying to) the recruiting agency (or the hiring company) to pay for the flight?
Well, bronek, if you're really committed to getting a job in the UK, you're probably applying for more than one job.
It's probably worth it to you to pay for the trip if you're going to go to a bunch of interviews. Maybe plan a trip for a week, stay with friends, fly the low cost airlines, and do five interviews in a week.
Then you could politely tell any interested employers who don't want to pay for the trip, ""I'd be happy to interview in person. I'm planning a trip to the UK for all the interviews in two months. See you then.""
Worst case scenario, you don't spend very much money on the trip, you almost certainly get a job, and you probably even have your choice of employers.
But there's a good chance the mere mention of other potential employers will make these guys realize you're actually in heavy demand. When they think that other employers are competing for your services, you'll seem like a more desirable candidate. This is the principle of social proof. They'll also start to worry that someone else will snatch you up. This is the principle of scarcity. ""Opportunities seem more valuable to us when their availability is limited,"" says Cialdini.
The combination will drive up your market value, and probably even motivate the hiring company to pay for the flight.
	"
https://www.joelonsoftware.com/2007/06/07/a-game-of-inches/,A game of inches,2007-06-07T00:10:28+00:00,,Joel Spolsky,"Fog Creek Software, News","
	""Did someone leave the radio on in the bathroom?"" I asked Jared. There was a faint sound of classical music.
""No. It's coming from outside. It started while you were away and happens every night.""
We live in an apartment building in New York. There are neighbors on all sides. We're used to hearing TV shows from below, and the little kid in the apartment directly above us has a favorite game: throwing a bunch of marbles on the floor and then throwing himself around the room violently. I'm not sure how you keep score. As I write this, he's running rapidly from room to room crashing into things. I can't wait until he's old enough for paintball.
Anyway. This classical-music-late-at-night thing had never happened before.
Worse, it was some kind of sturm-und-drang romantic crap that was making me angry right when I wanted to fall asleep.
Eventually, the music stopped, and I was able to drift off to sleep. But the next night, when the music resumed at midnight, I was really worn out, and it was more self-important Wagner rubbish, with pompous crescendos that consistently woke me up every time I finally drifted off to sleep, and I had no choice but to go sit in the living room and look at pictures of lolcats until it stopped, which it finally did, around 1 am.
The next night I had had enough. When the music started at about midnight, I got dressed and started exploring the apartment building. I crept around the halls, listening at every door, trying to figure out where the music came from. I poked my head out windows and found an unlocked door leading to an airshaft where the music was amazingly loud. I climbed up and down the stairs, and listened closely from the window on each and every landing, until I was pretty convinced that the problem was from dear old Mrs. C's apartment, #2B, directly below us.
I didn't think Mrs. C, who is probably in her 60s, was even awake that late, let alone listening to music loudly, but I briefly entertained the possibility that the local classical music station was doing the Ring Cycle or something and she was staying up late to hear it.
Not bloody likely.
One thing I had noticed was that the music seemed to go on at midnight every night, and off at 1:00 am. Somehow, that made me think it was a clock radio, which probably had the alarm factory set to 12:00.
I couldn't bring myself to wake up an old lady downstairs on the mere suspicion that music was coming from her apartment. Frustrated, I went back to my apartment and caught up on xkcd. I was depressed and angry, because I hadn't solved the problem. I festered and scowled all the next day.
The next evening, I knocked on Mrs. C's door. The super had told me she was going away for the entire summer the next day so if the problem was coming from her apartment I better find out pronto.
""Sorry to bother you,"" I said. ""I've noticed that every night around midnight there's loud classical music coming from the airshaft behind our apartments and it's keeping me awake.""
""Oh no, it's not me!"" she insisted, as I suspected she would. Of course not: she probably goes to sleep at a completely normal hour and certainly never plays loud music that bothers the neighbors! 
I thought she was a little hard of hearing and probably never noticed the thing blaring away from her spare room in the middle of the night. Or maybe she was a good sleeper.
It took a few minutes, but I finally convinced her to check if there was any kind of clock radio in the room below my window.
Turns out there was. Right in an open window beneath my own bedroom window. When I saw that it was tuned to 96.3, WQXR, I knew I had found the culprit.
""Oh, that thing? I have no idea how to use that thing. I never use it,"" she said. ""I'll disconnect it completely.""
""Not necessary,"" I said, and turned off the alarm, set the volume to zero, and, in my late-onset OCD, set the clock to the exact time.
Mrs. C was terribly apologetic, but it really wasn't her fault. It took me-me!-quite a while to figure out how to operate the damn clock radio, and let me tell you, sonny boy, I know a thing or two about clock radios. The UI was terrible. Your average little old lady didn't stand a chance. 
Is it the clock radio's fault? Sort of. It was too hard to use. It had an alarm that continued to go off daily even if nobody touched it the day before, which is not the greatest idea. And there's no reason to reset the alarm time to midnight after a power outage. 7:00 am would be a completely civilized default.
Somehow, over the last few weeks, I've become hypercritical. I'm always looking for flaws in things, and when I find them, I become single-minded about fixing them. It's a particular frame of mind, actually, that software developers get into when they're in the final debugging phase of a new product.
Over the last few weeks, I've been writing all the documentation for the next big version of FogBugz. As I write things, I try them out, either to make sure they work the way I think they should, or to get screenshots. And every hour or so, bells go off. ""Wait a minute! What just happened? That's not supposed to work like that!""
And since it's software, I can always fix it. HA HA! Just kidding! I can't make head or tail out of the code any more. I enter a bug and someone with a clue fixes it.
Dave Winer says, ""To create a usable piece of software, you have to fight for every fix, every feature, every little accommodation that will get one more person up the curve. There are no shortcuts. Luck is involved, but you don't win by being lucky, it happens because you fought for every inch.""
Commercial software-the kind you sell to other people-is a game of inches. 
Every day you make a tiny bit of progress. You make one thing just a smidgen better. You make the alarm clock default to 7:00am instead of 12:00 midnight. A tiny improvement that will barely benefit anyone. One inch.
There are thousands and tens of thousands of these tiny things.
It takes a mindset of constant criticism to find them. You have to reshape your mind until you're finding fault with everything. Your significant others go nuts. Your family wants to kill you. When you're walking to work and you see a driver do something stupid, it takes all your willpower to resist going up to the driver and explaining to him why he nearly killed that poor child in the wheelchair.
And as you fix more and more of these little details, as you polish and shape and shine and craft the little corners of your product, something magical happens. The inches add up to feet, the feet add up to yards, and the yards add up to miles. And you ship a truly great product. The kind of product that feels great, that works intuitively, that blows people away. The kind of product where that one-in-a-million user doing that one-in-a-million unusual thing finds that not only does it work, but it's beautiful: even the janitor's closets of your software have marble floors and solid core oak doors and polished mahogany wainscoting.
And that's when you know it's great software.
Congratulations to the FogBugz 6.0 team, outlandishly good players of the game of inches, who shipped their first beta today, on track for final release at the end of the summer. This is the best product they've ever produced. It will blow you away.
	"
https://www.joelonsoftware.com/2007/06/05/smart-and-gets-things-done/,Smart and Gets Things Done,2007-06-05T00:10:27+00:00,,Joel Spolsky,News,"
	I wrote a book!
The title is Smart and Gets Things Done: Joel Spolsky's Concise Guide to Finding the Best Technical Talent.
It is, as promised, concise. Even though it's hardback, it's about the size of a paperback romance novel, with wider margins, and about 180 pages, including some blank ones.
To pad it out, Apress hired my favorite illustrator, Terry Colon, to illustrate it. He did a fantastic job (the cover illustration at right will give you a feel for his style). His goofy, frantic, manically hilarious illustrations are reason enough to buy the book.
Here's what you get:
Introduction
Chapter 1: ""Hitting the High Notes""
Chapter 2: ""Finding Great Developers""
Chapter 3: ""A Field Guide to Developers""
Chapter 4: ""Sorting Resumes""
Chapter 5: ""The Phone Screen""
Chapter 6: ""The Guerrilla Guide to Interviewing""
Chapter 7: ""Fixing Suboptimal Teams""
Appendix: ""The Joel Test""
As you know, I write first and foremost for the web, so most of this material originated as Joel on Software articles. As usual, I did a bunch of reorganizing, reformatting, and rewriting to make it into a book-quality thing that you can read from beginning to end, and, since it's such a short book, you should be able to do that during the commercials of a typical half-hour sitcom.
It's cheap, about $13 on Amazon right now, so get your copy now before they run out.
	"
https://www.joelonsoftware.com/2007/07/25/year-end-chaos/,Year-end chaos,2007-07-25T00:10:49+00:00,,Joel Spolsky,News,"
	Liz and I have been working to get ready for the FogBugz 6.0 World Tour, in which I travel from city to city (accompanied by a programmer) giving demos of all the cool features in the upcoming version. This is basically about the same logistical complexity as planning a family trip to DisneyLand, times 32.
Very little has been finalized, but it looks like the first round will hit Vancouver, Seattle, Chicago, New York, Princeton, Philadelphia, Boston, Toronto, Waterloo, Washington, Atlanta, Dallas, Austin, Denver, San Francisco, Berkeley, Newark (CA), Mountain View, Santa Monica, Irvine, and San Diego. The second round will hit Auckland, Christchurch, Brisbane, Melbourne, Sydney, Munich, Copenhagen, Amsterdam, London, Cambridge, and Dublin. Whenever my squirt nephew decides to have his bar mitzvah, we'll come to Tel Aviv.
Given the cost of flights, hotels, rental cars, meals, catering (we'll serve refreshments), printing (we'll pass out brochures), FogBugz polo shirts, etc., it looks like the cost for this trip is going to come to about $64 per attendee... that is, it's costing us $64 to put on a live demo of FogBugz for each person who attends. Phew. No wonder people do those crappy webinar things instead. I still think it's worth it, though.
	"
https://www.joelonsoftware.com/2007/07/20/the-universe-aligns-to-prove-my-point/,The universe aligns to prove my point,2007-07-20T00:10:48+00:00,,Joel Spolsky,News,"
	Clay: ""...the sites that suffer most from anonymous postings and drivel are the ones operating at large scale. If you are operating below that scale, comments can be quite good, in a way not replicable in any 'everyone post to their own blog'"".
Dave: ""...he says that I don't allow comments on Scripting News. That's not exactly true, there are comments here, but you have to look carefully to find them. I find this ups the quality enormously - people don't generally comment here to embarass anyone or to provoke a fight - there isn't enough traffic to interest those people. But the people who want to add information to a thread here on Scripting News, and have been reading the site long enough to know what it's about, they find their way to the comments and add something to the mix.""
Both excellent comments. Thank you. This is an example of people posting their replies on their own site. There is a lot more value to them than the comments about this post on my own discussion forum. Why? Because I know who Clay is, I've met him, he wrote A Group Is Its Own Worst Enemy, which, to this date, is the most important, insightful, and brilliant understanding of group dynamics in online communities. Dave has something to add to the conversation; some thoughts he's had since the article I quoted him on. Great content, in their own spaces.
And you're not only hearing their replies because I'm telling you about them. You might be hearing about it from Techmeme, which has really cool algorithms to figure out where the conversation is, and put it back together. Look at Techmeme right now:
They reconstructed the conversation magically for you. Of course, Techmeme only works for the biggest, noisiest bloggers. But Bloglines will do it for anyone.
PS to Clay: I'm still in awe at:
Now, there's a large body of literature saying ""We built this software, a group came and used it, and they began to exhibit behaviors that surprised us enormously, so we've gone and documented these behaviors."" Over and over and over again this pattern comes up. (I hear Stewart [Brand, of the WELL] laughing.) The WELL is one of those places where this pattern came up over and over again.
I apologize for falling into such a common pattern!
	"
https://www.joelonsoftware.com/2007/07/20/learning-from-dave-winer/,Learning from Dave Winer,2007-07-20T00:10:47+00:00,,Joel Spolsky,News,"
	Even if you never read a single thing Dave Winer wrote in his 439 years of blogging, it's worth taking time to study his ideas about comments on blogs (he doesn't allow them).
""...to the extent that comments interfere with the natural expression of the unedited voice of an individual, comments may act to make something not a blog.... The cool thing about blogs is that while they may be quiet, and it may be hard to find what you're looking for, at least you can say what you think without being shouted down. This makes it possible for unpopular ideas to be expressed. And if you know history, the most important ideas often are the unpopular ones.... That's what's important about blogs, not that people can comment on your ideas. As long as they can start their own blog, there will be no shortage of places to comment.""
The important thing to notice here is that Dave does not see blog comments as productive to the free exchange of ideas. They are a part of the problem, not the solution. You don't have a right to post your thoughts at the bottom of someone else's thoughts. That's not freedom of expression, that's an infringement on their freedom of expression. Get your own space, write compelling things, and if your ideas are smart, they'll be linked to, and Google will notice, and you'll move up in PageRank, and you'll have influence and your ideas will have power.
When a blog allows comments right below the writer's post, what you get is a bunch of interesting ideas, carefully constructed, followed by a long spew of noise, filth, and anonymous rubbish that nobody ... nobody ... would say out loud if they had to take ownership of their words. Look at this innocent post on a real estate blog. By comment #6 you're already seeing complete noise. By #13 you have someone cursing and saying ""go kill yourself."" On a real estate blog. #18 and #23 have launched into a middle eastern nuclear conflageration which continues for 100 posts. They're proving John Gabriel's Greater Internet Fuckwad Theory every day. Pathetic. On a real estate blog. Lockhart Steele, is this what you want Curbed to look like? Really? It's not fun, freewheeling freedom of expression, yay first amendment!. It's mostly anonymous hate speech.
OK, that's an extreme example... or is it? I don't know how many times I've read a brilliant article someone wrote on a blog. By the end of the article, I'm excited, I'm impressed, it was a great article. And then you get the dribble of morbid, meaningless, thoughtless comments. If the article, for example, mentions anything in anyway related to Microsoft, you get some kind of open source nuclear war. If the article mentions web browsing in any way, there's always some person without an outbound filter who feels compelled to tell you about how he uses Opera, so he doesn't have this problem, although, frankly, I could care less what Anonymous uses. He's not even human to me, he's anonymous. What web browser he uses doesn't amount to a hill of beans. It's not a single bean. It's not even the memory of last week's huevos rancheros. It's just noise. Useless noise. Thoughtless drivel written by some anonymous non-entity who really didn't read the article very carefully and didn't come close to understanding it and who has no ability whatsoever to control his typing diarrhea if the site's software doesn't physically prevent him from posting.
Dave is absolutely right. The way to give people freedom of expression is to give them a quiet place to post their ideas. If other people disagree, they're welcome to do so... on their own blogs, where they have to take ownership of their words.
I'm really losing patience with anonymous posts, ""anon"", ""anon for this one,"" people who don't even have the energy to sign their messages with a made up name and leave the whole signature blank. Frankly if every anonymous post disappeared from the Joel on Software discussion group, the overall quality of the conversation would go up, way up, and the discussion would be way more interesting. Try this as an experiment: read through the last few dozen topics on the discussion group, and imagine that all the ""anonymous"" and signed-blank posts just disappeared. Would the quality of conversation be higher? Would that be a place you'd be more likely to want to spend time in?
	"
https://www.joelonsoftware.com/2007/07/19/open-house-today/,Open house today,2007-07-19T00:10:46+00:00,,Joel Spolsky,News,"
	Reminder! The annual Fog Creek open house is today (Thursday), so if you're in New York, I'd love to meet you in person and show you around.
Come on by between 5:00 pm and 7:00 pm to see our offices and meet the Fog Creek team including this years' interns, a.k.a. the caribou, the software management trainees, and me. Bring your boss to prove how private offices, 30"" LCDs, and Aeron chairs are possible. See the fish. Drink free wine. Show off your new iPhone. No RSVP necessary.
Fog Creek Software is at 535 8th Ave., on the 18th Floor.
	"
https://www.joelonsoftware.com/2007/07/16/gearing-up/,Gearing up,2007-07-16T00:10:45+00:00,,Joel Spolsky,News,"
	I'm still working ferociously on getting ready for the FogBugz World Tour. We won't have the final list of cities until we can get hotel meeting rooms confirmed in each city, but it looks like the first round will hit about 20 cities in the US and Canada plus a few stops in New Zealand, Australia, and Europe. In any case, I'm looking at about six weeks on the road.
Fog Creek's office manager Liz is planning all the logistics for the event. Today she faxed around about 80 RFPs to hotels to get meeting rooms lined up. (There's a huge business opportunity there-getting hotel event coordinators onto the Internet). I have to buy a bunch of gear:
a very light, bright, robust video projector
a very portable PA system and a couple of lavalier mics
a subnotebook that can serve as my primary desktop while I'm on the road but which won't break my back
Is there such a thing as a video projector which connects to the PC using Cat-5 instead of video cable, so I don't have to carry a 50 foot video cable around?
What's a good subnotebook? Does anyone have any experience (good or bad) with the new flash-drive based notebooks?
What about the portable PA systems? Is there something self-contained that fits in the overhead bin on a plane?
	"
https://www.joelonsoftware.com/2007/07/16/vesting/,Vesting,2007-07-16T00:10:44+00:00,,Joel Spolsky,News,"
	Steve from Richmond, VA, wrote in to ask a couple of questions:
""With software development, is it better to get something out there with customers and then continually improve or build the best wiz-bang software and then start marketing?""
That depends. You want to avoid the Marimba Phenomenon, where you get so much publicity in the early days that everybody checks out your underwhelming offering and decides that you're never going to have something worth looking at. (I should rename this the live.com phenomenon, in honor of Microsoft's horrible launch of live.com. Or the Zune phenomenon.) On the other hand, small startups are unlikely to have the problem of too much attention, so most companies with a 1.0 product can certainly get real customers with their earliest usable versions and build from there.
Steve is starting a company with a software developer.
""Assuming the software developer is getting paid at a reduced rate, but concurrently with his development. If you were giving also giving him some equity in your company, would you make that equity contingent on phases of the software getting done, the entire software getting done or vesting over time.""
The standard solution is to vest over time - anywhere from four to seven years - with unvested shares being forfeited if he leaves for any reason. If the software doesn't get done, you fire him and he loses the unvested shares - it's not necessary to make the vesting contingent specifically on finishing the software (besides, ""finishing"" software would be too hard to define in a contract).
You can set it up either as normal vesting (where he gets, say, 20% of the shares every year) or reverse vesting (where he gets the shares up front, but you have the right to repurchase them for a penny, and this right evaporates by 20% every year). Reverse vesting is preferable for tax reasons, because at the time you give him the shares, they're worth a lot less, so there's less income and more capital gains, which are taxed at a lower rate.
	"
https://www.joelonsoftware.com/2007/07/13/business-of-software-conference/,Business of Software Conference,2007-07-13T00:10:43+00:00,,Joel Spolsky,News,"
	The Business of Software conference coming up at the end of October is new this year, but it's got a pretty phenomenal line-up of speakers:
Guy Kawasaki practically invented the field of high tech evangelism working at Apple in the 1980s, and has written some of the best books about marketing I've read (my personal favorite is The Macintosh Way.)
Rick Chapman wrote the encyclopedia of software marketing, The Product Marketing Handbook for Software, and the hilarious In Search of Stupidity, which makes the quite convincing argument that success in software is a matter of just not doing stupid things. (My foreword to In Search of Stupidity).
Hugh MacLeod does those great cartoons, which is reason enough to listen to him, but he's also the marketing strategist for the only Web 2.0 wine company.
Tim Lister needs no introduction to this crowd. He's the author of Peopleware, the first and last thing you have to read about managing software teams. That's really all you need to know.
Eric Sink, moderator of our own Business of Software forum, co-founder of SourceGear, the classic small software company success story.
Also speaking: Dan Nunan, Jennifer Aaker, Jeffrey Pfeffer, Bill Buxton, and me. Register here.
	"
https://www.joelonsoftware.com/2007/07/12/why-we-reimplemented-sql-server-mirroring/,Why we reimplemented SQL Server Mirroring,2007-07-12T00:10:42+00:00,,Joel Spolsky,News,"
	Our systems administrator Michael Gorsuch explains it: ""So, yes, even though the SQL Server Mirroring technology sounds like an ideal fit at first, it is easy to see how it doesn't really suit our needs.""
Back in 2001, I wrote: ""When you're working on a really, really good team with great programmers, everybody else's code, frankly, is bug-infested garbage, and nobody else knows how to ship on time. When you're a cordon bleu chef and you need fresh lavender, you grow it yourself instead of buying it in the farmers' market, because sometimes they don't have fresh lavender or they have old lavender which they pass off as fresh.""
	"
https://www.joelonsoftware.com/2007/07/12/fog-creek-open-house/,Fog Creek Open House,2007-07-12T00:10:41+00:00,,Joel Spolsky,News,"
	We do it every summer... an open house at the Fog Creek offices in New York City.
Come on by next Thursday, July 19, 2007, between 5:00 pm and 7:00 pm to see our offices and meet the Fog Creek team including this years' interns, a.k.a. the caribou, the software management trainees, and me. It's always a fun chance to meet other software developers in the New York area and geek out about impedence mismatch. Bring your boss to prove how private offices, 30"" LCDs, and Aeron chairs are possible. Drink free wine. Show off your new iPhone. No RSVP necessary.
Fog Creek Software is at 535 8th Ave., on the 18th Floor.
	"
https://www.joelonsoftware.com/2007/07/10/craftsmanship/,Craftsmanship,2007-07-10T00:10:40+00:00,2016-12-12T15:33:50+00:00,Joel Spolsky,News,"
	
Maxim Shemanarev: ""The amazing thing is there is no rocket science! Nothing to patent! All information is publicly available and/or deducible from what we see. You only need to use a bit of your engineering intuition plus common sense. So, it goes. You can download an application with full sources in the end of the article and play with it, but not now, please. Now be patient to read rather a long story."" Wow!
	"
https://www.joelonsoftware.com/2007/08/28/from-the-utopia-department/,From the utopia department,2007-08-28T00:10:52+00:00,,Joel Spolsky,News,"
	""Basically a small company has a flavor to it, whereas a big company is sort of like checking into the Bellagio in Las Vegas. It's a nice hotel but it has 5,000 rooms, so don't expect anybody to remember your name. A small company is more like a bed and breakfast. You're going to have a great time because you get along with people and it's a much friendlier experience. You don't really mind that the bathroom is down the hall because the people made a special vegetarian meal for you and then showed you around town. On the other hand, you might be at a bed and breakfast where they have weird leather implements and lots of cats.""
- From A Conversation with Joel Spolsky in ACM Queue.
	"
https://www.joelonsoftware.com/2007/08/20/even-the-office-2007-box-has-a-learning-curve/,Even the Office 2007 box has a learning curve,2007-08-20T00:10:51+00:00,,Joel Spolsky,News,"
	I bought a retail copy of Office 2007 today (I'm loading up the new laptop I got for the world tour, which is a Thinkpad X61s), and I must be a complete spaz, but I simply could not figure out how to open the bizarre new packaging.
It's a hard plastic case, sealed in two different places by plastic stickies. It represents a complete failure of industrial design; an utter F in the school of Donald Norman's Design of Everyday Things. To be technical about it, it has no true affordances and actually has some false affordances: visual clues as to how to open it that turn out to be wrong.
This is the same box that Vista comes in. Nick White over at Microsoft seems proud of the novel design, but from the comments on the web it seems I'm not the only one who couldn't figure out how to open it. It seems like even rudimentary usability testing would have revealed the problem. A box that many people can't figure out how to open without a Google search is an unusually pathetic failure of design. As the line goes from Billy Madison: ""I award you no points, and may God have mercy on your soul.""
Wasting five minutes trying to get the goddamned box open is just the first of many ways that Office 2007 and Vista's gratuitous redesign of things that worked perfectly well shows utter disregard for all the time you spent learning the previous versions.
I've tested Office 2007 extensively, and find it a tolerable replacement for the previous version, although it's extremely frustrating every time I have to spend several minutes finding something that I knew exactly how to find in the previous version. Even though there's no reason to upgrade to Office 2007, if you're setting up a new system, it's just as good as the previous version, even a little better in some places. But Vista is another story.
I've been using Vista on my home laptop since it shipped, and can say with some conviction that nobody should be using it as their primary operating system - it simply has no redeeming merits to overcome the compatibility headaches it causes. Whenever anyone asks, my advice is to stay with Windows XP (and to purchase new systems with XP preinstalled).
PS The FogBugz 6.0 World Tour is filling up fast. Austin is already full. Vancouver, Seattle, Kitchener, and Irvine have just a few seats left. Sign up now!
	"
https://www.joelonsoftware.com/2007/08/16/world-tour-north-america/,World tour: North America,2007-08-16T00:10:50+00:00,,Joel Spolsky,News,"
	What's the point, exactly, of physically going to 21 different cities to demo FogBugz 6.0 in person? Why not just put a video up on the web and be done with it?
A long long time ago when Windows 3.0 first came out, Microsoft organized a huge, permanent ""Windows Seminar"" team of intelligent, charismatic young people who went from city to city giving demos of Windows, Word, and Excel. Back then, showing someone cut and paste from one GUI window to another was astonishing.
Since then, I haven't seen a lot of demo tours like the one we're planning. Travel just costs too much. Business hotels all charge ridiculous amounts for catering ($15 per person for coffee), audio visual equipment ($500 to rent a projector), and as many additional gougy-charges as they can think of. $50 for sneezing. $120 to have the window shut. And $92 to have the lights on.
When we did up our budget, including hotel rooms, meeting space, rental cars, airfare, food, a projector, coffee and tea for attendees, and a printed brochure to hand out, our estimate is that it's going to cost us somewhere between $60 and $70 per person.
So, OK, maybe I don't know what I'm doing. 
The reason we finally decided to pull the trigger is that we don't have a sales force. None. We have inside sales people who handle incoming phone calls (very rare) and incoming email (we get a lot of it), but our software is just priced too cheaply for the traditional enterprise software sales system, where you have a bunch of commission-based suits flying around the country, staying in nice hotels, and taking clients out to lunch. That kind of sales force costs $50,000 to make one sale. With prices in the $21/month range, that model just doesn't work for us.
When you think about it this way, $60 to reach one person is cheap!
Here's what you can expect if you show up. There will be some really, really expensive coffee and maybe a muffin or something if the hotel in particularly cheap. If you come a bit early, it'll be a great chance to meet some interesting software people in your city.
I'll show off some of my favorite features in FogBugz 6.0, but mostly, I'll talk about the software development process in general. I'll leave a lot of time for Q&A. There will be a member of the FogBugz development team with me and we'll also leave plenty of time afterwards for one-on-one questions if you have something to ask us that isn't of general interest. Then we'll pack our projector and rush off to the airport and on to the next city.
So far, we've planned 21 cities in North America. If you're in the US or Canada, you can register right now, in fact, you should, because we expect to fill up really quickly. If you register and can't make it, please cancel (you'll get a cancellation link in the confirmation email) so we can take someone else from the waiting list.
We are planning to visit international cities, but we haven't figured that bit out yet. We'll probably hit Europe, Australia, and New Zealand in November. If you're outside the US and want to attend, make sure you've filled out the survey with your correct email address so we can figure out where to go next and let you know when we're coming.
If you can't make it, we'll have a video of the New York City world launch of FogBugz 6.0 on our website sometime in September.
So. Click on the cute kiwi to register:
	"
https://www.joelonsoftware.com/2007/09/26/explaining-the-excel-bug/,Explaining the Excel Bug,2007-09-26T00:11:01+00:00,,Joel Spolsky,News,"
	By now you've probably seen a lot of the brouhaha over a bug in the newest version of Excel, 2007. Basically, multiplying 77.1*850, which should give you 65,535, was actually displaying 100,000.
Before I try to explain this, I should disclose that I did work on the Excel team, but that was thirteen years ago. I haven't been there for a long time. I don't even think I know anyone on that team any more. I'm just trying to explain the bug a little bit as a public service.
The first thing you have to understand is that Excel keeps numbers, internally, in a binary format, but displays them as strings. For example, when you type 77.1, Excel stores this internally using 64 bits:
0100 0000 0101 0011 0100 0110 0110 01100110 0110 0110 0110 0110 0110 0110 0110
The display is showing you four characters: ""7"", ""7"", ""."", and ""1"".
Somewhere inside Excel is a function that converts binary numbers to strings for displaying. This is the code that has the bug that causes a few numbers which are extremely close to 65,535 to be formatted incorrectly as 100,000.
If you use the number further along in calculations, for example, if you add 2 to the results, you'll get the right thing.
=77.1*850 -> displays 100000
=77.1*850+2 -> displays 65537, correctly.
Just to throw people off, this bug also exists for a few numbers which are extremely close to 65,536. They display incorrectly as 100,001.
=77.1*850+1 -> displays 100,001, incorrectly.
This is still only a bug in the number formatting code; if you try to make a chart with that number in it, you'll get a correct chart.
Now... you may have noticed that I said that this bug exists for numbers which are extremely close to 65,535, but not for 65,535 itself. Indeed if you enter 65,535 you see 65,535. But, you notice, 77.1 * 850 should be exactly 65,535, not extremely close to 65,535!
Look closely at the binary representation for 77.1:
0100 0000 0101 0011 0100 0110 0110 01100110 0110 0110 0110 0110 0110 0110 0110
See how there's a lot of 0110 0110 0110 there at the end? That's because 0.1 has no exact representation in binary... it's a repeating binary number. It's sort of like how 1/3 has no representation in decimal. 1/3 is 0.33333333 and you have to keep writing 3's forever. If you lose patience, you get something inexact.
So you can imagine how, in decimal, if you tried to do 3*1/3, and you didn't have time to write 3's forever, the result you would get would be 0.99999999, not 1, and people would get angry with you for being wrong.
The same thing happens in binary with numbers ending in 0.1: they are repeating decimals, so when you do mathematical operations on them, very small insignificant errors creep in somewhere way to the right of the decimal point. (PS: same for .2, .3, .4, .6, .7, .8, and .9, but not .5).
The IEEE has a standard, IEEE 754, for how to represent floating point numbers in binary, and this is what almost everybody uses, including Excel, and they have for a really long time, and it means sometimes you get imprecise results when you add a lot of 0.1's together, but if you're rounding the numbers to a reasonable number of decimal points, you won't really care.
Back to the Excel bug, which is a genuine bug, not just an artifact of this IEEE 754 stuff. Since 77.1 has no exact representation, Excel stores it as
0100 0000 0101 0011 0100 0110 0110 01100110 0110 0110 0110 0110 0110 0110 0110
and then when you try to multiply it by 850, you get something very close to 65,535, but not exactly 65,535, because of the fact that 77.1 wasn't stored exactly because that would take infinite memory. And this number, which is very close to 65,535, happens to be one of only 12 possible floating point numbers which trigger this bug in Excel.
OK, Q&A.
Q: Isn't this really, really bad?
A: IMHO, no, the chance that you would see this in real life calculations is microscopic. Better worry about getting hit by a meterorite. Microsoft, of course, will be forced to tell everyone ""accuracy is extremely important to us"" and I'm sure they'll have a fix in a matter of days, and they'll be subjected to all kinds of well-deserved ridicule, but since I don't work there I'm free to tell you that the chance of this bug actually mattering to you as an individual is breathtakingly small.
Q: Shouldn't they be testing for these kinds of things?
A: I'll bet that most of the numeric testing done on the Excel team is done automatically with VBA code. Cells containing this value display as 100,000, but from VBA, they're going to look like 65,535 (since the number would be passed into the Basic runtime in binary, before the display formatting.) I'm sure there's plenty of code to test display formatting, but with a bug like this that only happens on 12 out of 18446744073709551616 possible floating point binary numbers, it's unlikely that any set of black-box tests would cover this case.
Q: What caused the bug?
A: I'm not sure exactly, since I don't have the code. Off the top of my head, I can't think of anything that would cause this behavior. Play around with Quanfei Wen's IEEE-754 calculator, maybe you'll find something.
Q: Why not use ""exact"" (decimal) arithmetic?
A: It's much slower than floating point arithmetic, since there's no hardware on your CPU chip to do it for you natively.
Over the years, Microsoft got so much heat for floating point rounding artifacts in the Windows Calculator that they rewrote it to use an arbitrary-precision arithmetic library. Since you have to poke at Windows Calculator with a stick, it doesn't have to be as fast as Excel. That said, CPUs have gotten pretty fast. I'll bet an arbitrary-precision version of Excel would perform pretty well these days. Still, the Microsoft Excel support team has spent the last 20 years defending IEEE 754, and it's not surprising that they've started to believe in it.
And let's face it - do you really want the bright sparks who work there now, and manage to break lots of perfectly good working code - rewriting the core calculating engine in Excel? Better keep them busy adding and removing dancing paper clips all day long.
	"
https://www.joelonsoftware.com/2007/09/26/unfocused-and-unabashed/,Unfocused and Unabashed,2007-09-26T00:11:00+00:00,,Joel Spolsky,News,"
	""I didn't relish the carpal tunnel syndrome that would result from signing all these forms. We tried to 'sign' them by running the forms through the laser printer again to print the signature in the right place. But, as I learned, something traumatic happens to paper on its way through a printer. Once a sheet of paper has been through a laser printer, the next time you try to print on it, it's going to fight back, jamming the printer and resulting in the deaths of three other pages, and you're going to spend five minutes with a putty knife cleaning up the bloodshed.""
How Hard Could It Be?: Unfocused and Unabashed
PS: This article will appear in the October issue of Inc. Magazine; it's the first installment of what will be a monthly column, mostly about business of software startups. The column is called ""How Hard Could It Be?"" As an entrepreneur I've really enjoyed this magazine over the years and I've learned a lot, so I'm honored to be a columnist. They will be publishing each column on their website, and I'll link to it as soon as they do so, but you may also want to subscribe to the print magazine; it's less than $10 a year and well worth it.
	"
https://www.joelonsoftware.com/2007/09/19/princeton-philadelphia-boston/,"Princeton, Philadelphia, Boston",2007-09-19T00:10:59+00:00,,Joel Spolsky,News,"
	I've been getting a little bit behind on my world tour trip reports, but things have been going so smoothly thanks to Liz's heroic organization efforts that there's not much to report!
Princeton was our smallest group so far-just 19 people, but the hotel was really nice. That afternoon we drove to Philadelphia, where we had about 55 people, including a couple of spies in the audience from our Philly-based web design firm who were there to get a sense of the kind of audience they were designing for.
I'll interrupt this train of thought for a moment to talk a little bit about the gear I've been using. As I may have mentioned, my laptop is a Lenovo ThinkPad X61s, extremely small and light but with a comfortable full size keyboard. If you've ever thought about getting a ThinkPad but worried about the eraser-head trackpoint in between the G and the H keys that these things use as a pointer, don't be. It takes a little time to get used to, but it works much much better than the more common touchpad because (a) you don't have to take your hands away from the home row to use the mouse and (b) you never touch it accidentally while typing, causing the cursor to jump somewhere else.
My phone these days is the Samsung Blackjack, running Windows Mobile 5. Like Windows, it's extremely frustrating and messy and disorganized. Also like Windows, if you're willing to hammer away at it, you can make it do some pretty amazing things. In my world, amazing includes the fact that Liz can put things on my schedule and they'll show up on my phone via over-the-air synchronization. Another thing I've come to rely upon on this trip is the high speed internet access... in most of the places I've been, AT&T has HSDPA access, which is pretty fast. But the phone stays in my pocket... the laptop connects over bluetooth to the phone which is running Internet Connection Sharing, a little applet that AT&T has tried to hide but which is still in the Windows folder on the phone. I've had HSDPA access in Seattle, Chicago, Philadelphia, Boston, New York, Princeton, even in the Hamptons. I just take out the phone, run the internet connection sharing applet and hit ""connect,"" then click on the appropriate bluetooth icon on the laptop, and, plink!, I'm on the internet at high speed.
That's the main reason I don't carry an iPhone - I use this HSDPA access every day and it rocks, and it's inevitable that the next gen iPhone will have it, so I'll wait, kthxbye.
OK, back to the trip report. Yesterday afternoon, I stopped by the ITA Software office in Cambridge (for all intents and purposes, the only large software shop that uses Lisp) to say hi and thank them for the useful search technology behind Orbitz, which made it possible to plan this trip even with all the multi-legged trips that brought Expedia to its knees. They were nice enough to take me out to dinner, too. Thanks!
This morning in Boston we had a huge turnout... 200 people who didn't stop asking questions. For some reason which I can't figure out, the demo part of my speech is taking a little bit longer every time I do it. I don't think I'm adding things; I think I'm just explaining more. Who knows. Anyway.
There's a new branch of Wagamama in Quincy Market. Looked exactly like the last one I ate at, in Sydney. A very nice addition to the otherwise dreadful dining alternatives of Boston's Festival Marketplace.
The hotel internet in Boston was rather congested and I was having a lot of trouble doing anything online there, which is why yesterday's Strategy Letter had so many typos. Sorry.
Brent Ashley: ""I'll provide some links here which will help the reader to understand how many of the points Joel makes in his essay are supported by existing technologies in various states of readiness. It's a big pantry of ingredients that is waiting for the right chef to come along and combine them in a way that inspires the world to follow.""
Indeed countless people have already emailed me to say that ""NewSDK is here, it's (choose one) Flex Builder, Google Web Toolkit, Java Web Start, Silverlight, JavaFX, Flash, ActionScript, MORFIK, OpenLaszlo, ... (many omitted)"" Ahem. These are not HERE until your TAXI DRIVER has heard of them, because I assure you he's heard of Microsoft Windows. Many of these technologies are developed by smart people who understand the world the way I talked about in the strategy letter, and are hoping to win the next platform war. But GWT is no more the NewSDK than Digital Research GEM, or IBM TopView, or Quarterdeck DESQView, or Concurrent DOS, or Microsoft Windows 1.0 was the OldSDK. They're just horses at the starting gate.
I'm in Kitchener, Ontario right now, discovering that an even better predictor of a hotel I don't really want to stay at is that it advertises that kings, queens, and presidents have stayed there. Sorry, darling, your hotel is charming, but I don't care what your marketing materials say, if you really gave the Queen Mum these same shabby old towels as you gave me, Canada would be a republic by now.
Thursday morning is the Kitchener demo with 75 attendees; in the afternoon we'll have an astonishing 240 people in Toronto, and then fly home. Tallyho!
	"
https://www.joelonsoftware.com/2007/09/18/strategy-letter-vi/,Strategy Letter VI,2007-09-18T00:10:58+00:00,,Joel Spolsky,"CEO, News","
	IBM just released an open-source office suite called IBM Lotus Symphony. Sounds like Yet Another StarOffice distribution. But I suspect they're probably trying to wipe out the memory of the original Lotus Symphony, which had been hyped as the Second Coming and which fell totally flat. It was the software equivalent of Gigli.
In the late 80s, Lotus was trying very hard to figure out what to do next with their flagship spreadsheet and graphics product, Lotus 1-2-3. There were two obvious ideas: first, they could add more features. Word processing, say. This product was called Symphony. Another idea which seemed obvious was to make a 3-D spreadsheet. That became 1-2-3 version 3.0.
Both ideas ran head-first into a serious problem: the old DOS 640K memory limitation. IBM was starting to ship a few computers with 80286 chips, which could address more memory, but Lotus didn't think there was a big enough market for software that needed a $10,000 computer to run. So they squeezed and squeezed. They spent 18 months cramming 1-2-3 for DOS into 640K, and eventually, after a lot of wasted time, had to give up the 3D feature to get it to fit. In the case of Symphony, they just chopped features left and right.
Neither strategy was right. By the time 123 3.0 was shipping, everybody had 80386s with 2M or 4M of RAM. And Symphony had an inadequate spreadsheet, an inadequate word processor, and some other inadequate bits.
""That's nice, old man,"" you say. ""Who gives a fart about some old character mode software?""
Humor me for a minute, because history is repeating itself, in three different ways, and the smart strategy is to bet on the same results.
Limited-memory, limited-CPU environments
From the beginning of time until about, say, 1989, programmers were extremely concerned with efficiency. There just wasn't that much memory and there just weren't that many CPU cycles.
In the late 90s a couple of companies, including Microsoft and Apple, noticed (just a little bit sooner than anyone else) that Moore's Law meant that they shouldn't think too hard about performance and memory usage... just build cool stuff, and wait for the hardware to catch up. Microsoft first shipped Excel for Windows when 80386s were too expensive to buy, but they were patient. Within a couple of years, the 80386SX came out, and anybody who could afford a $1500 clone could run Excel.
As a programmer, thanks to plummeting memory prices, and CPU speeds doubling every year, you had a choice. You could spend six months rewriting your inner loops in Assembler, or take six months off to play drums in a rock and roll band, and in either case, your program would run faster. Assembler programmers don't have groupies.
So, we don't care about performance or optimization much anymore.
Except in one place: JavaScript running on browsers in AJAX applications. And since that's the direction almost all software development is moving, that's a big deal.
A lot of today's AJAX applications have a meg or more of client side code. This time, it's not the RAM or CPU cycles that are scarce: it's the download bandwidth and the compile time. Either way, you really have to squeeze to get complex AJAX apps to perform well.
History, though, is repeating itself. Bandwidth is getting cheaper. People are figuring out how to precompile JavaScript.
The developers who put a lot of effort into optimizing things and making them tight and fast will wake up to discover that effort was, more or less, wasted, or, at the very least, you could say that it ""conferred no long term competitive advantage,"" if you're the kind of person who talks like an economist.
The developers who ignored performance and blasted ahead adding cool features to their applications will, in the long run, have better applications.
A portable programming language
The C programming language was invented with the explicit goal of making it easy to port applications from one instruction set to another. And it did a fine job, but wasn't really 100% portable, so we got Java, which was even more portable than C. Mmmhmm.
Right now the big hole in the portability story is - tada! - client-side JavaScript, and especially the DOM in web browsers. Writing applications that work in all different browsers is a friggin' nightmare. There is simply no alternative but to test exhaustively on Firefox, IE6, IE7, Safari, and Opera, and guess what? I don't have time to test on Opera. Sucks to be Opera. Startup web browsers don't stand a chance.
What's going to happen? Well, you can try begging Microsoft and Firefox to be more compatible. Good luck with that. You can follow the p-code/Java model and build a little sandbox on top of the underlying system. But sandboxes are penalty boxes; they're slow and they suck, which is why Java Applets are dead, dead, dead. To build a sandbox you pretty much doom yourself to running at 1/10th the speed of the underlying platform, and you doom yourself to never supporting any of the cool features that show up on one of the platforms but not the others. (I'm still waiting for someone to show me a Java applet for phones that can access any of the phone's features, like the camera, the contacts list, the SMS messages, or the GPS receiver.)
Sandboxes didn't work then and they're not working now.
What's going to happen? The winners are going to do what worked at Bell Labs in 1978: build a programming language, like C, that's portable and efficient. It should compile down to ""native"" code (native code being JavaScript and DOMs) with different backends for different target platforms, where the compiler writers obsess about performance so you don't have to. It'll have all the same performance as native JavaScript with full access to the DOM in a consistent fashion, and it'll compile down to IE native and Firefox native portably and automatically. And, yes, it'll go into your CSS and muck around with it in some frightening but provably-correct way so you never have to think about CSS incompatibilities ever again. Ever. Oh joyous day that will be.
High interactivity and UI standards
The IBM 360 mainframe computer system used a user interface called CICS, which you can still see at the airport if you lean over the checkin counter. There's an 80 character by 24 character green screen, character mode only, of course. The mainframe sends down a form to the ""client"" (the client being a 3270 smart terminal). The terminal is smart; it knows how to present the form to you and let you input data into the form without talking to the mainframe at all. This was one reason mainframes were so much more powerful than Unix: the CPU didn't have to handle your line editing; it was offloaded to a smart terminal. (If you couldn't afford smart terminals for everyone, you bought a System/1 minicomputer to sit between the dumb terminals and the mainframe and handle the form editing for you).
Anyhoo, after you filled out your form, you pressed SEND, and all your answers were sent back to the server to process. Then it sent you another form. And on and on.
Awful. How do you make a word processor in that kind of environment? (You really can't. There never was a decent word processor for mainframes).
That was the first stage. It corresponds precisely to the HTML phase of the Internet. HTML is CICS with fonts.
In the second stage, everybody bought PCs for their desks, and suddenly, programmers could poke text anywhere on the screen wily-nily, anywhere they wanted, any time they wanted, and you could actually read every keystroke from the users as they typed, so you could make a nice fast application that didn't have to wait for you to hit SEND before the CPU could get involved. So, for example, you could make a word processor that automatically wrapped, moving a word down to the next line when the current line filled up. Right away. Oh my god. You can do that?
The trouble with the second stage was that there were no clear UI standards... the programmers almost had too much flexibility, so everybody did things in different ways, which made it hard, if you knew how to use program X, to also use program Y. WordPerfect and Lotus 1-2-3 had completely different menu systems, keyboard interfaces, and command structures. And copying data between them was out of the question.
And that's exactly where we are with Ajax development today. Sure, yeah, the usability is much better than the first generation DOS apps, because we've learned some things since then. But Ajax apps can be inconsistent, and have a lot of trouble working together - you can't really cut and paste objects from one Ajax app to another, for example, so I'm not sure how you get a picture from Gmail to Flickr. Come on guys, Cut and Paste was invented 25 years ago.
The third phase with PCs was Macintosh and Windows. A standard, consistent user interface with features like multiple windows and the Clipboard designed so that applications could work together. The increased usability and power we got out of the new GUIs made personal computing explode.
So if history repeats itself, we can expect some standardization of Ajax user interfaces to happen in the same way we got Microsoft Windows. Somebody is going to write a compelling SDK that you can use to make powerful Ajax applications with common user interface elements that work together. And whichever SDK wins the most developer mindshare will have the same kind of competitive stronghold as Microsoft had with their Windows API. 
If you're a web app developer, and you don't want to support the SDK everybody else is supporting, you'll increasingly find that people won't use your web app, because it doesn't, you know, cut and paste and support address book synchronization and whatever weird new interop features we'll want in 2010.
Imagine, for example, that you're Google with GMail, and you're feeling rather smug. But then somebody you've never heard of, some bratty Y Combinator startup, maybe, is gaining ridiculous traction selling NewSDK, which combines a great portable programming language that compiles to JavaScript, and even better, a huge Ajaxy library that includes all kinds of clever interop features. Not just cut 'n' paste: cool mashup features like synchronization and single-point identity management (so you don't have to tell Facebook and Twitter what you're doing, you can just enter it in one place). And you laugh at them, for their NewSDK is a honking 232 megabytes ... 232 megabytes! ... of JavaScript, and it takes 76 seconds to load a page. And your app, GMail, doesn't lose any customers.
But then, while you're sitting on your googlechair in the googleplex sipping googleccinos and feeling smuggy smug smug smug, new versions of the browsers come out that support cached, compiled JavaScript. And suddenly NewSDK is really fast. And Paul Graham gives them another 6000 boxes of instant noodles to eat, so they stay in business another three years perfecting things.
And your programmers are like, jeez louise, GMail is huge, we can't port GMail to this stupid NewSDK. We'd have to change every line of code. Heck it'd be a complete rewrite; the whole programming model is upside down and recursive and the portable programming language has more parentheses than even Google can buy. The last line of almost every function consists of a string of 3,296 right parentheses. You have to buy a special editor to count them.
And the NewSDK people ship a pretty decent word processor and a pretty decent email app and a killer Facebook/Twitter event publisher that synchronizes with everything, so people start using it.
And while you're not paying attention, everybody starts writing NewSDK apps, and they're really good, and suddenly businesses ONLY want NewSDK apps, and all those old-school Plain Ajax apps look pathetic and won't cut and paste and mash and sync and play drums nicely with one another. And Gmail becomes a legacy. The WordPerfect of Email. And you'll tell your children how excited you were to get 2GB to store email, and they'll laugh at you. Their nail polish has more than 2GB.
Crazy story? Substitute ""Google Gmail"" with ""Lotus 1-2-3"". The NewSDK will be the second coming of Microsoft Windows; this is exactly how Lotus lost control of the spreadsheet market. And it's going to happen again on the web because all the same dynamics and forces are in place. The only thing we don't know yet are the particulars, but it'll happen.
	"
https://www.joelonsoftware.com/2007/09/11/theres-no-place-like-127001/,There’s no place like 127.0.0.1,2007-09-11T00:10:57+00:00,,Joel Spolsky,News,"
	Back home in New York. We had about 75-100 people come to the New York demo yesterday, along with an army of Fog Creek technical staff in matching sky blue kiwi polo shirts.
When I got back to my desk on Monday afternoon, I turned into the prototypical bastard client from hell. Our web designers probably hate me. I did the one thing that drives web design firms completely crazy: I suddenly took a look at the new web design they've done for us, which I've been approving every step of the way, and didn't like it any more, so I told them we had to start over.
In one of Gerald Weinberg's books, probably The Secrets of Consulting, there's the apocryphal story of the giant multinational hamburger chain where some bright MBA figured out that eliminating just three sesame seeds from a sesame-seed bun would be completely unnoticeable by anyone yet would save the company $126,000 per year. So they do it, and time passes, and another bushy-tailed MBA comes along, and does another study, and concludes that removing another five sesame seeds wouldn't hurt either, and would save even more money, and so on and so forth, every year or two, the new management trainee looking for ways to save money proposes removing a sesame seed or two, until eventually, they're shipping hamburger buns with exactly three sesame seeds artfully arranged in a triangle, and nobody buys their hamburgers any more.
This is sort of what happened with our new web design. We've been tweaking it and polishing it and changing things carefully, and the firm we hired to design it has been taking us step-by-step through information architecture, site maps, wireframes, initial designs, and several rounds of design. All with a carefully-designed process to get our buy-in at every step along the way. And so far every step I thought the design was converging and we'd get a nice web design out of it.
And then I came back after a week on the road, took one look at it, and thought, oh crap. We can't go public with that.
And they said, ""but wait, look here, it's right in Basecamp, you said that this design was 'excellent work' and you were 'elated' to have the 'best web design ever in the history of the universe.'""
True that. I did say that. I even thought that.
But a week later, the same basic design just looked terrible. We've been removing sesame seeds from the initial design they did in hopes of making things better, and, lo and behold, at some point the design flipped from being good to being bad. Links had sprouted up all over the place, making it hard to tell where to go next and where you've already been. Most of the elegant whitespace in the original design was lost when we went from the original 1024 pixel wide design to an 800 pixel design. The web designers had presumably been working on Macs and showing us bitmaps, but since the antialiasing technology is different, when we finally got the HTML, the page just felt completely different and had crossed into the realm of plain and, subjectively, ugly.
Ah, well. We'll start over. It's better to have something we're both proud off than to try and salvage the work done so far. Sometimes you have to go all the way through the design process before you realize that you've built the wrong thing, but it's ok, it's a learning experience, it's not the end of the world to take a deep breath and go back to step 1.
	"
https://www.joelonsoftware.com/2007/09/10/spotted-at-san-jose-airport/,Spotted at San Jose Airport,2007-09-10T00:10:56+00:00,,Joel Spolsky,News,"
	
Occasionally I think about organizing my own conference, but I would just invite people like Eric Sink and Rick Chapman, anyway, so the Business of Software 2007 conference has eliminated the need to do that.
	"
https://www.joelonsoftware.com/2007/09/08/chicago/,Chicago,2007-09-08T00:10:55+00:00,,Joel Spolsky,News,"
	Chicago; about 70 local software developers turned out. Chicago is a great city for architecture. Much better than New York. Here they build skyscrapers just because they love them.
Can I talk about hotels for a minute? There are about a million different ways to rate hotels. That makes user review sites, like TripAdvisor, somewhat hit-or-miss. One person's hovel may be another person's palace.
I'm sad to say that the Congress Plaza Hotel where we did the event at this morning does not qualify as anyone's palace. The usual nice words you might use to describe such a hotel would be ""threadbare"" or ""shabby."" Other words (""maccabre,"" ""Barton Fink,"" and ""scuzzy"") come to mind. This was entirely my fault; I set a target budget for hotels in each city and didn't do the research to make sure the hotels would be entirely nice.
I'll bet you can tell almost everything you need to know about the quality of a hotel based on how often they replace the sheets and towels. Another good indicator, for some bizarre reason, is plasma TVs. The nice chains, inexplicably, have old fashioned big-ass tube TVs. The ancient rotting edifices have 32"" plasmas. I don't know why this is. Maybe they think that having a plasma TV they can advertise on their web site will make them seem fancy.
Anyway, the Congress Plaza Hotel is the kind of 850 room monstrosity that Lot Polish Airlines would fill up with a 777 full of passengers, on their way to Warsaw, if the plane was stuck in Chicago overnight due to mechanical failure.
Oh. And the staff was actually on strike. So people coming to the demo had to cross a picket line. I'm sorry about that. I never thought to ask if there was a strike at the time we booked. I guess shabby hotels just treat their employees shabbily. Apparently Chicago considered passing a law requiring hotels to tell people about these strikes when they booked rooms and meetings. It didn't pass. 
The lesson from Chicago is that using cheap hotels is not a good idea for business meetings. Psychologically, I think that people tend to associate the environment they're in with the presentation. When a demo is in a modern, new, shiny business hotel, it's like a little one hour vacation in luxuryland. You go to the bathroom and it's marble everywhere and individual cloth hand towels. And you think nice things about the demo. But when you go to a demo at the Congress Plaza and the rug is stained and there are fluorescent lights everywhere and the bathroom looks like LaGuardia airport, some of that general depressing aura of shabbiness will rub off on the product being presented.
After the demo was over I walked two blocks south to the Hilton where the Inc. 500 Conference was in progress. There I spoke to a bunch of small companies about how we hire people at Fog Creek. A lot of the material I talked about is available on this site, as a series of articles I wrote about a year ago:
Finding Great Developers
A Field Guide to Developers
Sorting Resumes
The Phone Screen
The Guerrilla Guide to Interviewing
You can get the whole series plus one bonus chapter in book form, as well.
I'm flying back to New York now, on We've Pretty Much Just Given Up Airlines. On Monday morning, if you're in the city, please join me and the FogBugz development team at 9:00am for the FogBugz 6.0 World Launch, at the New York Marriott East Side Hotel. It's free, but you have to register to reserve a space.
	"
https://www.joelonsoftware.com/2007/09/07/seattle/,Seattle,2007-09-07T00:10:54+00:00,,Joel Spolsky,News,"
	About 200 attendees came in Seattle; this will be one of our biggest scheduled demos except, maybe, London. I apologize that the screen wasn't so easy to read throughout the room. We made a point of asking the hotel before we booked the room if the screen would be clearly visible to all attendees. It wasn't, because the ceiling wasn't high enough, and the hotel didn't have the ability to raise the ceilings, so of course they lied and told us it would be fine, and it wasn't. This is a problem at every tech conference I've ever been to; these rooms were built long before PowerPoint.
A bunch of Microsoftees had to cancel because they are having their annual company meeting today in a gigantic football stadium. The size of that company is insane. Can you imagine Safeco Field filled to the brim with software developers? And that's just the Vista Shutdown Menu Team.
Something that came up in the demo today that I wanted to share. Software development is a cycle with three distinct phases: design, development, and debugging. It doesn't really matter whether you're doing Ultra Extreme Elite Programming, in which case you do all three phases in one week, or The Ancient OS/360 Waterfall Method, in which case you do them over the course of a year or two. You still have to design what you're going to build, build it, and then debug it.
The three phases have to be scheduled in a very different way.
Design is the art phase, where you're doing new, creative work. Even though what you're doing is completely new, after you've gone through a few software development cycles you'll start to get a pretty good idea of how much time it takes to design a new version of your software. I've usually worked with relatively long development cycles of 12-18 months, and it's always taken me about two months to get a detailed, first-draft spec containing enough detail for the development team to create very granular estimates.
That said, when you're building something brand new from scratch, you really can't estimate the design phase at all, and that's OK. Today I met somebody from a company in Seattle that's working on a project headed up by one of the world's great programmers, Charles Simonyi. Near as I can tell, they have been in the design phase for 16 years.
Development is the engineering phase. It's a construction project. As long as you start with a detailed blueprint, which, of course, can change over time, but which is really your best guess for what you're building, this phase can be scheduled with great precision. FogBugz 6.0 has a spiffy new feature called Evidence-based scheduling, which uses a variation on the Monte Carlo method for making your schedules remarkably reliable during the development phase. When I get a chance, I'll you about it in more detail.
Debugging is the science phase. Science is difficult to schedule because you're looking for things, and predicting when you're going to find them is remarkably difficult. Unless you know in advance how many bugs you're going to find, you don't have an ice cube's chance in the Sahara to work out a detailed estimate of how long this phase will take. Here at Fog Creek we've learned that for a new release of FogBugz, this phase takes at least 12 weeks, sometimes a little more, and we just leave it at that. 
Some people are more ambitious and try to track the rate at which bugs are being found and being fixed, and try to extrapolate to see when you'll ship; in practice I've found that the rate of finding bugs is way too messy to be able to extrapolate from. If you have a fixed size test team and infinite bugs, they'll find bugs at a constant rate, simply because they're all spending 8 hours a day entering bugs and then stopping, but this flat line doesn't mean you're ever going to ship. You're not. You have infinite bugs, remember? Sorry. On the other hand you may have just released a new beta to a new batch of beta testers, and it's the best beta yet, but it's the biggest group of beta testers, so there will be a big spurt of new bugs found, which doesn't mean the code is getting buggier-it just means you have a bigger group of beta testers.
Now, there are various ways to get in trouble. If you don't like writing functional specifications or doing up-front design, what happens is that you're burdening the design phase with the development phase. If you ever started a new project by writing code, and you thought you'd ""design as you went along,"" what you're doing is driving around with the handbrakes on. Here's why. Designing a feature by writing a thoughtful spec takes about 1/10th as much time as writing the code for that feature-or less. If you try to code as you design, then you're interrupting your short spurts of design with long spurts of coding. Now, if you're the kind of person who designs everything perfectly the first time, that's fine. But I don't think you are. I think that your first designs are pretty good, but when you see them, you get ideas for even better designs. And if you already coded up the first draft, bad design, well, that's coding time wasted. Your product's design can only get better at 1/10th the speed that my product's design can.
I'm now en-route to Chicago, where I have to do two speeches tomorrow: the morning FogBugz demo, and, in the afternoon, I'll be talking about hiring to a bunch of startup CEOs at the Inc. 500 conference. I'm editing this in the e text editor, a Windows clone of TextMate, which is coming along nicely but could still use some polish before I'm ready to switch to it full time.
	"
https://www.joelonsoftware.com/2007/09/05/vancouver-bc/,"Vancouver, BC",2007-09-05T00:10:53+00:00,,Joel Spolsky,News,"
	Vancouver, BC: Day one of the FogBugz World Tour. About 120 people showed up to see the first public demo of FogBugz 6.0, which will officially launch next Monday.
Vancouver is, without a doubt, one of North America's most beautiful cities. Sparkling, clean, everything works well, nothing can possibly go wrong, people are friendly, and with the new weakened US dollar it's really quite a prosperous place to live. Brett and I had dinner at Joe Fortes, where you get a choice of 4 different local species of salmon, maybe 20 other kinds of fresh fish, or about 10 different type of oysters, and there's a beautiful rooftop deck where you can enjoy the usually pleasant Vancouver weather.
The demo went relatively smoothly, despite a few first-time kinks. At some point I was fiddling around so much with the report generator that I queued up a backlog of lengthy Monte Carlo simulations on the web server which made FogBugz lose interest in continuing with the demo; this not the kind of thing that happens in production web servers (part of the problem is that the laptop is running XP which has a kind of 3/4-baked implementation of IIS, version 5.1, which is not what anyone would run on a real server). Anyway, I had to restart IIS in the middle of the demo. Ooops. Hopefully that won't happen again.
It couldn't be that bad. Here's some email feedback we already received from the demo:
""Thank you for the entertaining and informative talk. We will be buying FogBugz as a result."" Thank you! OK, we just broke even in Vancouver.
""Do you intend to provide free versions of FogBugz for open source projects, non-profits, or small teams of 2 people (like Perforce does with their products)?"". Yes, it's called the Student and Startup Edition. We'll announce it soon, but it's available now.
""Well, I expected to be bored about FogBugz and enraptured by fascinating tidbits of Joel Spolsky wisdom. In reality, the opposite was true. I now believe FogBugz to be a pretty interesting looking app, whereas an hour before your spiel I think I described it to someone as a ""glorified Excel spreadsheet"" (it's amazing what I can come up with when I am not encumbered by facts)."" My tidbits aren't that fascinating.
"" Having just attended Joel's FogBugz 6.0 demonstration in Vancouver, we were very impressed with its capabilities. My boss wants to go ahead and use FogBugz, however Joel mentioned that the Linux/Unix version was still in Beta."" For Unix we're still on 5.0 while we debug the PHP port, which I hope won't take long. While you're waiting for Unix FogBugz 6.0, you can either run 5.0 - and upgrade for free - or run a free trial on our server, and download the data when we're shipping.
The night before, in rehearsals, I discovered that the Fn+F7 trick that is supposed to turn on external monitors on this Thinkpad was actually freezing the computer solid, due to some kind of buggy interaction between the Intel 965 graphics chip software and the IBM/Lenovo Presentation Director software. I never did solve that problem, so I learned to use the Intel software to turn on the external monitor instead of pressing Fn+F7.
Flying in September after Labor Day is really not that bad, despite the scare stories you might have heard in the press; once everyone gets home from summer vacations the number of passengers in airports and on flights drops quite dramatically and flights start operating closer to schedule with much shorter lines. So far I don't think we've waited in one line at an airport. Here are my favorite tricks for planning air travel to avoid chaos, delays, and cancellations:
The ideal time to fly is around 10 am. Usually delays pile up throughout the day, so the earlier you fly, the less likely you are to suffer delays. The very early flights are popular with people who want to get a full day in, so the midmorning flights tend to be the most civilized.
Always check the OAG before booking to see what flights are available. The OAG includes JetBlue and Southwest flights which the online travel agencies can't show you.
Make sure you're never on the last flight of the day if you really need to get somewhere on schedule. If something happens to the last flight, you're in trouble. As a general principle, while planning for this trip, I always checked that there was at least one alternative flight that would get me to my next destination on time. Since we fly first class at Fog Creek, if one of our flights got cancelled, the airline will work hard to reaccomodate us while the coach passengers might have to wait forever for a rebooking.
Fly out of smaller airports whenever possible. My favorite alternative airports: John Wayne or Burbank instead of LAX, Ft. Lauderdale instead of Miami, Love instead of DFW.
If the flight you're booked on is cancelled, don't wait in line with the crowds for the single, overworked airline representative. Get on the phone to your airline's frequent flyer priority number. They can rebook you just as well.
The American Express Platinum card pays for itself just from the free membership in Continental, Northwest, and Delta's lounges... not only because the lounges are quiet and pleasant, but because the lounges have unharried and experienced airline agents who are happy to help you with complicated problems, rebookings, and upgrades.
Final trick: never schedule an important flight during the last few days of the month, especially on Northwest. Pilots are only allowed to fly a certain number of hours per calendar month and by the end of the month they're running out of hours, especially on the more awfully-managed airlines like Northwest, so flights galore get cancelled in the last few days of every calendar month.
See you tomorrow in Seattle! There are still five seats available if you haven't registered yet.
	"
https://www.joelonsoftware.com/2007/10/30/earthquake/,Earthquake!,2007-10-30T00:11:20+00:00,,Joel Spolsky,News,"
	That was a weird experience ... my first earthquake. 5.6 magnitude, centered 9 miles away, the whole hotel shook for about 15 seconds. At the Adobe building across the road, the lights must not be wired in very tightly, because lights were flashing on and off the whole time. OK, I guess it's sort of like being on an airplane during turbulance.
	"
https://www.joelonsoftware.com/2007/10/30/new-websites/,New websites,2007-10-30T00:11:19+00:00,,Joel Spolsky,News,"
	Those of you who develop custom software for clients have probably been burned more than once by clients who are disappointed with what you thought was going to be the ""final"" version, and start demanding countless changes. You've probably built pretty good defenses against this: I've seen contrators ask their clients to sign every single page of the spec so that there can be no question that the client got exactly what they were promised. 
It doesn't help. The client is still unhappy. They knew what you were going to build, intellectually, but as soon as they saw it in real life, they started finding lots of problems:
Custom development is that murky world where a customer tells you what to build, and you say, ""are you sure?"" and they say yes, and you make an absolutely beautiful spec, and say, ""is this what you want?"" and they say yes, and you make them sign the spec in indelible ink, nay, blood, and they do, and then you build that thing they signed off on, promptly, precisely and exactly, and they see it and they are horrified and shocked, and you spend the rest of the week reading up on whether your E&O insurance is going to cover the legal fees for the lawsuit you've gotten yourself into or merely the settlement cost. Or, if you're really lucky, the customer will smile wanly and put your code in a drawer and never use it again and never call you back.
(from Set Your Priorities)
That's just how the world works. A spec can't reveal everything. Clients can't use the spec for their real work, and they'll never notice just how many keystrokes it takes to do basic operations until you get, at least, a UI prototype working. 
A good way to defend yourself against this is to deliver lots and lots of interim versions to the client: real, working interim versions, and get them using it so you can build feedback into future iterations. Rather than going off in a cave and building something for a year, only to find out that 9 months of that work is wasted, you show the client something every month, say, and get instant feedback and then you adjust directions if needed. That's one thing that many people waving the ""agile"" flag are talking about. The first delivery should be the minimum thing that could possibly be useful.
This should not be seen as an excuse to write code without designing it, first. All code is going to be designed eventually. But if you try to design it first in a programming language, the designing process is vastly slower than if you were designing it with pencil and paper and descriptive paragraphs in the English language, so you're wasting time.
Anyway. Where was I going with this? Oh yes. For the first time, I had the honor of being the ""client"" in that client/developer relationship, when we hired Happy Cog Studios to build our new website.
We gave them a relatively precise, unambiguous spec. Basically, we wanted the same website as we already had, only we wanted it to be prettier.
Here's what our original website, designed by Dave Shea, looked like (click to enlarge:)
It was a great design, but several years old, and it felt dated.
Happy Cog gave us a couple of design options to use as starting points:
Or:
Both were quite good, I think, but had showstoppers. The first design put the most important paragraph in a spot where people were very likely to miss it. The second design required 1024 pixels. Even when people have 1024x768 (or larger) monitors, they don't keep their browsers that wide. And about 30% of the people we asked hated the orange.
Which led us into several rounds of iteration by ""a committee of tasteless slobs,"" that committee being mostly me, and somehow we ended up with a design that just got worse and worse and worse the more we tweaked it. This is what we started to build:
That's when I knew we had to start over, and when I suddenly knew what it felt like when you told the barber to give you an ""en brosse"" haircut because you thought you would look like Tom Cruise, and that's not what happened.
Anyway, at that point I realized the design was suffering because it was trying to stuff a FogBugz identity (with the kiwi and the FogBugz logotype) into a Fog Creek website (with the Fog Creek wave logo). This both ate a lot of space at the top of the page, where real estate was scarce, and made the page a confusing bundle of links.
Fortunately, Happy Cog was very patient with us. We asked them to start fresh, with a new design concept and a new designer. Second, we decided that the FogBugz website doesn't have to look anything like the Fog Creek website. It should be a showcase for FogBugz, with a tiny link to Fog Creek at the bottom. Happy Cog would design the FogBugz website. The Fog Creek website, which far fewer people ever visit, is about the company itself. It links to our products but doesn't have to have the same graphic design. I designed that myself, with a very minimalist design that captured the essense of the company:
Larger picture | Go to fogcreek.com
My favorite part is the slideshow, with a set of pictures that captures life at Fog Creek perfectly. It's plain, it's minimalist, it reflects the company personality, and it harks back to the very first website design from when we started the company seven years ago:
Happy Cog assigned Dan Mall to the redesign of the FogBugz page. His first design was really good, and I knew that it would be better to just shut up and give him artistic license to do whatever he thought was best. I thought that we could try and meddle in his design, tweaking things left and right, and get another bad design-by-committee, or we could just tell him we trusted him and whatever he delivered would be exactly what went live.
Which it was.
Larger picture | Go to fogbugz.com
So that's where we stand. Babak and I spent a week creating a video FogBugz demo for the site using my favorite screen-recording program, TechSmith Camtasia. The sound we could get in the office was just not good enough, so we rented studio time to record the soundtrack.
 
It took a lot of editing, but we got the video down to about 13 minutes. Probably too long for a web video, but what can ya do. And I already talk to fast.
Anyway, that's the saga of the new websites. How do you like them?
	"
https://www.joelonsoftware.com/2007/10/29/some-feedback-on-ebs/,Some feedback on EBS,2007-10-29T00:11:18+00:00,,Joel Spolsky,News,"
	Jeff Atwood: ""It's a tremendous credit to Joel Spolsky that he made this crucial feature the centerpiece of the new FogBugz. I'm not aware of any other software lifecycle tools that go to such great lengths to help you produce good estimates.""
Rafe Colburn: ""We're rolling out FogBugz 6.0 at work, and I'm finding that I actually like the time tracking. For one thing, it's a tool for focus. When you kick off the timer on a task, you don't want to jump around and multitask because it will just throw off the timer. The timer feature itself is pretty easy to use.""
Scott Rosenberg: ""What's most interesting about the new FogBugz is what Spolsky and his team are calling 'Evidence Based Scheduling...'""
Reg Braithwaite: ""I built a prototype that did the exact thing that FogBugz is doing quite some time ago. However, prototypes are not shipping products. FogBugz is a shipping product. My prototype was not. And that makes all the difference.""
Also: I wrote an earlier article describing Evidence-Based Scheduling, which was in Better Software Magazine last March.
	"
https://www.joelonsoftware.com/2007/10/26/evidence-based-scheduling/,Evidence Based Scheduling,2007-10-26T00:11:17+00:00,,Joel Spolsky,"Tech lead, News","
	Software developers don't really like to make schedules. Usually, they try to get away without one. ""It'll be done when it's done!"" they say, expecting that such a brave, funny zinger will reduce their boss to a fit of giggles, and in the ensuing joviality, the schedule will be forgotten. 
Most of the schedules you do see are halfhearted attempts. They're stored on a file share somewhere and completely forgotten. When these teams ship, two years late, that weird guy with the file cabinet in his office brings the old printout to the post mortem, and everyone has a good laugh. ""Hey look! We allowed two weeks for rewriting from scratch in Ruby!"" 
Hilarious! If you're still in business. 
You want to be spending your time on things that get the most bang for the buck. And you can't figure out how much buck your bang is going to cost without knowing how long it's going to take. When you have to decide between the ""animated paperclip"" feature and the ""more financial functions"" feature, you really need to know how much time each will take. 
Why won't developers make schedules? Two reasons. One: it's a pain in the butt. Two: nobody believes the schedule is realistic. Why go to all the trouble of working on a schedule if it's not going to be right? 
Over the last year or so at Fog Creek we've been developing a system that's so easy even our grouchiest developers are willing to go along with it. And as far as we can tell, it produces extremely reliable schedules. It's called Evidence-Based Scheduling, or EBS. You gather evidence, mostly from historical timesheet data, that you feed back into your schedules. What you get is not just one ship date: you get a confidence distribution curve, showing the probability that you will ship on any given date. It looks like this: 
The steeper the curve, the more confident you are that the ship date is real. 
Here's how you do it. 
1) Break 'er down
When I see a schedule measured in days, or even weeks, I know it's not going to work. You have to break your schedule into very small tasks that can be measured in hours. Nothing longer than 16 hours. 
This forces you to actually figure out what you are going to do. Write subroutine foo. Create this dialog box. Parse the Fizzbott file. Individual development tasks are easy to estimate, because you've written subroutines, created dialogs, and parsed files before. 
If you are sloppy, and pick big three-week tasks (e.g., ""Implement Ajax photo editor""), then you haven't thought about what you are going to do. In detail. Step by step. And when you haven't thought about what you're going to do, you can't know how long it will take. 
Setting a 16-hour maximum forces you to design the damn feature. If you have a hand-wavy three week feature called ""Ajax photo editor"" without a detailed design, I'm sorry to be the one to break it to you but you are officially doomed. You never thought about the steps it's going to take and you're sure to be forgetting a lot of them. 
2) Track elapsed time 
It's hard to get individual estimates exactly right. How do you account for interruptions, unpredictable bugs, status meetings, and the semiannual Windows Tithe Day when you have to reinstall everything from scratch on your main development box? Heck, even without all that stuff, how can you tell exactly how long it's going to take to implement a given subroutine? 
You can't, really. 
So, keep timesheets. Keep track of how long you spend working on each task. Then you can go back and see how long things took relative to the estimate. For each developer, you'll be collecting data like this: 
 
Each point on the chart is one completed task, with the estimate and actual times for that task. When you divide estimate by actual, you get velocity: how fast the task was done relative to estimate. Over time, for each developer, you'll collect a history of velocities. 
The mythical perfect estimator, who exists only in your imagination, always gets every estimate exactly right. So their velocity history is {1, 1, 1, 1, 1, ...} 
A typical bad estimator has velocities all over the map, for example {0.1, 0.5, 1.7, 0.2, 1.2, 0.9, 13.0} 
Most estimators get the scale wrong but the relative estimates right. Everything takes longer than expected, because the estimate didn't account for bug fixing, committee meetings, coffee breaks, and that crazy boss who interrupts all the time. This common estimator has very consistent velocities, but they're below 1.0. For example, {0.6, 0.5, 0.6, 0.6, 0.5, 0.6, 0.7, 0.6} 
As estimators gain more experience, their estimating skills improve. So throw away any velocities older than, say, six months. 
If you have a new estimator on your team, who doesn't have a track record, assume the worst: give them a fake history with a wide range of velocities, until they've finished a half-dozen real tasks. 
3) Simulate the future 
Rather than just adding up estimates to get a single ship date, which sounds right but gives you a profoundly wrong result, you're going to use the Monte Carlo method to simulate many possible futures. In a Monte Carlo simulation, you can create 100 possible scenarios for the future. Each of these possible futures has 1% probability, so you can make a chart of the probability that you will ship by any given date. 
While calculating each possible future for a given developer, you're going divide each task's estimate by a randomly-selected velocity from that developer's historical velocities, which we've been gathering in step 2. Here's one sample future: 
 Estimate:
 4
 8
 2
 8
 16
 
 Random Velocity:
 0.6
 0.5
 0.6
 0.6
 0.5
 Total:
 E/V:
 6.7
 16
 3.3
 13.3
 32
 71.3
Do that 100 times; each total has 1% probability, and now you can figure out the probability that you will ship on any given date. 
Now watch what happens: 
In the case of the mythical perfect estimator, all velocities are 1. Dividing by a velocity which is always 1 has no effect. Thus, all rounds of the simulation give the same ship date, and that ship date has 100% probability. Just like in the fairy tales! 
The bad estimator's velocities are all over the map. 0.1 and 13.0 are just as likely. Each round of the simulation is going to produce a very different result, because when you divide by random velocities you get very different numbers each time. The probability distribution curve you get will be very shallow, showing an equal chance of shipping tomorrow or in the far future. That's still useful information to get, by the way: it tells you that you shouldn't have confidence in the predicted ship dates. 
The common estimator has a lot of velocities that are pretty close to each other, for example, {0.6, 0.5, 0.6, 0.6, 0.5, 0.6, 0.7, 0.6}. When you divide by these velocities you increase the amount of time something takes, so in one iteration, an 8-hour task might 13 hours; in another it might take 15 hours. That compensates for the estimators perpetual optimism. And it compensates precisely, based exactly on this developers actual, proven, historical optimism. And since all the historical velocities are pretty close, hovering around 0.6, when you run each round of the simulation, you'll get pretty similar numbers, so you'll wind up with a narrow range of possible ship dates. 
In each round of the Monte Carlo simulation, of course, you have to convert the hourly data to calendar data, which means you have to take into account each developer's work schedule, vacations, holidays, etc. And then you have to see, for each round, which developer is finishing last, because that's when the whole team will be done. These calculations are painstaking, but luckily, painstaking is what computers are good at. 
Obsessive-compulsive disorder not required 
What do you do about the boss who interrupts you all the time with long-winded stories about his fishing trips? Or the sales meetings you're forced to go to even though you have no reason to be there? Coffee breaks? Spending half a day helping the new guy get his dev environment set up? 
When Brett and I were developing this technique at Fog Creek, we worried a lot about things that take real time but can't be predicted in advance. Sometimes, this all adds up to more time than writing code. Should you have estimates for this stuff too, and track it on a time sheet? 
 
Well, yeah, you can, if you want. And Evidence Based Scheduling will work. 
But you don't have to. 
It turns out that EBS works so well that all you have to do is keep the clock running on whatever task you were doing when the interruption occurred. As disconcerting as this may sound, EBS produces the best results when you do this.
Let me walk you through a quick example. To make this example as simple as possible, I'm going to imagine a very predictable programmer, John, whose whole job is writing those one-line getter and setter functions that inferior programming languages require. All day long this is all he does: 
private int width;public int getWidth () { return width; }public void setWidth (int _width} { width = _width; } 
I know, I know... it's a deliberately dumb example, but you know you've met someone like this. 
Anyway. Each getter or setter takes him 2 hours. So his task estimates look like this: 
{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, ... } 
Now, this poor guy has a boss who interrupts him every once in a while with a two-hour conversation about marlin fishing. Now, of course, John could have a task on his schedule called ""Painful conversations about marlin,"" and put that on his timesheet, but this might not be politically prudent. Instead, John just keeps the clock running. So his actual times look like this: 
{2, 2, 2, 2, 4, 2, 2, 2, 2, 4, 2, ... } 
And his velocities are: 
{1, 1, 1, 1, 0.5, 1, 1, 1, 1, 0.5, 1, ... } 
Now think about what happens. In the Monte Carlo simulation, the probability that each estimate will be divided by 0.5 is exactly the same as the probability that John's boss would interrupt him during any given feature. So EBS produces a correct schedule! 
In fact, EBS is far more likely to have accurate evidence about these interruptions than even the most timesheet-obsessive developer. Which is exactly why it works so well. Here's how I explain this to people. When developers get interrupted, they can either 
make a big stink about putting the interruption on their timesheet and in their estimates, so management can see just how much time is being wasted on fishing conversation, or 
make a big stink about refusing to put it on their timesheet, just letting the feature they were working on slip, because they refuse to pad their estimates which were perfectly correct with stupid conversation about fishing expeditions to which they weren't even invited, 
... and in either case, EBS gives the same, exactly correct results, no matter which type of passive-aggressive developer you have. 
4) Manage your projects actively 
Once you've got this set up, you can actively manage projects to ship on time. For example, if you sort features out into different priorities, it's easy to see how much it would help the schedule if you could cut the lower priority features. 
 
You can also look at the distribution of possible ship dates for each developer: 
 
Some developers (like Milton in this picture) may be causing problems because their ship dates are so uncertain: they need to work on learning to estimate better. Other developers (like Jane) have very precise ship dates that are just too late: they need to have some of their work taken off their plate. Other developers (me! yay!) are not on the critical path at all, and can be left in peace.
Scope creep 
Assuming you had everything planned down to the last detail when you started work, EBS works great. To be honest, though, you may do some features that you hadn't planned. You get new ideas, your salespeople sell features you don't have, and somebody on the board of directors comes up with a cool new idea to make your golf cart GPS application monitor EKGs while golfers are buzzing around the golf course. All this leads to delays that could not have been predicted when you did the original schedule. 
Ideally, you have a bunch of buffer for this. In fact, go ahead and build buffer into your original schedule for: 
New feature ideas 
Responding to the competition 
Integration (getting everyone's code to work together when it's merged) 
Debugging time 
Usability testing (and incorporating the results of those tests into the product). 
Beta tests 
So now, when new features come up, you can slice off a piece of the appropriate buffer and use it for the new feature. 
What happens if you're still adding features and you've run out of buffer? Well, now the ship dates you get out of EBS start slipping. You should take a snapshot of the ship date confidence distribution every night, so that you can track this over time: 
The x-axis is when the calculation was done; the y-axis is the ship date. There are three curves here: the top one is the 95% probability date, the middle is 50% and the bottom is 5%. So, the closer the curves are to one another, the narrower the range of possible ship dates.
If you see ship date getting later and later (rising curves), you're in trouble. If it's getting later by more than one day per day, you're adding work faster than you're completing work, and you'll never be done. You can also look and see if the ship date confidence distribution is getting tighter (the curves are converging), which it should be if you're really converging on a date. 
While we're at it 
Here are a few more things I've learned over the years about schedules. 
1) Only the programmer doing the work can create the estimate. Any system where management writes a schedule and hands it off to programmers is doomed to fail. Only the programmer who is going to implement a feature can figure out what steps they will need to take to implement that feature. 
2) Fix bugs as you find them, and charge the time back to the original task. You can't schedule a single bug fix in advance, because you don't know what bugs you're going to have. When bugs are found in new code, charge the time to the original task that you implemented incorrectly. This will help EBS predict the time it takes to get fully debugged code, not just working code. 
3) Don't let managers badger developers into shorter estimates. Many rookie software managers think that they can ""motivate"" their programmers to work faster by giving them nice, ""tight"" (unrealistically short) schedules. I think this kind of motivation is brain-dead. When I'm behind schedule, I feel doomed and depressed and unmotivated. When I'm working ahead of schedule, I'm cheerful and productive. The schedule is not the place to play psychological games. 
Why do managers try this? 
When the project begins, the technical managers go off, meet with the business people, and come up with a list of features they think would take about three months, but which would really take twelve. When you think of writing code without thinking about all the steps you have to take, it always seems like it will take n time, when in reality it will probably take more like 4n time. When you do a real schedule, you add up all the tasks and realize that the project is going to take much longer than originally thought. The business people are unhappy. 
Inept managers try to address this by figuring out how to get people to work faster. This is not very realistic. You might be able to hire more people, but they need to get up to speed and will probably be working at 50% efficiency for several months (and dragging down the efficiency of the people who have to mentor them). 
You might be able to get 10% more raw code out of people temporarily at the cost of having them burn out 100% in a year. Not a big gain, and it's a bit like eating your seed corn. Of course, when you overwork people, debugging time doubles and a late project becomes later. Splendid karma. 
But you can never get 4n from n, ever, and if you think you can, please email me the stock symbol for your company so I can short it. 
4) A schedule is a box of wood blocks. If you have a bunch of wood blocks, and you can't fit them into a box, you have two choices: get a bigger box, or remove some blocks. If you wanted to ship in six months, but you have twelve months on the schedule, you are either going to have to delay shipping, or find some features to delete. You just can't shrink the blocks, and if you pretend you can, then you are merely depriving yourself of a useful opportunity to actually see into the future by lying to yourself about what you see there. 
Now that I mention it, one of the great benefits of realistic schedules is that you are forced to delete features. Why is this good? 
Suppose you have two features in mind. One is really useful and will make your product really great. The other is really easy and the programmers can't wait to code it up (""Look! <blink>!""), but it serves no useful purpose. 
If you don't make a schedule, the programmers will do the easy/fun feature first. Then they'll run out of time, and you will have no choice but to slip the schedule to do the useful/important feature. 
If you do make a schedule, even before you start working, you'll realize that you have to cut something, so you'll cut the easy/fun feature and just do the useful/important feature. By forcing yourself to chose some features to cut, you wind up making a more powerful, better product with a better mix of good features that ships sooner. 
Way back when I was working on Excel 5, our initial feature list was huge and would have gone way over schedule. ""Oh my!"" we thought. ""Those are all super important features! How can we live without a macro editing wizard?"" 
As it turns out, we had no choice, and we cut what we thought was ""to the bone"" to make the schedule. Everybody felt unhappy about the cuts. To make people feel better, we told ourselves that we weren't cutting the features, we were simply deferring them to Excel 6. 
As Excel 5 was nearing completion, I started working on the Excel 6 spec with a colleague, Eric Michelman. We sat down to go through the list of ""Excel 6"" features that had been punted from the Excel 5 schedule. Guess what? It was the shoddiest list of features you could imagine. Not one of those features was worth doing. I don't think a single one of them ever was. The process of culling features to fit a schedule was the best thing we could have done. If we hadn't done this, Excel 5 would have taken twice as long and included 50% useless crap features that would have had to be supported, for backwards compatibility, until the end of time. 
Summary 
Using Evidence-Based Scheduling is pretty easy: it will take you a day or two at the beginning of every iteration to produce detailed estimates, and it'll take a few seconds every day to record when you start working on a new task on a timesheet. The benefits, though, are huge: realistic schedules. 
Realistic schedules are the key to creating good software. It forces you to do the best features first and allows you to make the right decisions about what to build. Which makes your product better, your boss happier, delights your customers, and-best of all-lets you go home at five o'clock. 
 
P.S. 
Evidence Based Scheduling is built into FogBugz 6.0.
	"
https://www.joelonsoftware.com/2007/10/25/five-easy-ways-to-fail/,Five easy ways to fail,2007-10-25T00:11:16+00:00,,Joel Spolsky,News,"
	""Even though a bad team of developers tends to be the No. 1 cause of software project failures, you'd never know it from reading official postmortems. In all fields, from software to logistics to customer service, people are too nice to talk about their co-workers' lack of competence. You'll never hear anyone say 'the team was just not smart enough or talented enough to pull this off.' Why hurt their feelings? The simple fact is that if the people on a given project team aren't very good at what they do, they're going to come into work every day and yet-behold!-the software won't get created.""
Five Easy Ways to Fail, from the November Inc. Magazine.
	"
https://www.joelonsoftware.com/2007/10/24/the-institute-for-kiwi-studies/,The Institute for Kiwi Studies,2007-10-24T00:11:15+00:00,,Joel Spolsky,News,"
	Oh yes. It turns out the Maori translation we were using for the translation of the fictional Institute for Kiwi Studies had a slight grammatical error; thanks to Professor Ray Harlow of the University of Waikato, who wrote the most up-to-date Maori language grammar, it should be ""Te Tari Matauranga o te Tokoeka,"" and indeed, it is concerned with the study of the South Island kiwi, Apteryx australis.
Kiwis feed on worms, berries, insects, leaves, reptiles, and amphibians. They locate their food by scratching through the dead leaves with their claws or by probing the ground with their bill.
Kiwi!
	"
https://www.joelonsoftware.com/2007/10/24/fogbugz-world-tour-video-now-available/,FogBugz World Tour video now available,2007-10-24T00:11:14+00:00,,Joel Spolsky,News,"
	Here's a video (70 minutes, Flash) of the demo I gave of FogBugz in Austin, Texas last week.
A few technical details for the geeks:
The demo itself was broadcast live from the Hyatt Regency in Austin by the crew from NewTek, who came for the opportunity to play around with their TriCaster, which is, essentially, a broadcast studio in a backpack-sized box. Well, OK, not quite a backpack: they brought a couple of crates with remote control video cameras, mics, cables, and a big LCD screen for controlling everything. It took them about half an hour to completely set up. Aussie Holten from NewTek ran the production live, which was fed over the Internet. I think we had something on the order of 150 live viewers at the time.
The final video, compressed in Flash Video format, came out to about 264 MB, so the next trick was finding a place to host it. 
We've always been happy with Peer 1 Network, which was kind enough to offered to host Joel on Software for free back in the old days, but which has proven to be an excellent colocation provider and an excellent tier 1 provider.
(Fog Creek is now using two racks, one in LA and one in New York, and quite a bit of bandwidth, which we're paying for.)
So anyway, when we needed a place to host the video, I naturally asked Peer 1, and it turns out they have something called a Content Delivery Network. The idea is that your huge files are spread out on servers in 17 different cities, and everybody downloads it from whichever one is closest. They got the whole thing set up in a matter of hours.
So, let's try it out!
	"
https://www.joelonsoftware.com/2007/10/23/eurotour/,Eurotour,2007-10-23T00:11:13+00:00,,Joel Spolsky,News,"
	Next up on the FogBugz World Tour: Europe!
(Map thanks to Paul Demers and Google).
Registration is now open for November:
Nov 7: DublinNov 8: CambridgeNov 9: LondonNov 12: AmsterdamNov 13: Copenhagen
The morning of November 14th, I'll be speaking at oredev, a conference for software developers in Malmo, Sweden... this keynote speech is called ""Developing Great Software"" and is not a FogBugz demo.
PS. I'm kind of new to this video thing. The Austin FogBugz demo turned out to be a 256MB flash video (FLV), and I think we really need a streaming Flash server to host it, which we don't have. I think this is the point of content delivery networks. If you have an idea for someplace I can quickly put an FLV for streaming to large numbers of people, please let me know.
	"
https://www.joelonsoftware.com/2007/10/23/sound-scientist/,Sound Scientist,2007-10-23T00:11:12+00:00,,Joel Spolsky,News,"
	The great music we've been using to launch FogBugz 6.0-in the demo movie and the world tour-is a song called Sound Scientist by a San Diego band named bill. 
Download the MP3.
	"
https://www.joelonsoftware.com/2007/10/22/introducing-fogbugz-60/,Introducing FogBugz 6.0,2007-10-22T00:11:11+00:00,,Joel Spolsky,News,"
	At some point, while I was running around the country giving demos of FogBugz 6.0, the development team officially got it out the door, and I don't think I ever officially announced, ""FogBugz 6.0 is now shipping,"" so, here it is:
FogBugz 6.0 is now shipping!
It has a ton of major new features: an integrated Wiki, an API, a completely overhauled search engine, and lots of Ajax to make things really snappy.
Probably the most interesting part of 6.0 is Evidence-Based Scheduling, which uses a statistical technique called bootstrapping (a variation on Monte Carlo) to determine the probability that you'll ship on any given date. EBS is interesting enough that I'll devote a whole article to explaining it as soon as I get a minute of free time. Briefly, with EBS, you estimate features as usual. But then, instead of adding up everyone's estimates-instead of taking them on faith-FogBugz does a Monte Carlo simulation looking at what speeds developers worked at in the past, vis-a-vis their estimates. You use that same distribution of probabilities that you had in the past and run a simulation of 60 futures each of which will occur with equal probability. What you get, instead of a date, is a probability distribution curve that shows the probability that the product will ship on such-and-such a date:
The introductory price is a terrific deal, and it's only good until November 1st. For example, a ten-pack is only $999 instead of $1899. If you sign up for the On Demand version, you can lock in a rate of $21/user/month instead of $25. Go make yourself a free online trial, what are you waiting for?
	"
https://www.joelonsoftware.com/2007/11/19/how-walkable-is-your-neighborhood/,How walkable is your neighborhood?,2007-11-19T00:11:25+00:00,,Joel Spolsky,News,"
	This is cool... my friend Mike Mathieu set up a web page where you can enter an address and find out how walkable it is.
Microsoft's campus gets a 31 (""For most errands, driving or public transportation is a must."").
The Googleplex: 34. Good thing Google gives you a few bucks towards a Prius.
The Fog Creek office: 98 out of 100. (""Most errands can be accomplished on foot and many people get by without owning a car."") 
Conclusion: Ditch your car, work at Fog Creek.
	"
https://www.joelonsoftware.com/2007/11/16/how-to-demo-software/,How to demo software,2007-11-16T00:11:24+00:00,2016-12-05T07:29:34+00:00,Joel Spolsky,"Product manager, News","
	It's already all a blur. 26 cities. 6 weeks. 2913 attendees. $160,000. 23 hotels, one Cambridge college, one British library, and a ""Societeit Het Meisjeshuis."" (""Gesundheit!"")
Somewhere, I don't know where, I'm standing exhausted outside a hotel ballroom right after the umpteenth demo, and someone is giving me some ridiculous objection. ""Well, it's all good and fine what FogBugz does, but we won't use it, because we need PROJECT MANAGEMENT.""
Excuse me, SIR? Do you have some kind of SUDDEN AMNESIA? Traumatic HEAD INJURY maybe? Did you WATCH the demo?
(I didn't really say that.)
While I was trying to think of a nice way to reply, another potential customer, standing right there, says to the guy, ""Why not try it out on a little project? Won't cost you anything.""
A bit flips. The guy suddenly stops shaking his head and starts nodding it. ""Yeah, that's a good idea. I'll do that,"" he says, smiling. SOLD.
WTF just happened.
No matter how much I talk, I'm just one person. And no matter how much I try to sell people on FogBugz, it's all coming from me, so that can only add up to a certain amount of credibility, and it just wasn't passing the credibility threshold for Mr. Amnesia. It wouldn't matter what I said. He was in ""I object!"" mode, groping around for some reason not to buy FogBugz, even if he couldn't come up with anything rational.
The minute a second person-his doppelganger! Same height! Same grey hair! Dressed just like him!-said something, BLING! It was like triangulation. Oooooh! Now he's seeing it from two different angles. It's 3D. Must not be an optical illusion.
Social proof, Robert Cialdini calls it. That gave me an idea. I knew from the registration forms that in every city, about 30% of the attendees were already using FogBugz. I started asking a question at the beginning of the demo: ""How many people here use FogBugz?"" Hands go up. That's nice. Everybody looks around. Wow, they think. People actually use this software. It's not just some downloadable piece of shareware some guy wrote in his basement. I started getting comments like, ""I didn't realize so many people in Austin were already using FogBugz!""
The one thing you can say about the 26 public FogBugz demos that I just did is that the first one (Vancouver) was pretty weak, and the last one (Copenhagen) was much, much better, and it was pretty much continuous improvement along the way. If you ever have to do a public demo of your software, here are some of those things that I learned.
Biggest turnouts
FogBugz World Tour
London
Toronto
Seattle
Austin
Boston
Arlington, VA
Amsterdam
Vancouver
Dublin
Denver (Boulder)
Cambridge, England
San Francisco
Mountain View, CA
Dallas
New York
Atlanta
Copenhagen
San Diego
Waterloo
Emeryville, CA
Picking cities
It's a good thing we did a survey to figure out where to go, because the number of attendees in each city was nothing like we expected. If you can only go to five cities, go to London, Toronto, Seattle, Austin, and Boston. Notice I didn't say San Francisco or Silicon Valley. Those were 12 and 13 on our list, respectively. I have no explanation for this, other than that the huge tech community in the valley has so many damn opportunities to go to tech demos that they find them boring. Shown at right are the 20 biggest turnouts we got for the FogBugz demo.
Booking the room
If you have any control whatsoever over the place where the demo is going to take place, here are three things you absolutely have to do.
Get the nicest venue in town. Big, shiny, sparkly, modern, glass and marble and wood everywhere. Your prospective customers start out with no visual image to associate with your company. The demo is the one image that's going to stick in their head. It has to be nice. We weren't as careful about this as we should have been, and booked a couple of frightful old relics before we realized what a bad impression we were making. Before you try hotels, look for libraries, museums, and universities: many of went into debt building beautiful, modern lecture halls and now they're trying to rent them out to pay for all that nice blond wood paneling and the 265 built-in powered Bose speakers.
Get a room that is exactly the right size. You'd much rather have a packed room with a people standing in the back and the hotel staff rushing to set up a few more rows of chairs. This is far better than a half-empty room where the audience feels like maybe this isn't really the hottest tech event ever to hit Kitchener, Ontario. Most hotel rooms can be set up ""theater style"" (just rows of chairs) or ""classroom style"" (chairs and desks). They can fit in twice as many chairs theater style. That gives you plenty of flexibility after you book the room to change the layout so the room feels full.
Get a room with very high ceilings. You're going to be doing a demo on screen. Everyone has to be able to see it. Usually hotels have two kinds of rooms: smaller meeting rooms, with low ceilings, and ballrooms, with high ceilings. In the meeting rooms, it's impossible to put the screen high enough for everyone to see it. Don't trust the hotel on this. We were careful to ask every hotel if the screen was going to be visible throughout the room. They always told us it would. They were almost always lying. Just ask for the ceiling height of the room. They're not smart enough to lie about that.
Setting the stage
Serve coffee. Coffee contains caffeine, which makes people cheerful. If you're lucky, they'll attribute their cheeriness to your software instead of the caffeine.
Play upbeat music while you're waiting for everyone to arrive. The kind of popular, upbeat, Margaritaville music Americans love to listen to when they're on vacations in warm places. Give people name tags so they introduce themselves to one another and socialize while they're waiting. Crank up the music so they have to speak loudly. Loud music and loud conversation and a crowded room adds up to the sensation that this is the hot event.
Cover the place in professionally-produced, high-quality logo stuff. We had brochures, pens, pads, and big FogBugz banners. Wall-to-wall kiwis.
Dress exactly one level better than your audience. Too dressy, and you'll look like you think you're better than your customers. Not dressy enough, and the audience will get the feeling that you don't really care.
With geeks, it's probably enough to put on a nice Banana Republic black jacket over your polo shirt or turtleneck. Do NOT, for the LOVE OF ALL THAT IS GOOD, wear any clothing with writing on the outside. I know how much you love your JavaOne T-shirt, with the happy little waving tooth. Wear that to your wedding or something, not when you're on stage. Lose the sneakers, too.
Set the screen to 800 x 600. Make everything as big as possible. If you're demoing an application that needs more than a half million pixels, go back home and redesign the app.
Notice the lights shining on the screen? That'll be a problem. Find the guy who can turn them off. Sometimes there's no switch for those particular lights. Find the guy who will come with a ladder and unscrew them.
Lock the doors until the room is ready. Otherwise people will start wandering in an hour and a half before the demo is due to start watching you change out of your beloved t-shirt, running around taping cables down on the floor, and putting brochures on every chair. This makes you look like a gopher and removes some of the authority you're going to need to convince people to buy your software.
Bring someone with you to take care of mechanical details: passing out nametags, setting up microphones. The more people you have with you, the more legit you'll look.
Blow them away
A common, but boring, way to design a demo is to start by stating the problem, and then explaining how your magical software solves that problem. Another boring way to design a demo is with PowerPoint slides and lots of bullet points. An incredibly boring way to design a demo is to talk about your company and how many employees you have and how many millions of kroner of revenue you make every year. Nobody cares.
The only interesting way to design a demo is to make it a story. You have a protagonist, and the protagonist has a problem, and they use the software, and they... almost solve the problem, but not quite, and then everybody is in suspense, while you tell them some boring stuff that doesn't fit anywhere else, but they're still listening raptly because they're waiting to hear the resolution to the suspenseful story, and then (ah!) you solve the protagonists last problem, and all is well. There is a reason people have been sitting around telling stories around campfires for the last million years or so: people like stories.
One of the stories from the FogBugz demo: Your boss asks you when you're going to ship, and you look at the EBS report and discover that you only have a 6% chance of making it on time, so you suggest ditching low priority features, and that doesn't go over very well, so you drill down to the individual developer's schedules and... (pause for long lecture on EBS algorithm) ...you realize that Milton needs some help making his estimates better, and Jane needs to give some of her work to Brandon, and then you can ship on time. Ta da!
As you go along, be sure to accidentally bump into all the nice little ""fit and finish"" features of your product. Oh look, that column is halfway off screen. No problem. I'll just drag it over. (""Wha!"" the audience gasps, ""you dragged a column in HTML?"") Oh, look, this feature is supposed to be done by next Tuesday. I'll type ""next tuesday"" in the due date box. (""OMG!"" they squeal. You typed ""next tuesday"" and it was replaced with ""11/20/2007""). Those nice little touches you put so much hard work into are not the meat of the demo, so don't talk about them, just act nonchalant. What, doesn't every web app let you resize and drag columns?
As you go through your speech, make sure you say all the important points two ways. People tend to daydream a bit. They may have missed your point the first time. They might not be native speakers-maybe one of the words or expressions that you used is not in their vocabulary. Don't repeat the exact same sentence twice, which is annoying and pompous. Word it differently the second time.
If you're not an experienced public speaker, watch a videotape of yourself. Have your colleagues give you brutal and honest feedback. You may be discover that you're doing really annoying things while you speak: fidgeting with a pen, scratching your nose (on the outside!), whatever.
As you do demos, pay close attention to what works, and what doesn't. Vary things a little bit every time... you might stumble on better ways of doing things. The first FogBugz demo in Vancouver started with two (lame) jokes. By the time I got to Copenhagen, I had stumbled on about ten jokes that made the whole audience laugh. I had better answers to questions. I even discovered better ways to do things in FogBugz. As time goes on, if you let the demo evolve, it'll get better and better. You can practice in front of a mirror or your colleagues, and indeed, you should, but that only gets you so far... there's nothing like a live audience to refine a demo. (By the way, that's why you still find Jerry Seinfeld showing up unannounced at little hole-in-the-wall comedy clubs in New York. He's testing material.)
Follow up
Ever wonder what the difference is between sales and marketing?
The official definition is that marketing creates demand, while sales fulfils demand.
Giving demos is marketing, not sales.
You need both the pull of marketing and the push of sales to actually sell products. It's like trying to clean out the inside of an alligator with a rope: one guy has to pull on the rope from the back, the other guy has to feed the rope in the front. Following up means contacting people who came to the demo, finding out if they have questions, answering their objections, and doing a normal sales process. It doesn't mean being pushy or slimy. It's just recognizing that even the people who showed up and liked your product might go back to the office and have other things to work on, and weeks might pass and they might forget the warm fuzzy feeling they got from seeing your great thing, and they might never buy it unless you call them and ask for the sale.
I screwed up the sales part. I didn't really plan in advance for the dramatic increase in customer interest in FogBugz 6.0 that the world tour drummed up, so right now there aren't enough people at Fog Creek to follow up with every lead... we're struggling to keep our heads above water just answering incoming questions, which have roughly tripled since 6.0 shipped. We're getting thousands of people making FogBugz trials, so while I was in Malmo, Babak and Michael put $65,000 worth of new servers on my credit card to handle the demand. This is what I always told myself would be ""a good problem to have,"" but it's a problem, nonetheless. As a bootstrapped company we didn't really have the luxury of hiring in advance of anticipated demand, but now that the demand has materialized, we gotta hire some more great people, stat. If you're smart and get things done, please apply for a job at Fog Creek.
	"
https://www.joelonsoftware.com/2007/11/06/live-from-dublin/,Live from Dublin,2007-11-06T00:11:23+00:00,,Joel Spolsky,News,"
	Chris Lomont has a detailed reverse-engineering of the 2007 Excel floating point bug [PDF]. ""The bug seemed to be introduced when the formatting routine was updated from older 16-bit assembly code used in previous versions of Excel...""
Stefan is continuing his series on Wasabi with a look at picture functions. A ""picture function"" is a function that looks like a picture of what it generates, e.g.:
 Sub MakeTitle( s )%> <title> <% =encode(s) %> </title><%End Sub 
We just got into the hotel in Dublin and checked out tomorrow morning's meeting room, and it's bigger than they told us, with room for 144 people, so we should be able to clear the waiting list.
	"
https://www.joelonsoftware.com/2007/11/05/european-fogbugz-world-tour-this-week/,European FogBugz world tour this week,2007-11-05T00:11:22+00:00,,Joel Spolsky,News,"
	Dublin and London are completely full. If you're on the waiting list, do watch for an email, since we usually get some cancellations the night before when we send out a reminder.
In Dublin, I'm also speaking at the Irish Java Technology Conference. This talk is completely different than the FogBugz World Tour, so if you go to both, you won't be bored.
There's still room in Cambridge, Amsterdam, and Copenhagen. 
We added an afternoon demo in Delft next Monday, November 12th, at 1:30pm, thanks to the Societeit Het Meisjeshuis. If you were planning on going to Amsterdam but Delft is more convenient, feel free to register in Delft and cancel in Amsterdam.
	"
https://www.joelonsoftware.com/2007/11/01/news-126/,News,2007-11-01T00:11:21+00:00,,Joel Spolsky,News,"
	I'll be speaking at the Irish Java Technology Conference on November 7th, in Dublin.
Stefan has started a series of articles about Wasabi: ""During the summer of 2006, we realized that I was a complete dork for naming it FogBasic, so we had a naming contest. Everyone submitted their name suggestions, and we did instant run-off voting to decide the name we would actually use. The final two were Bone Crusher 3000 and Wasabi. As much as I wanted to be typing bc3k into the command line, Wasabi won out.""
	"
https://www.joelonsoftware.com/2007/12/24/travel-tips/,Travel Tips,2007-12-24T00:11:31+00:00,,Joel Spolsky,News,"
	
Inc.com published my list of travel tips from the World Tour. You'll learn how we completely avoided air travel snafus, what equipment we brought along, and more.
	"
https://www.joelonsoftware.com/2007/12/24/getting-lookout-to-run-on-outlook-2007-again/,Getting Lookout to run on Outlook 2007 again,2007-12-24T00:11:30+00:00,,Joel Spolsky,News,"
	The search feature in Microsoft Outlook 2007, frankly, sucks big time.
It's slow. Searches take about 30 seconds for me. (I have about 10 years of email).
You have to wait for it to fail to find things in your inbox before you're permitted to search elsewhere, even if you know the message isn't in your inbox.
The search quality is atrocious. I regularly get 50% garbage results mixed in that have nothing in common with my search terms, and the message I am looking for often doesn't come up.
The patch helps, but it still takes around 30 seconds to do a search.
It didn't use to be that way. A few years ago, there was a great add-in called Lookout for Outlook, based on Lucene.NET. Searches always took less than a second.
The tiny company that made Lookout was bought by Microsoft. It must have been one of those HR acquisitions, because the Lookout technology was thrown away. Mike Belshe only spent a couple of years at Microsoft before moving on.
When Outlook 2007 came out, it disabled Lookout, and allegedly this wasn't supposed to be a big deal because Outlook 2007 has search ""built in."" But the built-in search is, as mentioned, ghastly. 
Last week I had finally had enough. I can't work like this. I spent some time searching on the net and found that the original author of Lookout, Mike Belshe, had just posted instructions for getting Lookout to work on Outlook 2007.
They worked! Lookout is back!
It's fast! The first search takes about a second. After that something seems to be cached in memory and further searches appear as fast as you hit the ""enter"" key.
	"
https://www.joelonsoftware.com/2007/12/06/where-theres-muck-theres-brass/,"Where there’s muck, there’s brass",2007-12-06T00:11:29+00:00,,Joel Spolsky,"Product manager, News","
	When I was a kid working in the bread factory, my nemesis was dough. It was sticky and hard to remove and it got everywhere. I got home with specks of dough in my hair. Every shift included a couple of hours of scraping dough off of machinery. I carried dough-scrapers in my back pocket. Sometimes a huge lump of dough would go flying someplace where it shouldn't and gum up everything. I had dough nightmares.
I worked in the production side of the factory. The other side did packing and shipping. Their nemesis was crumbs. Crumbs got everywhere. The shipping crew went home with crumbs in their hair. Every shift included a couple of hours of brushing crumbs out of machinery. They carried little brushes in their back pockets. I'm sure they had crumb nightmares, too.
Pretty much any job that you can get paid for includes dealing with one gnarly problem. If you don't have dough or crumbs to deal with, maybe you work in a razor blade factory and go home with little cuts all over your fingers. Maybe you work for VMWare and have nightmares about emulating bugs in sophisticated video cards that games rely on. Maybe you work on Windows, and your nightmare is that the simplest change can cause millions of old programs and hardware devices to stop working. That's the gnarly part of your job.
One of our gnarly problems is getting FogBugz to run on our customers' own servers. Jason Fried over at 37signals has a good summary of why this is no fun: ""You have to deal with endless operating environment variations that are out of your control. When something goes wrong it's a lot harder to figure out why if you aren't in control of the OS or the third party software or hardware that may be interfering with the install, upgrade, or general performance of your product. This is even more complicated with remote server installs when there may be different versions of Ruby, Rails, MYSQL, etc. at play."" Jason concludes that if they had to sell installable software, they ""definitely wouldn't be as happy."" Yep. Work that makes you unhappy is what I mean by ""a gnarly problem.""
The trouble is, the market pays for solutions to gnarly problems, not solutions to easy problems. As the Yorkshire lads say, ""Where there's muck, there's brass.""
We offer both kinds of FogBugz-hosted and installable-and our customers opt 4 to 1 to install it at their own site. For us, the installable option gives us five times the sales. It costs us an extra salary or two (in tech support costs). It also means we have to use Wasabi, which has some serious disadvantages compared to off-the-shelf programming languages, but which we found to be the most cost-effective and efficient way, given our code base, to ship software that is installable on Windows, Linux, and Mac. Boy, I would love nothing more than to scrap installable FogBugz and run everything on our servers... we've got racks and racks of nice, well-managed Dell servers with plenty of capacity and our tech support costs for the hosted version are zero. Life would be much easier. But we'd be making so much less money we'd be out of business.
The one thing that so many of today's cute startups have in common is that all they have is a simple little Ruby-on-Rails Ajax site that has no barriers to entry and doesn't solve any gnarly problems. So many of these companies feel insubstantial and fluffy, because, out of necessity (the whole company is three kids and an iguana), they haven't solved anything difficult yet. Until they do, they won't be solving problems for people. People pay for solutions to their problems.
Making an elegantly-designed and easy-to-use application is just as gnarly, even though, like good ballet, it seems easy when done well. Jason and 37signals put effort into good design and get paid for that. Good design seems like the easiest thing to copy, but, watching Microsoft trying to copy the iPod, turns out to be not-so-easy. Great design is a gnarly problem, and can actually provide surprisingly sustainable competitive advantage.
Indeed Jason probably made a good choice by picking the gnarly problem where he has a lot of talent (design) to solve, because it doesn't seem like a chore to him. I've been a Windows programmer for ages, so making a Windows Setup program for FogBugz, from scratch in C++ doing all kinds of gnarly COM stuff, doesn't seem like a chore to me.
The only way to keep growing-as a person and as a company-is to keep expanding the boundaries of what you're good at. At some point, the 37signals team might decide that hiring one person to write the Setup script and do installation support would pay for itself, and generate substantially more profit than it costs. So unless they deliberately want to keep the company small, which is a perfectly legitimate desire, they might eventually lose their reluctance to do things that seem gnarly.
Or maybe they won't. There's nothing wrong with choosing the fun part of your business to work on. I've certainly been guilty of that. And there's nothing wrong with deciding that you only want to solve a specific set of problems for a small, select group of people. Salesforce has managed to become big enough by sticking to hosted software. And there are plenty of smaller software shops providing a fantastic lifestyle for their crew with no desire to get any bigger.
But the great thing is that as you solve each additional gnarly problem, your business and market grows substantially. Good marketing, good design, good sales, good support, and solving lots of problems for customers all amplify each other. You start out with good design, then you add some good features and triple your customer base by solving lots of problems, and then you do some marketing and triple your customer base again because now lots of people learn about your solution to their pain, and then you hire sales people and triple your customer base yet again because now the people who know about your solution are reminded to actually buy it, and then you add more features to solve more problems for even more people, and eventually you actually have a chance to reach enough people with your software to make the world a better place.
P.S. I'm not claiming here that 37signals would sell 5 times as many copies if they offered Installable Basecamp. First of all, one of the reasons we may sell so many more installable versions of FogBugz is that it appears, to some customers, to be cheaper. (It's not cheaper in the long run because you have to pay for the server and administer it yourself, but that's subjective.) Also, our support costs for the installable version are only as low as they are because 80% of our customers opt to run on Windows Server. Because Windows systems are so similar, it's much easier for us to support the lowest common denominator. The vast majority of our tech support costs are caused by the diversity in Unix platforms out there-I'd guess that the 20% of our Unix sales result in 80% of our support incidents. If an installable version of Basecamp required Unix, the support cost would be disproportionately expensive compared to a hypothetical installable Windows version. Finally, another reason our experience might not translate to 37signals is that we've been selling installable software for seven years now; the hosted version has only been out for about six months. So we have a big installed base used to running FogBugz on their own servers. If you only look at new FogBugz customers, the ratio of installable to hosted goes down to 3 to 1.
	"
https://www.joelonsoftware.com/2007/12/05/talk-at-yale-part-3-of-3/,Talk at Yale: Part 3 of 3,2007-12-05T00:11:28+00:00,,Joel Spolsky,"New developer, News","
	
This is part three of the text of a talk delivered to the Yale Computer Science department on November 28. Part one and part two already appeared.
I despaired of finding a company to work for where programmers were treated like talent and not like typists, and decided I would have to start my own. In those days, I was seeing lots of really dumb people with really dumb business plans making internet companies, and I thought, hey, if I can be, say, 10% less dumb than them, that should be easy, maybe I can make a company too, and in my company, we'd do things right for a change. We'd treat programmers with respect, we'd make high quality products, we wouldn't take any shit from VCs or 24-year-olds playing President, we'd care about our customers and solve their problems when they called, instead of blaming everything on Microsoft, and we'd let our customers decide whether or not to pay us. At Fog Creek we'll give anyone their money back with no questions asked under any circumstances whatsoever. Keeps us honest. 
So, it was the summer of 2000, and I had taken some time off from work while I hatched the plans for Fog Creek Software and went to the beach a lot. During that period I started writing up some of the things I had learned over the course of my career on a website called Joel on Software. In those early days before blogs were invented, a programmer named Dave Winer had set up a system called EditThisPage.com where anyone could post things to the web in a sort-of blog like format. Joel on Software grew quickly and gave me a pulpit where I could write about software development and actually get some people to pay attention to what I was saying. The site consists of fairly unoriginal thoughts, combined with jokes. It was successful because I used a slightly larger font than the average website, making it easy to read. It's always hard to figure out how many people read the site, especially when you don't bother counting them, but typical articles on that site get read by somewhere between 100,000 and a million people, depending on how popular the topic is. 
What I do on Joel on Software-writing articles about somewhat technical topics-is something I learned here in the CS department, too. Here's the story behind that. In 1989 Yale was pretty good at AI, and one of the big name professors, Roger Schank, came and gave a little talk at Hillel about some of his AI theories about scripts and schemas and slots and all that kind of stuff. Now essentially, I suspect from reading his work that it was the same speech he'd been giving for twenty years, and he had spent twenty years of his career writing little programs using these theories, presumably to test them, and they didn't work, but somehow the theories never got discarded. He did seem like a brilliant man, and I wanted to take a course with him, but he was well known for hating undergraduates, so the only option was to take this course called Algorithmic Thinking-CS115-basically, a watered-down gut group IV class designed for poets. It was technically in the CS department, but the faculty was so completely unimpressed that you were not allowed to count it towards a CS major. Although it was the largest class by enrollment in the CS department, I cringed every time I heard my history-major friends referring to the class as ""computer science."" A typical assignment was to write an essay on whether machines can think or not. You can see why we weren't allowed to count it towards a CS degree. In fact, I would not be entirely surprised if you revoke my degree today, retroactively, upon learning that I took this class. 
The best thing about Algorithmic Thinking was that you had to write a lot. There were 13 papers-one every week. You didn't get grades. Well, you did. Well, ok, there's a story there. One of the reasons Schank hated undergrads so much was that they were obsessed with grades. He wanted to talk about whether computers could think and all undergrads wanted to talk about was why their paper got a B instead of an A. At the beginning of the term, he made a big speech about how grades are evil, and decided that the only grade you could get on a paper was a little check mark to signify that some grad student read it. Over time, he wanted to recognize the really good papers, so he added check-PLUS, and then there were some really lame papers, so he started giving out check-minuses, and I think I got a check-plus-plus once. But grades: never. 
And despite the fact that CS115 didn't count towards the major, all this experience writing about slightly technical topics turned out to be the most useful thing I got out of the CS department. Being able to write clearly on technical topics is the difference between being a grunt individual contributor programmer and being a leader. My first job at Microsoft was as a program manager on the Excel team, writing the technical specification for this huge programming system called Visual Basic for Applications. This document was something like 500 pages long, and every morning literally hundreds of people came into work and read my spec to figure out what to do next. That included programmers, testers, marketing people, documentation writers, and localizers around the world. I noticed that the really good program managers at Microsoft were the ones who could write really well. Microsoft flipped its corporate strategy 180 degrees based on a single compelling email that Steve Sinofsky wrote called Cornell is Wired. The people who get to decide the terms of the debate are the ones who can write. The C programming language took over because The C Programming Language was such a great book. 
So anyway, those were the highlights of CS. CS 115, in which I learned to write, one lecture in Dynamic Logic, in which I learned not to go to graduate school, and CS 322, in which I learned the rites and rituals of the Unix church and had a good time writing a lot of code. The main thing you don't learn with a CS degree is how to develop software, although you will probably build up certain muscles in your brain that may help you later if you decide that developing software is what you want to do. The other thing you can do, if you want to learn how to develop software, is send your resume to jobs@fogcreek.com, and apply for a summer internship, and we'll teach you a thing or two about the subject. 
Thank you very much for your time.
	"
https://www.joelonsoftware.com/2007/12/04/talk-at-yale-part-2-of-3/,Talk at Yale: Part 2 of 3,2007-12-04T00:11:27+00:00,,Joel Spolsky,"New developer, News","
	
This is part two of the text of a talk delivered to the Yale Computer Science department on November 28. Part one appeared yesterday.
After a few years in Redmond, Washington, during which I completely failed to adapt to my environment, I beat a hasty retreat to New York City. I stayed on with Microsoft in New York for a few months, where I was a complete and utter failure as a consultant at Microsoft Consulting, and then I spent a few years in the mid-90s, when the Internet was first starting to happen, at Viacom. That's this big corporate conglomerate which owned MTV, VH1, Nickelodeon, Blockbuster, Paramount Studios, Comedy Central, CBS, and a bunch of other entertainment companies. New York was the first place I got to see what most computer programmers do for a living. It's this scary thing called ""in house software."" It's terrifying. You never want to do in house software. You're a programmer for a big corporation that makes, oh, I don't know, aluminum cans, and there's nothing quite available off the shelf which does the exact kind of aluminum can processing that they need, so they have these in-house programmers, or they hire companies like Accenture and IBM to send them overpriced programmers, to write this software. And there are two reasons this is so frightening: one, because it's not a very fulfilling career if you're a programmer, for a list of reasons which I'll enumerate in a moment, but two, it's frightening because this is what probably 80% of programming jobs are like, and if you're not very, very careful when you graduate, you might find yourself working on in-house software, by accident, and let me tell you, it can drain the life out of you. 
OK, so, why does it suck to be an in house programmer. 
Number one. You never get to do things the right way. You always have to do things the expedient way. It costs so much money to hire these programmers-typically a company like Accenture or IBM would charge $300 an hour for the services of some recent Yale PoliSci grad who took a 6 week course in dot net programming, and who is earning $47,000 a year and hoping that it'll provide enough experience to get into business school-anyway, it costs so much to hire these programmers that you're not going to allowed to build things with Ruby on Rails no matter how cool Ruby is and no matter how spiffy the Ajax is going to be. You're going into Visual Studio, you're going to click on the wizard, you're going to drag the little Grid control onto the page, you're going to hook it up to the database, and presto, you're done. It's good enough. Get out of there and onto the next thing. That's the second reason these jobs suck: as soon as your program gets good enough, you have to stop working on it. Once the core functionality is there, the main problem is solved, there is absolutely no return-on-investment, no business reason to make the software any better. So all of these in house programs look like a dog's breakfast: because it's just not worth a penny to make them look nice. Forget any pride in workmanship or craftsmanship you learned in CS323. You're going to churn out embarrassing junk, and then, you're going to rush off to patch up last year's embarrassing junk which is starting to break down because it wasn't done right in the first place, twenty-seven years of that and you get a gold watch. Oh, and they don't give gold watches any more. 27 years and you get carpal tunnel syndrome. Now, at a product company, for example, if you're a software developer working on a software product or even an online product like Google or Facebook, the better you make the product, the better it sells. The key point about in-house development is that once it's ""good enough,"" you stop. When you're working on products, you can keep refining and polishing and refactoring and improving, and if you work for Facebook, you can spend a whole month optimizing the Ajax name-choosing gizmo so that it's really fast and really cool, and all that effort is worthwhile because it makes your product better than the competition. So, the number two reason product work is better than in-house work is that you get to make beautiful things. 
Number three: when you're a programmer at a software company, the work you're doing is directly related to the way the company makes money. That means, for one thing, that management cares about you. It means you get the best benefits and the nicest offices and the best chances for promotion. A programmer is never going to rise to become CEO of Viacom, but you might well rise to become CEO of a tech company. 
Anyway. After Microsoft I took a job at Viacom, because I wanted to learn something about the internet and Microsoft was willfully ignoring it in those days. But at Viacom, I was just an in-house programmer, several layers removed from anybody who did anything that made Viacom money in any way. 
And I could tell that no matter how critical it was for Viacom to get this internet thing right, when it came time to assign people to desks, the in-house programmers were stuck with 3 people per cubicle in a dark part of the office with no line-of-sight to a window, and the ""producers,"" I don't know what they did exactly but they were sort of the equivalent of Turtle on Entourage, the producers had their own big windowed offices overlooking the Hudson River. Once at a Viacom Christmas party I was introduced to the executive in charge of interactive strategy or something. A very lofty position. He said something vague and inept about how interactivity was very important. It was the future. It convinced me that he had no flipping idea whatsoever what it was that was happening and what the internet meant or what I did as a programmer, and he was a little bit scared of it all, but who cares, because he's making 2 million dollars a year and I'm just a typist or ""HTML operator"" or whatever it is that I did, how hard can it be, his teenage daughter can do that. 
So I moved across the street to Juno Online Services. This was an early internet provider that gave people free dial-up accounts that could only be use for email. It wasn't like Hotmail or Gmail, which didn't exist yet, because you didn't need internet access to begin with, so it was really free. 
Juno was, allegedly, supported by advertising. It turned out that advertising to the kinds of people who won't pay $20 a month for AOL is not exactly the most lucrative business in the world, so in reality, Juno was supported by rich investors. But at least Juno was a product company where programmers were held in high regard, and I felt good about their mission to provide email to everyone. And indeed I worked there happily for about three years as a C++ programmer. Eventually, though, I started to discover that the management philosophy at Juno was old fashioned. The assumption there was that managers exist to tell people what to do. This is quite upside-down from the way management worked in typical west-coast high tech companies. What I was used to from the west coast was an attitude that management is just an annoying, mundane chore someone has to do so that the smart people can get their work done. Think of an academic department at a university, where being the chairperson of the department is actually something of a burden that nobody really wants to do; they'd much rather be doing research. That's the Silicon Valley style of management. Managers exist to get furniture out of the way so the real talent can do brilliant work. 
Juno was founded by very young, very inexperienced people-the president of the company was 24 years old and it was his first job, not just his first management job-and somewhere in a book or a movie or a TV show he had gotten the idea that managers exist to DECIDE. 
If there's one thing I know, it's that managers have the least information about every technical issue, and they are the last people who should be deciding anything. When I was at Microsoft, Mike Maples, the head of the applications division, used to have people come to him to resolve some technical debate they were having. And he would juggle some bowling pins, tell a joke, and tell them to get the hell out of his office and solve their own damned problems instead of coming to him, the least qualified person to make a technical decision on its merits. That was, I thought, the only way to manage smart, highly qualified people. But the Juno managers, like George Bush, were the deciders, and there were too many decisions to be made, so they practiced something I started calling hit-and-run micromanagement: they dive in from nowhere, micromanage some tiny little issue, like how dates should be entered in a dialog box, overriding the opinions of all the highly qualified technical people on the team who had been working on that problem for weeks, and then they disappeared, so that's the hit-and-run part, because there's some other little brush fire elsewhere that needs micromanagement. 
So, I quit, without a real plan. 
(Part three will appear tomorrow).
	"
https://www.joelonsoftware.com/2007/12/03/talk-at-yale-part-1-of-3/,Talk at Yale: Part 1 of 3,2007-12-03T00:11:26+00:00,,Joel Spolsky,"New developer, News","
	
This is part one of the text of a talk delivered to the Yale Computer Science department on November 28. The rest of the talk will be published tomorrow and Wednesday.
I graduated with a B.S. in Computer Science in 1991. Sixteen years ago. What I'm going to try to do today is relate my undergraduate years in the CS department to my career, which consists of developing software, writing about software, and starting a software company. And of course that's a little bit absurd; there's a famous part at the beginning of MIT's Introduction to Computer Science where Hal Abelson gets up and explains that Computer Science isn't about computers and it isn't a science, so it's a little bit presumptuous of me to imply that CS is supposed to be training for a career in software development, any more than, say, Media Studies or Cultural Anthropology would be. 
I'll press ahead anyway. One of the most useful classes I took was a course that I dropped after the first lecture. Another one was a class given by Roger Schank that was so disdained by the CS faculty that it was not allowed to count towards a degree in computer science. But I'll get to that in a minute. 
The third was this little gut called CS 322, which you know of as CS 323. Back in my day, CS 322 took so much work that it was a 11/2 credit class. And Yale's rule is, that extra half credit could only be combined with other half credits from the same department. Apparently there were two other 11/2 credit courses, but they could only be taken together. So through that clever trickery, the half credit was therefore completely useless, but it did justify those weekly problem sets that took 40 hours to complete. After years of students' complaining, the course was adjusted to be a 1 credit class, it was renumbered CS 323, and still had weekly 40 hour problem sets. Other than that, it's pretty much the same thing. I loved it, because I love programming. The best thing about CS323 is it teaches a lot of people that they just ain't never gonna be programmers. This is a good thing. People that don't have the benefit of Stan teaching them that they can't be programmers have miserable careers cutting and pasting a lot of Java. By the way, if you took CS 323 and got an A, we have great summer internships at Fog Creek. See me afterwards. 
As far as I can tell, the core curriculum hasn't changed at all. 201, 223, 240, 323, 365, 421, 422, 424, 429 appear to be almost the same courses we took 16 years ago. The number of CS majors is actually up since I went to Yale, although a temporary peak during the dotcom days makes it look like it's down. And there are a lot more interesting electives now than there were in my time. So: progress. 
For a moment there, I actually thought I'd get a PhD. Both my parents are professors. So many of their friends were academics that I grew up assuming that all adults eventually got PhDs. In any case, I was thinking pretty seriously of going on to graduate school in Computer Science. Until I tried to take a class in Dynamic Logic right here in this very department. It was taught by Lenore Zuck, who is now at UIC. 
I didn't last very long, nor did I understand much of anything that was going on. From what I gather, Dynamic Logic is just like formal logic: Socrates is a man, all men are mortal, therefore Socrates is mortal. The difference is that in Dynamic Logic truth values can change over time. Socrates was a man, now he's a cat, etc. In theory this should be an interesting way to prove things about computer programs, in which state, i.e., truth values, change over time. 
In the first lecture Dr. Zuck presented a few axioms and some transformation rules and set about trying to prove a very simple thing. She had a computer program ""f := not f,"" f is a Boolean, that simply flipped a bit, and the goal was to prove that if you ran this program an even number of times, f would finish with the same value as it started out with. 
The proof went on and on. It was in this very room, if I remember correctly, it looks like the carpet hasn't been changed since then, and all of these blackboards were completely covered in the steps of the proof. Dr. Zuck used proof by induction, proof by reductio ad absurdum, proof by exhaustion-the class was late in the day and we were already running forty minutes over-and, in desperation, proof by graduate student, whereby, she says, ""I can't really remember how to prove this step,"" and a graduate student in the front row says, ""yes, yes, professor, that's right."" 
And when all was said and done, she got to the end of the proof, and somehow was getting exactly the opposite result of the one that made sense, until that same graduate student pointed out where, 63 steps earlier, some bit had been accidentally flipped due to a little bit of dirt on the board, and all was well. 
For our homework, she told us to prove the converse: that if you run the program ""f := not f"" n times, and the bit is in the same state as it started, that n must be even. 
I worked on that problem for hours and hours. I had her original proof in front of me, going in one direction, which, upon closer examination, turned out to have all kinds of missing steps that were ""trivial,"" but not to me. I read every word about Dynamic Logic that I could find in Becton, and I struggled with the problem late into the night. I was getting absolutely nowhere, and increasingly despairing of theoretical computer science. It occurred to me that when you have a proof that goes on for pages and pages, it's far more likely to contain errors in the proof as our own intuition about the trivial statements that it's trying to prove, and I decided that this Dynamic Logic stuff was really not a fruitful way of proving things about actual, interesting computer programs, because you're more likely to make a mistake in the proof than you are to make a mistake in your own intuition about what the program ""f := not f"" is going to do. So I dropped the course, thank God for shopping period, but not only that, I decided on the spot that graduate school in Computer Science was just not for me, which made this the single most useful course I ever took. 
Now this brings me to one of the important themes that I've learned in my career. Time and time again, you'll see programmers redefining problems so that they can be solved algorithmically. By redefining the problem, it often happens that they're left with something that can be solved, but which is actually a trivial problem. They don't solve the real problem, because that's intractable. I'll give you an example. 
You will frequently hear the claim that software engineering is facing a quality crisis of some sort. I don't happen to agree with that claim-the computer software most people use most of the time is of ridiculously high quality compared to everything else in their lives-but that's beside the point. This claim about the ""quality crisis"" leads to a lot of proposals and research about making higher quality software. And at this point, the world divides into the geeks and the suits. 
The geeks want to solve the problem automatically, using software. They propose things like unit tests, test driven development, automated testing, dynamic logic and other ways to ""prove"" that a program is bug-free. 
The suits aren't really aware of the problem. They couldn't care less if the software is buggy, as long as people are buying it. 
Currently, in the battle between the geeks and the suits, the suits are winning, because they control the budget, and honestly, I don't know if that's such a bad thing. The suits recognize that there are diminishing returns to fixing bugs. Once the software hits a certain level of quality that allows it to solve someone's problem, that person will pay for it and derive benefit out of it. 
The suits also have a broader definition of ""quality."" Their definition is about as mercenary as you can imagine: the quality of software is defined by how much it increases my bonus this year. Accidentally, this definition of quality incorporates a lot more than just making the software bug-free. For example, it places a lot of value on adding more features to solve more problems for more people, which the geeks tend to deride by calling it ""bloatware."" It places value on aesthetics: a cool-looking program sells more copies than an ugly program. It places value on how happy a program makes its users feel. Fundamentally, it lets the users define their own concept of quality, and decide on their own if a given program meets their needs. 
Now, the geeks are interested in the narrowly technical aspects of quality. They focus on things they can see in the code, rather than waiting for the users to judge. They're programmers, so they try to automate everything in their life, and of course they try to automate the QA process. This is how you get unit testing, which is not a bad thing, don't get me wrong, and it's how you get all these attempts to mechanically ""prove"" that a program is ""correct."" The trouble is that anything that can't be automated has to be thrown out of the definition of quality. Even though we know that users prefer software that looks cooler, there's no automated way to measure how cool looking a program is, so that gets left out of the automated QA process. 
In fact what you'll see is that the hard-core geeks tend to give up on all kinds of useful measures of quality, and basically they get left with the only one they can prove mechanically, which is, does the program behave according to specification. And so we get a very narrow, geeky definition of quality: how closely does the program correspond to the spec. Does it produce the defined outputs given the defined inputs. 
The problem, here, is very fundamental. In order to mechanically prove that a program corresponds to some spec, the spec itself needs to be extremely detailed. In fact the spec has to define everything about the program, otherwise, nothing can be proven automatically and mechanically. Now, if the spec does define everything about how the program is going to behave, then, lo and behold, it contains all the information necessary to generate the program! And now certain geeks go off to a very dark place where they start thinking about automatically compiling specs into programs, and they start to think that they've just invented a way to program computers without programming. 
Now, this is the software engineering equivalent of a perpetual motion machine. It's one of those things that crackpots keep trying to do, no matter how much you tell them it could never work. If the spec defines precisely what a program will do, with enough detail that it can be used to generate the program itself, this just begs the question: how do you write the spec? Such a complete spec is just as hard to write as the underlying computer program, because just as many details have to be answered by spec writer as the programmer. To use terminology from information theory: the spec needs just as many bits of Shannon entropy as the computer program itself would have. Each bit of entropy is a decision taken by the spec-writer or the programmer. 
So, the bottom line is that if there really were a mechanical way to prove things about the correctness of a program, all you'd be able to prove is whether that program is identical to some other program that must contain the same amount of entropy as the first program, otherwise some of the behaviors are going to be undefined, and thus unproven. So now the spec writing is just as hard as writing a program, and all you've done is moved one problem from over here to over there, and accomplished nothing whatsoever. 
This seems like a kind of brutal example, but nonetheless, this search for the holy grail of program quality is leading a lot of people to a lot of dead ends. The Windows Vista team at Microsoft is a case in point. Apparently-and this is all based on blog rumors and innuendo-Microsoft has had a long term policy of eliminating all software testers who don't know how to write code, replacing them with what they call SDETs, Software Development Engineers in Test, programmers who write automated testing scripts. 
The old testers at Microsoft checked lots of things: they checked if fonts were consistent and legible, they checked that the location of controls on dialog boxes was reasonable and neatly aligned, they checked whether the screen flickered when you did things, they looked at how the UI flowed, they considered how easy the software was to use, how consistent the wording was, they worried about performance, they checked the spelling and grammar of all the error messages, and they spent a lot of time making sure that the user interface was consistent from one part of the product to another, because a consistent user interface is easier to use than an inconsistent one. 
None of those things could be checked by automated scripts. And so one result of the new emphasis on automated testing was that the Vista release of Windows was extremely inconsistent and unpolished. Lots of obvious problems got through in the final product... none of which was a ""bug"" by the definition of the automated scripts, but every one of which contributed to the general feeling that Vista was a downgrade from XP. The geeky definition of quality won out over the suit's definition; I'm sure the automated scripts for Windows Vista are running at 100% success right now at Microsoft, but it doesn't help when just about every tech reviewer is advising people to stick with XP for as long as humanly possible. It turns out that nobody wrote the automated test to check if Vista provided users with a compelling reason to upgrade from XP. 
I don't hate Microsoft, really I don't. In fact, my first job out of school was actually at Microsoft. In those days it was not really a respectable place to work. Sort of like taking a job in the circus. People looked at you funny. Really? Microsoft? On campus, in particular, it was perceived as corporate, boring, buttoned-down, making inferior software so that accountants can do, oh I don't know, spreadsheets or whatever it is that accountants do. Perfectly miserable. And it all ran on a pathetic single-tasking operating system called MS-DOS full of arbitrary stupid limitations like 8-character file names and no email and no telnet and no Usenet. Well, MS-DOS is long gone, but the cultural gap between the Unixheads and the Windows users has never been wider. This is a culture war. The disagreements are very byzantine but very fundamental. To Yale, Microsoft was this place that made toy business operating systems using three-decades-old computer science. To Microsoft, ""computer sciency"" was a bad word used to make fun of new hires with their bizarre hypotheses about how Haskell is the next major programming language. 
Just to give you one tiny example of the Unix-Windows cultural war. Unix has this cultural value of separating user interface from functionality. A righteous Unix program starts out with a command-line interface, and if you're lucky, someone else will come along and write a pretty front end for it, with shading and transparency and 3D effects, and this pretty front end just launches the command-line interface in the background, which then fails in mysterious ways, which are then not reflected properly in the pretty front end which is now hung waiting for some input that it's never going to get. 
But the good news is that you can use the command line interface from a script. 
Whereas the Windows culture would be to write a GUI app in the first place, and all the core functionality would be tangled up hopelessly with the user interface code, so you could have this gigantic application like Photoshop that's absolutely brilliant for editing photos, but if you're a programmer, and you want to use Photoshop to resize a folder of 1000 pictures so that each one fits in a 200 pixel box, you just can't write that code, because it's all very tightly bound to a particular user interface. 
Anyway, the two cultures roughly correspond to highbrow vs. lowbrow, and in fact, it's reflected accurately in the curriculum of computer science departments throughout the country. At Ivy League institutions, everything is Unix, functional programming, and theoretical stuff about state machines. As you move down the chain to less and less selective schools Java starts to appear. Move even lower and you literally start to see classes in topics like Microsoft Visual Studio 2005 101, three credits. By the time you get to the 2 year institutions, you see the same kind of SQL-Server-in-21-days ""certification"" courses you see advertised on the weekends on cable TV. Isn't it time to start your career in (different voice) Java Enterprise Beans! 
(Part two will appear tomorrow).
	"
https://www.joelonsoftware.com/2008/01/31/tripit-is-awesome/,TripIt is awesome,2008-01-31T00:11:39+00:00,,Joel Spolsky,News,"
	You know what I really like? TripIt.com. It's amazingly simple. You take all those travel confirmation emails that you get from your travel agent, hotels, car rental agencies, etc, and you just forward them to plans@tripit.com. That's all you have to do. You don't have to sign up for an account. You don't have to log on. You just forward those emails. You can do it right now.
You get a link back by email, with a beautifully organized itinerary, showing all your travel data plus maps, weather reports, and all the confirmation numbers for your flights and address for your hotels and so on.
It's kind of magical. You don't have to fill out lots of little fields with all the details, because they've done a lot of work to parse those confirmation emails correctly... it worked flawlessly for my upcoming trip to Japan. 
Think of it this way. Suppose you want to enter a round trip flight on your calendar. The minimum information you need to enter is probably:
the airline
the flight number
four times (departure and arrival, there and back)
four time zones (or else your phone will tell you that your flight is at 5 pm when it's really at 2pm)
a confirmation number (for when the airline denies that you exist)
where you're going
All in all it takes a few minutes and is very error prone. Whereas, with TripIt, you just take that email from the airline or Orbitz, Ctrl+F, type plans@tripit.com, and send. Done.
TripIt is a beautiful example of the Figure It Out school of user interface design. Why should you need to register? TripIt figures out who you are based on your email address. Why should you parse the schedule data? Everyone gets email from the same 4 online travel agencies, 100-odd airlines, 15 hotel chains, 5 car rental chains... it's pretty easy to just write screen scrapers for each of those to parse out the necessary data.
Anyway, it's a shame I have to say this, but I have no connection whatsoever to tripit.com.
	"
https://www.joelonsoftware.com/2008/01/29/microsoft-cant-speak-straight-any-more/,Microsoft can’t speak straight any more,2008-01-29T00:11:38+00:00,,Joel Spolsky,News,"
	Here's how Microsoft says, ""SQL Server 2008 will be late:""
""We want to provide clarification on the roadmap for SQL Server 2008. Over the coming months, customers and partners can look forward to significant product milestones for SQL Server. Microsoft is excited to deliver a feature complete CTP during the Heroes Happen Here launch wave and a release candidate (RC) in Q2 calendar year 2008, with final Release to manufacturing (RTM) of SQL Server 2008 expected in Q3. Our goal is to deliver the highest quality product possible and we simply want to use the time to meet the high bar that you, our customers, expect.""
What? Can you understand that? ""A feature complete CTP during the Heroes Happen Here launch wave?"" What on earth does that mean?
The guy who wrote this, Francois Ajenstat, ought to be ashamed of himself. Have some guts. Just say it's late. We really don't care that much. SQL Server 2005 is fine. As Judge Judy says, ""Don't piss on my leg and tell me it's raining.""
Phil Factor explains.
	"
https://www.joelonsoftware.com/2008/01/29/cuecat-is-back/,:CueCat is back!,2008-01-29T00:11:37+00:00,,Joel Spolsky,News,"
	Google: ""2D barcodes are an especially exciting part of this because they allow readers to ""click"" on interesting print ads with their cellphones and seamlessly connect to relevant online content.""
Years ago, I went out on a limb and dismissed a similar scheme thus: ""The number of dumb things going on here exceeds my limited ability to grok all at once. I'm a bit overwhelmed with what a feeble business idea this is.""
OK, more than seven years have passed. Things have changed. People have camera phones with web browsers now. Some things are still the same: typing URLs is not hard, this is a monumental chicken and egg problem, and this doesn't provide any value to the consumers who are expected to install new software on their phones to go along with this ridonculous scheme.
Sometimes when the elders say to the youngsters, ""don't do that, we tried that, it failed,"" it's just because they're failing to notice that the world has changed. But sometimes the elders are right, and the youngsters really are too young to know the history of the idea they think that they've just invented.
I guess we'll get to watch to see whether the oldsters or the youngsters will win this one.
Still, it doesn't say much for the quality of those 150 people Google hires every week that they're now chasing some of the worst of the bad ideas of the fin de siecle. What's next, GooglePetFood.com?
	"
https://www.joelonsoftware.com/2008/01/25/copilot-is-now-free-on-weekends/,Copilot is now free on weekends,2008-01-25T00:11:36+00:00,,Joel Spolsky,News,"
	Remember Fog Creek Copilot? The app that our 2005 interns built that lets you remote control someone's computer over the Internet to help them with technical problems?
Well, recently we figured out that we're paying for a lot of bandwidth over the weekends that we don't need, so we decided to make Copilot absolutely free on weekends. Yep, that's right... free as in zero dollars, free, no cost, no credit card, no email address, nothing.
How it works: You go to https://www.copilot.com, enter your name, and get an invitation code. You then download and run a tiny piece of software. Tell your friend the invitation code, they go to copilot.com and enter it, and they download a tiny piece of software. Now you're controlling their computer. Works with Windows or Macintosh, through almost any firewall. 
Details: Weekend = 8pm EST (GMT-5) Friday night to 2am EST Monday morning. Copilot subscribers can use Copilot free on weekends, too.
ALSO! The Copilot team is still hard at work; Copilot 3.0 is just starting to enter testing. Tyler and Ben want to hire a Summer intern in marketing for the Copilot team. If you're a smart college student that's more interested in marketing than software development, please apply by emailing your resume to jobs@fogcreek.com.
	"
https://www.joelonsoftware.com/2008/01/22/five-whys/,Five whys,2008-01-22T00:11:35+00:00,,Joel Spolsky,"Fog Creek Software, News","
	At 3:30 in the morning of January 10th, 2008, a shrill chirping woke up our system administrator, Michael Gorsuch, asleep at home in Brooklyn. It was a text message from Nagios, our network monitoring software, warning him that something was wrong.
He swung out of bed, accidentally knocking over (and waking up) the dog, sleeping soundly in her dog bed, who, angrily, staggered out to the hallway, peed on the floor, and then returned to bed. Meanwhile Michael logged onto his computer in the other room and discovered that one of the three data centers he runs, in downtown Manhattan, was unreachable from the Internet.
This particular data center is in a secure building in downtown Manhattan, in a large facility operated by Peer 1. It has backup generators, several days of diesel fuel, and racks and racks of batteries to keep the whole thing running for a few minutes while the generators can be started. It has massive amounts of air conditioning, multiple high speed connections to the Internet, and the kind of ""right stuff"" down-to-earth engineers who always do things the boring, plodding, methodical way instead of the flashy cool trendy way, so everything is pretty reliable.
Internet providers like Peer 1 like to guarantee the uptime of their services in terms of a Service Level Agreement, otherwise known as an SLA. A typical SLA might state something like ""99.99% uptime."" When you do the math, let's see, there are 525,949 minutes in a year (or 525,600 if you are in the cast of Rent), so that allows them 52.59 minutes of downtime per year. If they have any more downtime than that, the SLA usually provides for some kind of penalty, but honestly, it's often rather trivial... like, you get your money back for the minutes they were down. I remember once getting something like $10 off the bill once from a T1 provider because of a two day outage that cost us thousands of dollars. SLAs can be a little bit meaningless that way, and given how low the penalties are, a lot of network providers just started advertising 100% uptime.
Within 10 minutes everything seemed to be back to normal, and Michael went back to sleep.
Until about 5:00 a.m. This time Michael called the Peer 1 Network Operations Center (NOC) in Vancouver. They ran some tests, started investigating, couldn't find anything wrong, and by 5:30 a.m. things seemed to be back to normal, but by this point, he was as nervous as a porcupine in a balloon factory.
At 6:15 a.m. the New York site lost all connectivity. Peer 1 couldn't find anything wrong on their end. Michael got dressed and took the subway into Manhattan. The server seemed to be up. The Peer1 network connection was fine. The problem was something with the network switch. Michael temporarily took the switch out of the loop, connecting our router directly to Peer 1's router, and lo and behold, we were back on the Internet. 
By the time most of our American customers got to work in the morning, everything was fine. Our European customers had already started emailing us to complain. Michael spent some time doing a post-mortem, and discovered that the problem was a simple configuration problem on the switch. There are several possible speeds that a switch can use to communicate (10, 100, or 1000 megabits/second). You can either set the speed manually, or you can let the switch automatically negotiate the highest speed that both sides can work with. The switch that failed had been set to autonegotiate. This usually works, but not always, and on the morning of January 10th, it didn't.
Michael knew this could be a problem, but when he installed the switch, he had forgotten to set the speed, so the switch was still in the factory-default autonegotiate mode, which seemed to work fine. Until it didn't.
Michael wasn't happy. He sent me an email:
I know that we don't officially have an SLA for On Demand, but I would like us to define one for internal purposes (at least). It's one way that I can measure if myself and the (eventual) sysadmin team are meeting the general goals for the business. I was in the slow process of writing up a plan for this, but want to expedite in light of this morning's mayhem.
An SLA is generally defined in terms of 'uptime', so we need to define what 'uptime' is in the context of On Demand. Once that is made clear, it'll get translated into policy, which will then be translated into a set of monitoring / reporting scripts, and will be reviewed on a regular interval to see if we are 'doing what we say'. 
Good idea!
But there are some problems with SLAs. The biggest one is the lack of statistical meaningfulness when outages are so rare. We've had, if I remember correctly, two unplanned outages, including this one, since going live with FogBugz on Demand six months ago. Only one was our fault. Most well-run online services will have two, maybe three outages a year. With so few data points, the length of the outage starts to become really significant, and that's one of those things that's wildly variable. Suddenly, you're talking about how long it takes a human to get to the equipment and swap out a broken part. To get really high uptime, you can't wait for a human to switch out failed parts. You can't even wait for a human to figure out what went wrong: you have to have previously thought of every possible thing that can possibly go wrong, which is vanishingly improbable. It's the unexpected unexpecteds, not the expected unexpecteds, that kill you.
Really high availability becomes extremely costly. The proverbial ""six nines"" availability (99.9999% uptime) means no more than 30 seconds downtime per year. That's really kind of ridiculous. Even the people who claim that they have built some big multi-million dollar superduper ultra-redundant six nines system are gonna wake up one day, I don't know when, but they will, and something completely unusual will have gone wrong in a completely unexpected way, three EMP bombs, one at each data center, and they'll smack their heads and have fourteen days of outage.
Think of it this way: If your six nines system goes down mysteriously just once and it takes you an hour to figure out the cause and fix it, well, you've just blown your downtime budget for the next century. Even the most notoriously reliable systems, like AT&T's long distance service, have had long outages (six hours in 1991) which put them at a rather embarrassing three nines ... and AT&T's long distance service is considered ""carrier grade,"" the gold standard for uptime.
Keeping internet services online suffers from the problem of black swans. Nassim Taleb, who invented the term, defines it thus: ""A black swan is an outlier, an event that lies beyond the realm of normal expectations."" Almost all internet outages are unexpected unexpecteds: extremely low-probability outlying surprises. They're the kind of things that happen so rarely it doesn't even make sense to use normal statistical methods like ""mean time between failure."" What's the ""mean time between catastrophic floods in New Orleans?""
Measuring the number of minutes of downtime per year does not predict the number of minutes of downtime you'll have the next year. It reminds me of commercial aviation today: the NTSB has done such a great job of eliminating all the common causes of crashes that nowadays, each commercial crash they investigate seems to be a crazy, one-off, black-swan outlier.
Somewhere between the ""extremely unreliable"" level of service, where it feels like stupid outages occur again and again and again, and the ""extremely reliable"" level of service, where you spend millions and millions of dollars getting an extra minute of uptime a year, there's a sweet spot, where all the expected unexpecteds have been taken care of. A single hard drive failure, which is expected, doesn't take you down. A single DNS server failure, which is expected, doesn't take you down. But the unexpected unexpecteds might. That's really the best we can hope for. 
To reach this sweet spot, we borrowed an idea from Sakichi Toyoda, the founder of Toyota. He calls it Five Whys. When something goes wrong, you ask why, again and again, until you ferret out the root cause. Then you fix the root cause, not the symptoms. 
Since this fit well with our idea of fixing everything two ways, we decided to start using five whys ourselves. Here's what Michael came up with:
Our link to Peer1 NY went down
Why? - Our switch appears to have put the port in a failed state
Why? - After some discussion with the Peer1 NOC, we speculate that it was quite possibly caused by an Ethernet speed / duplex mismatch
Why? - The switch interface was set to auto-negotiate instead of being manually configured
Why? - We were fully aware of problems like this, and have been for many years. But - we do not have a written standard and verification process for production switch configurations.
Why? - Documentation is often thought of as an aid for when the sysadmin isn't around or for other members of the operations team, whereas, it should really be thought of as a checklist. 
""Had we produced a written standard prior to deploying the switch and subsequently reviewed our work to match the standard, this outage would not have occurred,"" Michael wrote. ""Or, it would occur once, and the standard would get updated as appropriate.""
After some internal discussion we all agreed that rather than imposing a statistically meaningless measurement and hoping that the mere measurement of something meaningless would cause it to get better, what we really needed was a process of continuous improvement. Instead of setting up a SLA for our customers, we set up a blog where we would document every outage in real time, provide complete post-mortems, ask the five whys, get to the root cause, and tell our customers what we're doing to prevent that problem in the future. In this case, the change is that our internal documentation will include detailed checklists for all operational procedures in the live environment. 
Our customers can look at the blog to see what caused the problems and what we're doing to make things better, and, hopefully, they can see evidence of steadily improving quality.
In the meantime, our customer service folks have the authority to credit customers' accounts if they feel like they were affected by an outage. We let the customer decide how much they want to be credited, up to a whole month, because not every customer is even going to notice the outage, let alone suffer from it. I hope this system will improve our reliability to the point where the only outages we suffer are really the extremely unexpected black swans.
PS. Yes, we want to hire another system administrator so Michael doesn't have to be the only one to wake up in the middle of the night.
	"
https://www.joelonsoftware.com/2008/01/20/this-years-business-of-software-conference/,This year’s Business of Software conference,2008-01-20T00:11:34+00:00,,Joel Spolsky,News,"
	The best conference I went to last year was the Business of Software Conference, organized by Neil Davidson of Red Gate Software over in Cambridge, England. It had a great lineup of speakers [PDF] including Guy Kawasaki, Eric Sink, Tim Lister (coauthor of Peopleware), Rick Chapman, Hugh MacLeod, and others, a great collection of real software businesses in attendance, and almost no fluff. Plus, my first 5.6 earthquake, experienced from the top of a highrise hotel. Great fun.
This year when Neil approached me about co-sponsoring the conference, I thought, why not? It's exactly the kind of conference I would organize if I were organizing a conference about the software business, which, thankfully, I'm not, but Neil is, and he's doing a bang up job.
So this year, it's going to be called ""Business of Software 2008: A Joel on Software Conference."" It'll almost certainly be in Boston some time in the fall, but nothing is even remotely final yet. Sign up for the mailing list at that site, and they'll let you know when a time and place are set.
	"
https://www.joelonsoftware.com/2008/01/08/undergraduate-programming/,Undergraduate programming,2008-01-08T00:11:33+00:00,,Joel Spolsky,News,"
	From CrossTalk, The Journal of Defense Software Engineering: ""It is our view that Computer Science (CS) education is neglecting basic skills, in particular in the areas of programming and formal methods. We consider that the general adoption of Java as a first programming language is in part responsible for this decline.""
JavaSchools are not operating in a vacuum: they're dumbing down their curriculum because they think it's the only way to keep CS students. The real problem is that these schools are not doing anything positive to attract the kids who are really interesting in programming, not computer science. I think the solution would be to create a programming-intensive BFA in Software Development-a Julliard for programmers. Such a program would consist of a practical studio requirement developing significant works of software on teams with very experienced teachers, with a sprinkling of liberal arts classes for balance. It would be a huge magnet to the talented high school kids who love programming, but can't get excited about proving theorums.
When I said BFA, Bachelor of Fine Arts, I meant it: software development is an art, and the existing Computer Science education, where you're expected to learn a few things about NP completeness and Quicksort is singularly inadequate to training students how to develop software.
Imagine instead an undergraduate curriculum that consists of 1/3 liberal arts, and 2/3 software development work. The teachers are experienced software developers from industry. The studio operates like a software company. You might be able to major in Game Development and work on a significant game title, for example, and that's how you spend most of your time, just like a film student spends a lot of time actually making films and the dance students spend most of their time dancing.
There are already several programs going in this direction: a lot of Canadian universities, notably Waterloo, have Software Engineering programs, and in Indiana, Rose-Hulman combines a good software engineering program with a co-op program called Rose-Hulman Ventures. These programs have no problem attracting lots of qualified students at a time when the Ivy League CS departments consider themselves lucky if they get a dozen majors a year.
In the meantime, think about how many computer science departments earned their reputation by writing an important piece of code: MIT's X Window, Athena, and Lisp Machine; CMU's Andrew File System, Mach, and Lycos; Berkeley's Unix; the University of Kansas' Lynx; Columbia's Kermit. Where are those today? What have the universities given us lately? What's the best college for a high school senior who really loves programming but isn't so excited about lambda calculus?
	"
https://www.joelonsoftware.com/2008/01/05/voting-machine-bugs/,Voting machine bugs,2008-01-05T00:11:32+00:00,,Joel Spolsky,News,"
	
Clive Thompson, writing in The New York Times: ""In 2005, the state of California complained that the machines were crashing. In tests, Diebold determined that when voters tapped the final ""cast vote"" button, the machine would crash every few hundred ballots. They finally intuited the problem: their voting software runs on top of Windows CE, and if a voter accidentally dragged his finger downward while touching ""cast vote"" on the screen, Windows CE interpreted this as a ""drag and drop"" command. The programmers hadn't anticipated that Windows CE would do this, so they hadn't programmed a way for the machine to cope with it. The machine just crashed.""
	"
https://www.joelonsoftware.com/2008/02/28/pressed-uniforms-mid-winter-tans-and-morale/,"Pressed uniforms, mid-winter tans, and morale",2008-02-28T00:11:46+00:00,,Joel Spolsky,News,"
	
March's Inc. column is online: ""Don't tell your star salespeople to take the bus and stay with relatives when they make that call in St. Louis, even though that's what you did when you started the company.""
	"
https://www.joelonsoftware.com/2008/02/25/inspired-misfires/,Inspired Misfires,2008-02-25T00:11:45+00:00,,Joel Spolsky,News,"
	
From my February column in Inc. Magazine: ""The bureaucrats in Washington had forgotten Newton's first law: An object in motion tends to remain in motion.""
	"
https://www.joelonsoftware.com/2008/02/23/speakers-for-business-of-software-conference/,Speakers for Business of Software Conference,2008-02-23T00:11:44+00:00,,Joel Spolsky,News,"
	
Neil Davidson has posted a preliminary list of some of the speakers for this year's Business of Software Conference. ""So far I've lined up (in no particular order) Joel Spolsky, Eric Sink, Richard Stallman, Dharmesh Shah, Jason Fried, Steve Johnson and Paul Kenny.""
	"
https://www.joelonsoftware.com/2008/02/22/a-correction-to-the-correction/,A correction to the correction,2008-02-22T00:11:43+00:00,,Joel Spolsky,News,"
	Some readers were kind enough to point out in the comments that there are a couple of open source projects that integrate with Remote Desktop. I guess news analysis that appears within hours of a story breaking is never very good. The whole business of remote desktop access is an entire industry, and this is just one tiny fraction of the protocols that were published by Microsoft yesterday, so Charny's story was the moral equivalent of trying to decide who is going to win the next American election by talking to a couple of truckers at a bar. The problem wasn't the accuracy in reporting (although that was sorely lacking), the problem was that the story was too ambitious. When Charny called me I should have said, ""The Schleswig-Holstein question is so complicated, only three men in Europe have ever understood it. One was Prince Albert, who is dead. The second was a German professor who became mad. I am the third and I have forgotten all about it."" 
PS here are the Microsoft Open Protocol Specifications.
	"
https://www.joelonsoftware.com/2008/02/21/some-corrections/,Some corrections,2008-02-21T00:11:42+00:00,,Joel Spolsky,News,"
	A well-meaning, but rushed, journalist named Ben Charny interviewed me this morning about Microsoft's interoperability press release.
He made a ridiculous number of mistakes. That's the nature of the wire reporters on deadline. Here are some corrections.
""For want of a few key details from Microsoft Corp. (MSFT), Joel Spolsky tried but failed more than 10 years ago to make a better version of Microsoft's remote office desktop-computer feature.""
Not true. Fog Creek Copilot was developed less than three years ago and has been under continous development since then. It has been a profitable product and we're still developing new versions. I believe that what we built is better than Microsoft's Remote Desktop in many ways (it works through firewalls, supports Macintosh and Windows, and is easier to set up for ad-hoc tech support) and it's worse in some ways (it's slower, and uses JPG compression as an optimization which can make the screen blurry). So it's debatable whether I ""failed."" There was no need for ""a few key details from Microsoft"" because we don't interoperate with Remote Desktop, we use the open source VNC protocol (incidentally, the client code for Copilot is freely available under the GPL).
""Now Project Co-Pilot has gotten new life.""
OK, it's not ""Project Co-Pilot"", it's Fog Creek Copilot, and, like I say, we've been working on it continuously for almost three years and are about to release a major new version, so nothing about Microsoft's announcement granted it ""new life."" That part is just a fabrication.
""On Thursday Spolsky finally located those elusive lines of code tucked inside 30,000 pages made public Thursday by Microsoft. Before they were available only under trade-secrets licenses.""
Huh? Lines of code? Ok, I understand, tech journalists may not understand the difference between ""lines of code"" and protocol specifications. When the press release came out, I was curious to see if it included a spec for the Remote Desktop protocol. We've always known how the protocol works, and how it transmits GDI commands for performance reasons, which is neither rocket science nor a trade secret. I don't know if the concept is patented, but the X Window server worked this way before Windows was even invented, so if there is a patent for this GDI business, it ain't Microsoft's, but that's neither here nor there.
Copilot doesn't use the remote desktop protocol, full stop, and we don't plan to. I just happened to look for that in the spec (in the 15 minutes between Microsoft's press release and the time the journalist called me) because I was curious to see what kind of stuff was in there, and this was an area I had wondered about.
By sharing more technical information about its key products on Thursday, Microsoft has jump-started a wave of development destined to unleash software that will compete with many more of Microsoft's own products. One of the first appears to be remote desktop software, which uses a secured Internet connection to remotely access files and features stored on office- desktop computers. Currently, there's no third-party version of the software, save for Citrix Systems Inc. (CTXS), which has a cross-licensing deal with Microsoft. But Microsoft's existing product is a very basic one, making it rife for improvements. Its relative simplicity is demonstrative of how there's been no competitive offerings that would have forced Microsoft to make a better widget.
This part is what he got mostly right, and it's what I said. As far as I know, there are no competitive clients for Windows Remote Desktop (formerly called Terminal Services) except for Citrix's cross-licensed implementation, presumably because the protocol was never publicized. As a result, if you want to use Windows Remote Desktop, you are stuck with the rudimentary clients Microsoft gives you. There are LOTS of great competitive remote desktop solutions that include both the client and the server; besides our own Copilot, there's Bomgar, LogMeIn, GotoMyPC, and the granddaddy PCAnywhere, and another dozen or so options. But I'm pretty sure none of them interoperate with Remote Desktop because the spec has not been available. Everybody, including Copilot, has their own protocol, usually a variation of the RFB protocol [PDF spec].
So I thought this was one example of an area where Microsoft actually stood to gain from publicizing their protocols. It's bound to open up lots of opportunities in hundreds of areas (remote desktop is just a tiny example) where third-party developers will be able to develop better drop-in versions of various pieces of the Microsoft software stack, which helps the Microsoft ecosystem more than it detracts from their business. Microsoft isn't making a dime off of RDC because it's free and built into Windows... a few competive options with more features can only help the Windows business in the long run.
(Updated 2/22) A correction to the correction. 
	"
https://www.joelonsoftware.com/2008/02/19/why-are-the-microsoft-office-file-formats-so-complicated-and-some-workarounds/,Why are the Microsoft Office file formats so complicated? (And some workarounds),2008-02-19T00:11:41+00:00,,Joel Spolsky,"Rock star developer, News","
	
Last week, Microsoft published the binary file formats for Office. These formats appear to be almost completely insane. The Excel 97-2003 file format is a 349 page PDF file. But wait, that's not all there is to it! This document includes the following interesting comment: 
Each Excel workbook is stored in a compound file. 
You see, Excel 97-2003 files are OLE compound documents, which are, essentially, file systems inside a single file. These are sufficiently complicated that you have to read another 9 page spec to figure that out. And these ""specs"" look more like C data structures than what we traditionally think of as a spec. It's a whole hierarchical file system.
If you started reading these documents with the hope of spending a weekend writing some spiffy code that imports Word documents into your blog system, or creates Excel-formatted spreadsheets with your personal finance data, the complexity and length of the spec probably cured you of that desire pretty darn quickly. A normal programmer would conclude that Office's binary file formats: 
are deliberately obfuscated 
are the product of a demented Borg mind 
were created by insanely bad programmers 
and are impossible to read or create correctly. 
You'd be wrong on all four counts. With a little bit of digging, I'll show you how those file formats got so unbelievably complicated, why it doesn't reflect bad programming on Microsoft's part, and what you can do to work around it.
The first thing to understand is that the binary file formats were designed with very different design goals than, say, HTML. 
They were designed to be fast on very old computers. For the early versions of Excel for Windows, 1 MB of RAM was a reasonable amount of memory, and an 80386 at 20 MHz had to be able to run Excel comfortably. There are a lot of optimizations in the file formats that are intended to make opening and saving files much faster: 
These are binary formats, so loading a record is usually a matter of just copying (blitting) a range of bytes from disk to memory, where you end up with a C data structure you can use. There's no lexing or parsing involved in loading a file. Lexing and parsing are orders of magnitude slower than blitting. 
The file format is contorted, where necessary, to make common operations fast. For example, Excel 95 and 97 have something called ""Simple Save"" which they use sometimes as a faster variation on the OLE compound document format, which just wasn't fast enough for mainstream use. Word had something called Fast Save. To save a long document quickly, 14 out of 15 times, only the changes are appended to the end of the file, instead of rewriting the whole document from scratch. On the hard drives of the day, this meant saving a long document took one second instead of thirty. (It also meant that deleted data in a document was still in the file. This turned out to be not what people wanted.) 
They were designed to use libraries. If you wanted to write a from-scratch binary importer, you'd have to support things like the Windows Metafile Format (for drawing things) and OLE Compound Storage. If you're running on Windows, there's library support for these that makes it trivial... using these features was a shortcut for the Microsoft team. But if you're writing everything on your own from scratch, you have to do all that work yourself.
Office has extensive support for compound documents, for example, you can embed a spreadsheet in a Word document. A perfect Word file format parser would also have to be able to do something intelligent with the embedded spreadsheet.
They were not designed with interoperability in mind. The assumption, and a fairly reasonable one at the time, was that the Word file format only had to be read and written by Word. That means that whenever a programmer on the Word team had to make a decision about how to change the file format, the only thing they cared about was (a) what was fast and (b) what took the fewest lines of code in the Word code base. The idea of things like SGML and HTML-interchangeable, standardized file formats-didn't really take hold until the Internet made it practical to interchange documents in the first place; this was a decade later than the Office binary formats were first invented. There was always an assumption that you could use importers and exporters to exchange documents. In fact Word does have a format designed for easy interchange, called RTF, which has been there almost since the beginning. It's still 100% supported.
They have to reflect all the complexity of the applications. Every checkbox, every formatting option, and every feature in Microsoft Office has to be represented in file formats somewhere. That checkbox in Word's paragraph menu called ""Keep With Next"" that causes a paragraph to be moved to the next page if necessary so that it's on the same page as the paragraph after it? That has to be in the file format. And that means if you want to implement a perfect Word clone than can correctly read Word documents, you have to implement that feature. If you're creating a competitive word processor that has to load Word documents, it may only take you a minute to write the code to load that bit from the file format, but it might take you weeks to change your page layout algorithm to accommodate it. If you don't, customers will open their Word files in your clone and all the pages will be messed up.
They have to reflect the history of the applications. A lot of the complexities in these file formats reflect features that are old, complicated, unloved, and rarely used. They're still in the file format for backwards compatibility, and because it doesn't cost anything for Microsoft to leave the code around. But if you really want to do a thorough and complete job of parsing and writing these file formats, you have to redo all that work that some intern did at Microsoft 15 years ago. The bottom line is that there are thousands of developer years of work that went into the current versions of Word and Excel, and if you really want to clone those applications completely, you're going to have to do thousands of years of work. A file format is just a concise summary of all the features an application supports.
Just for kicks, let's look at one tiny example in depth. An Excel worksheet is a bunch of BIFF records of different types. I want to look at the very first BIFF record in the spec. It's a record called 1904.
The Excel file format specification is remarkably obscure about this. It just says that the 1904 record indicates ""if the 1904 date system is used."" Ah. A classic piece of useless specification. If you were a developer working with the Excel file format, and you found this in the file format specification, you might be justified in concluding that Microsoft is hiding something. This piece of information does not give you enough information. You also need some outside knowledge, which I'll fill you in on now. There are two kinds of Excel worksheets: those where the epoch for dates is 1/1/1900 (with a leap-year bug deliberately created for 1-2-3 compatibility that is too boring to describe here), and those where the epoch for dates is 1/1/1904. Excel supports both because the first version of Excel, for the Mac, just used that operating system's epoch because that was easy, but Excel for Windows had to be able to import 1-2-3 files, which used 1/1/1900 for the epoch. It's enough to bring you to tears. At no point in history did a programmer ever not do the right thing, but there you have it.
Both 1900 and 1904 file types are commonly found in the wild, usually depending on whether the file originated on Windows or Mac. Converting from one to another silently can cause data integrity errors, so Excel won't change the file type for you. To parse Excel files you have to handle both. That's not just a matter of loading this bit from the file. It means you have to rewrite all of your date display and parsing code to handle both epochs. That would take several days to implement, I think. 
Indeed, as you work on your Excel clone, you'll discover all kinds of subtle details about date handling. When does Excel convert numbers to dates? How does the formatting work? Why is 1/31 interpreted as January 31 of this year, while 1/50 is interpreted as January 1st, 1950? All of these subtle bits of behavior cannot be fully documented without writing a document that has the same amount of information as the Excel source code.
And this is only the first of hundreds of BIFF records you have to handle, and one of the simplest. Most of them are complicated enough to reduce a grown programmer to tears.
The only possible conclusion is this. It's very helpful of Microsoft to release the file formats for Microsoft and Office, but it's not really going to make it any easier to import or save to the Office file formats. These are insanely complex and rich applications, and you can't just implement the most popular 20% and expect 80% of the people to be happy. The binary file specification is, at most, going to save you a few minutes reverse engineering a remarkably complex system.
OK, I promised some workarounds. The good news is that for almost all common applications, trying to read or write the Office binary file formats is the wrong decision. There are two major alternatives you should seriously consider: letting Office do the work, or using file formats that are easier to write. 
Let Office do the heavy work for you. Word and Excel have extremely complete object models, available via COM Automation, which allow you to programmatically do anything. In many situations, you are better off reusing the code inside Office rather than trying to reimplement it. Here are a few examples.
You have a web-based application that's needs to output existing Word files in PDF format. Here's how I would implement that: a few lines of Word VBA code loads a file and saves it as a PDF using the built in PDF exporter in Word 2007. You can call this code directly, even from ASP or ASP.NET code running under IIS. It'll work. The first time you launch Word it'll take a few seconds. The second time, Word will be kept in memory by the COM subsystem for a few minutes in case you need it again. It's fast enough for a reasonable web-based application. 
Same as above, but your web hosting environment is Linux. Buy one Windows 2003 server, install a fully licensed copy of Word on it, and build a little web service that does the work. Half a day of work with C# and ASP.NET.
Same as above, but you need to scale. Throw a load balancer in front of any number of boxes that you built in step 2. No code required.
This kind of approach would work for all kinds of common Office types of applications you might perform on your server. For example: 
Opening an Excel workbook, storing some data in input cells, recalculating, and pulling some results out of output cells 
Using Excel to generate charts in GIF format 
Pulling just about any kind of information out of any kind of Excel worksheet without spending a minute thinking about file formats 
Converting Excel file formats to CSV tabular data (another approach is to use Excel ODBC drivers to suck data out using SQL queries). 
Editing Word documents 
Filling out Word forms 
Converting files between any of the many file formats supported by Office (there are importers for dozens of word processor and spreadsheet formats) 
In all of these cases, there are ways to tell the Office objects that they're not running interactively, so they shouldn't bother updating the screen and they shouldn't prompt for user input. By the way, if you go this route, there are a few gotchas, and it's not officially supported by Microsoft, so read their knowledge base article before you get started.
Use a simpler format for writing files. If you merely have to produce Office documents programmatically, there's almost always a better format than the Office binary formats that you can use which Word and Excel will open happily, without missing a beat.
If you simply have to produce tabular data for use in Excel, consider CSV. 
If you really need worksheet calculation features that CSV doesn't support, the WK1 format (Lotus 1-2-3) is a heck of a lot simpler than Excel, and Excel will open it fine. 
If you really, really have to generate native Excel files, find an extremely old version of Excel... Excel 3.0 is a good choice, before all the compound document stuff, and save a minimum file containing only the exact features you want to use. Use this file to see the exact minimum BIFF records that you have to output and just focus on that part of the spec. 
For Word documents, consider writing HTML. Word will open those fine, too. 
If you really want to generate fancy formatted Word documents, your best bet is to create an RTF document. Everything that Word can do can be expressed in RTF, but it's a text format, not binary, so you can change things in the RTF document and it'll still work. You can create a nicely formatted document with placeholders in Word, save as RTF, and then using simple text substitution, replace the placeholders on the fly. Now you have an RTF document that every version of Word will open happily. 
Anyway, unless you're literally trying to create a competitor to Office that can read and write all Office files perfectly, in which case, you've got thousands of years of work cut out for you, chances are that reading or writing the Office binary formats is the most labor intensive way to solve whatever problem it is that you're trying to solve.
	"
https://www.joelonsoftware.com/2008/02/06/going-to-tokyo/,Going to Tokyo,2008-02-06T00:11:40+00:00,,Joel Spolsky,News,"
	I'm heading out to Tokyo tomorrow in advance of next week's Shoeisha Developers Summit.
See you later!
	"
https://www.joelonsoftware.com/2008/03/17/martian-headsets/,Martian Headsets,2008-03-17T00:11:49+00:00,,Joel Spolsky,"CEO, News","
	You're about to see the mother of all flamewars on internet groups where web developers hang out. It'll make the Battle of Stalingrad look like that time your sister-in-law stormed out of afternoon tea at your grandmother's and wrapped the Mustang around a tree. 
This upcoming battle will be presided over by Dean Hachamovitch, the Microsoft veteran currently running the team that's going to bring you the next version of Internet Explorer, 8.0. The IE 8 team is in the process of making a decision that lies perfectly, exactly, precisely on the fault line smack in the middle of two different ways of looking at the world. It's the difference between conservatives and liberals, it's the difference between ""idealists"" and ""realists,"" it's a huge global jihad dividing members of the same family, engineers against computer scientists, and Lexuses vs. olive trees. 
And there's no solution. But it will be really, really entertaining to watch, because 99% of the participants in the flame wars are not going to understand what they're talking about. It's not just entertainment: it's required reading for every developer who needs to design interoperable systems. 
The flame war will revolve around the issue of something called ""web standards."" I'll let Dean introduce the problem: 
All browsers have a ""Standards"" mode, call it ""Standards mode,"" and use it to offer a browser's best implementation of web standards. Each version of each browser has its own Standards mode, because each version of each browser improves on its web standards support. There's Safari 3's Standards mode, Firefox 2's Standards mode, IE6's Standards mode, and IE7's Standards mode, and they're all different. We want to make IE8's Standards mode much, much better than IE7's Standards mode. 
And the whole problem hinges on the little tiny decision of what IE8 should do when it encounters a page that claims to support ""standards"", but has probably only been tested against IE7. 
What the hell is a standard? 
Don't they have standards in all kinds of engineering endeavors? (Yes.) 
Don't they usually work? (Mmmm.....) 
Why are ""web standards"" so frigging messed up? (It's not just Microsoft's fault. It's your fault too. And Jon Postel's (1943-1998). I'll explain that later.) 
There is no solution. Each solution is terribly wrong. Eric Bangeman at ars technica writes, ""The IE team has to walk a fine line between tight support for W3C standards and making sure sites coded for earlier versions of IE still display correctly."" This is incorrect. It's not a fine line. It's a line of negative width. There is no place to walk. They are damned if they do and damned if they don't.
That's why I can't take sides on this issue and I'm not going to. But every working software developer should understand, at least, how standards work, how standards should work, how we got into this mess, so I want to try to explain a little bit about the problem here, and you'll see that it's the same reason Microsoft Vista is selling so poorly, and it's the same issue I wrote about when I referred to the Raymond Chen camp (pragmatists) at Microsoft vs. the MSDN camp (idealists), the MSDN camp having won, and now nobody can figure out where their favorite menu commands went in Microsoft Office 2007, and nobody wants Vista, and it's all the same debate: whether you are an Idealist (""red"") or a Pragmatist (""blue""). 
Let me start at the beginning. Let's start by thinking about how to get things to work together. 
What kinds of things? Anything, really. A pencil and a pencil sharpener. A telephone and a telephone system. An HTML page and a web browser. A Windows GUI application and the Windows operating system. Facebook and a Facebook Application. Stereo headphones and stereos. 
At the point of contact between those two items, there are all kinds of things that have to be agreed, or they won't work together. 
I'll work through a simple example. 
Imagine that you went to Mars, where you discovered that the beings who live there don't have the portable music player. They're still using boom boxes. 
You realize this is a huge business opportunity and start selling portable MP3 players (except on Mars they're called Qxyzrhjjjjukltks) and compatible headphones. To connect the MP3 player to the headphones, you invent a neat kind of metal jack that looks like this: 
Because you control the player and the headphone, you can ensure that your player works with your headphones. This is a ONE TO ONE market. One player, one headphone. 
 
 
Maybe you write up a spec, hoping that third parties will make different color headphones, since Marslings are very particular about the color of things that they stick in their earlings. 
 
And you forgot, when you wrote the spec, to document that the voltage should be around 1.4 volts. You just forgot. So the first aspiring manufacturer of 100% compatible headphones comes along, his speaker is only expecting 0.014 volts, and when he tests his prototype, it either blows out the headphones, or the eardrums of the listener, whichever comes first. And he makes some adjustments and eventually gets a headphone that works fine and is just a couple of angstroms more fierce than your headphones. 
More and more manufacturers show up with compatible headphones, and soon we're in a ONE TO MANY market. 
 
So far, all is well. We have a de-facto standard for headphone jacks here. The written spec is not complete and not adequate, but anybody who wants to make a compatible headphone just has to plug it into your personal stereo device and test it, and if it works, all is well, they can sell it, and it will work. 
Until you decide to make a new version, the Qxyzrhjjjjukltk 2.0. 
The Qxyzrhjjjjukltk 2.0 is going to include a telephone (turns out Marslings didn't figure out cell phones on their own, either) and the headphone is going to have to have a built-in microphone, which requires one more conductor, so you rework the connector into something totally incompatible and kind of ugly, with all kinds of room for expansion: 
 
And the Qxyzrhjjjjukltk 2.0 is a complete and utter failure in the market. Yes, it has a nice telephone thing, but nobody cared about that. They cared about their large collections of headphones. It turns out that when I said Marslings are very particular about the color of things that they stick in their ears, I meant it. Most trendy Marslings at this point have a whole closet full of nice headphones. They all look the same to you (red), but Marslings are very, very finicky about shades of red in a way that you never imagined. The newest high-end apartments on Mars are being marketed with a headphone closet. I kid you not. 
So the new jack is not such a success, and you quickly figure out a new scheme: 
 
Notice that you've now split the main shaft to provide another conductor for the microphone signal, but the trouble is, your Qxyzrhjjjjukltk 2.1 doesn't really know whether the headset that's plugged in has a mic or not, and it needs to know this so it can decide whether to enable phone calls. And so you invent a little protocol... the new device puts a signal on the mic pin, and looks for it on the ground, and if it's there, it must be a three conductor plug, and therefore they don't have a mic, so you'll go into backwards compatibility mode where you only play music. It's simple, but it's a protocol negotiation. 
It's not a ONE-MANY market any more. All the stereo devices are made by the same firm, one after the other, so I'm going to call this a SEQUENCE-MANY market: 
Here are some SEQUENCE-MANY markets you already know about: 
Facebook | about 20,000 Facebook Apps 
Windows | about 1,000,000 Windows Apps 
Microsoft Word | about 1,000,000,000 Word documents 
There are hundreds of other examples. The key thing to remember is that when a new version of the left-hand device comes out, it has to maintain auto-backwards-compatibility with all the old right-hand accessories meant to work with the old device, because those old accessories could not possibly have designed with the new product in mind. The Martian headphones are already made. You can't go back and change them all. It's much easier and more sensible to change the newly invented device so that it acts like an old device when confronted with an old headphone. 
And because you want to make progress, adding new features and functionality, you also need a new protocol for new devices to use, and the sensible thing to do is to have both devices negotiate a little bit at the beginning to decide whether they both understand the latest protocol. 
SEQUENCE-MANY is the world Microsoft grew up in. 
But there's one more twist, the MANY-MANY market. 
A few years pass; you're still selling Qxyzrhjjjjukltks like crazy; but now there are lots of Qxyzrhjjjjukltk clones on the market, like the open source FireQx, and lots of headphones, and you all keep inventing new features that require changes to the headphone jack and it's driving the headphone makers crazy because they have to test their new designs out against every Qxyzrhjjjjukltk clone which is costly and time consuming and frankly most of them don't have time and just get it to work on the most popular Qxyzrhjjjjukltk 5.0, and if that works, they're happy, but of course when you plug the headphones into FireQx 3.0 lo and behold they explode in your hands because of a slight misunderstanding about some obscure thing in the spec which nobody really understands called hasLayout, and everybody understands that when it's raining the hasLayout property is true and the voltage is supposed to increase to support the windshield-wiper feature, but there seems to be some debate over whether hail and snow are rain for the purpose of hasLayout, because the spec just doesn't say. FireQx 3.0 treats snow as rain, because you need windshield wipers in the snow, Qxyzrhjjjjukltk 5.0 does not, because the programmer who worked on that feature lives in a warm part of Mars without snow and doesn't have a driver's license anyway. Yes, they have driver's licenses on Mars. 
And eventually some tedious bore writes a lengthy article on her blog explaining a trick you can use to make Qxyzrhjjjjukltk 5.0 behave just like FireQx 3.0 through taking advantage of a bug in Qxyzrhjjjjukltk 5.0 in which you trick Qxyzrhjjjjukltk into deciding that it's raining when it's snowing by melting a little bit of the snow, and it's ridiculous, but everyone does it, because they have to solve the hasLayout incompatibility. Then the Qxyzrhjjjjukltk team fixes that bug in 6.0, and you're screwed again, and you have to go find some new bug to exploit to make your windshield-wiper-equipped headphone work with either device. 
NOW. This is the MANY-MANY market. Many players on the left hand side who don't cooperate, and SCRILLIONS of players on the right hand side. And they're all making mistakes because To Err Is Human. 
 
And of course this is the situation we find ourselves in with HTML. Dozens of common browsers, literally billions of web pages. 
And over the years what happens in a MANY-MANY market is that there is a hue and cry for ""standards"" so that ""all the players"" (meaning, the small players) have an equal chance to being able to display all 8 billion web pages correctly, and, even more importantly, so that the designers of those 8 billion pages only have to test against one browser, and use ""web standards,"" and then they will know that their page will also work in other browsers, without having to test every page against every browser. 
See, the idea is, instead of many-many testing, you have many-standard and standard-many testing and you need radically fewer tests. Not to mention that your web pages don't need any browser-specific code to work around bugs in individual browsers, because in this platonic world there are no bugs. 
That's the ideal. 
In practice, with the web, there's a bit of a problem: no way to test a web page against the standard, because there's no reference implementation that guarantees that if it works, all the browsers work. This just doesn't exist. 
So you have to ""test"" in your own head, purely as a thought experiment, against a bunch of standards documents which you probably never read and couldn't completely understand even if you did. 
Those documents are super confusing. The specs are full of statements like ""If a sibling block box (that does not float and is not absolutely positioned) follows the run-in box, the run-in box becomes the first inline box of the block box. A run-in cannot run in to a block that already starts with a run-in or that itself is a run-in."" Whenever I read things like that, I wonder how anyone correctly conforms to the spec. 
There is no practical way to check if the web page you just coded conforms to the spec. There are validators, but they won't tell you what the page is supposed to look like, and having a ""valid"" page where all the text is overlapping and nothing lines up and you can't see anything is not very useful. What people do is check their pages against one browser, maybe two, until it looks right. And if they've made a mistake that just happens to look OK in IE and Firefox, they're not even going to know about it. 
And their pages may break when a future web browser comes out. 
If you've ever visited the ultra-orthodox Jewish communities of Jerusalem, all of whom agree in complete and utter adherence to every iota of Jewish law, you will discover that despite general agreement on what constitutes kosher food, that you will not find a rabbi from one ultra-orthodox community who is willing to eat at the home of a rabbi from a different ultra-orthodox community. And the web designers are discovering what the Jews of Mea Shearim have known for decades: just because you all agree to follow one book doesn't ensure compatibility, because the laws are so complex and complicated and convoluted that it's almost impossible to understand them all well enough to avoid traps and landmines, and you're safer just asking for the fruit plate. 
Standards are a great goal, of course, but before you become a standards fanatic you have to understand that due to the failings of human beings, standards are sometimes misinterpreted, sometimes confusing and even ambiguous. 
The precise problem here is that you're pretending that there's one standard, but since nobody has a way to test against the standard, it's not a real standard: it's a platonic ideal and a set of misinterpretations, and therefore the standard is not serving the desired goal of reducing the test matrix in a MANY-MANY market. 
DOCTYPE is a myth. 
A mortal web designer who attaches a DOCTYPE tag to their web page saying, ""this is standard HTML,"" is committing an act of hubris. There is no way they know that. All they are really saying is that the page was meant to be standard HTML. All they really know is that they tested it with IE, Firefox, maybe Opera and Safari, and it seems to work. Or, they copied the DOCTYPE tag out of a book and don't know what it means. 
In the real world where people are imperfect, you can't have a standard with just a spec-you must have a super-strict reference implementation, and everybody has to test against the reference implementation. Otherwise you get 17 different ""standards"" and you might as well not have one at all. 
And this is where Jon Postel caused a problem, back in 1981, when he coined the robustness principle: ""Be conservative in what you do, be liberal in what you accept from others."" What he was trying to say was that the best way to make the protocols work robustly would be if everyone was very, very careful to conform to the specification, but they should be also be extremely forgiving when talking to partners that don't conform exactly to the specification, as long as you can kind of figure out what they meant. 
So, technically, the way to make a paragraph with small text is <p><small>, but a lot of people wrote <small><p> which is technically incorrect for reasons most web developers don't understand, and the web browsers forgave them and made the text small anyway, because that's obviously what they wanted to happen. 
Now there are all these web pages out there with errors, because all the early web browser developers made super-liberal, friendly, accommodating browsers that loved you for who you were and didn't care if you made a mistake. And so there were lots of mistakes. And Postel's ""robustness"" principle didn't really work. The problem wasn't noticed for many years. In 2001 Marshall Rose finally wrote: 
Counter-intuitively, Postel's robustness principle (""be conservative in what you send, liberal in what you accept"") often leads to deployment problems. Why? When a new implementation is initially fielded, it is likely that it will encounter only a subset of existing implementations. If those implementations follow the robustness principle, then errors in the new implementation will likely go undetected. The new implementation then sees some, but not widespread deployment. This process repeats for several new implementations. Eventually, the not-quite-correct implementations run into other implementations that are less liberal than the initial set of implementations. The reader should be able to figure out what happens next. 
Jon Postel should be honored for his enormous contributions to the invention of the Internet, and there is really no reason to fault him for the infamous robustness principle. 1981 is prehistoric. If you had told Postel that there would be 90 million untrained people, not engineers, creating web sites, and they would be doing all kinds of awful things, and some kind of misguided charity would have caused the early browser makers to accept these errors and display the page anyway, he would have understood that this is the wrong principle, and that, actually, the web standards idealists are right, and the way the web ""should have"" been built would be to have very, very strict standards and every web browser should be positively obnoxious about pointing them all out to you and web developers that couldn't figure out how to be ""conservative in what they emit"" should not be allowed to author pages that appear anywhere until they get their act together. 
But, of course, if that had happened, maybe the web would never have taken off like it did, and maybe instead, we'd all be using a gigantic Lotus Notes network operated by AT&T. Shudder. 
Shoulda woulda coulda. Who cares. We are where we are. We can't change the past, only the future. Heck, we can barely even change the future. 
And if you're a pragmatist on the Internet Explorer 8.0 team, you might have these words from Raymond Chen seared into your cortex. He was writing about how Windows XP had to emulate buggy behavior from old versions of Windows: 
Look at the scenario from the customer's standpoint. You bought programs X, Y and Z. You then upgraded to Windows XP. Your computer now crashes randomly, and program Z doesn't work at all. You're going to tell your friends, ""Don't upgrade to Windows XP. It crashes randomly, and it's not compatible with program Z."" Are you going to debug your system to determine that program X is causing the crashes, and that program Z doesn't work because it is using undocumented window messages? Of course not. You're going to return the Windows XP box for a refund. (You bought programs X, Y, and Z some months ago. The 30-day return policy no longer applies to them. The only thing you can return is Windows XP.) 
And you're thinking, hmm, let's update this for today: 
Look at the scenario from the customer's standpoint. You bought programs X, Y and Z. You then upgraded to Windows XPVista. Your computer now crashes randomly, and program Z doesn't work at all. You're going to tell your friends, ""Don't upgrade to Windows XPVista. It crashes randomly, and it's not compatible with program Z."" Are you going to debug your system to determine that program X is causing the crashes, and that program Z doesn't work because it is using undocumentedinsecure window messages? Of course not. You're going to return the Windows XPVista box for a refund. (You bought programs X, Y, and Z some months ago. The 30-day return policy no longer applies to them. The only thing you can return is Windows XPVista.) 
The victory of the idealists over the pragmatists at Microsoft, which I reported in 2004, directly explains why Vista is getting terrible reviews and selling poorly. 
And how does it apply to the IE team? 
Look at the scenario from the customer's standpoint. You visit 100 websites a day. You then upgraded to IE 8. On half of them, the page is messed up, and Google Maps doesn't work at all. 
You're going to tell your friends, ""Don't upgrade to IE 8. It messes up every page, and Google Maps doesn't work at all."" Are you going to View Source to determine that website X is using nonstandard HTML, and Google Maps doesn't work because it is using non-standard JavaScript objects from old versions of IE that were never accepted by the standards committee? Of course not. You're going to uninstall IE 8. (Those websites are out of your control. Some of them were developed by people who are now dead. The only thing you can do is go back to IE 7). 
And so if you're a developer on the IE 8 team, your first inclination is going to be to do exactly what has always worked in these kinds of SEQUENCE-MANY markets. You're going to do a little protocol negotiation, and continue to emulate the old behavior for every site that doesn't explicitly tell you that they expect the new behavior, so that all existing web pages continue to work, and you're only going to have the nice new behavior for sites that put a little flag on the page saying, ""Yo! I grok IE 8! Give me all the new IE 8 Goodness Please!"" 
And indeed that was the first decision announced by the IE team on January 21st. The web browser would accommodate existing pages silently so that nobody had to change their web site by acting like the old, buggy IE7 that web developers hated. 
A pragmatic engineer would have to come to the conclusion that the IE team's first decision was right. But the young idealist ""standards"" people went nuclear. 
IE needed to provide a web standards experience without requiring a special ""Yo! I'm tested with IE 8!"" tag, they said. They were sick of special tags. Every frigging web page has to have thirty seven ugly hacks in it to make it work with five or six popular browsers. Enough ugly hacks. 8 billion existing web pages be damned. 
And the IE team flip-flopped. Their second decision, and I have to think it's not final, their second decision was to do the idealistic thing, and treat all sites that claim to be ""standards-compliant"" as if they have been designed for and tested with IE8. 
Almost every web site I visited with IE8 is broken in some way. Websites that use a lot of JavaScript are generally completely dead. A lot of pages simply have visual problems: things in the wrong place, popup menus that pop under, mysterious scrollbars in the middle. Some sites have more subtle problems: they look ok but as you go further you find that critical form won't submit or leads to a blank page. 
These are not web pages with errors. They are usually websites which were carefully constructed to conform to web standards. But IE 6 and IE 7 didn't really conform to the specs, so these sites have little hacks in them that say, ""on Internet Explorer... move this thing 17 pixels to the right to compensate for IE's bug."" 
And IE 8 is IE, but it no longer has the IE 7 bug where it moved that thing 17 pixels left of where it was supposed to be according to web standards. So now code that was written that was completely reasonable no longer works. 
IE 8 can't display most web pages correctly until you give up and press the ""ACT LIKE IE7"" button. The idealists don't care: they want those pages changed. 
Some of those pages can't be changed. They might be burned onto CD-ROMs. Some of them were created by people who are now dead. Most of them created by people who have no frigging idea what's going on and why their web page, which they paid a designer to create 4 years ago, is now not working properly. 
The idealists rejoiced. Hundreds of them descended on the IE blog to actually say nice things about Microsoft for the first times in their lives. 
I looked at my watch. 
Tick, tick, tick. 
Within a matter of seconds, you started to see people on the forums showing up like this one: 
I have downloaded IE 8 and with it some bugs. Some of my websites like ""HP"" are very difficult to read as the whole page is very very small... The speed of my Internet has also been reduced on some occasions. Whe I use Google Maps, there are overlays everywhere, enough so it makes it ackward to use! 
Mmhmm. All you smug idealists are laughing at this newbie/idjit. The consumer is not an idiot. She's your wife. So stop laughing. 98% of the world will install IE8 and say, ""It has bugs and I can't see my sites."" They don't give a flicking flick about your stupid religious enthusiasm for making web browsers which conform to some mythical, platonic ""standard"" that is not actually implemented anywhere. They don't want to hear your stories about messy hacks. They want web browsers that work with actual web sites. 
So you see, we have a terrific example here of a gigantic rift between two camps. 
The web standards camp seems kind of Trotskyist. You'd think they're the left wing, but if you happened to make a website that claims to conform to web standards but doesn't, the idealists turn into Joe Arpaio, America's Toughest Sheriff. ""YOU MADE A MISTAKE AND YOUR WEBSITE SHOULD BREAK. I don't care if 80% of your websites stop working. I'll put you all in jail, where you will wear pink pajamas and eat 15 cent sandwiches and work on a chain gang. And I don't care if the whole county is in jail. The law is the law."" 
On the other hand, we have the pragmatic, touchy feely, warm and fuzzy engineering types. ""Can't we just default to IE7 mode? One line of code ... Zip! Solved!"" 
Secretly? Here's what I think is going to happen. The IE8 team going to tell everyone that IE8 will use web standards by default, and run a nice long beta during which they beg people to test their pages with IE8 and get them to work. And when they get closer to shipping, and only 32% of the web pages in the world render properly, they'll say, ""look guys, we're really sorry, we really wanted IE8 standards mode to be the default, but we can't ship a browser that doesn't work,"" and they'll revert to the pragmatic decision. Or maybe they won't, because the pragmatists at Microsoft have been out of power for a long time. In which case, IE is going to lose a lot of market share, which would please the idealists to no end, and probably won't decrease Dean Hachamovitch's big year-end bonus by one cent.
You see? No right answer. 
As usual, the idealists are 100% right in principle and, as usual, the pragmatists are right in practice. The flames will continue for years. This debate precisely splits the world in two. If you have a way to buy stock in Internet flame wars, now would be a good time to do that.
	"
https://www.joelonsoftware.com/2008/03/11/marketing-internships-with-seth-godin/,Marketing internships with Seth Godin,2008-03-11T00:11:48+00:00,,Joel Spolsky,News,"
	The summer internships at Fog Creek are already full, but Seth Godin, my marketing rebbe, has marketing internships. Paid! ""The idea is to find a diverse group of motivated young people who want to join together to create a few really neat projects. The tools used will range from online video to blogs to copywriting to design. Topics might include politics or Squidoo or book promotion or inventing a new kind of web interaction...no scut work, no cold calling, stapling, collating or errands.""
	"
https://www.joelonsoftware.com/2008/03/07/some-interesting-jobs/,Some interesting jobs,2008-03-07T00:11:47+00:00,,Joel Spolsky,News,"
	The recent release of FogBugz 6.0 has, approximately, doubled our sales, and, while I fully agree that often small teams can accomplish a lot more than large teams, we have a lot of interesting work to be done here and there never seem to be enough people to do it, so we've looked for some areas where adding more people would not necessarily slow things down.
We came up with three fairly interesting new positions that might be a perfect fit for you or someone you know. It's relatively rare for Fog Creek to hire full time engineers; many of the people we've hired in the past have been former summer interns, the company is quite small (20 people), and we don't hire lightly, so this is a rare opportunity to get in the door and take advantage of the fact that Fog Creek was designed from the ground up to be the kind of company where the best software developers want to work (about Fog Creek).
The first position is in system administration. Normally, I'm pretty happy to hire inexperienced but bright people and let them learn on the job. Even for fairly important jobs, like, say, President of the United States.
But system administration is one of those things where experience is really important. You don't want your new system administrator to learn about how to create secure and robust online services by building something insecure and unrobust and learning from experience. So for our first system administrator, we hired Michael Gorsuch, because he knew how to operate our systems well on day one.
This is a dilemma for smart people who want to learn how to be world class system administrators. If everybody is asking for x years of experience, how are you supposed to get that experience? You can take an entry-level job in a big company as, say, junior DNS administrator, typing changes into DNS configuration files, but you won't learn very much.
Here's where Fog Creek comes in. Michael and I talked about this and decided that our second hire in that department could be totally inexperienced at system administration, as long as they were smart, got things done, and had the personal characteristics to become a great system administrator (attention to detail, insane curiosity, constant need to be learning new things, strong ability to stay levelheaded and organized even in the most chaotic of situations, doesn't soil pants in fear when presented with a command prompt, thinks ""rtfm"" is a great answer, etc.) This is a once-in-a-lifetime chance to learn the field and gain substantial experience on an interesting, mixed environment including Unix and Windows, desktops and servers, internet hosting and internetworking, open source and Microsoft, with all kinds of interesting moving parts. And you'll be learning from a real master, one on one, in a great environment with zero corporate BS, management that trusts you to order equipment you need without going through some kind of 6 month budget committee process during which a shrill corporate attorney who has been somehow promoted to ""head of the capital infrastructure committee"" is nervous about using open source hippie software because it seems kind of ""communistic,"" and she had a terrible experience on a commune in the 60s when this really gross guy who never bathed and wore flip flops even in the winter... well, anyway, I'm getting off the subject. At Fog Creek when you need equipment you order it. That's really all there is to it.
Interested? System administrator at Fog Creek
Our next interesting position is for a Chief Linux Guru. This is a hybrid position for somebody who really loves Linux, wants to do a lot of coding, but also wants a more diverse problem-solving kind of job.
Here's the theory behind this position. Our main product, FogBugz, is a server product, available for Windows, Linux, and Mac. On Windows servers, everybody has pretty much the same minimal stuff. So our setup program usually works off the shelf. 
On Linux, though, there's a lot more diversity. People have different distros, they have different versions of different important components like MySQL, PHP, and Mono, and they're not all instantly compatible. A lot of Linux administrators went through their server when they first set it up removing things that they didn't think they'd need for ""security"" reasons (""if you're not going to use /bin/ls, delete it-it's just a security hole waiting to be found"", they said), and now, here it is, three years later, and they're installing FogBugz, and they don't get why ls isn't working. Bottom line: it takes a little bit of hammering to get FogBugz to work on many Linux systems.
So this position is for a Linux coder who will also be responsible to get FogBugz working on our customers' systems. My pet theory is that if the person who takes the call when a customer is missing, say, the Pear Mail module, if this person is the same person who maintains the setup code, then they will eventually get sick of sshing into customers' servers and typing ""pear install Mail"" for them and they'll just fix it in the setup code once and for all. And I think a lot of people would find a job that combines problem solving with new software development is going to be pretty interesting, especially if, as I said, you love Linux.
On the development side, you've also got to handle all the Linux-specific code. Right now, that's a mix of PHP, Mono, and various scripting languages. Most of FogBugz is written in our own portable language, Wasabi. You'll be responsible to maintain the Linux-specific parts of the code, and you'll be working on keeping Wasabi for Linux at the same level as Wasabi for Windows.
Interested? Linux guru at Fog Creek
Finally, we could use an extreme Windows Internals guru. I don't mean an ""Access/VB"" kind of guru. I mean a Win 32, COM, .Net, GDI programming, low level Windows systems stuff in C++ and C# kind of guru. And when I say "".Net"" I don't mean ""Ooh look I made an ASP.NET website with a GridView that shows a list of customers."" Uh-uh. Leave that bush league stuff to the boss (me). For this job, you'll be working directly on a native .NET programming language, generating CLR bytecode and integrating with the Visual Studio debugger. You'll be resolving obscure threading model problems in Other People's Code. You'll be hacking GDI to improve the performance of our remote desktop service, Copilot. You'll be figuring out why trivial things that used to work don't work any more in 64 bit Vista. This is the perfect job for the kind of developer who has been doing API level Windows programming for years, who has been reading MSDN Magazine since it was called MSJ, who actually understands what Don Box is talking about, who can explain how to instantiate a COM object from a DLL without touching the registry, and who can figure out, from crappy Microsoft documentation, how to play the first four bars of Gaudeamus Igitur on a computer without a sound card.
Interested? Windows internals guru at Fog Creek
Don't small teams get more things done than big teams? Didn't The Mythical Man Month prove conclusively that you should have the smallest team possible? Don't startups with two kids run circles around the big companies? Isn't Fog Creek getting big and bureaucratic? Why hire more people?
No, no, no, and no. It's a little bit more complicated than that. At 20 people we still fit around one lunch table and we're far from not being able to get things done. And what MMM claimed was only that adding people to a late project makes the project later. The more people you have, the more communication you need, which counterbalances the added productivity of the extra people-that's the MMM conclusion-and so when we add people we always try to find a way to do it in a way that's efficient. But the bottom line is that we have a long list of things that we want to do, and our too-small team is forced to do things in serial that we could do in parallel with a couple more people. So in the long run I think we'll continue hiring carefully and discretely, keeping each of the core teams small (our biggest dev team right now is, um, three people), and I think we're still a ways of from worrying about Fog Creek being bogged down in bureaucracy.
	"
https://www.joelonsoftware.com/2008/04/22/stack-overflow-podcast-2/,Stack Overflow Podcast #2,2008-04-22T00:11:53+00:00,2018-04-23T17:04:02+00:00,Joel Spolsky,News,"
	The next podcast is up. Today we talked about why we're doing a podcast in the first place, took some questions/suggestions from listeners, and got into a fight over whether programmers should learn C. Guess which side I took.
There are some improvements, already.
First, there's an RSS feed, so you can subscribe and get each weekly podcast pushed to you. Here's how you would subscribe using Apple iTunes, for example:
Run iTunes
Choose Advanced | Subscribe to Podcast
Paste in this URL: http://blog.stackoverflow.com/index.php?feed=podcast
There is no step 4.
Now, depending on your settings (under Podcasts in Preferences), iTunes will download the latest podcasts and put them on your iPod when you dock it. You don't have to do anything special. I'm not going to post here every time there's a new podcast; you'll have to subscribe.
A couple of people volunteered to help by typing up transcripts for the hearing-impaired, the pressed-for-time, and search engines. That's a great idea! I opened up a wiki where anyone can contribute to the weekly transcript. If you can spare a few minutes to transcribe even a part of the podcast, that would be greatly appreciated by the many readers for whom an audio podcast is inaccessible.
Jeff has a new blog for the podcast at http://blog.stackoverflow.com/ where the podcasts are posted. You can subscribe to that using a normal RSS reader and see the show notes, links to things we mentioned during the podcast, and there will be comments links for discussion.
If you have any comments, ideas, or suggestions record a short MP3 and email it to podcast@stackoverflow.com. If you don't have the equipment to record an MP3, check out blogtalkradio to find a shockingly easy way to do it with a phone.
I've been working on a way to improve the audio quality. I don't want to make any promises, but next week we'll try to do the show using Skype to get better-than-POTS voice quality.
 
 
	"
https://www.joelonsoftware.com/2008/04/16/stackoverflowcom/,stackoverflow.com,2008-04-16T00:11:52+00:00,2018-04-19T21:46:12+00:00,Joel Spolsky,"Stack Overflow, News","
	What is stackoverflow.com?
Nothing, yet.
But here's the concept:
Programmers seem to have stopped reading books. The market for books on programming topics is miniscule compared to the number of working programmers.
Instead, they happily program away, using trial-and-error. When they can't figure something out, they type a question into Google.
And sometimes, the first result looks like it's going to have the answer to their exact question, and they are excited, until they click on the link, and discover that it's a pay site, and the answer is cloaked or hidden or behind a pay-wall, and you have to buy a membership.
And you won't even get an expert answer. You'll get a bunch of responses typed by other programmers like you. Some of the responses will be wrong, some will be right, some may be out of date, and it's hard to imagine that with the cooperative spirit of the internet this is the best thing we programmers have come up with.
Jeff Atwood and I decided to do something about it. We're starting to build a programming Q&A site that's free. Free to ask questions, free to answer questions, free to read, free to index, built with plain old HTML, no fake rot13 text on the home page, no scammy google-cloaking tactics, no salespeople, no JavaScript windows dropping down in front of the answer asking for $12.95 to go away. You can register if you want to collect karma and win valuable flair that will appear next to your name, but otherwise, it's just free.
When I'm building a new product, my policy has always been to keep quiet about it until I have something to ship. But this isn't really a product. This is a free new community site for programmers around the world and we need your help to design it, to program it, and to build it. We want to hear your suggestions, hear your ideas, and we're going to build it right in front of your eyes. Thus, the vaporware announcement.
Every week, Jeff and I talk by phone (he's in California, I'm in New York), and we're going to record those phone calls and throw them up on the web for you to listen in on, and call it a podcast. We have a lot of trouble keeping on topic, so the podcast may be interesting to you even if you don't want to hear about stackoverflow.com. The first episode is up right now. Eventually I imagine we'll figure out this newfangled ""RSS"" technology and you'll be able to actually subscribe and get fresh episodes delivered into your ears automatically. All in good time.
Jeff's Announcement
PS I'm still CEO of Fog Creek full time. StackOverflow.com is a joint venture between Fog Creek and Jeff Atwood. He's the full time CEO which means he's calling the shots. I'm sort of a consultant on this one.
	"
https://www.joelonsoftware.com/2008/04/14/first-joel-on-software-conference/,First Joel on Software conference,2008-04-14T00:11:51+00:00,,Joel Spolsky,News,"
	Registration is now open for Business of Software 2008 (the first ever Joel on Software conference). Neil has lined up great speakers:
Seth Godin, Business Week's ""Ultimate Entrepreneur for the Information Age"", is the best-selling author of 7 books (including Permission Marketing and Purple Cow) as well as the most popular eBook of all time.
Eric Sink, founder of SourceGear, author of ""Eric Sink on the Business of Software"" and the person who coined the term ""Micro ISV""
Steve Johnson of Pragmatic Marketing and winner of last year's Software Idol competition
Richard Stallman launched the development of the GNU operating system, now used on tens of millions of computers today. Stallman has received the ACM Grace Hopper Award, a MacArthur Foundation fellowship, the Electronic Frontier Foundation's Pioneer award, and the the Takeda Award for Social/Economic Betterment 
Paul Kenny is one of the UK's top sales trainers, consultants and speakers. He has worked with many customers in three continents, including IBM, Perot Systems, The Guardian and tens of others.
Dharmesh Shah is a geek, serial entrepreneur, founder of HubSpot and blogger at OnStartups.com
Jessica Livingston is author of Founders at Work: Stories of Startups' Early Days and a founder of Y Combinator
Jason Fried is founder of 37signals (developers of Basecamp and Ruby on Rails) and Signal vs Noise blogger
Joel Spolsky, aka, ""me,"" noted DJ, has over 600 karma points on the social news site ""Reddit.""
BoS2008 is in BOSton, September 3-4. Boston is absolutely beautiful in September. The weather is usually perfect. You can go kayaking on the Charles or take the duck tour if you're unambitious. Over 250,000 college students have just arrived, full of completely unjustifiable hope and optimism. The summer tourist crowd has mostly gone home so you can get into museums and historical sites. There are plenty of coffee shops that aren't NASDAQ-listed.
	"
https://www.joelonsoftware.com/2008/04/09/fire-and-motion-small-business-edition/,"Fire and motion, small business edition",2008-04-09T00:11:50+00:00,,Joel Spolsky,News,"
	""If the flight attendants on the JAL 747 from Tokyo I'm on right now were to, in a remarkable lapse of Japanese standards of service, throw me off the plane with a parachute, I could do a pretty nice roll when I hit the ground.""
From my Inc. Magazine column for April (subscribe here). And with that, I promise to stop telling shaggy dog stories about my days in the army.
	"
https://www.joelonsoftware.com/2008/05/01/architecture-astronauts-take-over/,Architecture astronauts take over,2008-05-01T00:11:54+00:00,2016-12-05T19:42:43+00:00,Joel Spolsky,"Startup founder, News","
	It was seven years ago today when everybody was getting excited about Microsoft's bombastic announcement of Hailstorm, promising that ""Hailstorm makes the technology in your life work together on your behalf and under your control.""
What was it, really? The idea that the future operating system was on the net, on Microsoft's cloud, and you would log onto everything with Windows Passport and all your stuff would be up there. It turns out: nobody needed this place for all their stuff. And nobody trusted Microsoft with all their stuff. And Hailstorm went away.
I tried to coin a term for the kind of people who invented Hailstorm: architecture astronauts. ""That's one sure tip-off to the fact that you're being assaulted by an Architecture Astronaut: the incredible amount of bombast; the heroic, utopian grandiloquence; the boastfulness; the complete lack of reality. And people buy it! The business press goes wild!""
The hallmark of an architecture astronaut is that they don't solve an actual problem... they solve something that appears to be the template of a lot of problems. Or at least, they try. Since 1988 many prominent architecture astronauts have been convinced that the biggest problem to solve is synchronization.
Follow the story, here. I started picking on one company that appeared to be particularly astronautish: Groove, which was trying to rebuild Lotus Notes (a giant synchronization machine) in a peer-to-peer fashion.
Groove had some early success selling secure networks to the military-industrial complex, but didn't make much of a ripple outside that niche. Their real success was in getting bought by Microsoft, which brought Groove's designer and chief architecture-astronaut Ray Ozzie to the role of ""Chief Software Architect"" at Microsoft, supposedly the technical guy that would keep inventing the future after BillG left so that Steve Ballmer would have some new territory on which to build his next illegal monopoly.
And now Ray Ozzie's big achievement arrives and what is it? (drumroll...) Microsoft Live Mesh. The future of everything. Microsoft is ""moving into the cloud.""
What's Microsoft Live Mesh?
Hmm, let's see.
""Imagine all your devices-PCs, and soon Macs and mobile phones-working together to give you anywhere access to the information you care about.""
Wait a minute. Something smells fishy here. Isn't that exactly what Hailstorm was supposed to be? I smell an architecture astronaut.
And what is this Windows Live Mesh?
It's a way to synchronize files.
Jeez, we've had that forever. When did the first sync web sites start coming out? 1999? There were a million versions. xdrive, mydrive, idrive, youdrive, wealldrive for ice cream. Nobody cared then and nobody cares now, because synchronizing files is just not a killer application. I'm sorry. It seems like it should be. But it's not.
But Windows Live Mesh is not just a way to synchronize files. That's just the sample app. It's a whole goddamned architecture, with an API and developer tools and in insane diagram showing all the nifty layers of acronyms, and it seems like the chief astronauts at Microsoft literally expect this to be their gigantic platform in the sky which will take over when Windows becomes irrelevant on the desktop. And synchronizing files is supposed to be, like, the equivalent of Microsoft Write on Windows 1.0.
It's Groove, rewritten from scratch, one more time. Ray Ozzie just can't stop rewriting this damn app, again and again and again, and taking 5-7 years each time.
And the fact that customers never asked for this feature and none of the earlier versions really took off as huge platforms doesn't stop him.
How on earth does Microsoft continue to pour massive resources into building the same frigging synchronization platforms again and again? Damn, they just finished building something called Windows Live FolderShare and I haven't exactly noticed a stampede to that. I'll bet you've never even heard of it. The 3,398th web site that lets you upload and download files to a place on the Internet. I'm so excited I might just die.
I shouldn't really care. What Microsoft's shareholders want to waste their money building, instead of earning nice dividends from two or three fabulous monopolies, is no business of mine. I'm not a shareholder. It sort of bothers me, intellectually, that there are these people running around acting like they're building the next great thing who keep serving us the same exact TV dinner that I didn't want on Sunday night, and I didn't want it when you tried to serve it again Monday night, and you crunched it up and mixed in some cheese and I didn't eat that Tuesday night, and here it is Wednesday and you've rebuilt the whole goddamn TV dinner industry from the ground up and you're giving me 1955 salisbury steak that I just DON'T WANT. What is it going to take for you to get the message that customers don't want the things that architecture astronauts just love to build. The people? They love twitter. And flickr and delicious and picasa and tripit and ebay and a million other fun things, which they do want, and this so called synchronization problem is just not an actual problem, it's a fun programming exercise that you're doing because it's just hard enough to be interesting but not so hard that you can't figure it out.
Why I really care is that Microsoft is vacuuming up way too many programmers. Between Microsoft, with their shady recruiters making unethical exploding offers to unsuspecting college students, and Google (you're on my radar) paying untenable salaries to kids with more ultimate frisbee experience than Python, whose main job will be to play foosball in the googleplex and walk around trying to get someone...anyone...to come see the demo code they've just written with their ""20% time,"" doing some kind of, let me guess, cloud-based synchronization... between Microsoft and Google the starting salary for a smart CS grad is inching dangerously close to six figures and these smart kids, the cream of our universities, are working on hopeless and useless architecture astronomy because these companies are like cancers, driven to grow at all cost, even though they can't think of a single useful thing to build for us, but they need another 3000-4000 comp sci grads next week. And dammit foosball doesn't play itself.
	"
https://www.joelonsoftware.com/2008/06/06/desks/,Desks,2008-06-06T00:11:57+00:00,,Joel Spolsky,News,"
	A reader wrote in to ask what kind of desks we're going to be using for the new office.
The ergonomics experts always want you to have your feet flat on the floor. So you have to adjust your seat height first. Then, your arms are supposed to be horizontal while you're typing. This means you need an adjustable-height keyboard.
Most of the adjustable height keyboard trays are extremely annoying... they're floppy, flimsy, and limit the keyboard to one location. Therefore we decided to get desks where the entire worksurface can be raised and lowered.
Finally, a lot people praise the benefits of standing up for a part of the day, even if you spend the whole day at a computer, so we wanted desks where the worksurface could rise all the way to ""counter height"" so you could stand and work. And if you are going to be standing up and sitting down it's best to have a desk with a pushbutton, electric motor so you don't get lazy about doing it.
Eventually we settled on the Details adjusTables Series 7. We didn't like the desk surface that those came with (with rounded corners and a chubby profile, it's just too blah) so we ordered a custom desk surface from Steelcase with something called a knife edge profile. That makes the desk look paper-thin:
 
	"
https://www.joelonsoftware.com/2008/06/05/stackoverflow-podcasts-moving-to-it-conversations/,StackOverflow podcasts moving to IT Conversations,2008-06-05T00:11:56+00:00,2018-04-23T17:05:13+00:00,Joel Spolsky,News,"
	Yes! I'm still doing those weekly podcasts with Jeff. We've already done eight of them.
We're moving, though, to IT Conversations, a huge network of terrific audio shows about technology. Just looking at all the great shows they have there makes me feel a bit like a kid in jeans and a T-shirt with a dirty slogan who just walked into Chez Panisse.
The new feed, IT Conversations-based feed is at http://rss.conversationsnetwork.org/series/stackoverflow.xml.
The easy way to subscribe is with ITunes, choose Advanced | Subscribe to Podcast, paste that URL in there, and you'll be all set.
	"
https://www.joelonsoftware.com/2008/06/02/adventures-in-office-space/,Adventures in Office Space,2008-06-02T00:11:55+00:00,,Joel Spolsky,News,"
	""We lost some time because a deal to expand at our current location fell through - it turned out that the extra floor we wanted wasn't actually, to use the real estate jargon, 'available.'""
From Adventures in Office Space, my latest column in Inc. Magazine.
P.S.! Neil reminds me that you've only got until the end of the week to register for the Business of Software conference at the low early rate ($1395 instead of $1795).
	"
https://www.joelonsoftware.com/2008/07/29/good-system-bad-system/,"Good System, Bad System",2008-07-29T00:12:01+00:00,,Joel Spolsky,News,"
	""I pass six Starbucks every morning on my walk to work. Just to clarify, that's counting only the Starbucks that are actually on the west side of Eighth Avenue in midtown Manhattan. I think there are some branches on the east side, but that side remains terra incognita for me; for most New Yorkers, micro-optimizing the walk to work is a matter of habit, and I have no reason to cross the street. For all I know, the other side of Eighth Avenue consists of nothing but pachinko parlors and flea circuses. Wouldn't surprise me one bit.""
From my latest Inc. article: Good System, Bad System
PS: I've got a new book out: More Joel on Software is the second collection of articles from the archives of this site.
	"
https://www.joelonsoftware.com/2008/07/18/pecha-kucha/,Pecha Kucha,2008-07-18T00:12:00+00:00,,Joel Spolsky,News,"
	We've already got a great lineup of speakers for the Business of Software conference:
Seth Godin
Eric Sink
Steve Johnson
Richard Stallman
Paul Kenny
Tom Jennings
Dharmesh Shah
Mike Milinkovich
Jessica Livingston
Jason Fried
and me!
Neil Davidson was looking for a way to bring in a handful of extra interesting speakers for very brief presentations just to keep the conference more dynamic and hear from different corners of the world. I had recently read about Pecha Kucha. The speaker gets 6 minutes and 40 seconds: no more, no less. You submit exactly 20 slides. Each one is shown for exactly 20 seconds and then flips automatically. At the end, even if you're almost done and just have one more thing, the mic cuts off and you sit down.
It sounded like a good idea. Speakers have to plan very carefully and rehearse repeatedly to make sure their speech is going to synchronize correctly with the slides, which makes for a more polished speech. They have to edit mercilessly to boil their subject matter down to 400 seconds, which makes it more interesting and dynamic. And if they suck, well, you don't have to wait very long for them to go away!
45 people submitted applications to speak. There were a lot of terrific applications. Somehow, Neil and I narrowed it down to 8 very impressive finalists who will speak in Boston. I can't wait!
	"
https://www.joelonsoftware.com/2008/07/14/annual-fog-creek-open-house/,Annual Fog Creek Open House,2008-07-14T00:11:59+00:00,,Joel Spolsky,News,"
	Here at Fog Creek Software we get a lot of requests for a tour of the office, which we usually have to decline: we have this unusual obsession with giving programmers quiet working conditions.
But once a year, we do have an open house. It's a rare chance to peek behind the curtains and meet the people behind FogBugz and Copilot.
This year, we're only a month or so away from moving (to a much larger space downtown) but we didn't want to skip the annual tradition, so the open house will be held anyway at the old office:
Thursday, July 175:00 - 7:00 pm
535 8th Ave. (cross street: 37th)18th FloorNew York, NY 10018
You'll get a chance to meet the Dingos (class of '08 interns), the SMTPs, our new sales department, the developers behind FogBugz, Copilot, and Wasabi, and the rest of the team. Some kind of food-like snack will be served. Tiny cheddar-cheese-flavored crackers in the shape of fish, maybe. Don't skip lunch.
	"
https://www.joelonsoftware.com/2008/07/01/dont-hide-or-disable-menu-items/,Don’t hide or disable menu items,2008-07-01T00:11:58+00:00,,Joel Spolsky,News,"
	A long time ago, it became fashionable, even recommended, to disable menu items when they could not be used.
Don't do this. Users see the disabled menu item that they want to click on, and are left entirely without a clue of what they are supposed to do to get the menu item to work.
Instead, leave the menu item enabled. If there's some reason you can't complete the action, the menu item can display a message telling the user why.
	"
https://www.joelonsoftware.com/2008/08/28/stackoverflow-podcast-19/,StackOverflow Podcast #19,2008-08-28T00:12:05+00:00,2018-04-23T17:11:32+00:00,Joel Spolsky,News,"
	
This week's StackOverflow Podcast is up: episode 19.
Jeff and I spent some time talking about the home page for StackOverflow. What goes there? What does it mean to vote on a question?
We also talked about Aaron Swartz's article on How to Launch Software. Big-bang launches can be disasters (viz.: cuil); quiet, gentle launches without announcements where you slowly build can work a lot better (viz.: Gmail). Will StackOverflow's launch overwhelm our servers and underwhelm our audience?
	"
https://www.joelonsoftware.com/2008/08/26/how-i-learned-to-love-middle-managers/,How I Learned to Love Middle Managers,2008-08-26T00:12:04+00:00,,Joel Spolsky,News,"
	""Another programmer came to us. 'I thought you should know that people are really unhappy,' he said bluntly, 'and it's starting to make it so that people just complain all day, instead of doing their work, and that's not good.'""
From my latest Inc. column: How I Learned to Love Middle Managers
	"
https://www.joelonsoftware.com/2008/08/22/a-review-of-the-nokia-e71/,A review of the Nokia E71,2008-08-22T00:12:03+00:00,,Joel Spolsky,News,"
	When Apple's iPhone 3G came out, I was pretty sure I'd get one. It had all the features I was waiting for. But the lines just weren't going away. 
I searched Twitter. For a week, then two, every day brought fresh reports of five-hour waits. 
And then the reports of bugs started coming in. The Exchange synchronization features weren't up to snuff, I heard. The phone crashed regularly, I heard. Basic operations were painfully slow. Battery life was abysmal. 
Adam Curry suggested getting a Nokia E71. I had never heard of this thing. Nokia? Really? For years I had always thought that Nokia made chunky Europhones that were always just one button short of a usable user interface. 
But, no, the more I investigated, the more it seemed that the E71 was a truly credible alternative to the iPhone 3G. The reviews coming in from Europe were stellar. There was one hitch: it didn't seem to be on sale over here. 
There was one last hope. Around the corner from the Apple Store on Fifth Avenue, Nokia had opened a pricy boutique where they sold unlocked, unsubsidized cell phones, mostly to foreign tourists who invaded New York to take advantage of our banana-republic currency. 
""Do you have the E71?"" I asked. 
""I have a demo model you can look at,"" the guy said. 
It seemed very sleek. Smaller than the iPhone, all metal, nothing chintzy... with the best keyboard I've ever used on a phone. 
""They're not on sale until tomorrow... if we have any left after tonight's super-exclusive launch party. Which is invite only,"" he emphasized. 
I'm shameless. ""How do I get invited?"" 
""Well, um, put your name on this list."" He gave me a blank piece of paper. ""And come back at 6 pm."" 
Which I did. There was a short line of a dozen Nokia fans-a somewhat ghetto version of the five hour iPhone lines. Within minutes, I had my E71, and they even helped me with the arduous task of popping in the SIM. 
Plink! It worked! 
I've been using it for a month now, and I'm completely sold. This is the best phone I've ever had. I love it. 
Now, don't get me wrong: I think the iPhone is brilliant. The Apple iPhone is truly an inspired piece of design that pushed the state of the art and then went about ten steps further. If the iPhone competed in the Olympic swimming tournaments, Michael Phelps would have just retired on the spot and given up swimming for life. 
For many people, the iPhone 3G is perfect. I thought that it meant ""game over"" for all the other handset makers. But Nokia is a fantastic company and they weren't going to give up that easy. Their new E71 is a fantastic phone, clearly inspired by the competition, and the game is not over. 
There were three reasons I was looking to upgrade. 
I wanted a phone with a decent MP3 player, so I don't have to carry two devices.
I wanted to be able to use the phone's internet connection to get online with my laptop on the train out to the Hamptons (there's tolerable 3G coverage on AT&T for the first two hours of the trip).
I needed great Exchange synchronization, not just an IMAP client. For the last few weeks I've been desperately trying to get Merlin Mann's Inbox Zero concept working and you need a great Exchange client, not a 1.0 Exchange client. 
The E71 met most of these requirements. It's got a decent music player, a built-in podcasting client (so I can download podcasts directly instead of going through my desktop PC), and it's even got an FM radio. There's a third party software app called JoikuSpot which uses the 3G connection and the WiFi in the phone to turn your phone into a mobile hotspot so you can surf from your laptop. When I tried JoikuSpot, it kept dropping the connection, so I can't say that was the perfect experience, but I'll keep trying.
Nokia's built in Exchange synchronization is very 1.0. It doesn't know about folders, which means there's no way to get things out of my inbox into an archive folder after I deal with them. This was unacceptable. It meant I would have to go through all those emails again when I got back to my desk. But there's a third party app, DataViz RoadSync, which handles Exchange synchronization and does support folders, and that works perfectly. 
There are some other great features I discovered when I really got into this phone. 
The GPS is great fun. It doesn't work indoors. It doesn't work in the city where the sky is a distant memory. But it works when you're out in the country, and it's really fun to get Google Maps satellite images showing exactly where you are. That is, if you're not so far out in the country that there's no cell reception. Combined with the 3 megapixel camera, if you're really lucky, you can snap pictures and then upload them directly to your Flickr account, and the picture will be tagged with its exact location. You have to be pretty lucky for this to work: getting the GPS to find enough satellites is not always possible. 
The pictures are, um, well, cellphone quality. I uploaded a few sample pictures. It's for snapshots and memories, not photography.
The fit and finish of this phone is amazing. It's the slimmest Nokia I've ever seen: smaller in every dimension than an iPhone. It feels solid. The keys on the keyboard are really clicky and extremely easy to type with, especially combined with the predictive word autocomplete. (Why don't desktop word processors have autocomplete yet?) 
The battery lasts a couple of days under heavy use, and is easy to replace, so I keep a spare around for those days when I forgot to charge the phone. 
The call quality is the best I've ever experienced. After years of using junky phones I literally did not know cell phone calls could be this good. The external speaker (for hands-free operation) is the loudest I've ever heard. The phone will announce your callers by name using a synthesized voice. There are probably dozens of other features buried in here which I haven't found. I think there's a second camera in front for video calls but I'm way too old to figure out how to make that work. 
The music player is adequate, but not great. It's amazing how something as simple as playing MP3s is so fraught with minor problems... Apple makes it look easy to build an MP3 player, so when someone else tries, it's always surprising to see just how hard it is to get right. On the E71:
The sound quality is not quite as good as Apple
It takes too many steps to shuffle music
You hear unexplained static in the headphones when no music is playing.
The volume control has exactly ten choices. It reminded me of those old AT&T public telephones with three amplification choices for the hearing impaired. You have to choose between too soft and too loud.
When you've listened only to a part of a long podcast, the phone doesn't remember where you were up to, so if you go back to it, you have to search around for the point where you left off. 
The built-in browser was decent, but ignore that... just install Opera Mini, which is stellar. I still haven't found a website which doesn't display respectably on this phone with Opera Mini. There's a built in GPS map application, which always freezes. Ignore that, too. The free Google Maps is better.
This phone is inevitably going to be compared to the Apple iPhone 3G, so I might as well list the big pros and cons of each. 
The iPhone has a bigger, touch-sensitive screen, which makes the browsing experience better. On the other hand, the Nokia E71 has a fantastic physical keyboard that makes it very easy to reply to email. This is just a tradeoff; you're going to have to decide whether the browsing or the typing is more important to you.
The iPhone apps are easier to use and simpler. Apps on the Nokia tend to have more features (for example, there is true multitasking, so you can listen to podcasts while working on email and downloading web pages in the background, and then you can take a picture without losing a beat). In general I think that geeks will prefer the Nokia for its functionality, while the iPhone is totally the phone for people who are less technical and don't want to spend any time setting up their phone and downloading software to get it exactly the way they want it.
The Nokia has a replaceable battery and a replaceable storage card which may make it fit your lifestyle better if you're a heavy user. 
In any case, it's the best phone I've ever had and I'm loving it.
	"
https://www.joelonsoftware.com/2008/08/21/stackoverflow-podcast-18/,StackOverflow Podcast #18,2008-08-21T00:12:02+00:00,2018-04-23T17:05:47+00:00,Joel Spolsky,News,"
	
This week's StackOverflow Podcast is up: episode 18. It was the first chance I've gotten to speak to Jeff since the beta went live, which is, honestly, exceeding even my highest expectations. Performance is terrific. The site is crisp and clear. Even with our tiny beta audience, you get great answers quickly. The bizarre wiki/q&a/discussion/reddit hybrid system does a great job of bubbling the right answers to the top, and the ability to edit old questions and answers means that answers just get better and better. It's fantastic.
	"
https://www.joelonsoftware.com/2008/09/20/imaginary-product/,Imaginary product,2008-09-20T00:12:12+00:00,,Joel Spolsky,News,"
	Why doesn't somebody make this?
It's a power strip
It's a network hub
It's a USB hub
You clamp it onto the back of any desk
This would make it easy to plug in laptops, USB peripherals, and all your rechargers at your desk without crawling around on the floor.
(The photograph shows a product by Mockett which comes tantalizingly close, but which has knockouts for you to hardwire your own ports instead of built-in LAN and usb hubs.)
	"
https://www.joelonsoftware.com/2008/09/19/stack-overflow-podcast-22/,Stack Overflow Podcast #22,2008-09-19T00:12:11+00:00,2018-04-23T17:13:48+00:00,Joel Spolsky,News,"
	
In Episode #22 of the Stack Overflow podcast, Jeff and I talk to guest Josh Millard of MetaFilter about moderating community sites.
	"
https://www.joelonsoftware.com/2008/09/15/stack-overflow-launches/,Stack Overflow Launches,2008-09-15T00:12:10+00:00,2018-04-19T21:50:24+00:00,Joel Spolsky,"Stack Overflow, News","
	You know what drives me crazy? Programmer Q&A websites. You know what I'm talking about. You type a very specific programming question into Google and you get back: 
A bunch of links to discussion forums where very unknowledgeable people are struggling with the same problem and getting nowhere, 
A link to a Q&A site that purports to have the answer, but when you get there, the answer is all encrypted, and you're being asked to sign up for a paid subscription plan, 
An old Usenet post with the exact right answer-for Windows 3.1-but it just doesn't work anymore, 
And something in Japanese. 
If you're very lucky, on the fourth page of the search results, if you have the patience, you find a seven-page discussion with hundreds of replies, of which 25% are spam advertisements posted by bots trying to get googlejuice for timeshares in St. Maarten, yet some of the replies are actually useful, and someone whose name is ""Anon Y. Moose"" has posted a decent answer, grammatically incorrect though it may be, and which contains a devastating security bug, but this little gem is buried amongst a lot of dreck. 
Well, technology has gotten better since those discussion forums were set up. I thought that the programming community could do better by combining the idea of a Q&A site with voting and editing.
Would it work? I had no idea. And it looked like there was no way to find out, because everyone at Fog Creek was really busy so nobody had any time to build this. 
Then, out of the blue, Jeff Atwood called me up. His own blog, Coding Horror, was starting to rack in the dough, and he was trying to figure out if that meant he could quit his day job and just blog. 
Pattern-matching rules fired in my brain. The hardest thing about making a new Q&A site is not the programming-it's the community. You need a large audience of great developers so you have the critical mass it takes to get started. Without critical mass, questions go unanswered and the site becomes a ghost town. I thought the combination of my audience (#15 on Bloglines) and Jeff's (#89) would bring enough great developers into the site to reach critical mass on day one. So Jeff and I decided to go in together on this. 
We've been working all summer to build the site. OK, that's extremely unfair. Jeff Atwood, together with two of his friends, Geoff Dalgas and Jarrod Dixon, have been doing most of the building. I just chime in with advice once in a while, which Jeff justifiably ignores; you can hear the process in our weekly status phone call, publically available in the form of the Stack Overflow podcast. 
In the beginning of August, the beta opened to a small group of just a few hundred developers. The site lit up instantly! People were asking questions and, for the most part, getting answers! And the voting was working too... in most questions, you could see that the best answers were voted up promptly. I tried to ask a programming question for something I was working on and found that (a) it had already been asked (b) there were already good answers and (c) the search engine worked so well I never got a chance to post my question. 
After a very short, five-week private beta, we're opening Stack Overflow to the public today. 
Here's how it's supposed to work. This is a community project, so I'm being careful to avoid saying this is how it will work... that's up to the community. But this is roughly what I have in mind. 
Every question in Stack Overflow is like the Wikipedia article for some extremely narrow, specific programming question. How do I enlarge a fizzbar without overwriting the user's snibbit? This question should only appear once in the site. Duplicates should be cleaned up quickly and redirected to the original question. 
Some people propose answers. Others vote on those answers. If you see the right answer, vote it up. If an answer is obviously wrong (or inferior in some way), you vote it down. Very quickly, the best answers bubble to the top. The person who asked the question in the first place also has the ability to designate one answer as the ""accepted"" answer, but this isn't required. The accepted answer floats above all the other answers. 
Already, it's better than other Q&A sites, because you don't have to read through a lot of discussion to find the right answer, if it's in there somewhere. 
Indeed, you can't even have a discussion. A lot of people come to Stack Overflow, not knowing what to expect, and try to conduct a discussion when they should be answering the question. The trouble here is that answers are always listed in order of votes, not chronologically, so the discussion instantly becomes scrambled when the votes start coming in. 
Instead, we have editing. Once you've earned a little bit of reputation in the system (and there are all kinds of ways to earn reputation), you can edit questions and answers. 
Fred asks: How do I keep from overwriting the user's snibbit? 
Kathy answers: Normally the user's snibbit will not be overwritten. Are you enlarging the fizzbar?
Fred answers: Yes. And it's getting overwritten. 
BZZT! WRONG! Fred just made a mistake... he provided an answer which isn't an answer. VOTE IT DOWN! 
Chastised, Fred edits his original question, changing it to: How do I keep from overwriting the user's snibbit while enlarging the fizzbar? 
Now Kathy can answer by editing her previous answer. And you're left with a nice clean single-question, single-answer, instead of a lot of boring discussion that would be unnecessary flotsam to the next person to come along with snibbit overwriting problems. 
There are lots of good ways to edit things. You can improve spelling, grammar, and even copy edit any question or answer to make it better. After all, for the next 20 years, this question will be the canonical place on the web where programmers will come to find out about enlarging fizzbars without overwriting snibbits. Anything you can do to clarify, explain, or improve the question or the answer will be a public service. If there's code in the answer, you can debug it, refactor it, or tweak it to make it better. 
You can also improve on the answers. If an answer is incomplete, expand on it. If an answer has a bug in it or is obsolete, you can edit it and fix it. Because Q&A in Stack Overflow are editable, you can safely link to a Stack Overflow permalink knowing it will always have a good answer. Stack Overflow won't have the problem of other sites where obsolete or incorrect answers have high Google PageRank simply because they've been on the Internet for so long. If someone finds a security bug in an answer, it can be fixed... it won't keep coming up in Google's results for years and years poisoning future code. 
Want to know an easy way to earn reputation? Find a question somewhere with several good, but incomplete, answers. Steal all the answers and write one long, complete, detailed answer which is better than the incomplete ones. Sit back and earn points while people vote up your comprehensive answer. 
In addition to voting on answers, you can vote on questions. Vote up a question if you think it's interesting, if you'd like to know the answer, or if you think it's important. The hot tab on the home page will show some of the highest-ranked recent questions using an algorithm similar to digg or Reddit. If you're generally interested in programming and want to learn something new every day, visit the hot tab frequently. 
Want to test your knowledge? Visit the Unanswered tab. Right now, you just see a list of questions with no answers (and there are very few), but in the near future, we'll actually tailor the list to show you questions that we think you have a chance of answering, based on questions you've successfully answered in the past. 
We have tags. Every question is tagged so, for example, if you're a Ruby guru, you can ignore everything but Ruby and just treat Stack Overflow as a great Ruby Q&A site. A single question can have multiple tags, so you don't have to figure out which single category it fits in best. Like everything else, the tags can be edited by good-natured individuals to help keep things sorted out neatly. And you can have a little fun: stick a homework tag on those questions where someone seems to be asking how to delete an item from a linked list. 
Don't combine multiple answers. For example, suppose someone asks 
What are your favorite keyboard shortcuts in Emacs? 
Well, I could list them all in one answer, but how does anyone vote on that? Instead, I'll provide a bunch of separate answers, and let people vote on the answers. And in fact, if you see a question which is really a poll, do me a favor, go in there and edit it: 
What is your single favorite keyboard shortcut in Emacs? (One shortcut per answer, please).
What kind of questions are appropriate? Well, thanks to the tagging system, we can be rather broad with that. As long as questions are appropriately tagged, I think it's okay to be off topic as long as what you're asking about is of interest to people who make software. But it does have to be a question. Stack Overflow isn't a good place for imponderables, or public service announcements, or vague complaints, or storytelling. 
I'm extremely excited about Stack Overflow. It's fast and clean. It costs us practically nothing to operate, so we won't need to plaster it with punch-the-monkey ads; we plan to keep it free and open to the public forever. And it might make it a little bit easier to be a programmer.
	"
https://www.joelonsoftware.com/2008/09/11/password-management-finally-possible/,Password management finally possible,2008-09-11T00:12:09+00:00,2019-10-02T23:53:05+00:00,Joel Spolsky,News,"
	[Editor's Note: This article is almost a decade old. Today there are many password managers available which are fairly easy to use and well-integrated with modern tools. Wirecutter has a good review of some modern options. No matter what you do, don't reuse passwords from one site on another site!]
Now that DropBox is shipping, there's finally a good way to manage all your passwords. This system works no matter how many computers you use regularly; it works with Mac, Windows, and Linux; it's secure; it doesn't expose your passwords to any internet site (whether or not you trust it); it generates highly secure, random passwords for each and every site, it's fairly easy to use once you have it all set up, it maintains an automatic backup of your password file online, and it's free.
Sign up for DropBox. This gives you a folder on your computer that can, magically, be synchronized onto every computer you use. Whenever you change a file on one computer, the change is automatically propagated to your other computers.
On all your Windows computers, install PasswordSafe. This is a little program that maintains an encrypted password file for you for all the sites you visit regularly. It will even generate long, complicated passwords full of special characters. The file itself is encrypted... if someone gets their hands on it, it's worthless without the master password you created for it. Store the file in your DropBox folder, of course.
On all your Macintosh and Linux computers, install Password Gorilla. This works just like PasswordSafe and uses the same file format.
That's really all there is to it. There is one optional step:
Log on to all your bank accounts and change that ""abcd"" password to some long 16 digit, unique, secure password that PasswordSafe makes up for you.
	"
https://www.joelonsoftware.com/2008/09/11/stack-overflow-podcast-21/,Stack Overflow Podcast #21,2008-09-11T00:12:08+00:00,2018-04-23T17:12:09+00:00,Joel Spolsky,News,"
	Episode #21 of the Stack Overflow Podcast is up, in which Jeff and I talk about the anthropology of abusive users. ""You've got a bunch of people playing Chess, but certain people want to play 'throw the chess pieces all over the park...'""
The site itself goes live Monday.
	"
https://www.joelonsoftware.com/2008/09/10/were-finally-moving/,We’re finally moving!,2008-09-10T00:12:07+00:00,,Joel Spolsky,News,"
	This weekend, Fog Creek is finally moving into the big new office space we've been working on since last March. These things take FOREVER.
The new office will be:
twice as big as the old office
in a better neighborhood
costing about 5 times as much in rent
with higher quality finishes
50% more aquarium
a private marble-lined shower
and adjustable-height desks (for developer ergonomics, of course).
Also, thanks to Jeff Atwood, it will have Rock Band.
Today, the company came down to tour the construction site and pick offices. 
Haworth didn't come through for me... their moveable walls take so long to manufacture that we're literally going to have to move in without walls and doors, which will arrive about 6 weeks late.
The new kitchen:
I'll have more detailed pictures for you once we get moved in. 
	"
https://www.joelonsoftware.com/2008/09/05/stackoverflow-podcast-20/,StackOverflow Podcast #20,2008-09-05T00:12:06+00:00,2018-04-23T17:11:42+00:00,Joel Spolsky,News,"
	This week's StackOverflow Podcast is up: episode 20.
We talked about the deadlock that was fixed, which was the last thing holding up the public beta... caused by a very small bug in third party libraries, which is exactly why I've always had a bias against using third party libraries. I tell an interesting story about why the Excel team had their own compiler. And I explain to a listener why Jeff never listens to me.
Thanks to everyone who came to the Business of Software conference and made it a huge success. The speakers were all incredible, the attendees were fabulous, even the food was pretty good for a convention center.
P.S. The Conversations Network, a not-for-profit organization which hosts our podcast, is looking for sponsors for their podcasts, including this one. It would be a very modest, NPR-style intro at the beginning... ""The StackOverflow Podcast is brought to you by Gummy Bears, Inc., bringing fine chewy treats to grubby children everywhere."" If your company might be interested in sponsoring the podcast and becoming a hero to developers worldwide, or at least the eight developers who listen to the podcast, please email me.
	"
https://www.joelonsoftware.com/2008/10/15/stack-overflow-podcast-26/,Stack Overflow Podcast #26,2008-10-15T00:12:17+00:00,2018-04-23T17:12:59+00:00,Joel Spolsky,News,"
	
On this week's Stack Overflow Podcast, Jeff and I devote the episode to questions from listeners.
	"
https://www.joelonsoftware.com/2008/10/10/sins-of-commissions/,Sins of Commissions,2008-10-10T00:12:16+00:00,,Joel Spolsky,News,"
	""A couple of years ago, I went into a big-box shoe store and bought a pair of sneakers. At the checkout counter, the cashier grabbed a can of that bogus silicone spray stores always try to up-sell you. It's supposed to make sneakers shiny and waterproof, but it doesn't seem to do anything.""
From my latest Inc. column: Sins of Commissions
My dad emailed to add:
The same problem arises when you set measurable incentives (money for better test results) in educational policies like No Child Left Behind.
	"
https://www.joelonsoftware.com/2008/10/09/stack-overflow-podcast-25/,Stack Overflow Podcast #25,2008-10-09T00:12:15+00:00,2018-04-23T17:13:03+00:00,Joel Spolsky,News,"
	This week's Stack Overflow Podcast features special guest star and programming blogger superhero Steve Yegge. It's a terrific conversation about working at Google, marketing your ideas, and programming languages... one of the most interesting podcasts yet.
In the spirit of Steve's extremely long blog posts, we ran about 15 minutes long this week.
In the past, Jeff and I have had some audio problems using Skype to record the podcast-mainly, dropouts when we talk over each other. I set up a bunch of new gear which seems to have finally fixed this problem. Here's a description of the new podcasting setup.
 
	"
https://www.joelonsoftware.com/2008/10/08/hair-on-fire/,Hair on fire,2008-10-08T00:12:14+00:00,,Joel Spolsky,News,"
	
On August 17th, Jason, a student in our software management training program, read a post by Seth Godin, marketing guru extraordinaire:
""Here's the challenge: Assemble your team (it might be just you) on Monday and focus like your hair is on fire (I have no direct experience in this area, but I'm told that hair flammability is quite urgent).
""Do nothing except finish the project. Hey, you could have been on vacation, so it's okay to neglect everything else, to put your email on vacation autorespond and your phone on voice mail and to beg off on the sleepy weekly all-hands meeting and to avoid the interactions with those that might say no...
""And then finish it. Finish the website or the manuscript or business plan or the suite of tools.""
At the time, the Copilot team had spent a couple of months stuck in a bizarre Moby Dick-style obsessive hunt to fix a very obscure bug in a very rare edge case in some code which nobody would ever see. There was a loooong period of time there where every once in a while I would ask Ben what was going on and he would say, ""we should have AutoUpdate done today."" I didn't know what AutoUpdate was, but the eleventh time I heard that it was going to be done ""today"" I started to detect a pattern.
When Jason read Seth's motivational post, probably after drinking a little bit ttoooo mmuucchh ccooffffee, he got really excited by this idea, and quickly sold Ben and Tyler, the developers, that they should try something. In their weakened state from an exhausting chase after one very annoying bug, they probably could have been convinced that it was a good idea to try hang gliding from the roof of our office building to the Statue of Liberty, so they went along with it.
To keep focused, Jason instituted daily scrum-like standup meetings. It took about three weeks to get to code complete and about three more weeks of testing and polishing, but lo and behold, it's here: Copilot OneClick!
Copilot was originally optimized to be the easiest way to provide temporary, ad-hoc tech support over the internet. It's a remote desktop system that's focused on ease of use, with nothing to install, so it's perfect for tech support departments that just need to get onto a customer's system remotely to fix problems, without asking the customer to install software, change firewall settings, etc. etc.
OneClick is a new feature that allows you to install Copilot on the computers you connect to most frequently, and makes re-connecting to those computers a breeze. It's a huge step forward in usability.
So, thanks, Seth Godin, for the motivation. Now if I could just get the contractor working on our office to read Seth's blog...
PS. Since the summer, we've added a lot of other small features, which I haven't reported here. There's a new monthly $19.95 flat rate plan. Weekends are now totally free (ideal for helping your family and friends). There's also a free 15 day trial. The best way to keep up with these things is to subscribe to the Copilot Blog.
	"
https://www.joelonsoftware.com/2008/10/01/stack-overflow-podcast-24/,Stack Overflow Podcast #24,2008-10-01T00:12:13+00:00,2018-04-23T17:13:43+00:00,Joel Spolsky,News,"
	The whole Stack Overflow team got together in person at Fog Creek's shiny new office in New York City for a roundtable discussion about the future of StackOverflow.com, which is up as this week's podcast.
Shanah Tovah u-Metuka!
	"
https://www.joelonsoftware.com/2008/11/27/stack-overflow-podcast-31/,Stack Overflow Podcast #31,2008-11-27T00:12:25+00:00,2018-04-23T17:15:26+00:00,Joel Spolsky,News,"
	
In the Thanksgiving edition of the Stack Overflow podcast, episode 31, Jeff and I discuss math, status reports, the economic downturn, the business case for nice office space, SQL parameters, programming ""slumps,"" and a whole lot more.
	"
https://www.joelonsoftware.com/2008/11/26/exploding-offer-season/,Exploding Offer Season,2008-11-26T00:12:24+00:00,,Joel Spolsky,"New developer, News","
	If you're a college student applying for jobs or summer internships, you're at something of a disadvantage when it comes to negotiation. That's because the recruiter does these negotiations for a living, while you're probably doing it for the first time.
I want to warn you about one trick that's very common with on-campus recruiters: the cynical ""exploding offer."" 
Tyler Griffin Hicks-WrightHere's what happens. You get invited to interview at a good company. There's an on-campus interview; maybe you even fly off to the company HQ for another round of interviews and cocktails. You ace the interview, of course. They make you an offer.
""That sounds great,"" you say.
""So, when can you let us know?""
""Well,"" you tell them, ""I have another interview coming up in January. So I'll let you know right after that.""
""Oh,"" they say. ""That might be a problem. We really have to know by December 31st. Can you let us know by December 31st?""
Tada! The magnificent ""exploding offer.""
Here's what you're thinking. You're thinking, well, that's a good company, not my first choice, but still a good offer, and I'd hate to lose this opportunity. And you don't know for sure if your number one choice would even hire you. So you accept the offer at your second-choice company and never go to any other interviews.
And now, you lost out. You're going to spend several years of your life in some cold dark cubicle with a crazy boss who couldn't program a twenty out of an ATM, while some recruiter somewhere gets a $1000 bonus because she was better at negotiating than you were.
Tyler Griffin Hicks-WrightCareer counselors know this, and almost universally prohibit it. Every campus recruiting center has rules requiring every company that recruits on campus to give students a reasonable amount of time to make a decision and consider other offers. 
The trouble is, the recruiters at the second-rate companies don't give a shit. They know that you're a college kid and you don't want to mess things up with your first real job and you're not going to call them on it. They know that they're a second-rate company: good enough, but nobody's dream job, and they know that they can't get first-rate students unless they use pressure tactics like exploding offers.
And the worst thing that career centers can do is kick them off campus. Big whoop. So they hold their recruiting sessions and interviews in a hotel next to the campus instead of at the career center.
Here's your strategy, as a student, to make sure you get the job you want.
1. Schedule your interviews as close together as possible.
2. If you get an exploding offer from a company that's not your first choice, push back. Say, ""I'm sorry, I'm not going to be able to give you an answer until January 14th. I hope that's OK."" Almost any company, when pressed, will give you a chance to compare offers. Don't worry about burning bridges or pissing anyone off. Trust me on this one: there's not a single hiring manager in the world who wants to hire you but would get mad just because you're considering other offers. It actually works the other way. When they realize you're in demand, they'll want you more.
Tyler Griffin Hicks-Wright3. In the rare case that they don't accept that, accept the exploding offer at the last minute, but go to the other interviews anyway. Don't cash any signing bonus checks, don't sign anything, just accept the offer verbally. If you get a better offer later, call back the slimy company and tell them you changed your mind. Look, Microsoft hires thousands of college kids every year. If one of them doesn't show up I think they'll survive. Anyway, since we instituted that 13th amendment thing, they can't force you to work for them.
If you do find yourself forced to renege on an offer, be classy about it. Don't do this unless you are absolutely forced to because they literally refused to give you a chance to hear from your first choice company. And let them know right away you're not going to take the offer, so they have a chance to fill the position with someone else.
Campus recruiters count on student's high ethical standards. Almost all students think, ""gosh, I promised I'll go work for them, and I'm going to keep my promise."" And that's great, that's a commendable attitude. Definitely. But unethical recruiters that don't care about your future and don't want you to compare different companies are going to take advantage of your ethics so they can get their bonus. And that's just not fair.
	"
https://www.joelonsoftware.com/2008/11/20/stack-overflow-podcast-30/,Stack Overflow Podcast #30,2008-11-20T00:12:23+00:00,2018-04-23T17:15:30+00:00,Joel Spolsky,News,"
	
Stack Overflow Podcast episode 30 is up, with special guest Richard White of UserVoice.
	"
https://www.joelonsoftware.com/2008/11/18/anecdotes/,Anecdotes,2008-11-18T00:12:22+00:00,,Joel Spolsky,News,"
	Michiko Kakutani reviews Malcolm Gladwell's latest book in the New York Times: ""Much of what Mr. Gladwell has to say about superstars is little more than common sense: that talent alone is not enough to ensure success, that opportunity, hard work, timing and luck play important roles as well. The problem is that he then tries to extrapolate these observations into broader hypotheses about success. These hypotheses not only rely heavily on suggestion and innuendo, but they also pivot deceptively around various anecdotes and studies that are selective in the extreme: the reader has no idea how representative such examples are, or how reliable - or dated - any particular study might be.""
This review captures what's been driving me crazy over the last year... an unbelievable proliferation of anecdotes disguised as science, self-professed experts writing about things they actually know nothing about, and amusing stories disguised as metaphors for how the world works. Whether it's Thomas Friedman, who, it seems, cannot go a whole week without inventing a new fruit-based metaphor explaining everything about the entire modern world, all based on some random jibberish he misunderstood from a taxi driver in Kuala Lumpur, or Malcolm Gladwell with his weak theories on tipping points, crazy incorrect theories on first impressions, or utterly lunatic theories on experts, it all becomes insanely popular simply because the stories are fun and interesting and everybody wants to hear a good story. Spare me.
Friedman and Gladwell's outsized, flat-world success has lead to a huge number of wannabes. I was really looking forward to reading Simplexity, because it sounded like an interesting topic, until I settled down with it tonight and discovered that it was chock-full of all those amusing bedtime stories about the map of the cholera plague in London in 1854, which I've heard a million times, and then suddenly I noticed (shock!) that not only was the author a journalist, not a scientist, but he was actually an editor at Time Magazine, which has an editorial method in which editors write stories based on notes submitted by reporters (the reporters don't write their own stories), so it's practically designed to get everything wrong, to insure that, no matter how ignorant the reporters are on an issue, they'll find someone who knows even less to write the actual story. Panicking, I began to flip through the book at random. There's that story about Don Norman and complicated user interfaces. Here he is reading Nassim Taleb. I've heard all these anecdotes! Stop, already! I threw the book away in frustration.
This is the third one of the day. My business partner Jeff Atwood was busy extracting himself from the flamewars he started by writing an article on, of all things, NP-completeness, which is, actually, something that it's possible to know something about, because it's not a vague sociological hypotheticoncept like simplexiflatness or blinkoutliers, it's actually a real, important result from Computer Science, with a rigorous definition and lots of published papers, and poor Jeff got himself in something of a pickle by writing a book review when he hadn't read the book, and fortunately, he has comments on his blog, so his readers called him out on it.
Now, I am not one to throw stones. Heck, I practically invented the formula of ""tell a funny story and then get all serious and show how this is amusing anecdote just goes to show that (one thing|the other) is a universal truth."" And everybody is like, oh yes! how true! and they link to it with approval, and it zooms to the top of Slashdot. And six years later, a new king arises who did not know Joel, and he writes up another amusing anecdote, really, it's the same anecdote, and he uses it to prove the exact opposite, and everyone is like, oh yes! how true! and it zooms to the top of Reddit.
This is not the way to move science forward. On Sunday Dave Winer [partially] defined ""great blogging"" as ""people talking about things they know about, not just expressing opinions about things they are not experts in (nothing wrong with that, of course)."" Can we get some more of that, please? Thanks.
	"
https://www.joelonsoftware.com/2008/11/12/stack-overflow-podcast-29/,Stack Overflow Podcast #29,2008-11-12T00:12:21+00:00,2018-04-23T17:14:36+00:00,Joel Spolsky,News,"
	
In this week's Stack Overflow podcast, Jeff and I talk about video games, programming languages that aren't ""in"" English, and hiring great programmers.
	"
https://www.joelonsoftware.com/2008/11/06/stack-overflow-podcast-28/,Stack Overflow Podcast #28,2008-11-06T00:12:20+00:00,2018-04-23T17:14:08+00:00,Joel Spolsky,News,"
	Corey reviews the podcasts Jeff and I are doing, under the title Jeff Atwood is Trying to Kill Me: ""The trip from Chicago to Detroit was without homicidal incident. The only harbinger of what was to come was that I could sense a growing irritation in myself towards Jeff Atwood. Why? Because Jeff just couldn't keep up with the pace of Joel's conversational tennis.""
Ha! Take that, Jeff ""Atwood,"" if that's even your real name, you homicidal maniac!
Anyway, sorry I haven't been posting as much here on the blog. As Corey discovered, the action is all on the podcast. This week, Jeff and I go through the colors. Azure and Orange feature prominently.
	"
https://www.joelonsoftware.com/2008/11/03/the-unproven-path/,The Unproven Path,2008-11-03T00:12:19+00:00,,Joel Spolsky,News,"
	""As for what this all means, I'm still trying to figure that out. I abandoned seven long-held principles about business and software engineering, and nothing terrible happened."" 
From my latest Inc. column: The Unproven Path
	"
https://www.joelonsoftware.com/2008/11/01/stack-overflow-podcast-27/,Stack Overflow Podcast #27,2008-11-01T00:12:18+00:00,2018-04-23T17:12:53+00:00,Joel Spolsky,News,"
	Our guests on this week's Stack Overflow Podcast are the founders of Reddit, Steve Huffman and Alexis Ohanian.
By the way, Jeff recently upgraded the database server from Microsoft SQL Server 2005 to 2008, and found pretty conclusively that 2008 has a new architecture for full text search which is significantly slower than it was in 2005. Something to be careful about if you're thinking of upgrading to 2008.
	"
https://www.joelonsoftware.com/2008/12/29/the-new-fog-creek-office/,The new Fog Creek office,2008-12-29T00:12:34+00:00,,Joel Spolsky,"Fog Creek Software, News","
	Remember the Bionic Office? Fog Creek moved in there in 2003. After a couple of years we had outgrown the first office so we expanded to take over the whole floor. By the time our lease ran out in 2008 we had about 25 people in a space built for 18 and we knew we had to move. Besides, the grungy midtown location, perfect for startups, was starting to get us down after five years. We had a little bit more money, so we were looking for a place with about twice the space that cost about four times as much.
It bears repeating that at Fog Creek our goal is building the best possible place for software developers to work. Finding a great space was not easy. Our ideal of giving every developer a private office is unusual, so it's almost impossible to find prebuilt office space set up that way. That means we didn't have much choice but to find the best raw space and then do our own interior construction.
We knew it was going to take a while. After the first office, I knew that you should always plan on ten months from the day you start looking at space until the day you move in. And I also knew that if I wasn't intimately involved in every detail of the construction, we'd end up with the kind of life-sucking dreary cubicle hellhole made popular by the utopian workplace in ""Office Space.""
After a tedious search, we signed a lease for about 10,600 square feet on a high floor at 55 Broadway, almost all the way downtown, with fantastic views of the Hudson River, Governor's Island, the Statue of Liberty, and Jersey City.
We found a landlord with his own construction crew who was willing to do the interior construction for us, at no charge. The only problem was that his idea of a nice office was a lot closer to Initech than Fog Creek. So we had to chip in about a half million dollars of our own to upgrade just about everything.
Building great office space for software developers serves two purposes: increased productivity, and increased recruiting pull. Private offices with doors that close prevent programmers from interruptions allowing them to concentrate on code without being forced to stop and listen to every interesting conversation in the room. And the nice offices wow our job candidates, making it easier for us to attract, hire, and retain the great developers we need to make software profitably. It's worth it, especially in a world where so many software jobs provide only the most rudimentary and depressing cubicle farms.
Here are a few of the features of the new office:
Gobs of well-lit perimeter offices. Every developer, tester, and program manager is in a private office; all except two have direct windows to the outside (the two that don't get plenty of daylight through two glass walls).
Desks designed for programming. Long, straight desks include a motorized height-adjustable work surface for maximal ergonomics and comfort, and so you can stand up for part of the day if you want. Standard 30"" monitors. Desks are straight instead of L-shaped to make pair programming and code reviews more comfortable. There are 20 electrical outlets behind every desk and most developers have small hubs for extra computers. Our standard-issue chair is the Herman Miller Aeron. Those guest chairs are the famous Series 7 by Arne Jacobsen. The pedestal storage is on wheels and incorporates a cushion-top for additional guest seating.
Glass whiteboards. Easy to erase, look great, and don't stain.
Coffee bar and lunchroom. There's an espresso machine, a big fridge full of beverages, a bottomless supply of snacks, and delicious catered lunch brought in every day. We all eat lunch together which is one of the highlights of working here.
A huge salt water aquarium which brings light and color into the center of the office.
Plenty of meeting space. The lunch room has a projector and motorized screen (most frequently used to play Rock Band, thanks Jeff Atwood); there are several smaller meeting tables around, two conference rooms, and a big S-shaped couch.
A library, fully stocked with obsolete paper books and two reclining leather chairs, perfect for an after-lunch nap.
A shower (floor to ceiling marble), so you can bike to work or work out during the day.
Wood floors around the perimeter, so you can use scooters to get around. Carpet in the offices to make them quiet. Concrete in the lunch room because it's bright and looks cool.
I can't quite fit in enough pictures in this article to really give you a feel for the space, but I put a bunch of photos of the new Fog Creek office up on Picasa. If you're interested in learning more about the rationale behind spending so much money on building a great workspace, read A Field Guide to Developers.
	"
https://www.joelonsoftware.com/2008/12/28/stack-overflow-is-a-wiki/,Stack Overflow is a Wiki,2008-12-28T00:12:33+00:00,2018-04-19T21:51:21+00:00,Joel Spolsky,"Stack Overflow, News","
	Stack Overflow launched about three months ago, and is already serving 8.3 million page views per month. The growth has been incessant.
Most of the criticism I've heard of Stack Overflow reminds me of the early criticism of Wikipedia: ""I went to this article and it was wrong."" By the time you read the criticism, the article has been fixed. There was that year, not last year, but the year before, when every traditional journalist wrote a funny thought piece in their newspaper about something they looked up in Wikipedia and just how wrong it was. By the time their column appeared in print, the Wikipedia article was corrected, making a liar out of the journalist. Eventually they learned to stop writing that story.
Stack Overflow works the same way. Voting is open forever. It's a wiki, so anythinStack Overflow data from Google Analyticsg can be edited, and it is.
Most topics get most of their traffic not in the first few days, but by the Google traffic that comes in for people searching for the same exact problem. Search engines now account for 81% of Stack Overflow traffic: people searching for specific questions, not asking them directly. And that's where it's really working. Answers DO get better. If they don't, it's a wiki: fix them. Instead of complaining about good answers with few votes, vote down the top answer and vote up the better answer. 
My criterion for whether Stack Overflow works: when you type your question into Google, and you're happy to see a Stack Overflow result rather than a result at another one of those Q&A sites where you have to sign up and pay a monthly fee to see the answer.
	"
https://www.joelonsoftware.com/2008/12/22/from-the-department-of-badly-chosen-defaults/,From the Department of Badly Chosen Defaults,2008-12-22T00:12:32+00:00,,Joel Spolsky,News,"
	Alert reader Chris S. emailed me to point out this post by a developer at flickr about how to make IE scale images more smoothly. All you have to do is add
img { -ms-interpolation-mode:bicubic; }
to the stylesheet. It worked!
Note that all the other browsers use bicubic interpolation for scaling by default, because that's the only thing that make sense, but IE requires a non-standard CSS extension. So, pictures on this site should be a little smoother for those of you determined to use Internet Explorer.
Happy Hannuka!
	"
https://www.joelonsoftware.com/2008/12/21/future-of-web-apps/,Future of Web Apps,2008-12-21T00:12:31+00:00,,Joel Spolsky,News,"
	I'll be speaking at Future of Web Apps, in Miami, the last week of February. If you're going, and have any ideas for what I should talk about, drop me an email!
	"
https://www.joelonsoftware.com/2008/12/19/snowy-day-in-new-york/,Snowy day in New York,2008-12-19T00:12:30+00:00,,Joel Spolsky,News,"
	I've been debugging the new site. The first problem: hopelessly messed up rendering on IE6. The best way to fix CSS problems with IE6 is to generate random mutations on the style sheet until it looks fixed. That's really the only way to approach these kinds of things; CSS is nondeterministic, and many better minds than mine have gone completely stark raving mad trying to understand the rhyme and reason of IE6 rendering bugs.
Once that was fixed, people who read this site in an RSS reader reported that included images with captions weren't showing up correctly. To fix that one, I had to move the style information from the style sheet right into the tag, but only for the RSS feed. I think that should fix it for the most popular RSS readers (Bloglines and Google Reader) but many RSS readers strip out CSS aggressively and I can't do anything about that.
Waffle Wednesday at Fog CreekTo test the fixes, I've thrown in a picture of Waffle Wednesday, showing our fabulous director of QA attacking a waffle iron with PAM in the company kitchen.
Finally-many readers noticed that the images appear slightly pixelated. This is a result of relying on the browser to scale images. In my testing, it seems that Firefox and Safari do a very nice job scaling the images and there's no visible pixelation. Internet Explorer: not so much. If you use a better browser, you get better results.
	"
https://www.joelonsoftware.com/2008/12/18/a-new-design/,A new design,2008-12-18T00:12:29+00:00,,Joel Spolsky,News,"
	I've redesigned Joel on Software. Here's why.
	"
https://www.joelonsoftware.com/2008/12/10/amnesia/,Amnesia,2008-12-10T00:12:28+00:00,,Joel Spolsky,News,"
	Mysteriously, about a week ago, Dan, the program manager designing most of the new features in FogBugz 7, came to ask me what features I thought should go in the timesheet reporting plug-in.
The timesheet reporting plug-in? What's that?
It sounded dangerously close to a feature that could be used by managers to see reports on developers' timesheets. Like, something a weak manager would use to figure out who is the best developer on the team or to make sure everybody is pounding away at the code at a suitable pace.
We have a theory, here, that this is a bad idea. Using timesheets as a performance metric can lead to only one thing: bad data in timesheets.
The first time your boss comes into your office and gives you grief because it looks like you only did 7 hours of work yesterday, you're going to make sure that never happens again. And then, suddenly, behold, the timesheets show everyone working 12 hour days, and all the data in the timesheets becomes instantly bogus. And EBS, our statistical technique for predicting ship dates, suddenly stops working, because you're feeding it data that is meant to get your boss to stop bugging you, not accurate data.
Now, this theory may be completely off the wall, but it is our theory, and until we hear something better, that's the one we're going with.
So our policy has been that if you want to get the timesheet data, well, yes, you can, we'll give you a way to get it in CSV format or XML format or something and then you can abuse it all you want... go ahead, hang yourself, but we're sure as heck not going to make it easy for you with a pretty report all tied up with a bow that you might click on by accident, as you browse around, because thou shalt not put a stumbling block before the blind.
Anyway, I said to Dan, ""What the heck? Who on earth approved that feature?"" and walked down the hall to the FogBugz team to beg them not to do it. Correction: I razor-scootered down the hall. It's extremely undignified; I'm way too old for childish toys; but jeez it's like a whole city block from my office to the FogBugz team's office, so, OK, it's pathetic, but razor scooting is the fastest way to get there.
I am not sure what the FogBugz team will decide... it's their call, not mine. Apparently nice people email us and ask for that exact feature and offer to give us little green rectangular things that can be exchanged for other goods and services if we do the feature. So it's a dilemma, and I'm the one who knows the least about it, so I hope they won't listen to me. Well, secretly, I hope they will, but don't tell them that. Sometimes they do and sometimes they don't.
But anyway... that's not the point of the story. The point of the story is that today I was reviewing some video footage to see if there was anything worth including in the next documentary Lerone is making about software development. And the footage I was reviewing was of a meeting several weeks ago to go over the final list of features for FogBugz 7 and make sure they all had the right priorities assigned to them.
And there, on the video, I had to watch myself listening to Babak explaining the timesheet reporting plug-in, and the record shows that I appeared to understand what was being said to me, and, I'm afraid to admit, I appear to have given my tacit approval to the feature.
AHEM.
In short, I'm turning into one of those crazy bosses that approves things, and then gets upset when you do them. This keeps happening. I must be driving people crazy.
In my defense, usually what happens is that the thing is described to me in general, vague terms and it sounds great, and I say, ""sounds great!"" and then I see the thing a little bit closer, and it's awful, and by this time, I've forgotten about the time I said it sounds great. Just assume I have amnesia or something. I can't form new memories. Did I tell you about the razor scooter yet? OH IT'S FUN.
The solution, of course, is what I've been saying all along. STOP FRIGGIN' LISTENING TO ME. I don't know what I'm talking about. If you work for me, you're welcome to get my advice, but you have to make your own decision because chances are you've thought MUCH MORE about the issue than I have and in fact we probably hired you because you're smarter than I am.
	"
https://www.joelonsoftware.com/2008/12/03/stack-overflow-podcast-32/,Stack Overflow Podcast #32,2008-12-03T00:12:27+00:00,2018-04-23T17:14:44+00:00,Joel Spolsky,News,"
	
This week Jeff and I talk about software piracy, some performance improvements on the site, dealing with criticism, great programmer's offices, and more, in Stack Overflow Podcast #32.
	"
https://www.joelonsoftware.com/2008/12/01/my-style-of-servant-leadership/,My Style of Servant Leadership,2008-12-01T00:12:26+00:00,,Joel Spolsky,News,"
	""As for the sergeant major's job, it basically consisted of two main duties: being the chief disciplinary officer and maintaining the physical infrastructure of the base. As such, he was a terror to everyone in the battalion. Most people knew him only from the way he strutted around, conducting inspections, screaming at the top of his lungs, and demanding impossibly high standards of order and cleanliness in what was essentially a bunch of tents in the middle of the desert-tents that were alternately dust-choked or mud-choked, depending on the rain situation.""
From my latest Inc. column: My Style of Servant Leadership
	"
https://www.joelonsoftware.com/2009/01/31/from-podcast-38/,From Podcast 38,2009-01-31T00:12:45+00:00,2018-04-23T17:14:40+00:00,Joel Spolsky,News,"
	Here's a brief conversation between Jeff and I which I transcribed from Stack Overflow podcast #38, starting at [42:28].
Joel: There's a debate over Test Driven Development... should you have unit tests for everything, that kind of stuff... a lot of people write to me, after reading The Joel Test, to say, ""You should have a 13th thing on here: Unit Testing, 100% unit tests of all your code.""
And that strikes me as being just a little bit too doctrinaire about something that you may not need. Like, the whole idea of agile programming is not to do things before you need them, but to page-fault them in as needed. I feel like automated testing of everything, a lot of times, is just not going to help you. In other words, you're going to write an awful lot of unit tests to insure that code that, really, is going to work, and you're definitely going to find out if it doesn't work [if you don't write the tests] does, actually still work, ... I don't know, I'm going to get such flame mail for this because I'm not expressing it that well. But, I feel like if a team really did have 100% code coverage of their unit tests, there'd be a couple of problems. One, they would have spent an awful lot of time writing unit tests, and they wouldn't necessarily be able to pay for that time in improved quality. I mean, they'd have some improved quality, and they'd have the ability to change things in their code with the confidence that they don't break anything, but that's it.
But the real problem with unit tests as I've discovered is that the type of changes that you tend to make as code evolves tend to break a constant percentage of your unit tests. Sometimes you will make a change to your code that, somehow, breaks 10% of your unit tests. Intentionally. Because you've changed the design of something... you've moved a menu, and now everything that relied on that menu being there... the menu is now elsewhere. And so all those tests now break. And you have to be able to go in and recreate those tests to reflect the new reality of the code.
So the end result is that, as your project gets bigger and bigger, if you really have a lot of unit tests, the amount of investment you'll have to make in maintaining those unit tests, keeping them up-to-date and keeping them passing, starts to become disproportional to the amount of benefit that you get out of them.
Jeff: I think that's a great point. Although, I do think if you're working on older code bases that don't have a lot of churn, ...
Joel: Yeah.
Jeff: To me it's about churn. If you're working on an old code base that isn't going to have that much churn, and you want to change it where you can't break anything, where if you break anything it's really really bad, then it's probably worth your time to go in and develop a bunch of unit tests. You're building scaffolding around this grand old building, this classic old building that's not going to change for another 200 years, so sure, build a bunch of scaffolding around the building.
Joel: Yeah. They work really for things like a compiler, where the design is not going to change because the language is fixed.
Jeff:That's right.
Joel:I might do more black-box tests, sort of like unit tests but more from the perspective of ""does this compile all code correctly,"" with enormous numbers of tests, than just the internal, ""does this particular function work in this particular way at all times.""
Last week I was listening to a podcast on Hanselminutes, with Robert Martin talking about the SOLID principles. (That's a real easy-to-Google term!) It's object-oriented design, and they're calling it agile design, which it really, really isn't. It's principles for how to design your classes, and how they should work. And, when I was listening to them, they all sounded to me like extremely bureaucratic programming that came from the mind of somebody that has not written a lot of code, frankly.
And here I am ranting against somebody that doesn't have a chance to respond. But just to give you one example, a part of the SOLID principles was that if you write a class, that class has contracts with all the other classes that it interacts with, and those contracts should be expressed in interfaces [PDF]. So you shouldn't just interact with the class, because that class may change. If you have a particular class that you need to use, you should make a custom interface just for what you're going to use in that class. That interface, then, never has to change. And the interface is the only thing that you have to #include.
Does that make sense? So, you've got some class, with 40 different little methods on it, and I'm only going to use six of them, so I should make an interface with those six things that I can use, and the class will implement that interface, and that's my contract with the class, that those are the only six things I'm going to use.
People that say things like this have just never written a heck of a lot of code. Because what they're doing is spending an enormous amount of time writing a lot of extra code, a lot of verbiage, a lot of files, and a million little classes that don't do anything and thousands of little interface classes and a lot of robustness to make each of these classes individually armed to go out into the world alone and do things, and you're not going to need it. You're spending a lot of time in advance writing code that is just not going to be relevant, it's not going to be important. It could, theoretically, protect you against things, but, how about waiting until those things happen before you protect yourself against them?
This seems to be where a lot of the Object Oriented Design community went, and if anybody has any strong feelings about this, call in and tell me what you think-tell me if I'm totally off track here-but it seems to me like a lot of the Object Oriented Design principles you're hearing lately from people like Robert Martin and Kent Beck and so forth have gone off the deep end into architecture for architecture's sake. It doesn't seem like you could actually get any code written if you're spending all your time writing 8,000,000 unit tests, and every single dinky little class that you need to split a URL into four parts becomes an engineering project worthy of making a bridge, where you spend six months defining 1000 little interfaces. They've just gone off the deep end, and I don't think these people write very much code if they're coming up with these principles, to be honest, it doesn't even make sense.
Jeff: Well, there are places where that level of testing makes sense. If you're working at Microsoft and you're working on the .NET Framework...
Joel: Yeah.
Jeff: ... you have a totally different set of obligations to your public ...
Joel: Correct.
Jeff:... Your code's going to be used millions and millions of times.
Joel: Yeah. In fact, if you're making any kind of API, a plug in API, it is very important to separate things into interfaces and be very very contractual, and tightly engineered. Just like you want to put a lot of effort into your user interface, you also want to put a lot of effort into your API that people are calling... it's just an interface, and you want it to be good and solid and robust. And that's fine.
But this idea that every single class in your code, all these classes interacting with each other, should be so tightly defined ...
Listening to this interview on Hanselminutes, there seemed to be an intense obsession with creating lots and lots of little classes that all did one particular thing...
One of the SOLID principles, and I'm totally butchering this, but, one of the principles was that you shouldn't have two things in the same class that would be changed for a different reason [PDF]. Like, you don't want to have an Employee class, because it's got his name which might get changed if he gets married, and it has his salary, which might get changed if he gets a raise. Those have to be two separate classes, because they get changed under different circumstances. And you wind up with millions of tiny little classes, like the EmployeeSalary class, and it's just... (laughs) idiotic! You can't build software that way! The way real software works is that you create these very imperfect things, and they work great. They really do. And then you have a little problem, and you go and you fix the little problem, because it's code, and you have an editor, and you edit it. These classes are not going to go wander off flying in the universe all by themselves and need to work perfectly and unchanged until the end of time.
Jeff: Right. The longer I think about this, the less I care about code hygiene issues (laughs). Because the unit of measure that really matters to me is, how quickly you can respond to real business needs with your code. And by that I mean, how well are you serving the people that are using your code. To me that's what it's all about. Anything that gets in the way of you fixing your code or improving your code in a way that your customers can appreciate, is a negative. If that means using Ruby, or having lots of unit tests: whatever's working for you: do that. But if it's getting in the way, if it becomes friction, like, ""I'd love to have this great new feature but I'd have to have 1000 unit tests,"" that's a negative.
Joel: Yeah. And the worst thing that happens is that you get people that just stop thinking about what they're doing. ""This is the principle, to always write unit tests, so I'm always going to write unit tests,"" and then they're just not thinking about how they're spending their time, and they wind up wasting a lot of it.
Jeff: Yeah, it's a balancing act. And I don't want to come out and say I'm against [unit] testing, because I'm really not. Anything that improves quality is good. But there's multiple axes you're working on here; quality is just one axis. And I find, sadly, to be completely honest with everybody listening, quality really doesn't matter that much, in the big scheme of things... There was this quote from Frank Zappa: ""Nobody gives a crap if we're great musicians."" And it really is true. The people that appreciate Frank Zappa's music aren't going, ""that guitar was really off."" They're hearing the whole song; they're hearing the music, they're not really worried whether your code has the correct object interfaces, or if it's developed in a pure way, or written in Ruby or PHP... they don't really care about that stuff. We do internally, but it's important to balance that, I think, and I think that gets missed a lot, which is, maybe, the point you're getting at.
Joel: Yeah.
Jeff: I think over time, more and more, I've become really lax on my thinking about this, because what matters is what you deliver to the customer, and how happy the customer is with what you've delivered. There's many, many ways to get there.
	"
https://www.joelonsoftware.com/2009/01/29/i-am-not-having-any-problems-with-google/,I am not having any problems with Google,2009-01-29T00:12:44+00:00,,Joel Spolsky,News,"
	A very irresponsible journalist, Paul Boutin, wrote a whole story in the Industry Standard which appears to me made up from whole cloth.
He is attributing, to me, a comment posted by an anonymous poster.
I am not using Google Apps, I did not write the comment in question, basically none of the things that Boutin said I did are true.
A part of the problem is the design of my discussion groups, which look too much like the main Joel on Software site. A part of the problem is unregistered, anonymous posters... that will be turned off immediately. Another part of the problem is The New Tech Journalism, which will have to remain a rant for another day.
	"
https://www.joelonsoftware.com/2009/01/17/purchase-orders-and-custom-licenses/,Purchase orders and custom licenses,2009-01-17T00:12:43+00:00,,Joel Spolsky,News,"
	Over on the Business of Software group, we're discussing those big bureaucratic companies who want a custom legal agreement to buy $79 worth of software. ""Lawyer-infested companies that are obsessive-compulsive about contracts do not pirate software and they CERTAINLY don't try to trick you into signing a contract 'allowing' them to pirate your software. This theory is laughable.""
	"
https://www.joelonsoftware.com/2009/01/15/open-house-2/,Open House,2009-01-15T00:12:42+00:00,,Joel Spolsky,News,"
	After I posted pictures of the new Fog Creek office, a lot of people wrote to ask if they could visit it. So we're holding an open house here on Friday, January 30th, from 12:00-1:00 pm (absolutely no one can be admitted after 1:00, sorry). There will be free food and drinks.
Fog Creek is at 55 Broadway, New York, on the 25th floor.
View Larger Map
	"
https://www.joelonsoftware.com/2009/01/14/thanks-or-no-thanks/,Thanks or No Thanks,2009-01-14T00:12:41+00:00,,Joel Spolsky,News,"
	""Simply because one programmer's idea translated visibly and directly into a lot of money didn't mean that the other team members weren't adding just as much value to the business, albeit in a less direct way.""
From my latest Inc. column: Thanks or No Thanks
	"
https://www.joelonsoftware.com/2009/01/13/open-plan-offices-make-workers-sick/,Open-plan offices make workers sick,2009-01-13T00:12:40+00:00,,Joel Spolsky,News,"
	News.com.au: ""Australian scientists have reviewed a global pool of research into the effect of modern office design, concluding the switch to open-plan has led to lower productivity and higher worker stress.""
	"
https://www.joelonsoftware.com/2009/01/12/by-installing-java-you-will-be-able-to-experience-the-power-of-java/,"“By installing Java, you will be able to experience the power of Java”",2009-01-12T00:12:39+00:00,,Joel Spolsky,News,"
	Just because there's room on the dialog box, doesn't mean you have to put something there. The Java installer starts off with a dialog box that manages to repeat the word Java six times without really telling you what it is, just that it's ""everywhere.""
People don't like to read. If you can't think of anything to say, maybe you should just shut up. This whole damn dialog could read
Java Loves You-Please Wait
without any loss in functionality.
	"
https://www.joelonsoftware.com/2009/01/08/goals/,Goals,2009-01-08T00:12:38+00:00,,Joel Spolsky,News,"
	Seth Godin reminded me about having goals. ""Having goals is a pain in the neck,"" he says, but ""the people who get things done, who lead, who grow and who make an impact... those people have goals.""
OK, good point. Here are Fog Creek Software's goals for 2009, in no particular order:
Ship FogBugz 7.0 for all platforms
Ship Copilot Desktop for all platforms
Release the next documentary about software development
Build a kick-ass new product from the ground up with the summer interns, and get the first dollar of customer revenue before they go back to school
Put on a fantastic Business of Software conference
Relive the glory days with another FogBugz World Tour
I like what Seth said about how ""if you don't have a goal, you never have to worry about missing it.""
	"
https://www.joelonsoftware.com/2009/01/07/copilot-oneclick-for-macintosh/,Copilot OneClick for Macintosh,2009-01-07T00:12:37+00:00,,Joel Spolsky,News,"
	Fog Creek Copilot is an inexpensive, and very easy to use, remote tech support system that allows you to remote-control someone else's computer over the Internet without installing anything special. It's perfect for ad-hoc tech support, and used extensively by helpdesks, software companies providing telephone support, and people helping their friends and families with computer problems. At Fog Creek, we even use it to conduct coding interviews for programmers.
The new Copilot OneClick feature lets you preinstall the software on all the computers you connect to frequently, so every time your dad calls up needing help with the accounting software running his Ponzi scheme, you just click one link and you're logged onto his computer.
As usual, it works through all kinds of firewalls, proxies, and NATs without any configuration, it's protected by 128-bit SSL, and there's never anything to configure.
Today, the Copilot team released the Macintosh version of the OneClick feature, so all the Copilot goodness is available on Windows or Mac, or both (you can control Windows computers from Macs and vice versa). And it's cheap, by which I mean, inexpensive-I don't mean that you can just buy it two drinks and take it back to your apartment and expect to be taking a bubble bath with it-most people get the $19.95 unlimited plan; it's even free on weekends when we have lots of unused bandwidth.
Read about the team's experience developing a Mac-based installer, then try the free trial! Bubble bath not included!
	"
https://www.joelonsoftware.com/2009/01/02/another-resume-tip/,Another resume tip,2009-01-02T00:12:36+00:00,,Joel Spolsky,News,"
	Are you a software developer applying to a small company?
Here's a tip from someone who has read thousands of resumes. When you're applying to a startup, or a software company with less than, say, 100 employees, you may want to highlight the Banging Out Code parts of your experience, while deemphasizing the Middle Management parts of your experience.
When a startup CTO sees a resume that says things like:
Responsible for $30m line of business
Architected new ERP platform
Managed team of 25 developers
Optimized business processes
they think, ""Spare me, that's all we need, somebody running around trying to manage and optimize and architect when we just need someone who isn't afraid to write code."" Here's the stuff CTOs at startups want to see on a resume:
Single-handedly developed robust 100,000 LOC threadsafe C++ service
Contributes to OpenBSD file system in spare time
Wrote almost 75% of the Python code running IsIt2009Yet.Com
If you've been in a large company for too long, you may feel that you put in your time, with all those years working your way up the hierarchy from the $50,000 coder jobs to the $250,000 Senior Vice President in Charge of Long Meetings With Other Senior Vice Presidents, and you're kind of enjoying the nice parking space and the personal assistant and stuff, and coding? not so much, so now you've found a cool startup or small company, and you're thinking, maybe now's the time to jump ship? So you send your resume with your ERP stuff and SAP stuff and Vice President stuff to the startup, and it gets tossed.
Those VP jobs just don't exist at startups, and the few VPs they have are the founders and a key early hire or two. Not you. And startups certainly don't need extra middle managers. To a startup founder, middle managers just seem like added expense without more code getting written, and the only thing we REALLY need is
code to be written, and
customers to be called on the telephone.
Now, there's a lot of resumes I see where, actually, I suspect that the candidate may have been (ahem) slightly overemphasizing the management/leadership/""architect"" parts of the job, and slightly underemphasizing the banging out of code. And that's fine if you're looking to jump to a management position at a big company that, inexplicably, doesn't have anyone to promote from within. 
But for startups, everything about your resume has to scream getting your own hands dirty. Otherwise your resume makes you look like you're looking for the kind of job where you can call meetings that take people away from coding all day long, which, to a startup, is about as useful as a one-legged man in a butt-kicking contest.
(More resume tips, and, if you're really looking for a job, don't forget the job board).
	"
https://www.joelonsoftware.com/2009/02/25/start-up-static/,Start-up Static,2009-02-25T00:12:49+00:00,,Joel Spolsky,News,"
	""At this point, you're so dang cocky that you have too much wine at Thanksgiving dinner and pointedly remind your mother-in-law about how rude she was to dismiss your start-up idea and how, when you're making millions of dollars, there will be nothing for her - she can bloody well eat frozen government cheese.""
From my latest Inc. column: Start-up Static
	"
https://www.joelonsoftware.com/2009/02/11/is-the-tech-recession-over/,Is the tech recession over?,2009-02-11T00:12:48+00:00,,Joel Spolsky,News,"
	OK, it's just one data point. All I know is sales of FogBugz and Copilot. But what I'm seeing is this: October-December 2008 were terrible-sales were 20% lower than usual-but starting January 5th, we saw a significant bounce back to the same level of sales as we had before this recession started, and it's continued to this day.
This could be a fluke; it might not reflect any reality. Or it could be a sign that tech firms, for the moment, are doing reasonably well. The Joel on Software job board is holding steady at about 50 jobs listed, down from a peak around 100, but there are still a significant number of openings for great developers.
Does this jive with your experience? (Comment over at the Business of Software).
	"
https://www.joelonsoftware.com/2009/02/07/the-new-york-times-covers-the-fog-creek-office/,The New York Times covers the Fog Creek office,2009-02-07T00:12:47+00:00,,Joel Spolsky,News,"
	The New York Times covered the new Fog Creek office: ""A client who claims to know something about design might be an architect's worst nightmare. But it turns out that Joel Spolsky, a software designer, author and blogger, actually knows a lot about it.""
If you're coming here from that article craving more pictures and descriptions of the space, there's an article I wrote describing everything in detail, and there's also a slideshow with 49 pictures.
	"
https://www.joelonsoftware.com/2009/02/05/new-faster-copilot/,"New, faster Copilot",2009-02-05T00:12:46+00:00,,Joel Spolsky,"Fog Creek Software, News","
	Something I knew: if you just put traffic on the Internet, it's not necessarily going to go by the most efficient route.
Something I didn't know: that can make a pretty big difference. The default routes can be slow, clogged, and high latency. Think Cross-Bronx Expressway.
Akamai sent a couple of salespeople over to pitch us a service called IP Application Accelerator. According to the goofy pictures-with-clouds in the whitepaper, when you subscribe to this service, your packets go straight to the nearest Akamai node, which are installed all over the world, and then they magically zip on a superfast superclean superhighway to the Akamai node nearest your destination, after which they hop off and take the city bus to their final destination.
I have to admit to being extremely skeptical. Isn't that what the Internet is supposed to do anyway? When I heard about this I really didn't think it would work. I mean, sure, I understand Akamai's original product, whereby the big static files in your site would be copied to nodes all over the Internet for faster delivery, but I didn't expect great speed improvements for an application like Fog Creek Copilot, which can't cache anything.
Jason, on the Copilot team, wanted to try anyway. Performance is the biggest complaint about Copilot, so we were ready to try anything that increased the ""speed of light."" Setting it up turned out to be pretty easy. The costs were reasonable and Akamai was more than happy to let us see if it worked as well as advertised before committing to spending anything. Setup consisted entirely of changing an IP address or two.
Well, the new Akamaized Copilot seems to get about 100% more throughput going from Boston to Los Angeles. More importantly, our exhaustive scientific experiments using beakers and chemicals and graph paper and slide rules proved that the usability of Copilot jumped from ""tolerable"" to ""pretty snappy.""
My high school science teacher would be proud.
Last week in Munich I was staying in a hotel (Bayerischer Hof) with ridiculously bad internet connectivity (provided by Swisscom) that was bursty, had lengthy dropouts, surprisingly low bandwidth (I couldn't watch YouTube movies of cats doing funny things, even at the lowest resolution), and was poorly managed (it literally could not route to many popular sites). So I tried the new Akamaized Copilot back to my desk in New York and was blown away... Copilot's speed and reliability doing remote desktop was actually better than the native internet access in the hotel. This shows, I think, that Akamai managed to pull its traffic off of the crappy Swisscom network before Swisscom could do any more damage. Awesome.
It's still too early in the experiment to decide conclusively that this was a good move. The internet is a huge place, and we've only done a handful of experiments. The final verdict will come from our customers, but so far I'm a believer.
	"
https://www.joelonsoftware.com/2009/03/27/solid-state-disks/,Solid State Disks,2009-03-27T00:12:52+00:00,,Joel Spolsky,News,"
	One of the FogBugz developers complained that compiling was pretty slow (about 30 seconds), which was leading to a lot of sword fights in the hallway. He asked if it would be OK if someone spent a few weeks looking for ways to parallelize and speed it up, since we all have multiple CPU cores and plenty of memory.
Intel Corp.I thought it might be a good idea to just try throwing money at the problem first, before we spent a lot of (expensive and scarce) developer time. And I had just read a glowing review by Anand Lal Shimpi of the Intel X25-M SSD, so I thought I'd experiment with replacing some of the hard drives around here with solid state, flash hard drives to see if that helped.
The first experiment was trying to rejuvenate an 18 month old IBM Thinkpad X61s notebook, which I originally got for the FogBugz World Tour. I got the new, 160GB Intel X25-M drives, which are about $760 on NewEgg.com.
The trick in replacing your main, boot hard drive is making an exact copy of the partitions, MBR, and data, from the old drive to the new one. There are several apps that can do this. There's an open source app called Clonezilla, which, I have to say, is only free if your time is worthless. Two of the popular commercial applications I tried are Symantec Norton Ghost 14 and Acronis Migrate Easy 7.0.
With the Thinkpad, neither Ghost nor Acronis worked right. I think there's something unusual about the MBR on ThinkPads. The bottom line was that every time I attempted to clone the drive, I got an unbootable drive. I wasted about a day and a half trying lots of different things. I even tried booting with a Ubuntu Live CD and copying all the files (this doesn't work right, and leaves Windows apparently working, but actually broken in many tiny ways).
Eventually I gave up and just reinstalled everything from scratch. Not fun, but now I have a fresh new machine with a bigger, faster solid state drive.
ThermaltakeOne tool which was really helpful: the Thermaltake BlacX Docking Station. It's a toaster for raw SATA hard drives, either 2.5"" or 3.5"". You drop any hard drive in the top and plug the USB 2.0 plug into your computer and, poof, the hard drive is connected. $37 at NewEgg.
I did a little bit of benchmarking... don't take these numbers too seriously since I didn't run many tests and it's hard to get everything right. Boot time dropped from 2:11 to 0:34. That's from a cold boot to launching Firefox and navigating to google.com. Launching 6 major applications went from about 20 seconds to about 10 seconds. In general, the fact that app launching is so much faster makes a huge difference and it was totally worth it. This little laptop is now the fastest computer I've ever used.
For my next experiment, I upgraded the main desktop, a Dell Optiplex 745. This time Acronis Migrate Easy worked perfectly the first time. Literally all I had to do was clone the drive, turn off the computer, and replace the old drive with the new one, and I was done. Plink!
Suddenly everything was faster. Booting, launching apps... even Outlook is ready to use in about 1 second. This was a really great upgrade.
But... compile time. Hmm. That wasn't much better. I got it down from 30 seconds to ... 30 seconds.
Our compiler is single threaded, and, I guess, a lot more CPU-bound than IO bound. Oh well. We'll still probably upgrade all the developer's desktops with SSD drives, because making everything else snappy will make their lives better, but we may still be forced to spend some time making the compiler do its work in parallel.
	"
https://www.joelonsoftware.com/2009/03/11/stack-overflow-live/,Stack Overflow Live!,2009-03-11T00:12:51+00:00,2018-04-19T21:52:09+00:00,Joel Spolsky,"Stack Overflow, News","
	If you're going to Las Vegas next week for Microsoft's huge MIX 09 conference, Jeff and I will be recording a live broadcast of the Stack Overflow podcast. Er, I mean, it's ""live"" in the sense that it will be recorded in front of a live audience ... you! But it's not live because it's a podcast, it's not actually broadcast live ... well, you know what I mean.
Please come; it'll be a barrel of fun!
Tuesday, March 17, 2009, at 6:30 PMAt the Third Place hang out areaThe Venetian Las Vegas4th Floor, Marcelo 4403
You will need to be registered for the conference. You do not need to be registered for the workshops.
	"
https://www.joelonsoftware.com/2009/03/09/how-to-be-a-program-manager/,How to be a program manager,2009-03-09T00:12:50+00:00,,Joel Spolsky,"News, Program manager","
	Having a good program manager is one of the secret formulas to making really great software. And you probably don't have one on your team, because most teams don't.
Charles Simonyi, the brilliant programmer who co-invented WYSIWYG word processing, dated Martha Stewart, made a billion dollars off of Microsoft stock and went into space, first tried to solve the Mythical Man Month problem of organizing really big software teams by creating one super duper uberprogrammer writing the top-level functions, while handing off the implementation of the lower-level functions to a team of grunt junior-programmers as needed. They called this position program manager. Simonyi is brilliant, but this idea, not so much. Nobody wanted to be a grunt junior programmer, I guess. 
For more on the history, read William Poundstone's How Would You Move Mount Fuji?
Jabe Blumenthal, a programmer on the Mac Excel team in the late 80s, recycled the title for a different job. He had noticed that software development was getting so complicated that none of the programmers had the time to figure out how to make software that was either usable or useful. The marketing team was ranting and raving about customer needs and nobody had time to talk to them or translate their MBA-speak into actual features. There was a lot of product design stuff that took a lot of work: talking to users, running usability tests, reviewing competitive products, and thinking hard about how to make things easier, and most programmers just didn't have the time (nor were they particularly good at it). Blumenthal took the title ""Program Manager,"" but reinvented the job completely.
What does a program manager do?
Henceforth, a program manager would:
Design UIs 
Write functional specs
Coordinate teams
Serve as the customer advocate, and
Wear Banana Republic chinos
On small products, you might just have one program manager, but on larger products, you would probably have more than one. Each can be responsible for some subset of the features. A good rule of thumb is that it takes about one program manager for every four programmers. If you're having trouble dividing up the work, one approach I learned from Mike Conte is to divide up the product according to user activities. For example, Twitter could be divided into four user activities:
Registering and getting started
Posting messages and reading replies
Configuring your account
Searching for news
Tyler Griffin Hicks-WrightMy first program management assignment at Microsoft was on Excel, working on the user activity called ""customization,"" i.e., scripting and macros. The first thing I had to do was figure out what customers needed, which I did by talking to as many customers as I could until I started to get kind of bored because I kept hearing the same thing. I spent a lot of time talking to the development team to figure out what would be possible and reasonable to implement in a single 18 month release, and I spent a lot of time talking to the Visual Basic team to see if they could supply a compiler, code editor, and dialog box editor that could be used in Excel for our macro language. I also had to talk to Apple, which was developing their own universal macro language called AppleScript, and the other application teams at Microsoft, mainly Word, Access, Project, and Mail, who generally did whatever Excel did. Most of this process consisted of talking. Meetings, email, phone calls. I am scarred for life from this, and now cower in my office in fear that the phone will ring.
The second step was writing a vision statement: sort of a broad document that said, this is how Visual Basic would work in Excel, this is what some sample macros would look like, these are the major pieces we would need to build, and this is how it would solve customers' problems. When that didn't generate too many objections, I started working on a much more detailed spec, which explained, down to the smallest detail, how everything looked to the user.
This was a functional spec, not a technical spec, which means, all it talked about was what the user saw, not how it was implemented. (Read all about functional specs here.) A program manager doesn't care how the development team implements things internally. As I sent chapters of the spec to Ben Waldman, the development lead, he and his team sat down and figured out what they had to do internally to make it work. They came up with a rather brilliant and very compact table that mapped the object-oriented interface I was defining onto internal Excel functions, but that really wasn't my business. I didn't know too much about Excel internals and didn't really know how things should be implemented.
Truth be told, I didn't know anything about anything. Fresh out of college, I didn't have enough experience to develop the code, test the code, write the documentation, market the product, or do the usability tests. Luckily, Microsoft had seriously experienced gurus in each of those positions, who taught me everything I know today, and who did the real work of producing an awesome product. For example, I knew that users would want to copy the value of a spreadsheet cell into a variable:
 x = [A1] 
had to work. The trouble was that a cell could hold a number or a string, but Basic was early bound... you had to DIM x as an Integer, Float or String before you could use it.
Basic had to get some kind of dynamic types, but I wasn't smart enough to figure out how to do that. Didn't matter. Tom Corbett, a programmer on the Visual Basic team, figured out how. And thus Variants and IDispatch were born, and Basic became a dynamic language with what you kids now call ""duck typing"". The point being, my job wasn't necessarily to solve problems, it was to figure out what customers needed and make sure that programmers figured out how to solve them.
Once the spec was finished and the development team got down to work, I had two responsibilities: resolving any questions that came up about the design, and talking to all the other teams so that the developers didn't have to. I met with the testers explaining how things were supposed to work and helping them plan how to test everything. I met with the documentation team, making sure they understood how to write a good tutorial and reference for Excel Basic. I met with localization experts to figure out a localization strategy. I sat down with marketing to explain the marketing benefits of VBA. I worked with usability experts to set up usability tests.
A program manager does go to a lot of meetings, but doesn't produce much other than that written spec, which is why as a twerp fresh out of school I was still able to do the job. You don't have to be a 14-year veteran programmer to work as a program manager (in fact, with 14 years of programming experience, you might know too much to be a good user advocate.)
Conflict
Tom Chi and Kevin ChengLacking a program manager, your garden-variety super-smart programmer is going to come up with a completely baffling user interface that makes perfect sense IF YOU'RE A VULCAN (cf. git). The best programmers are notoriously brilliant, and have some trouble imagining what it must be like not to be able to memorize 16 one-letter command line arguments. These programmers then have a tendency to get attached to their first ideas, especially when they've already written the code.
One of the best things a program manager can add to the software design process is a second opinion as to how things should be designed, hopefully one that is more empathetic to those DOUBLE SUPER UNSMART USERS with their pesky mental feebleness requiring that an application be usable without reading the man page, writing a custom emacs-lisp function, or translating numbers into octal in your head.
A good program manager will come with her own ideas for how the UI should work, which might be better, or worse, than the developer's idea. And then there's a long debate. Typically, the program manager wants something simple and easy to understand for the users, featuring a telepathic user interface and a 30"" screen that nonetheless fits in your pocket, while the developer wants something that is trivial to implement in code, with a command-line interface (""what's so unusable about that?"") and Python bindings.
One of the most monumental debates I remember from the Excel 5 project was between a developer who wanted pivot tables to float on the drawing layer above the spreadsheet, and the program manager, who insisted that pivot tables live right in the cells on the spreadsheet. This debate went on for a really, really long time, and eventually, the program manager prevailed, but the final design came out much much better than any one individual's design would have been.
To make sure that the debate happens respectfully and on a rational basis of facts, it's absolutely critical that the program managers and developers be peers. If developers report to the program manager, at some point during the debate the program manager is going to get sick of the whole thing and just say, ""OK, enough talking, now we do it my way."" When they're peers, this can never happen. It's a little bit like courts of law: we don't allow a lawyer for one side to be the judge, and we work on the theory that the truth is most likely to be uncovered through a process of debate between equals. The debate can only be a fair one if neither side has an unfair advantage. 
This is an important point, so if you were daydreaming about Sally in 11th grade, wondering where she is now, snap out of it. She's a biotherapist in Scottsdale, and a Republican. Now pay attention. Programmers can't report to program managers which means, among other things, that the development lead, or the CTO, or the CEO, can't be the person who writes the specs.
The number one mistake most companies make is having the manager of the programmers writing the specs and designing the product. This is a mistake because the design does not get a fair trial, and is not born out of conflict and debate, so it's not as good as it could be.
I learned this the hard way. At Fog Creek Software, I did a lot of the program management myself, and it was a constant battle to remind people that they were supposed to argue with me when I said wrong things. We're not a big company but we are finally big enough to have real program managers now, Dan and Jason, and the programmers love arguing with them.
Of course, when programmers are peers of the program managers, the programmers tend to have the upper hand. Here's something that has happened several times: a programmer asks me to intervene in some debate he is having with a program manager. 
""Who is going to write the code?"" I asked.
""I am...""
""OK, who checks things into source control?""
""Me, I guess, ...""
""So what's the problem, exactly?"" I asked. ""You have absolute control over the state of each and every bit in the final product. What else do you need? A tiara?""
You see, it turns out that this system puts the burden on the program manager to persuade the programmer, because at some point, the program manager runs the risk that the programmer will give up and just do whatever the heck the programmer feels like. Thus, being effective as a program manager means you have to (a) be right, and (b) earn the respect of the programmers so that they concede that you're right.
How do you earn this respect?
It helps, as a program manager, to be pretty good at coding yourself. This is unfair. Program managers aren't supposed to write code. But programmers tend to respect programmers a lot more than non-programmers, no matter how smart they are. It is possible to be an effective program manager without being a coder, but the burden of earning the respect of the programming team will be higher.
flip the bozo bit v. Decide that someone is a clown, and stop listening to them.
The other way to earn the programming team's respect is to demonstrate intelligence, open-mindedness, and fairness in any debates that come up. If a program manager says dumb things, the programmer might flip the bozo bit on them. If a program manager becomes personally or emotionally attached to a certain way of doing things, to the point at which they're being unreasonable, they're going to lose a lot of credibility... both sides, but especially the program manager, need to be emotionally detached from the debate and willing to consider new evidence and change their opinions when the facts merit it. Finally, if a program manager is seen as playing politics, having private meetings with the boss or trying to divide-and-conquer to win a debate instead of debating on the merits, they're going to lose a lot of trust of the programmers.
And when a program manager loses the programming team's trust, it's over. They're not going to be effective. The programmers are going to tune them out and do whatever they want anyway. This leads to worse code and wasted time, since not only are you paying an ineffective program manager a salary, but that ineffective program manager is calling meetings and soaking up everybody else's time even though they're not really making the code any better.
Specs? Really? That's so unagile
There are so many development organizations where specs are a monument to mindless bureaucratic paperwork that entire movements sprung up organized around the idea of not writing specs. These people are misguided. Writing a functional specification is at the very heart of agile development, because it lets you iterate rapidly over many possible designs before you write code. Compared to code, a written spec is trivial to change. The very act of writing a specification forces you to think through the design you thought you had in your head, and helps you see the flaws in it quickly so that you can iterate and try more designs. Teams that use functional specifications have better designed products, because they had the opportunity to explore more possible solutions quickly. They also write code faster, because they have a clearer picture when they start of what's going to be needed. Functional specifications are so important one of the few hard and fast rules at Fog Creek is ""No Code Without Spec.""
The exact form the functional specification takes may vary. All a functional specification has to do is explain how the program will behave. It doesn't say anything about how the code will work internally. You start at the highest level: a vision statement, no more than one page explaining the gist of the new feature. Once that's nailed down, you can develop storyboards... mockups of the screens showing the user's progression through the application, with detailed notes showing how they work. For many types of functionality, especially UI-heavy functionality, once you have these storyboards, you're done. That's your spec. Jason Fried, you can go now.
To learn how to write good functional specifications, read my four part series. If you want to see a typical spec I wrote, you can download the full Fog Creek Copilot spec.
For more complex functionality with hidden behavior that's not expressed in the UI storyboards, you're going to want more details written down. In any case, the very act of writing down a spec helps you discover problems, conflicts, and design issues long before the first line of code is written, so when you do write the code, you have far fewer unexpected issues popping up which might force a rewrite or, worse, a suboptimal design.
How do you learn to be a Program Manager?
Mostly, becoming a program manager is about learning: learning about technology, learning about people, and learning how to be effective in a political organization. A good program manager combines an engineer's approach to designing technology with a politician's ability to build consensus and bring people together. While you're working on that, though, there are a few books you should read:
As far as I can tell, Scott Berkun's book Making Things Happen is the only book that's been written that pretty much covers exactly what a program manager has to do, so start with that. Scott was a program manager on the Internet Explorer team for many years. 
Another big part of the program manager's job is user interface design. Read Steve Krug's Don't Make Me Think, then my own book User Interface Design for Programmers.
Finally, and I know it sounds cheesy, but Dale Carnegie's 1937 book How to Win Friends & Influence People is actually a fantastic introduction to interpersonal skills. It's the first book I make all the management trainees at Fog Creek read, before anything else, and they always snicker when I tell them to read it, and love it when they're done.
	"
https://www.joelonsoftware.com/2009/04/29/talk-about-stackoverflow/,Talk about StackOverflow,2009-04-29T00:12:56+00:00,2018-04-19T21:52:09+00:00,Joel Spolsky,"Stack Overflow, News","
	Here's a video of a talk I gave at Google last week about StackOverflow.
	"
https://www.joelonsoftware.com/2009/04/07/the-business-of-software-2009-speaker-lineup/,The Business of Software 2009 speaker lineup,2009-04-07T00:12:55+00:00,,Joel Spolsky,News,"
	Three years ago, I was invited to New Zealand to speak at Webstock, the local web conference. Now, let me tell you honestly, I go to a lot of these conferences, and the speakers are often saying the same things, or I've heard them before, so it's hard for me to sit still when the other speakers are talking.
But once in a while, someone gets up and just blows me away. I'm absolutely riveted and I start scribbling notes furiously. One or two good speakers like that, and you've got a conference that's worth going to. In Wellington, New Zealand, it was Kathy Sierra. Kathy co-created those Head First programming books with all the crazy pictures and diagrams and the cover stock photography of cool-looking models taken from a very high angle. Kathy used to write a blog called Creating Passionate Users which, though dormant, is still awesome. At Webstock, she got up and started talking about brains and lions and all kinds of things and it was the most amazing speech I ever heard.
So I'm incredibly excited to announce that Kathy will be speaking at this year's Business of Software conference (Nov 9-11, San Francisco).
And it's not just Kathy. Neil and I share a philosophy that instead of doing a conference with one or two keynote speakers and a lot of filler, we want to have a conference where every speaker is worth going out of your way to hear. With any one of these speakers, it'd be worth going to this conference. With all of them, it's a once-in-a-lifetime opportunity.
We've got Geoffrey Moore. His seminal book Crossing the Chasm discovered the problem growing high tech companies making the leap from the early adopters to the mainstream. You won't find many successful startup founders that haven't read and learned from Moore.
We've got Don Norman, author of The Design of Everyday Things, one of the most influential books about usability in the history of the field.
We've got Paul Graham, who created one of the first internet ecommerce sites, who invented a spam filtering algorithm that has kept our inboxes relatively clean, and who has inspired and funded a whole generation of entrepreneurs through his seed investment fund Y Combinator.
We've got Heidi Roizen, who co-founded T/Maker, a PC software company that she grew to over 100 employees, and is now CEO of SkinnySongs. 
We've got Jennifer Aaker, a professor of marketing at Stanford, Michael Lopp, a.k.a. Rands in Repose, who wrote the book on managing humans at high tech companies.
I'm just getting warmed up. You'll also hear from Ryan Carson, Paul Kenny, Dharmesh Shah, and the mysterious entity known only as The Cranky Product Manager. 
I'll be speaking, too. 
I've never seen anything like this ... a one-track conference with two and a half days of awesome speakers, every one of whom would be worth going to San Francisco to hear. This one will sell out. The conference is $1995, but the next 65 people to register save $500, so register sooner rather than later.
	"
https://www.joelonsoftware.com/2009/04/03/win32-programmer-needed/,Win32 programmer needed,2009-04-03T00:12:54+00:00,,Joel Spolsky,News,"
	We're always looking for good programmers at Fog Creek, but right now we could really, really use a top notch Win32 (C/C++) developer to join the Copilot team. I know you're out there. Apply now! Thanks!
 
	"
https://www.joelonsoftware.com/2009/04/01/fog-creek-compensation-system/,Fog Creek Compensation System,2009-04-01T00:12:53+00:00,,Joel Spolsky,News,"
	This month, I wrote up a brief description of Fog Creek's compensation system for Inc. I also posted the Fog Creek professional ladder which is used to compute everyone's level and thus determines their base salary.
 
	"
https://www.joelonsoftware.com/2009/05/29/server-fault-now-in-public-beta/,Server Fault now in public beta,2009-05-29T00:12:59+00:00,2018-04-19T21:53:16+00:00,Joel Spolsky,"Stack Overflow, News","
	Server Fault is now in public beta!
When Jeff Atwood and I launched Stack Overflow last fall, we really wanted it to be a site for and by programmers. But the engine behind the site, the Q&A engine with voting, editing, and tagging, could obviously be used in a lot of other professions.
The first field we picked is close to our heart: system and network administration; as programmers, we often end up doing system administration ourselves. And it's the perfect domain for a Q&A engine... there are a million detailed problems that depend highly on lore to get right. There's no way to accidentally discover aspnet_regiis.exe -I until someone shows you the trick. How much time have you wasted trying to figure out which process is holding a file open preventing you from deleting an otherwise empty directory? Can you use dd to clone a disk drive?
Thus, Server Fault. If you already have a Stack Overflow account, you're all set up, although your reputation score, badges, and favorite tags are separate. It has all the great features from Stack Overflow which I talked about at Google last month (video).
Jeff: ""I am sorry to inform you that you may be a system administrator or IT professional.""
	"
https://www.joelonsoftware.com/2009/05/12/stack-overflow-devdays/,Stack Overflow DevDays,2009-05-12T00:12:58+00:00,2018-04-23T21:54:47+00:00,Joel Spolsky,News,"
	Stack Overflow has been going nuts-after just six months in business, we've had 3.5 million unique visitors per month. We've starting thinking about how to get that great tribe of developers together in the real world.
We decided to launch a series of Stack Overflow events: the first gathering of the tribe of great developers making Stack Overflow so successful that over 90% of questions get answered
.
It's going to be in October, in five ten separate cities. In each city, we're planning a one-day event.
We decided to cram as many diverse topics as possible into a single day event. Like a tasting menu at a great restaurant, we'll line up six great speakers in each city.
This is not going to be just a Java conference or a .NET conference or a Ruby conference. This will be completely ecumenical. We'll have somebody to introduce Microsoft's new web framework, ASP.NET MVC, but we'll also get someone to talk about writing code for Google's new mobile operating system, Android. And in each city, we'll find one local computer science professor or graduate student to tell us about something new and interesting in academia.
For smart programmers who are interested in learning about something a little bit outside of their own immediate field, this is the conference for you. We're doing it in the spirit of Byte Magazine. Remember Byte? Every issue covered a wide range of topics and technologies. Sadly, Byte disappeared, to be replaced by Mac-only magazines, IBM-PC only magazines, even Microsoft SQL Server-only magazines.
The conference is for programmers. The conversation is going to be hard core. Speakers are going to be writing code.
Putting on these conferences is really expensive-conference centers can charge you $1000 for one urn of coffee. That's why typical developer conferences can cost $1500, plus travel, hotel, and $73 for the Internet access in your hotel room. With the current worldwide recession, that just isn't gonna fly. Many great conferences, like SD West, have been cancelled. Attendance is way down at the conferences that survive.
So I got together with Ryan Carson, whose company, Carsonified, has been putting on great conferences like FOWA, and we tried to figure out how little we could possibly charge for this thing. The answer: $99 per attendee.
That's it. These one day conferences are just $99. You can bring your whole team for less than the cost of a normal conference.
We're doing it in five cities, so you may not even have to travel. We've got room for just 300 developers in each city:
October 19 San Francisco SOLD OUT 
October 21 Seattle SOLD OUT 
October 23 Toronto SOLD OUT 
October 26 Washington, DC SOLD OUT 
October 28 London SOLD OUT 
Update! Due to popular demand, we've added five more cities:
October 7 Boston
October 14 Austin
October 16 Los Angeles
October 30 Cambridge, UK
November 2 Amsterdam
Register for Stack Overflow DevDays right now. Given the huge demand and the limited number of tickets, I expect all five cities will sell out pretty much instantly.
OK, here's the FAQ:
Who will be speaking?
I'll be speaking in every city. Jeff Atwood will appear in San Francisco only. We will line up about six speakers in every city.
What will be the topics?
The topics haven't been nailed down yet and depend on speaker availability. I'll do my best to get speakers on as many of the following topics as possible:
Android
Objective C and iPhone development
Google App Engine
Python
jQuery
ASP.NET MVC
FogBugz 7.0
Mercurial and Distributed Version Control
Each talk will be fairly introductory but will be intended for advanced developers. If you already know about a topic, say, iPhone development, you can wander outside and hang out with the other iPhone developers in the hallways.
Is this the same in every city?
Not exactly. Some topics will be repeated-my talk will be the same in all five cities-but we may not have the exact same topics and speakers in each city. We aim to have at least one local speaker in each city.
I'm hungry!
Me too. I'm always hungry. Breakfast, lunch, and afternoon tea are included in the price of the ticket. Half of the fun of this conference will be meeting other Stack Overflow members.
Where are the events?
We haven't booked halls yet. The exact location will be announced. There is a small chance we may have to adjust a date a little bit if we have trouble booking a space.
Note: If your company is in one of these cities, and has a presentation space that is suitable for 300 people, we'd love to have you as a sponsor. Please email devdays@stackoverflow.com.
What should I wear?
Make a T-shirt with your StackOverflow identity and reputation (see sample at right). You can order them here or make your own.
Are there academic discounts?
There are a very limited number of subsidized student tickets at $10. Due to the cost of putting on the event, I regret that there are only a limited number of student tickets in each city.
How can I help?
Ah! Thank you for asking. We need lots of help to pull this all together.
We need volunteers in each city. If you live in one of these five cities, and would be able to help check tickets and just generally be useful during the conference, please email devdays@stackoverflow.com.
We need sponsors for the meals and breaks. If your company would like to be a sponsor, please email devdays@stackoverflow.com. This is a great way to recruit superstar programmers: sponsors will have the opportunity to set up recruiting booths at the conference.
I have more questions.
That figures. Email them to (you guessed it) devdays@stackoverflow.com and Natasha at Carsonified will get back to you.
 
	"
https://www.joelonsoftware.com/2009/05/05/why-circuit-city-failed-and-why-bamph-thrives/,"Why Circuit City Failed, and Why B&H Thrives",2009-05-05T00:12:57+00:00,,Joel Spolsky,News,"
	""Even as competitors like Circuit City go bust, B&H remains packed with loyal customers. And that makes me very happy. For a business owner, there's nothing more satisfying than watching honest dealers expand their operations while the schmucks, with their going-out-of-business markups, go down the drain.""
From my Inc. column: Why Circuit City Failed, and Why B&H Thrives
	"
https://www.joelonsoftware.com/2009/06/23/the-eternal-optimism-of-the-clear-mind/,The eternal optimism of the Clear mind,2009-06-23T00:13:05+00:00,2016-12-05T19:42:00+00:00,Joel Spolsky,"Startup founder, News","
	Clear just closed down.
Here's how it worked while it was in business. You paid $200 for a one-year membership. You underwent a big, complicated background check to prove that you were extra-super-trustworthy.
In exchange, in a few big airports, you got to skip to the front of the TSA line for screening.
Now, you didn't skip the screening itself. You still went through the X-ray machine and had to remove your shoes, belt, pocket contents, laptops, and plastic quart ziplock bag of toiletries.
You just got to cut to the front of the line.
A few people signed up. In certain airports, it was, indeed, worth actual money to cut to the front of the line.
This wasn't Clear's actual business plan. The actual business plan was that Clear would do detailed background checks on travellers, who would then be trusted to bypass security completely because they were extra-super-trustworthy.
Now, the TSA doesn't even trust pilots, who go through the same screening as the rest of us to make sure they're not bringing something extraordinarily dangerous onto a plane like a 3.5 oz bottle of shampoo. Because, of course, with a little bottle of shampoo, they could make a bomb, which they could use to fly the plane they are piloting into a building, something that is impossible for mere pilots sitting at the controls of the jet.
So as it turns out, the TSA never actually agreed to go along with this skipping-the-screening thing, and ultimately, all Clear was allowed to do was get you to the front of the line.
At this point, and here's the interesting part, at this point, a rational businessperson would say, ""Well, does the Clear idea still make sense if we can't actually let you skip the screening?""
OK, maybe it still makes sense to charge to skip to the front of the line. Maybe there's a business model in that.
In that case, though, why did they still do background checks? It doesn't make any sense.
The environment changed. It turns out that Clear's business model of prescreening wasn't going to be possible. But they kept doing it anyway. What kind of organizational dysfunction does it take to completely ignore the changed circumstances and keep at a money-losing business?
What's even funnier is that Clear could probably have been profitable if they had just skipped the one unnecessarily stupid part of their business model: the detailed background checks on all their customers.
Nobody at Clear did any thinking. They had a business model, the business model wasn't actually possible, everybody knew it, and they still plugged away at it. Thoughtless optimism. I don't know whether to salute 'em or laugh.
	"
https://www.joelonsoftware.com/2009/06/10/platform-vendors/,Platform vendors,2009-06-10T00:13:04+00:00,,Joel Spolsky,News,"
	Dave Winer (in 2007): ""Sometimes developers choose a niche that's either directly in the path of the vendor, or even worse, on the roadmap of the vendor. In those cases, they don't really deserve our sympathy.""
iSmashPhone: 15 Apps Rendered Obsolete By The New iPhone 3GS
When independent software developers create utilities, add-ons, or applications that fill a hole in their platform vendor's offering, they like to think that they're doing the vendor a huge favor. Oh, look, the iPhone doesn't have cut and paste, they say. Business opportunity! They might imagine that this business will be around forever. Some of them even like to daydream about the platform vendor buying them up. Payday!
The trouble is that only a tiny percentage of iPhone users are going to pay for that little cut and paste application. With any kind of add-on, selling to 1% of the platform is a huge success.
For Apple, that's a problem. That means that the cut and paste problem isn't solved for 99% of their customers. They will solve it, if it's really a problem. And you'll be out of business.
Filling little gaps in another company's product lineup is snatching nickels from the path of an oncoming steam roller.
A good platform always has opportunities for applications that aren't just gap-fillers. These are the kind of application that the vendor is unlikely ever to consider a core feature, usually because it's vertical - it's not something everyone is going to want. There is exactly zero chance that Apple is ever going to add a feature to the iPhone for dentists. Zero.
	"
https://www.joelonsoftware.com/2009/06/10/a-visit-to-microsoft-and-google/,A visit to Microsoft and Google,2009-06-10T00:13:03+00:00,,Joel Spolsky,News,"
	From my latest Inc. column: ""Giant corporations such as Google and Microsoft are like cities full of relatively anonymous people: You don't actually expect to see anyone you know as you walk around. Going to lunch on either campus is like going to the cafeteria at a huge university. The other 2,000 students seem nice, but you don't know most of them well enough to sit with them. Meanwhile, a typical lunchtime at my company is like Thanksgiving dinner: There's a big meal you get to share with a bunch of people you know and like.""
	"
https://www.joelonsoftware.com/2009/06/10/conferences-in-new-york/,Conferences in New York,2009-06-10T00:13:02+00:00,2018-04-23T21:55:49+00:00,Joel Spolsky,News,"
	Andrew emailed to ask why we don't have a StackOverflow DevDays day in New York City. That's a fair question! There's a big software development community here.
There are two reasons New York is low on my list. The first is cost. Hotels, venues, and catering are prohibitively expensive in New York. At a medium-class hotel, say, the Marriott on the East Side, giving everybody one coffee break with coffee, tea, soft drinks, and nothing to eat costs $23 per person [PDF]. It's simply impossible to do a $99 one-day event in New York.
The other reason is attendance. I don't know why, but techies in New York just don't turn out for events at the same level as other cities. When we did the FogBugz world tour we had three times as many attendees in London as New York. Maybe New Yorkers are extra busy. But turnout is always surprisingly thin in the city.
It's a particularly bad place to do tech conferences, too. Hotels are $600-$700 a night. Everything about putting on a conference is remarkably expensive. And half of your attendees wander off to visit the Statue of Liberty when they should be in your Python tutorial meeting.
	"
https://www.joelonsoftware.com/2009/06/09/stackoverflow-devdays-five-new-cities/,StackOverflow DevDays: Five New Cities,2009-06-09T00:13:01+00:00,2018-04-23T22:10:11+00:00,Joel Spolsky,News,"
	Whoa. Less than a month ago, we announced first Stack Overflow DevDays and opened registration to 300 people in each of five cities.
Well, that sold out pretty quickly. Ryan Carson, who is taking care of all the conference logistics, was pretty sure we'd be able to book larger event spaces, so we allowed even more people to register... we've got 2388 people booked worldwide so far, including over 800 in London, but it's clear that with just five events we weren't going to be able to accomodate all the people who want to spend a day meeting online Stack Overflow friends in real life and learning a little something about some hot new programming topics.
So, we decided to take the show to five more cities. Here's the new schedule-click on a city to register:
Oct 07 Boston NEW!
Oct 14 Austin NEW!
Oct 16 Los Angeles NEW!
Oct 19 San Francisco
Oct 21 Seattle
Oct 23 Toronto
Oct 26 Washington DC
Oct 28 London
Oct 30 Cambridge, UK NEW!
Nov 02 Amsterdam NEW!
Tickets are $99 in the US, 84 euro.75 in Amsterdam and 85 pounds.00 in the UK. A limited number of very cheap student tickets are available. If you already booked but want to change cities, email devdays@stackoverflow.com.
In the meantime, I've been working hard lining up speakers. I'll be speaking myself in all ten cities, as this will be the launch event for FogBugz 7 and a new product now under development by the Fog Creek summer interns, who just arrived and are already coding away earnestly. Jeff Atwood will be speaking in San Francisco. Scott Hanselman will be speaking in San Francisco and Seattle. Jon Skeet will be speaking in London. The basic agenda should, more or less, include: Android, Python, Google App Engine, iPhone development, ASP.NET MVC, jQuery, FogBugz, Mercurial and DVCS, and a different speaker from academia in each city. There will be lunch, two breaks, and we'll organize some kind of birds-of-a-feather post-conference meetups.
Anyway, at the current rate, it's pretty clear these conferences will sell out long before the events themselves, so don't wait until the last minute to decide.
	"
https://www.joelonsoftware.com/2009/06/03/get-a-job/,Get a job,2009-06-03T00:13:00+00:00,2018-04-19T21:53:16+00:00,Joel Spolsky,"Stack Overflow, News","
	The Joel on Software Job Board has been working well since we launched it almost three years ago. It logs about 220,000 unique visitors every 21 days, including many passive job seekers who have RSS subscriptions.
But a few employers place ads and just don't find anyone. I'm pretty sure we're the only job listing service in the world with an unconditional money back guarantee, so these people call us and we give them their money back. It's not a lot, usually just two or three a month, but I'd still prefer to have a wider audience for these job listings as long as it didn't diminish the quality of resumes.
In the meantime, Stack Overflow has been attracting a huge community of smart developers-we're running over 3.7 million unique visitors a month.
So today we're launching a new Stack Overflow job board and a Server Fault job board, which will both be linked up with the Joel on Software job board. Any ad placed on one appears on all three sites. This will be a great way to recruit great programmers and a great place to get great jobs.
It's not much of a secret, but Stack Overflow is already a great place to find good programmers, because you can see how good people really are by reading the answers that they post. I've noticed a lot of people putting their Stack Overflow reputations on their resumes, and we're starting to hear stories of people who got jobs through the site. Jeff and I are committed to building features to make this easier in the next ""six to eight"" weeks. For example, I've always hated traditional resumes, which just don't give the right kind of information about a candidate. If you wanted to hire an iPhone developer, would you rather know that person's Stack Overflow stats in the iPhone tag and read their answers to technical questions? Or would you rather know where they went to college?
If we pull this off, getting jobs in the tech industry will be a lot saner.
In the meantime, if you are hiring, do yourself a favor and try placing an ad on Stack Overflow. (FAQ) If you're looking for a job, check out the listings.
	"
https://www.joelonsoftware.com/2009/07/31/seth-godin-at-the-business-of-software-conference/,Seth Godin at the Business of Software Conference,2009-07-31T00:13:11+00:00,,Joel Spolsky,News,"
	Seth Godin: ""If you're going to interrupt everybody with an ad, it better be something everybody wants to buy. So what do you end up with? Average products for average people.""
If you've ever heard Seth speak, you've had your mind blown. Which is why, on the rare occasion, when he runs a one-day seminar, he charges $1650 to attend, and it sells out in seconds.
At last year's Business of Software conference, Seth's keynote was the highlight of the show. Thanks to a very generous offer by Seth, you can watch the full hour online.
	"
https://www.joelonsoftware.com/2009/07/23/the-day-my-industry-died/,The Day My Industry Died,2009-07-23T00:13:10+00:00,,Joel Spolsky,News,"
	""Every single industry was going to be turned upside down! New industries would be created! Start-ups would make people rich! Which is really nice, because it's awesome to be rich! And, bonus: It'll never be winter again!""
In this month's Inc. column, The Day My Industry Died, I retell the first part of the Fog Creek story.
	"
https://www.joelonsoftware.com/2009/07/23/web-startup-success-guide/,Web Startup Success Guide,2009-07-23T00:13:09+00:00,,Joel Spolsky,News,"
	Congratulations to Bob Walsh on publishing his Web Startup Success Guide (to which I wrote the foreword). His interview with GTD Guru David Allen, which is chapter 8, can be read online.
	"
https://www.joelonsoftware.com/2009/07/23/ebs-20/,EBS 2.0,2009-07-23T00:13:08+00:00,,Joel Spolsky,News,"
	Brett Kiefer describes Evidence Based Scheduling 2.0 on the FogBugz Blog: ""EBS 2.0 gives you the vocabulary of strict dependencies and start dates. You can now say 'No one can travel back in time until the Flux Capacitor is complete and the duped terror cell steals the plutonium.'""
	"
https://www.joelonsoftware.com/2009/07/20/fruity-treats-customization-and-supersonics-fogbugz-7-is-here/,"Fruity treats, customization, and supersonics: FogBugz 7 is here",2009-07-20T00:13:07+00:00,,Joel Spolsky,"Fog Creek Software, News","
	A year ago today, FogBugz development was in disarray.
The original roadmap was too complicatedWe had done this big offsite at a beach house in the Hamptons and came up with a complicated roadmap that involved splitting FogBugz into two separate products and two separate teams. We had done a lot of work on the architecture that made the product much more modular, but we had this goofy plan to do a major release containing virtually no new features, just to let the new architecture shake out, a plan which nobody was very excited about.
So, on July 31, 2008, we reset our plans. We gave up on the idea of shipping a standalone Wiki product, and merged the Wiki team with the FogBugz team. And we nailed down a new vision for FogBugz 7 that's a lot easier to understand and a much better product: something we could ship in one year.
Then the development team shipped it. Exactly on schedule. Well, maybe a week or two early. They used Evidence Based Scheduling religiously on this large one year project and it worked amazingly well. Yes, they had to cut and trim features as they went along, but the accuracy of the estimates also gave them the confidence to add a couple of major features (like Scrum support) that you'll love.
One of the best things we did as a development team was to write a short, concise, comprehensible vision statement that got everybody exactly on the same page about what we were going to do over the course of a year. The vision statement made it easy to prioritize. Instead of just telling us what was in the product, it also gave us a way to know what was out.
Here's the vision statement, in its entirety, which is a pretty good description of what we are actually shipping today. Please excuse the tone of voice; remember that this was an internal document to galvanize the team.
Fog Creek Confidential
FogBugz 7
As of August, 2008, the entire FogBugz and Weeble teams are working towards a single major new release of FogBugz that will blow away our customers (real and imaginary). When they see it they will grow weak in the knees. Competitors will shiver in fear at the monumental amount of win in this release. As customers evaluate the software, they will simply never find a reason not to use FogBugz to run their software teams. No matter what the grumpy people on their team come up with, they'll find that not only have we implemented it in FogBugz, we've done it in a FULL-ASSED way. No more HALF-ASSED features (I'm looking at you, logo customization in FogBugz 6.1). 
This release has three important focus areas with friendly catchnames.
fruity treats
customization
supersonics
If it's NOT ON THAT LIST it's NOT IN THE PRODUCT. Get used to it.
fruity treats
FogBugz 7.0 will include a long list of simple improvements that will make life dramatically easier for people trying to get things done, especially when they want to do things just a wee bit differently than we do here in the Land of the Fog. Every little feature will be a delight for somebody, especially that person who keeps emailing us because he can't believe that the feature he wants which is obviously only six lines of code hasn't been implemented in FogBugz 1.0, 2.0, 3.0, 4.0, ""4.5"", or 6.0, and if we don't get it soon he JUST MIGHT HAVE TO GO OVER TO THE AUSTRALIANS.
Collectively, though, fruity treats will make FogBugz friggin' amazing, and they'll help us win more sales because we won't have so many showstopper reasons why people choose another so-called bug ""tracker.""
What's a fruity treat? It must fit these three rules to get into the 7.0 orchard:
It must be something customers and potential customers are asking about all the time
There must not be a trivial, easy workaround in 6.1
It must be relatively easy for us to implement. No big earth-shaking new features will sneak in.
""Three rules,"" I said. Not four. Why is there a 4 here?
Visit the shared filter FogBugz 7 Fruity Treats to see what's coming up.
customization
FogBugz 7.0 will include our smashingly powerful new plug-in archicture, which, combined with the FogBugz API, will give people complete confidence that if there's anything FogBugz can't do out of the FogBox, you can write it yourself. No more will we tell customers ""you get the source code, so you can modify it!"" That's BS. They know perfectly well that if they modify our source code, terribobble tragedies will occur the minute we release a service pack. From now on, we can say, ""there's a great plug in architecture and a whole online cornucopia of righteous plug-ins available for download.""
So you can trick out your FogBugz installation like a lowrider or an off-road dune buggy. You can make it into a Cadillac or a space shuttle. It's up to you.
supersonics
Thanks to the newfangled, all-electronic compilation machine (""Wasabi"") that we had installed at great expense, FogBugz will be running on the CLR and Mono for greatly improved performance and compatibility. Whiz zip blip! bleep! You'll be able to run 1000s of users on one server. Long queries will finish faster. Laundry will be brighter.
and that is it.
Nothing else. Go fix yourself an icy lemonade.
The team got pretty excited. Having a sharp focused vision statement like that, and having the whole team working towards a single shared goal, really helped us get our house in order. We scrubbed through thousands of backlogged ideas, feature requests, and comments, and came up with a set of fruity treats that will eliminate virtually every customer objection that we hear during the sales process. We developed a comprehensive plug-in architecture that's pretty amazing, and had interns develop a slew of slick plug-ins. And the fact that Wasabi is now a genuine .NET language made for substantial performance improvements over running on the VBScript ""runtime.""
I'll let the team give you a comprehensive look at what's new in FogBugz 7, but here are some of the highlights:
Subcases: organize your work hierarchically
EBS can track the schedule of developers who work on multiple projects
EBS also now has dependencies (work on X can't start until Y is complete)
Scrum is fully supported, with project backlogs and EBS-powered burndown charts
Just about the slickest implementation of tags you've ever seen
Plug-ins, with comprehensive support throughout the product
Customizable workflow
Lots of visual improvements and small usability enhancements
A context menu in the grid saves steps
Easier case entry right from the grid
Auto complete in case fields, so you don't have to remember case numbers
Custom fields (Yes. They tied me up in a closet.)
URL triggers (FogBugz will hit a URL you specify when certain events happen)
Easier administration, through an administrator dashboard, and a feature for cloning users and creating a list of new users all at once
Much better performance, including substantial caching that speeds up display of email, EBS calculations, and more
Those are just the big-ticket items. FogBugz 7 is rife with little areas where the development team put a ridiculous amount of attention to detail. For example, the signup process, which is actually very complicated on the backend, became much simpler on the front end, due to a heroic amount of work that every user will only see once. If you do nothing else, check out the signup process to see the effort that went into making signup just a tiny bit faster. Another example: we completely replaced the entire email processing infrastructure, just because there were tiny corner case bugs that simply could not be solved with the commercial class library we had been using.
Tyler Griffin Hicks-WrightI wish I could take more credit for it, but the truth is, Fog Creek has grown. We have a very professional team with testers, program managers, and developers, and I just sort of sit here agog at what a brilliant job they're doing. All of the credit for this fantastic new product goes to them. I'm just the Michael Scott character who wastes everybody's time whenever I venture out of my office.
FogBugz 7 is shipping today for Windows servers and on our own, hosted infrastructure. The Mono version (for Macintosh and Linux) will be in beta soon. To try it, go to try.fogbugz.com.
If you're currently using FogBugz on Demand, you're already using 7.0.
If you run FogBugz on your own server and have an up-to-date support contract, the upgrade is free, otherwise, bring your support contract up-to-date and you'll be good to go.
	"
https://www.joelonsoftware.com/2009/07/09/why-wolfram-alpha-fails/,Why Wolfram Alpha fails,2009-07-09T00:13:06+00:00,,Joel Spolsky,News,"
	Mencius Moldbug: ""They create an incomplete model of the giant electronic brain in their own, non-giant, non-electronic brains. Of course, since the giant electronic brain is a million lines of code which is constantly changing, this is a painful, inadequate and error-prone task.""
	"
https://www.joelonsoftware.com/2009/08/13/new-startup-incubator-in-cambridge-england/,"New startup incubator in Cambridge, England",2009-08-13T00:13:12+00:00,,Joel Spolsky,News,"
	 Red Gate Software has launched a startup incubator in Cambridge. Free office space, internet access, room, board, advice, and pocket money. (I'm one of the people giving advice). For a first, it's really free; Red Gate isn't taking stock in the companies it helps. ""We think that getting to know smart people doing interesting things will, in the long term, be good for Red Gate. In the future, we might end up licensing your technology, investing in your company or maybe even buying it. Or maybe we won't. Ultimately, all deals come down to relationships. So we want to build them."" 
	"
https://www.joelonsoftware.com/2009/09/23/the-duct-tape-programmer/,The Duct Tape Programmer,2009-09-23T00:13:16+00:00,,Joel Spolsky,"New developer, News","
	Jamie Zawinski is what I would call a duct-tape programmer. And I say that with a great deal of respect. He is the kind of programmer who is hard at work building the future, and making useful things so that people can do stuff. He is the guy you want on your team building go-carts, because he has two favorite tools: duct tape and WD-40. And he will wield them elegantly even as your go-cart is careening down the hill at a mile a minute. This will happen while other programmers are still at the starting line arguing over whether to use titanium or some kind of space-age composite material that Boeing is using in the 787 Dreamliner.
When you are done, you might have a messy go-cart, but it'll sure as hell fly.
I just read an interview with Jamie in the book Coders at Work, by Peter Seibel. Go buy it now. It's a terrific set of interviews with some great programmers, including Peter Norvig, Guy Steele, and Donald Knuth. This book is so interesting I did 60 minutes on the treadmill yesterday instead of the usual 30 because I couldn't stop reading. Like I said, go buy it.
Go! I'll wait. 
Here is why I like duct tape programmers. Sometimes, you're on a team, and you're busy banging out the code, and somebody comes up to your desk, coffee mug in hand, and starts rattling on about how if you use multi-threaded COM apartments, your app will be 34% sparklier, and it's not even that hard, because he's written a bunch of templates, and all you have to do is multiply-inherit from 17 of his templates, each taking an average of 4 arguments, and you barely even have to write the body of the function. It's just a gigantic list of multiple-inheritance from different classes and hey, presto, multi-apartment threaded COM. And your eyes are swimming, and you have no friggin' idea what this frigtard is talking about, but he just won't go away, and even if he does go away, he's just going back into his office to write more of his clever classes constructed entirely from multiple inheritance from templates, without a single implementation body at all, and it's going to crash like crazy and you're going to get paged at night to come in and try to figure it out because he'll be at some goddamn ""Design Patterns"" meetup.
And the duct-tape programmer is not afraid to say, ""multiple inheritance sucks. Stop it. Just stop."" 
You see, everybody else is too afraid of looking stupid because they just can't keep enough facts in their head at once to make multiple inheritance, or templates, or COM, or multithreading, or any of that stuff work. So they sheepishly go along with whatever faddish programming craziness has come down from the architecture astronauts who speak at conferences and write books and articles and are so much smarter than us that they don't realize that the stuff that they're promoting is too hard for us.
Here's what Zawinski says about Netscape: ""It was decisions like not using C++ and not using threads that made us ship the product on time.""
Later, he wrote an email client at Netscape, but the team that was responsible for actually displaying the message never shipped their component. ""There was just this big blank rectangle in the middle of the window where we could only display plain text. They were being extremely academic about their project. They were trying to approach it from the DOM/DTD side of things. 'Oh, well, what we need to do is add another abstraction layer here, and have a delegate for this delegate for this delegate. And eventually a character will show up on the screen.'""
Peter asked Zawinski, ""Overengineering seems to be a pet peeve of yours.""
""Yeah,"" he says, ""At the end of the day, ship the fucking thing! It's great to rewrite your code and make it cleaner and by the third time it'll actually be pretty. But that's not the point-you're not here to write code; you're here to ship products.""
My hero.
Zawinski didn't do many unit tests. They ""sound great in principle. Given a leisurely development pace, that's certainly the way to go. But when you're looking at, 'We've got to go from zero to done in six weeks,' well, I can't do that unless I cut something out. And what I'm going to cut out is the stuff that's not absolutely critical. And unit tests are not critical. If there's no unit test the customer isn't going to complain about that.""
Remember, before you freak out, that Zawinski was at Netscape when they were changing the world. They thought that they only had a few months before someone else came along and ate their lunch. A lot of important code is like that.
Duct tape programmers are pragmatic. Zawinski popularized Richard Gabriel's precept of Worse is Better. A 50%-good solution that people actually have solves more problems and survives longer than a 99% solution that nobody has because it's in your lab where you're endlessly polishing the damn thing. Shipping is a feature. A really important feature. Your product must have it.
One principle duct tape programmers understand well is that any kind of coding technique that's even slightly complicated is going to doom your project. Duct tape programmers tend to avoid C++, templates, multiple inheritance, multithreading, COM, CORBA, and a host of other technologies that are all totally reasonable, when you think long and hard about them, but are, honestly, just a little bit too hard for the human brain. 
Sure, there's nothing officially wrong with trying to write multithreaded code in C++ on Windows using COM. But it's prone to disastrous bugs, the kind of bugs that only happen under very specific timing scenarios, because our brains are not, honestly, good enough to write this kind of code. Mediocre programmers are, frankly, defensive about this, and they don't want to admit that they're not able to write this super-complicated code, so they let the bullies on their team plow away with some godforsaken template architecture in C++ because otherwise they'd have to admit that they just don't feel smart enough to use what would otherwise be a perfectly good programming technique FOR SPOCK. Duct tape programmers don't give a shit what you think about them. They stick to simple basic and easy to use tools and use the extra brainpower that these tools leave them to write more useful features for their customers.
One thing you have to be careful about, though, is that duct tape programmers are the software world equivalent of pretty boys... those breathtakingly good-looking young men who can roll out of bed, without shaving, without combing their hair, and without brushing their teeth, and get on the subway in yesterday's dirty clothes and look beautiful, because that's who they are. You, my friend, cannot go out in public without combing your hair. It will frighten the children. Because you're just not that pretty. Duct tape programmers have to have a lot of talent to pull off this shtick. They have to be good enough programmers to ship code, and we'll forgive them if they never write a unit test, or if they xor the ""next"" and ""prev"" pointers of their linked list into a single DWORD to save 32 bits, because they're pretty enough, and smart enough, to pull it off.
Did you buy Coders at Work yet? Go! This was just the first chapter!
	"
https://www.joelonsoftware.com/2009/09/08/countdown-challenge/,Countdown challenge,2009-09-08T00:13:15+00:00,2018-04-23T21:55:45+00:00,Joel Spolsky,News,"
	This month we're starting to get organized for StackOverflow DevDays, a series of one-day, mini conferences in ten different cities. Because of the packed schedule, keeping on time is very important, so I want to have a full-screen countdown application that we can run during intermissions warning people when we're going to resume. We'll put this up on the main screen and hopefully that will encourage people to sit down and be quiet on time. I thought this would be a great opportunity to showcase the StackOverflow community's programming talent, so I posted a little contest over on meta.
	"
https://www.joelonsoftware.com/2009/09/02/upcoming-startup-workshop-in-san-francisco/,Upcoming startup workshop in San Francisco,2009-09-02T00:13:14+00:00,,Joel Spolsky,News,"
	I'm organizing a half-day startup workshop in San Francisco. This would be a terrific event to attend if you've recently started a software company and feel dazed, confused, or just want to bounce ideas off of someone who's been there.
We'll keep it small so everybody gets a chance to be heard. Space is extremely limited.
It's a bonus supplement to the Business of Software conference, which is Nov. 9-11 in San Francisco.
Although the startup workshop itself is free, you do have to pay for for that conference, which is not free, in fact, it's kind of expensive (but totally worth every penny!) I know it's kind of expensive for very early stage startups, but trust me on this, it's worth it.
Here's what happens. After the main conference finishes up on Wednesday, we'll divide up into three groups. Each group will do three 90 minute workshops, moderated by:
Neil Davidson and Simon Galbraith, the founders of Red Gate Software. Red Gate is a software company in Cambridge, England, founded in 1999, which has now grown to about 160 people. It was founded with no VC and little debt. In 2006 it was Cambridge News business of the year and has been in the Sunday Times top 100 places to work for the last three years running. They've recently launched Springboard, an amazing startup incubator that provides advice, office space, free lunch, and pocket money, and takes no equity in return.
Joel Spolsky (oh wait that's me) and Michael Pryor, the founders of Fog Creek Software.
Dharmesh Shah, founder of HubSpot, a software platform for internet marketing. Previously he founded Pyramid Digital Solutions, a bootstrapped company acquired by SunGard. Most of you know him from his blog OnStartups.com or from the terrific talk he gave at last year's conference.
The format is very open. It's a chance to chat, bounce ideas around, ask questions, solve specific problems, get feedback, and learn from each other.
After the workshops we'll regroup with Jason Calacanis, who will do a live broadcast of his podcast This Week in Startups and take your questions live. Jason is on his third startup. The first, Silicon Alley Reporter, was the flagship magazine of New York City's short-lived dot com boom; after the crash of 2000 it closed down. His second startup was Weblogs Inc, the first really serious commercial blog network, which sold to AOL for an undisclosed sum (let's call it $25 million, shall we?) After turning netscape.com into a Digg clone, Jason spent some time at a fancy-pants VC firm, Sequoia Capital, where he hatched the idea for his current startup, Mahalo, which they funded. Anyway now he's got this terrific podcast and he'll be doing it live and we'll be his audience, so you'll have a rare chance to ask Jason questions in person and hear him pontificate.
Here's how to sign up.
If you haven't registered for BOS2009 yet, go do that. During the registration process, you'll see a checkbox that says ""I'd like to come to Joel's startup bootcamp"". It's not a bootcamp, really. You won't have to do pushups or work very hard. But check that box anyway.
If you already registered for BOS2009, follow this link. Click on ""Already Registered."" Log on, and look for the link that says Event Fees. Why does it say that? I don't know. After you click on that link you'll be able to check the box that says ""I'd like to come to Joel's startup bootcamp"". It's still not a bootcamp. Really. Bootcamp is where you run around in circles for 20 weeks without getting more than four hours of sleep a night while drill sergeants barely a year older than you foam at the mouth and berate you endlessly like that time Tom Hanks flips out at Bitty Schram in A League of Their Own. ""There's no crying in baseball!"" Anyway, NOT THAT AT ALL. This will be more of a friendly conversation with successful software startup founders. Not bootcamp.
Space is extremely limited: there will be three groups of 24 founders each. No more than two attendees per startup, please. See you in San Francisco!
	"
https://www.joelonsoftware.com/2009/09/01/being-number-one/,Being Number One,2009-09-01T00:13:13+00:00,,Joel Spolsky,News,"
	At last year's Business of Software conference, I gave a talk about designing products that are more than just adequate. How do you make a product that becomes a category-killer, number one, super hit? What is it that gives the Apple iPod 90% market share?
Neil Davidson has the video of my talk online (it's about 46 minutes).
This year's conference is going to be great. There are still a few tickets available. It's November 9th-11th in San Francisco. This is a conference that's all about terrific speakers: Geoffrey Moore, Don Norman, Paul Graham, Heidi Roizen, Jennifer Aaker, Michael Lopp (""Rands""), Ryan Carson, Paul Kenny, Dharmesh Shah, Kathy Sierra, Mat Clayton, and The Cranky Product Manager are all confirmed speakers. Register now before it's too late!
	"
https://www.joelonsoftware.com/2009/10/31/adam-bosworth-on-standards/,Adam Bosworth on standards,2009-10-31T00:13:19+00:00,,Joel Spolsky,News,"
	Adam Bosworth: ""All successful standards are as simple as possible, not as hard as possible."" Required reading.
	"
https://www.joelonsoftware.com/2009/10/26/capstone-projects-and-time-management/,Capstone projects and time management,2009-10-26T00:13:18+00:00,2018-04-23T21:11:34+00:00,Joel Spolsky,News,"
	It is amazing how easy it is to sail through a Computer Science degree from a top university without ever learning the basic tools of software developers, without ever working on a team, and without ever taking a course for which you don't get an automatic F for collaborating. Many CS departments are trapped in the 1980s, teaching the same old curriculum that has by now become completely divorced from the reality of modern software development.
Where are students supposed to learn about version control, bug tracking, working on teams, scheduling, estimating, debugging, usability testing, and documentation? Where do they learn to write a program longer than 20 lines?
Many universities have managed to convince themselves that the more irrelevant the curriculum is to the real world, the more elite they are. It's the liberal arts way. Leave it to the technical vocational institutes, the red-brick universities, and the lesser schools endowed with many compass points (""University of Northern Southwest Florida"") to actually produce programmers. The Ivy Leagues of the world want to teach linear algebra and theories of computation and Haskell programming, and all the striver CS departments trying to raise their standards are doing so by eliminating anything practical from the curriculum in favor of more theory.
Now, don't get me wrong, this isn't necessarily a bad thing. At least they're replacing Java with Scheme, if only because ""that's what MIT does."" (Too late!) And they are teaching students to think a certain way. And given how much the average CS professor knows about real-world software engineering, I think I'd rather have kids learn that stuff at an internship at Fog Creek.
Greg Wilson, an assistant professor at the University of Toronto, gave a talk at the StackOverflow DevDay conference in Toronto, which was entertaining, informative, and generally just a huge hit. We got to talking, and he told me about his latest brainchild, UCOSP, which stands for ""All The Good Names Are Taken.""
It's a consortium of 15 universities, mostly in Canada, which are organizing joint senior-year capstone projects. They're setting up teams of a half-dozen undergraduates from assorted universities to collaborate on contributing to an open source project, for credit and for a grade. As soon as I heard about the program I volunteered to sponsor a team to make a contribution to Mercurial. Sponsoring a team consists of offering to pay for a trip to Toronto for all the undergrads to get organized, and providing a programmer to mentor the team.
Browsing around the UCOSP blog, I was reminded of why student projects, while laudatory, frequently fail to deliver anything useful. ""One of the points of this course is to give you a chance to find out what it's like to set and then meet your own goals,"" Greg wrote. ""The net result is pretty clear at this point: in many cases, students are doing less per week on this course than they would on a more structured course that had exactly the same content.""
College students in their final year have about 16 years of experience doing short projects and leaving everything until the last minute. Until you're a senior in college, you're very unlikely to have ever encountered an assignment that can't be done by staying up all night.
The typical CS assignment expects students to write the ""interesting"" part of the code (in the academic sense of the word). The other 90% of the work that it takes to bring code up to the level of ""useful, real-world code"" is never expected from undergrads, because it's not ""interesting"" to fix bugs and deal with real-world conditions, and because most CS faculty have never worked in the real world and have almost no idea what it takes to create software that can survive an encounter with users.
Time management is usually to blame. In a group of four students, even if one or two of the students are enterprising enough to try to start early in the term, the other students are likely to drag their heels, because they have more urgent projects from other classes that are due tomorrow. The enterprising student(s) will then have to choose between starting first and doing more than their fair share of the work, or waiting with everyone else until the night before, and guess which wins.
Students have exactly zero experience with long term, team-based schedules. Therefore, they almost always do crappy work when given a term-length project and told to manage their time themselves.
If anything productive is to come out of these kinds of projects, you have to have weekly deadlines, and you have to recognize that ALL the work for the project will be done the night before the weekly deadline. It appears to be a permanent part of the human condition that long term deadlines without short term milestones are rarely met.
This might be a neat opportunity to use Scrum. Once a week, the team gets together, in person or virtually, and reviews the previous week's work. Then they decide which features and tasks to do over the next week. FogBugz would work great for tracking this: if you're doing a capstone project and need access to FogBugz, please let us know and we'll be happy to set you up for free. We can also set you up with beta access to kiln, our hosted version of Mercurial, which includes a code review feature.
I've been blaming students, here, for lacking the discipline to do term-length projects throughout the term, instead of procrastinating, but of course, the problem is endemic among non-students as well. It's taken me a while, but I finally learned that long-term deadlines (or no deadlines at all) just don't work with professional programmers, either: you need a schedule of regular, frequent deliverables to be productive over the long term. The only reason the real world gets this right where all-student college teams fail is because in the real world there are managers, who can set deadlines, which a team of students who are all peers can't pull off.
	"
https://www.joelonsoftware.com/2009/10/08/the-wifi-at-conferences-problem/,The “WiFi At Conferences” Problem,2009-10-08T00:13:17+00:00,2018-04-23T21:13:20+00:00,Joel Spolsky,News,"
	Why does WiFi work so poorly at tech conferences?
Marcus GriepI assume that WiFi wasn't really designed to handle a big ballroom with 2000 people, all trying to connect with their laptops and cell phones at the same time. Sometimes I feel like I'm lucky if it works in my apartment. So I never thought it was even possible to get it to work at a large, technically-savvy conference. At Stack Overflow DevDays, yesterday in Boston, the bandwidth seemed OK but the DHCP server ran out of addresses. This didn't seem to be something that anyone could fix. The conference organizers (er, me and Greg) were incredibly busy trying to, you know, organize the conference, so spending time tracking down the mysterious ISP and making them fix their router was impossible.
It's almost getting boring to read the conference reports complaining about this. Almost every conference, even the ones put on by fancy tech companies, has trouble. I never assume WiFi is going to work whenever I'm in a room with that many techies.
At the smaller conferences, the ones with, say, 300-1000 people, the trouble is that internet access is something of a black box. If you're a conference organizer, your first priority is finding a space-any space-because there usually aren't a lot of options. For example if you want to put on an event for 500 people in Seattle, there are probably 20 hotels that can accomodate you and maybe 10 other non-hotel venues. For the date you want, 3/4s of them are booked. You end up choosing between three options, if you're really lucky. The venue with the best Internet access would be nice, but there are so many other considerations that you don't really think about this when you're booking the space. Besides, all the venues tell you they have fantastic, soo-perb A-number-1 internet access. When you try to ask complicated questions and explain that your conference has a lot of techies, they say, yes, we understand, we have A-number-1 internet access, no problem very good. When you say, ""Yeah, but have you configured your DHCP server so that it has more than the default 254 IP addresses available to hand out,"" they have no idea what on earth you're talking about, and of course it turns out that they had some vendor, a company you've never heard of, provide their internet access. And half the time, that vendor installed a DSL line from the local telco and hooked it up to a LinkSys WRT54g they got at Costco, then installed some kind of crappola welcome-screen software just to make it even worse, and then disappeared.
Marcus GriepThere are steps that can be taken. Here's an interesting study [PDF] done by Intel about making WiFi work at large conferences. The best idea I got from that was that there should be as many hardwired network access points as possible, to get the heavy users off the air, because ethernet has way more bandwidth. There are companies that specialize in making WiFi systems that will support large conferences: one that I found is called Meraki; I don't know much about them but their website sure makes it seem like they understand the issues at least.
At the very least, though, a venue should be able to tell you how many access points they actually have (if it's just one, you've got problems), whether they are managed access points or not, whether dedicated ports with higher priority can be provided for the speakers and for journalists that do not share bandwidth with the audience, how many IP addresses the DHCP server can provide, the total number of people that can be online at once, and the amount of bandwidth available to the entire site. If you can't get good answers to these questions before the conference begins, you have to assume that they'll be running a single, consumer router connected to a DSL line and that's about all you get.
What are some of the best practices for conference organizers? What questions should they ask the conference venue or ISP to know, in advance, if the WiFi is going to work? What are the most common causes of crappy WiFi at conferences? Are they avoidable, or is WiFi simply not an adequate technology for large conferences? I thought I'd ask on ServerFault, so if you have any ideas, have at it!
	"
https://www.joelonsoftware.com/2009/11/05/upgrade-your-career/,Upgrade your career,2009-11-05T00:13:22+00:00,2018-04-19T21:54:39+00:00,Joel Spolsky,"Stack Overflow, News","
	Do you like your job?
Do you enjoy the people you work with? 
Would you want to have lunch with them? Every day? Alex Papadimoulis thinks that FogTyler Griffin Hicks-Wright Creek's free lunches are ""cultish,"" but everyone at Fog Creek loves them. Maybe it's the mandatory brain implant we install in each new worker, but I like to think that we just enjoy eating together because we genuinely like each other and like spending time together. If you can't imagine eating lunch every day with your coworkers, I hate to break it to you: you might not like them. Is it OK to spend most of your waking hours with people you don't like?
Do you actually enjoy doing your job? If you wake up an hour early in the morning, do you think, ""Yay! I can go in early and get another hour of work in!"" Or does that sound ridiculous to you?
Are you learning? When was the last time you had to learn a new skill? Is this year kind of like last year, or are you doing something new, stretching yourself, challenging yourself to be better?
At one of the recent DevDays events, I asked the audience (almost 100% programmers) how many of them were incredibly satisfied with their job, found it fulfilling, and were treated well by their employers. Only about 25% of the hands went up. I asked how many people either hated their job and couldn't wait to find something better, or were actually actively on the job market. Again, about 25%. The rest were somewhere in the middle: maybe they can tolerate their job, but they're keeping an eye open for something better.
Who is this DevDays audience? They're the elite of the elite of the best programmers out there. They're the people who participate in Stack Overflow, the people who read, the people who are constantly trying to learn more about programming and software development. More than half of them paid their own money to attend a one day conference. They're the most desirable software developers on the planet. And 75% of them are not delighted with their job.
That's unacceptable. I've been saying for ten years that the top developers have a choice of where to work, and the top employers need to work harder to attract them, because the top developers get ten times as much work done as the average developers. 
And yet, I still keep meeting ridiculously productive developers working in shitholes.
We're going to fix this, right now. Thus, Stack Overflow Careers.
We're going to completely turn the job market upside down, for the best software developers and the best companies.
This is a talent market. Developers are not even remotely interchangeable. Therefore, recruiting should work like Hollywood, not like union hiring halls of the last century.
In a union hiring hall, downtrodden workers line up like cogs, hoping to make it to the front of the line in time to get a few bucks for dinner.
In Hollywood, studios who need talent browse through portfolios, find two or three possible candidates, and make them great offers. And then they all try to outdo each other providing plush work environments and great benefits.
Here's how Stack Overflow Careers will work. Instead of job seekers browsing through job listings, the employers will browse through the CVs of experienced developers.
Instead of deciding you hate your job and going out to find a better one, you'll just keep your CV on file at Stack Overflow and you'll get contacted by employers.
Instead of submitting a resume, you'll fill out a CV, which links back to your Stack Overflow account, so that you can demonstrate your reputation in the community and show us all how smart you really are. To a hiring manager, the fact that you took the time to help a fellow programmer with a detailed answer in some obscure corner of programming knowledge, and demonstrated mastery, is a lot more relevant than the Latin Club you joined in school.
Employers can see how good you are at communicating, how well you explain things, how well you understand the tools that you're using, and generally, if you're a great developer or not. And they can see your peer reputation, so all that hard work you've been putting into helping people on Stack Overflow can karmically come back and help you upgrade your job to the latest, state-of-the-art, great place to work.
Stack Overflow has grown incredibly fast. After a year in business, it gets over a million page views most weekdays and currently stands as the 817th largest site on the Internet, according to Quantcast. It reaches 5.2 million people a month. But Stack Overflow Careers doesn't have to be massive. It's not for the 5.2 million people who visit Stack Overflow; it's for the top 25,000 developers who participate actively. It's not for every employer; it's for the few that treat developers well and offer a place to work that's genuinely fulfilling.
Read the FAQ, then go file your CV now, and upgrade your career.
	"
https://www.joelonsoftware.com/2009/11/03/does-slow-growth-equal-slow-death/,Does Slow Growth Equal Slow Death?,2009-11-03T00:13:21+00:00,,Joel Spolsky,News,"
	My new Inc. column is up. ""For a guy who wrote a book on how to hire great programmers, it's mortifying how incompetent I've been at enlarging the sales team, which, right now, consists of one terrific account executive and a dog. (I'm just kidding. There's no dog.)""
	"
https://www.joelonsoftware.com/2009/11/01/figuring-out-what-your-company-is-all-about/,Figuring out what your company is all about,2009-11-01T00:13:20+00:00,2018-04-23T21:11:05+00:00,Joel Spolsky,"CEO, News","
	What is your company about?
Recently I got inspired by Kathy Sierra, whose blog Creating Passionate Users and Head First series of books revolutionized developer education. She kept saying the same thing again and again: help your users be awesome.
Kathy taught me that if you can't explain your mission in the form, ""We help $TYPE_OF_PERSON be awesome at $THING,"" you are not going to have passionate users. What's your tagline? Can you fit it into that template?
It took us nine years, but we finally worked out what Fog Creek Software is all about, which I'll tell you in a moment, but first, some backstory.
In the early days, we were all about making a great place to be a software developer in New York City.
Yep, that was all there was to it. Almost every software job in the city was terrible. You had a choice of which kind of terrible. Want to wear a suit and work long hours under crummy conditions? Take a job at a bank. Want to report to a manic-depressive creative who demands that you stretch HTML in ways that would have you put to death, in certain countries? Take a job at a media company. Want to work 24/7 in a basement with water pipes dripping on your head and get paid in worthless stock options? Take your pick of the revenue-free dotcom startups.
Why New York, then? There are lots of great product companies where software developers are treated very well in Redmond, Washington. But I was sick of trying to live in lesser cities. Sure, the Seattle area is beautiful, and green, and clean, and possesses great coffee, and I understand that there are even a couple of grocery stores open late now. But I'm staying in New York, because it's the greatest city in the world.
I gave up the search, and decided to start a company with my buddy Michael Pryor. Making a nice place to work was our primary objective. We had private offices, flew first class, worked 40 hour weeks, and bought people lunch, Aeron chairs, and top of the line computers. We shared our ingenious formula with the world:
The tagline was ""building the company where the best software developers want to work."" It was, to say the least, awkward. It didn't make for a good elevator pitch. It didn't really have the right format. ""Abercrombie and Fitch: building the apparel store where the hottest teenagers will want to work."" Who cares? Not the hot teenagers, I'll tell you that.
Anyway we accomplished that goal. Cross it off the list. What's next? We needed a new mission statement.
And it has to be something of the form, ""We help $TYPE_OF_PERSON be awesome at $THING.""
Bells went off. Everything we've done successfully has one thing in common: It's all about helping software developers be awesome at making software.
That includes Joel on Software, Stack Overflow, all the books I've been writing, the conferences like DevDays and Business of Software, the Jobs Board and Stack Overflow Careers.
It includes our flagship product, FogBugz, which is all about giving developers tools that gently guide them from good to great. It's the software implementation of the philosophy I've been writing about for a decade, lacking only one thing: the feature to replace exceptions with return values, while adding Hungarian prefixes to all variable names. THAT IS A JOKE, PEEPLE. Put DOWN the bazooka.
Helping you make more awesome software is why I write endlessly about what we're doing at Fog Creek, despite the fact that people accuse me of shilling. I'm not writing to promote our products. You don't have to buy our products to get the benefit of reading about my experience designing them and building them and selling them. I'm writing to share some of my experiences in case they can help you make better software.
Our focus on helping developers explains why one of our early products, CityDesk, flopped: it had nothing to do with software developers. And it explains why another of our products, Fog Creek Copilot, only found a market in the niche of software developers doing tech support.
So, here you go, the new tagline: ""We help the world's best developers make better software.""
Going through this exercise made it easy to figure out what belongs in future versions of FogBugz and what doesn't. In particular, we're adding source control and code review features to FogBugz, using Mercurial, the best open-source distributed version control system. Everything that helps developers make better software belongs in FogBugz: project planning, project management, bug tracking, and customer service.
It took almost ten years, but I think we finally got the mission for the next ten nailed.
Optional Advertainment: If you've got a moment, check out this 41/2 minute trailer for Make Better Software, a new video training series we've been working on for more than a year. It's the video edition of Joel on Software and fits perfectly with our agenda of helping developers make great software.
	"
https://www.joelonsoftware.com/2009/12/30/secret-language/,Secret language,2009-12-30T00:13:27+00:00,,Joel Spolsky,News,"
	Microsoft Careers: ""If you're looking for a new role where you'll focus on one of the biggest issues that is top of mind for KT and Steve B in 'Compete', build a complete left to right understanding of the subsidiary, have a large amount of executive exposure, build and manage the activities of a v-team of 13 district Linux& Open Office Compete Leads, and develop a broad set of marketing skills and report to a management team committed to development and recognized for high WHI this is the position for you!""
This is ironic, to use the Alanis Morissette meaning of the word [NSFW video].
The whole reason Microsoft even needs a v-team of 13, um, ""V DASHES"" to compete against Open Office is that they've become so insular that their job postings are full of incomprehensible jargon and acronyms which nobody outside the company can understand. With 93,000 employees, nobody ever talks to anyone outside the company, so it's no surprise they've become a bizarre borg of ""KT"", ""Steve B"", ""v-team"", ""high WHI,"" CSI, GM, BG, BMO (bowel movements?) and whatnot.
When I worked at Microsoft almost two decades ago we made fun of IBM for having a different word for everything. Everybody said, ""Hard Drive,"" IBM said ""Fixed Disk."" Everybody said, ""PC,"" IBM said ""Workstation."" IBM must have had whole departments of people just to FACT CHECK the pages in their manuals which said, ""This page intentionally left blank.""
Now when you talk to anyone who has been at Microsoft for more than a week you can't understand a word they're saying. Which is OK, you can never understand geeks. But at Microsoft you can't even understand the marketing people, and, what's worse, they don't seem to know that they're speaking in their own special language, understood only to them.
	"
https://www.joelonsoftware.com/2009/12/14/lets-stop-talking-about-backups/,Let’s stop talking about “backups”,2009-12-14T00:13:26+00:00,,Joel Spolsky,News,"
	Is your desktop backed up?
Did you backup that server?
Are your backups on a different machine?
Do you have offsite backups?
All good questions, all best practices.
But let's stop talking about ""backups."" Doing a backup is too low a bar. Any experienced system administrator will tell you that they have a great backup plan, the trouble comes when you have to restore.
And that's when you discover that:
The backed-up files were encrypted with a cryptographically-secure key, the only copy of which was on the machine that was lost
The server had enormous amounts of configuration information stored in the IIS metabase which wasn't backed up
The backup files were being copied to a FAT partition and were silently being truncated to 2GB
Your backups were on an LTO drive which was lost with the data center, and you can't get another LTO drive for three days
And a million other things that can go wrong even when you ""have"" ""backups.""
The minimum bar for a reliable service is not that you have done a backup, but that you have done a restore. If you're running a web service, you need to be able to show me that you can build a reasonably recent copy of the entire site, in a reasonable amount of time, on a new server or servers without ever accessing anything that was in the original data center. The bar is that you've done a restore.
Let's stop asking people if they're doing backups, and start asking if they're doing restores.
	"
https://www.joelonsoftware.com/2009/12/13/stack-stats/,Stack stats,2009-12-13T00:13:25+00:00,2018-04-19T21:54:39+00:00,Joel Spolsky,"Stack Overflow, News","
	The higher someone's Stack Overflow reputation, the more likely they are to have submitted a CV to Stack Overflow Careers:
This is not entirely surprising, of course: the more time someone has invested in Stack Overflow, the more likely they are to (a) know about Stack Overflow Careers, (b) be willing to invest $29, after all the hours they've already sunk, and (c) have the confidence that their CV is going to impress the kind of employers that are using the site.
Still, the participation rate in Stack Overflow Careers is pretty impressive, and it somewhat confirms the claim we're making to employers, which is that when you search for CVs on Stack Overflow, you are looking at some pretty gosh darn good programmers.
While I'm rattling on about statistics, here's a little bit of data about Stack Overflow traffic itself that you may not have seen.
We use Quantcast to measure our traffic. Currently, they're showing us as the 740th ranked site in the world (of all sites), with 6 million monthly unique visitors, 1.9 million from the US. And the growth is pretty steady, except for a couple of weeks at the end there which reflect the holiday season:
Comparing our traffic to our big competitor is difficult because they don't use Quantcast, so we have to rely on Alexa, which has a reputation for particularly terrible data, but here's what that looks like:
Are there any sites out there for programmers with more traffic than Stack Overflow? I haven't found any, using the available data... even msdn.microsoft.com has less, according to Quantcast, but I find that hard to believe.
In either case, having decided that Stack Overflow was the biggest programming site in the world, I thought, ""hey, it should be easier for us to get ads."" I asked our ad guy, Alex ""DailyWTF"" Papadimoulis, if Microsoft had bought any ads. They're about to launch Visual Studio 2010, which is probably going to have the biggest marketing campaign (in dollars) in the history of developer tools, and you'd think they'd want to spend something at the biggest programming site in the world. Here's what he wrote back:
""Microsoft is doing huge spends, but they're going through McCann for the VS2010 launch (IIRC). Agencies really don't like us. Now if we go to video units with fly-over... oh they'll start loving us!""
What he's referring to is the fact that we don't accept any kind of animated ads on Stack Overflow, because, well, they're evil, so we lose a lot of revenue from advertising agencies who are looking for the most aggressive possible ways to get in people's faces. Whatever. Don't care. We hate animated ads and I'm pretty sure our users do, too.
	"
https://www.joelonsoftware.com/2009/12/09/when-and-how-to-micromanage/,When and how to micromanage,2009-12-09T00:13:24+00:00,,Joel Spolsky,News,"
	""Like most entrepreneurs, Ryan and I are still learning about how to manage people and teams. And we're both used to hiring very smart and dedicated people who will get things done to a high standard if you give them some general direction and set them free. But on this trip, we started to notice that this style of hands-off management, which works so well with our own staffs, just wasn't working when we had outside vendors involved.""
From my December column in Inc.: ""When and How to Micromanage""
 
	"
https://www.joelonsoftware.com/2009/12/02/programmer-search-engine/,Programmer search engine,2009-12-02T00:13:23+00:00,2018-04-19T21:54:39+00:00,Joel Spolsky,"Stack Overflow, Recruiter, News","
	For as long as I've been in the industry, which is, I think, about 74 years now, the problem I've had with hiring programmers was not interviewing them or deciding if they're smart-it's been finding them in the first place. 
What I've dreamed about is a programmer search engine.
The ideal programmer search engine would only include programmers who are actually looking for jobs. If you've ever emailed someone based on a resume you found through a traditional search engine, you've probably discovered that they're not actually on the market. 
It would only include people willing to work in your neck of the woods.
It would show you CVs right away, and, ideally, it would show you something about their programming skills besides the usual resume blahblah.
Well, OK, that day is here, and I'm like a kid in a candy store. Nom nom. Announcing the other half of careers.stackoverflow.com: the employer's side!
Right now, there are about 928 candidates on there. That's a start. What's more interesting is whether there's a candidate who meets your needs.
Let's say you're searching for a full time Java programmer within 40 miles of Palo Alto. Right now there are 11 candidates listed. All but one are active on StackOverflow... one even has reputation over 4000 points.
Want a bit more choice? Check the box that indicates that you're willing to relocate. Now there are 80 matches, all of whom have the legal right to work in the states. Candidates have a lot of flexibility indicating where they're willing to work. Even if you need a Ruby on Rails programmer in Oklahoma City, as long as you're willing to pay for relocation, you've got 7 choices. You've got 14 choices in London (with the legal right to work.) If you think that a Python programmer could learn Ruby, you've got 51 choices. There are plenty of choices whether you're hiring in Tel Aviv, Sydney, Silicon Valley, or New York. There are four programmers in Copenhagen right now. No relocation required. All of them highly qualified, actually; any one of them would qualify to interview at Fog Creek.
Stack Overflow Careers is something of a chicken-and-egg business. We have to get a big audience of programmers and a big audience of employers all at the same time, and then it's like a junior high school dance, with the boys on one side of the gym and the girls on the other side, and for a while you just sit there holding your breath to see if anyone will dance. We invited a few hundred employers as beta testers... these were the companies that have been listing jobs on StackOverflow over the last six months, and so far, they've found a few dozen candidates that they liked. Once it gets to that point, we're out of the loop, so we don't really know how many people are actually finding jobs, but please email me your success stories and failure stories so we can keep working to make it better.
In the meantime, Jeff and the StackOverflow crew have done something brilliant: they've made it possible to do searches and see how many candidates match even before you have to pay. So if you want to try it out but are afraid that there aren't students looking for OCaml internships in Houston, you can try it, and find that there is, indeed, one. So, try it out right now. There's no obligation, and we're happy to give you your money back if you don't think you got good value.
	"
https://www.joelonsoftware.com/2010/01/26/why-testers/,Why testers?,2010-01-26T00:13:30+00:00,,Joel Spolsky,"CEO, News","
	My sister got her kids a little puppy, and they've been trying to train it. To live with a dog in the house, you need to teach it not to jump on people, not to poop in the house, to sit on command, and to never, ever, ever chew on the iPad. Never. Good girl.
With dogs the main trick to training is that feedback has to be immediate. If you come home to discover that, hours before, the dog tipped over the garbage can in the kitchen, it's too late for training. You can yell at her but she just won't get what you're going on about. Dogs are just not that smart.
For programmers, getting better at what you do requires quick feedback, positive and negative, on what you've just done. The faster you get the feedback, the faster you'll learn. With long-cycle shrinkwrap software, it can take a year or more to hear feedback from customers.
That's one of the reasons we have testers. A great tester gives programmers immediate feedback on what they did right and what they did wrong. Believe it or not, one of the most valuable features of a tester is providing positive reinforcement. There is no better way to improve a programmer's morale, happiness, and subjective sense of well-being than a La Marzocco Linea espresso machine to have dedicated testers who get frequent releases from the developers, try them out, and give negative and positive feedback. Otherwise it's depressing to be a programmer. Here I am, typing away, writing all this awesome code, and nobody cares. Boo hoo.
Who should be a tester? That's tricky! Software testing is one of those careers that isn't that well known, so a lot of people who would be great at testing and would probably enjoy it a lot never consider applying for jobs as testers. 
Signs of a good tester:
Scientific
Loves a good puzzle, even the kind that takes days to solve
Likes to think about things methodically
Generally likes working with software and computers
You don't have to be a programmer to be a tester. A lot of companies want testers to be programmers who write automated test suites. It seems more efficient that way. This reflects a misunderstanding of what testers are supposed to do, which is evaluate new code, find the good things, find the bad things, and give positive and negative reinforcement to the developers. Sure, automated test suites are a time saver, but testing software covers so much more than that. If you put too much emphasis on those scripts, you won't notice misaligned text, hostile user interfaces, bad color choices, and inconsistency. Worse, you'll have a culture of testers frantically working to get their own code working, which crowds out what you need them to do: evaluate someone else's code.
A particularly terrible idea is to offer testing jobs to the programmers who apply for jobs at your company and aren't good enough to be programmers. Testers don't have to be programmers, but if you spend long enough acting like a tester is just an incompetent programmer, eventually you're building a team of incompetent programmers, not a team of competent testers. Since testing can be taught on the job, but general intelligence can't, you really need very smart people as testers, even if they don't have relevant experience. Many of the best testers I've worked with didn't even realize they wanted to be testers until someone offered them the job.
If you:
Love software and computers
Want to work on a software team, and
Don't particularly like programming
you should consider being a tester. (We're hiring! What a coincidence!)
	"
https://www.joelonsoftware.com/2010/01/25/rocket-surgery-made-easy/,Rocket Surgery Made Easy,2010-01-25T00:13:29+00:00,,Joel Spolsky,News,"
	Steve Krug has written a follow up to his usability classic Don't Make Me Think. The sequel, Rocket Surgery Made Easy, is a terrific, short, concise, fun guide to running simple ""hallway"" usability tests to improve the usability of your software and websites. Highly recommended.
 
	"
https://www.joelonsoftware.com/2010/01/22/a-little-less-conversation/,A little less conversation,2010-01-22T00:13:28+00:00,,Joel Spolsky,News,"
	""As companies expand, the people within them start to specialize. At such a point, some managers will conclude that they have a 'keep everyone on the same page' problem. But often what they actually have is a 'stop people from meddling when there are already enough smart people working on something' problem.""
From my latest Inc. column: A Little Less Conversation
 
	"
https://www.joelonsoftware.com/2010/02/18/facebook-linkedin-importers/,Facebook / LinkedIn importers,2010-02-18T00:13:33+00:00,2018-04-19T21:54:39+00:00,Joel Spolsky,"Stack Overflow, News","
	New StackOverflow developer Kevin Montrose (6,878 reputation) added a neat feature to the career site that makes it a zillion times easier to file a CV if you've already put in your job and education history on LinkedIn or FaceBook. Try it out.
	"
https://www.joelonsoftware.com/2010/02/14/raising-money-for-stackoverflow/,Raising money for StackOverflow,2010-02-14T00:13:32+00:00,2018-04-19T21:54:39+00:00,Joel Spolsky,"Stack Overflow, News","
	A few people heard me on This Week in Startups (starting at 15:45) asking Jason if we should take money from the first VC who fell into our laps, or spend time doing the Sand Hill Road rounds, meeting more VCs, and doing a road show for the other firms that might be interested in investing.
Jason (and his guest James Segil) both agree that we should take more time picking the right partner. We're going to be in bed with these guys for years, they say, and we have to approach this like picking a spouse.
Anyway, people emailed me in shock and surprise that we would even consider VC, considering the things I've written.
 
flickr.com/photos/niznoz / CC BY-NC-SA 2.0
Why are we seeking venture capital for StackOverflow? 
Almost ten years ago, I wrote about two kinds of companies, the Ben and Jerry's type of company, which grows carefully and organically, and the Amazon type, which uses huge amounts of investment capital to get big quickly.
At the time, I had no doubt that I wanted Fog Creek to be a Ben and Jerry's type of company, and that model has served us well. By staying profitable and growing carefully, we've managed to survive two big downturns and we've grown into a stable, 34-person company that's a great place to work and is likely to remain stable, and a great place to work, for a long time.
StackOverflow, though, is a bit of a different story. 
There are a few indicators for the type of company that I believe can benefit from, and should take, VC.
There's a land grab going on. The business is in a new field with no competition, but the field has proven itself, and is obviously going to get very crowded very soon, so the faster you can grab territory, the better.
There is a provable concept that's repeatable. I always point to the example of the Starbucks IPO, which was brilliant because it was so simple. Every new Starbucks store that opened in Seattle became profitable in a matter of months. They tried a couple of stores in Chicago and Washington just to make sure it wasn't a Seattle thing, and those worked even better. Thus, the formula of opening as many stores as possible was as close to a sure-thing as possible, so raising money was a no-brainer.
The business itself could benefit from the publicity of getting an investment from someone who is thought of as being a savvy investor.
The investor will add substantial value to the business in advice, connections, and introductions.
The business can potentially have a big exit or become a large, publically traded company.
The founders are not in it for their own personal aggrandizement and are happy to give up some control to make the business more successful.
There are counter-indicators, of course: signs that you shouldn't consider VC. Here are just a few off the top of my head:
If the founders are risk-averse and are willing to trade a much smaller payout for lower risk.
If the founders are technical without substantial business experience and wish to maintain absolute control forever.
If the investor is mostly ""dumb money,"" i.e., someone who doesn't know about the field. The proverbial dentist, who is happy to give you a half million bucks, but doesn't know the first thing about CPMs and CPCs and CTOs, so you might as well not bother.
If you're going into an established field with a lot of competition, there's no benefit to speed; you're better off slowly building a niche business and growing from there, quietly taking one customer at a time away from the competitors.
If the product is immature and unproven, in which case, expensive marketing efforts will be wasted proving to the world how bad your product is.
If the founders don't have enough of the right kinds of industry connections, or the idea is not compelling enough, so that raising VC would take months or years
If there is any other way to raise the kind of money you need, for example, by selling actual products to customers.
When I put all these things together the conclusion is that StackOverflow is one of those rare companies for which VC can really work. Jeff and I started out with a goal for StackOverflow of changing the way programmers and system administrators get answers to their questions on the Internet, which was deeply broken. In 18 months we've accomplish that: we've got 6 million unique visitors every month. Now we're biting off the bigger goal of changing the way everyone gets answers to their questions on the Internet, and that's something we can't do alone.
So, off I go, on a StackOverflow road show. I'll be in Silicon Valley Feb 24-Mar 3; drop me a line if you want to get together.
	"
https://www.joelonsoftware.com/2010/02/11/headcount/,Headcount,2010-02-11T00:13:31+00:00,,Joel Spolsky,News,"
	In the early days of a technology startup, you tend to have a lot of software developers, and you feel like you could never have enough. If you hire sales and marketing staff too early, they don't really get much traction, and you may start to think that sales and marketing are a waste of time. This led me, in the early years, to believe that a healthy software company should have a lot of real software developers and maybe no sales and marketing.
At one point I entertained the quixotic and, retrospectively, stupid idea of requiring every employee at Fog Creek to be a programmer... even the receptionist would have to have done some BASIC programming in high school to qualify. In the US Marines everyone, even the cooks, is a rifleman. Of course that's because the cooks are in friggin Afghanistan getting shot at so they better be riflemen, whereas our receptionist almost never has to drop into the source code and bang out a class. Almost never.
Over time, though, as your product gets better and better, the more sales and marketing people you hire, the more you sell.
That's because programmers multiply salespeople, and vice-versa.
I'm a nerd, so I'll be real math-y about this. Define the quality of your code on a scale from 0 to 1. 
0 means your product solves absolutely no problems for anybody so nobody in their right mind would ever buy it. Microsoft Bob.
1 means that every single person on Earth, if they bought your software, would be net happier, even after paying your fee. 
Your software starts at 0 and slowly climbs up the hill.
If everybody in the world knew about your software and was encouraged to evaluate it, the number that would buy it would be (Earth population) x Quality.
Sales and marketing functions exist to encourage earthlings to find out about your software and evaluate it. These functions will have no effect on sales if your quality is extremely low. But as the quality gets higher, the value of sales and marketing goes up, commensurately. Double the quality, and the same sales effort yields double the revenue.
The population of the planet is so large, and the effect of sales and marketing so hard to scale, that by the time your product is really great, the optimal ratio might be very heavily tilted in favor of sales and marketing. Large software companies might have 5 or 10 or 20 people in the sales organization for every developer.
This explains, among other things, why US software companies can't expect to get sustainable advantage by offshoring software development to cheaper countries. If a developer in Russia, India, or China costs 50% as much as a developer in Seattle, San Francisco, or Boston, but software development is only 10% of your costs, you can only get a 5% advantage from offshoring development. The offshoring that does happen is strongly biased to custom software development which, by design, can only solve one person's problem, so more developers than marketers are needed.
It is not the case (as commonly believed by nerds) that marketing is a substitute for code quality. The best marketing in the world cannot force people to pay for a useless product.
	"
https://www.joelonsoftware.com/2010/03/31/the-design-of-design/,The Design of Design,2010-03-31T00:13:37+00:00,,Joel Spolsky,News,"
	There is a new book out by Fred Brooks (author of The Mythical Man Month)!
The Design of Design
	"
https://www.joelonsoftware.com/2010/03/31/stack-overflow-party/,Stack Overflow Party,2010-03-31T00:13:36+00:00,2018-04-23T21:55:42+00:00,Joel Spolsky,News,"
	
The entire extended Stack Overflow team (including the Stack Exchange team) is meeting in New York in April to do some strategic planning. For example, we need to plan our Rock Band song lists, decide who gets to be on the drums and who is stuck with the USB cowbell, etc.
If you're going to be in the city on Tuesday, April 6th, we'd like to invite you to join us for a party and a chance to meet the team. This is also a chance to see the new Fog Creek office if you haven't visited yet.
If you want to come to the party, you must register. Please do not register if you're not sure that you're coming, as space is limited. Only people who are on the list will be admitted.
	"
https://www.joelonsoftware.com/2010/03/17/distributed-version-control-is-here-to-stay-baby/,"Distributed Version Control is here to stay, baby",2010-03-17T00:13:35+00:00,2018-04-23T21:08:35+00:00,Joel Spolsky,"Rock star developer, News","
	A while ago Jeff and I had Eric Sink on the Stack Overflow Podcast, and we were yammering on about version control, especially the trendy new distributed version control systems, like Mercurial and Git.
In that podcast, I said, ""To me, the fact that they make branching and merging easier just means that your coworkers are more likely to branch and merge, and you're more likely to be confused.""
This is what Taco looks like nowWell, you know, that podcast is not prepared carefully in advance; it's just a couple of people shooting the breeze. So what usually happens is that we say things that are, to use the technical term, wrong. Usually they are wrong either in details or in spirit, or in details and in spirit, but this time, I was just plain wrong. Like strawberry pizza. Or jalapeno bagels. WRONG.
Long before this podcast occurred, my team had switched to Mercurial, and the switch really confused me, so I hired someone to check in code for me (just kidding). I did struggle along for a while by memorizing a few key commands, imagining that they were working just like Subversion, but when something didn't go the way it would have with Subversion, I got confused, and would pretty much just have to run down the hall to get Benjamin or Jacob to help.
And then my team said, hey you know what? This Mercurial bug-juice is really amazing, we want to actually make a code review product that works with it, and, and, what's more, we think that there's a big market providing commercial support and hosting for it (Mercurial itself is freely available under GPL, but a lot of corporations want some kind of support before they'll use something).
And I thought, what do I know? But as you know I don't really make the decisions around here, because ""management is a support function,"" so they took all the interns, all six of them, and set off to build a product around Mercurial.
I decided I better figure out what the heck is going on with this ""distributed version control"" stuff before somebody asks me a question about the products that my company allegedly sells, and I don't have an answer, and somebody in the blogo-""sphere"" writes another article about me junking the sharp.
And I studied, and studied, and finally figured something out. Which I want to share with you.
With distributed version control, the distributed part is actually not the most interesting part.
The interesting part is that these systems think in terms of changes, not in terms of versions.
That's a very zen-like thing to say, I know. Traditional version control thinks: OK, I have version 1. And now I have version 2. And now I have version 3.
And distributed version control thinks, I had nothing. And then I got these changes. And then I got these other changes.
It's a different Program Model, so the user model has to change.
In Subversion, you might think, ""bring my version up to date with the main version"" or ""go back to the previous version.""
In Mercurial, you think, ""get me Jacob's change set"" or ""let's just forget that change set.""
If you come at Mercurial with a Subversion mindset, things will almost work, but when they don't, you'll be confused, unhappy, and unsuccessful, and you'll hate Mercurial.
Whereas if you free your mind and reimagine version control, and grok the zen of the difference between thinking about managing the versions vs. thinking about managing the changes, you'll become enlightened and happy and realize that this is the way version control was meant to work.
I know, it's strange... since 1972 everyone was thinking that we were manipulating versions, but, it turned out, surprisingly, that thinking about the changes themselves as first class solved a very important problem: the problem of merging branched code.
And here is the most important point, indeed, the most important thing that we've learned about developer productivity in a decade. It's so important that it merits a place as the very last opinion piece that I write, so if you only remember one thing, remember this:
When you manage changes instead of managing versions, merging works better, and therefore, you can branch any time your organizational goals require it, because merging back will be a piece of cake.
I can't tell you how many Subversion users have told me the following story: ""We tried to branch our code, and that worked fine. But when it came time to merge back, it was a complete nightmare and we had to practically reapply every change by hand, and we swore never again and we developed a new way of developing software using if statements instead of branches.""
Sometimes they're even kind of proud of this new, single-trunk invention of theirs. As if it's a virtue to work around the fact that your version control tool is not doing what it's meant to do.
With distributed version control, merges are easy and work fine. So you can actually have a stable branch and a development branch, or create long-lived branches for your QA team where they test things before deployment, or you can create short-lived branches to try out new ideas and see how they work.
This is too important to miss out on. This is possibly the biggest advance in software development technology in the ten years I've been writing articles here.
Or, to put it another way, I'd go back to C++ before I gave up on Mercurial.
If you are using Subversion, stop it. Just stop. Subversion = Leeches. Mercurial and Git = Antibiotics. We have better technology now.
Because so many people dive into Mercurial without fully understanding the new program model, which can leave them thinking that it's broken and malicious, I wrote a Mercurial tutorial, HgInit.
Today, when people ask me about that podcast where I dissed DVCS, I tell them that it was just a very carefully planned fake-out of my long time friend and competitor Eric Sink, who makes a non-distributed version control system. Like that time he started selling bug-tracking software, and, to punish him, we sent him a very expensive Fog Creek backpack with a fake form letter that made it look like we were doing so well that expensive backpacks were the standard Christmas gift we were sending every FogBugz customer.
I seem to have run out the clock on this site. It has been an extreme honor to have you reading my essays over the last ten years. I couldn't ask for a greater group of readers. Whether you're one of the hundreds of people who volunteered their time to translate articles into over 40 languages, or the 22,894 people who has taken the time to send me an email, or the 50,838 people who subscribed to the email newsletter, or the 2,262,348 people per year who visited the website and read some of the 1067 articles I've written, I sincerely thank you for your attention.
	"
https://www.joelonsoftware.com/2010/03/14/puppy/,Puppy!,2010-03-14T00:13:34+00:00,2018-04-23T21:03:30+00:00,Joel Spolsky,News,"
	At right, a picture of Taco, a ten-week-old siberian husky puppy who moved in with us last week!
Some of you may have seen my final column in Inc., in which I announce my retirement from blogging effective March 18th, the 10-year anniversary of Joel on Software.
Writing for Inc. was an enormous honor, but it was very different than writing on my own website. Every article I submitted was extensively rewritten in the house style by a very talented editor, Mike Hofman. When Mike got done with it, it was almost always better, but it never felt like my own words. I look back on those Inc. columns and they literally don't feel like mine. It's as if somebody kidnapped me and replaced me with an indistinguishable imposter who went to Columbia Journalism School. Or I slipped into an alternate universe where Joel Spolsky is left-handed and everything he does is subtlely different.
I'm not going to stop writing altogether.
What I am stopping is the traditional opinionated essay that has characterized Joel on Software for a decade. I'm not going to write Ten Ways to Get VCs to Salivate, I'm not going to write Why You Have To Buy a $10,000 Italian Espresso Machine for your Programmers, and I'm not going to write Python is For Aspergers Geeks or Ruby is for Tear-streaked Emo Teenagers. After a decade of this, the whole genre of Hacker News fodder is just too boring to me personally. It's still a great format... the rest of you, knock yourselves out... I just can't keep doing that particular thing.
There will still be some posts here-don't unsubscribe. There will be announcements of new projects, stories of things that I'm doing, and links to other things I might write, like HgInit, the Mercurial tutorial.
Philip Greenspun and Dave Winer (with DaveNet, even before Scripting News) pioneered the Internet Pundit style of essay writing which has served so well for fifteen years. They started as lone voices in a new medium, but the genre spread like wildfire. It was perfectly prognosticated in the 1990 Christian Slater movie Pump Up The Volume. If you've already forgotten it, here's what happens (not a spoiler): Slater plays a kid with a low-power radio station in his bedroom, broadcasting in the middle of the night to the other isolated, angsty kids in his high school. Interesting drama ensues. 102 minutes later, by the time the credits roll, high school kids everywhere are spouting their opinions on their own pirate radio stations. And that's exactly what happened with blogging, until we got where we are today, with millions of people expressing themselves and using the exact same narrative techniques and stories and styles that the first bloggers pioneered.
What we need now, I feel, is not another essay repeating No Silver Bullet for the 18,000th time. We need something that is more objective (based on measurable truth and falseness rather than just lists of anecdotes about successful projects and failed projects). We need something that reflects the best new ideas about what authorship means in 2010, not just electronic forms of 18th-century pamphlets. We need to stop rewriting the same things again and again (fail fast! NDAs are worthless! Execution matters, not ideas! Use the right tools for the job!). Instead we should start filling in the long tail of knowledge.
So that's what I'm going to do with the next decade.
More details on my faux retirement:
I'm drastically cutting back on speaking engagements. I already committed to speak at Business of Software 2010, in Boston in October, so that's still on.
This week's StackOverflow Podcast will be the last in that format. Jeff and I are working on a new format and will come up with something exciting, new and different, so stay tuned for the details, but the current format is getting kind of tired.
Although I appreciate that many people find Twitter to be valuable, I find it a truly awful way to exchange thoughts and ideas. It creates a mentally stunted world in which the most complicated thought you can think is one sentence long. It's a cacophony of people shouting their thoughts into the abyss without listening to what anyone else is saying. Logging on gives you a page full of little hand grenades: impossible-to-understand, context-free sentences that take five minutes of research to unravel and which then turn out to be stupid, irrelevant, or pertaining to the television series Battlestar Galactica. I would write an essay describing why Twitter gives me a headache and makes me fear for the future of humanity, but it doesn't deserve more than 140 characters of explanation, and I've already spent 820.
The Joel on Software discussion group, in long decline, will close. The Business of Software group will remain open.
 
	"
https://www.joelonsoftware.com/2010/04/30/note-from-taco/,Note from Taco,2010-04-30T00:13:40+00:00,,Joel Spolsky,News,"
	Dear TechSmith,
Thank you very much for all the pictures of your pets:
Also thanks for the toys, which were great. I especially like the iPhone.
Yours,
Taco.
	"
https://www.joelonsoftware.com/2010/04/19/sites-for-experts/,Sites for experts,2010-04-19T00:13:39+00:00,2018-04-19T21:56:22+00:00,Joel Spolsky,"Stack Overflow, News","
	Since announcing the new plans for Stack Exchange, there's been a lot of discussion about what kind of new Q&A sites will work best on this platform.
So far there are 32 informal proposals on meta.stackexchange.com. We're weeks away from opening a site where these proposals can become real.
From my answer to the Firearms proposal: ""The power of the Stack Exchange platform is detailed, expert answers to extremely rare, 'long-tail,' highly technical questions. To get expert answers, you need experts. To attract experts, you need a site where people are asking very interesting and hard questions, not the basic questions, so that it's clear that this is a PRO site, not a consumer/enthusiast site.... and remember, the pro sites WILL attract the enthusiasts, but not the other way around.""
From my answer to the Law proposal: ""There are only 200 easy law questions, and they've all been asked 100 times on Mahalo and Yahoo!Answers. But there are 20,000,000 detailed, difficult, long-tail questions that only professionals can answer, and we'd be doing a REAL service to the Internet by creating a place where you can find answers to the 20,000,000 hard questions, not the 200 easy ones.""
Our core mission at Stack Overflow is:
Make the Internet a better place to get expert answers to your questions.
The ""expert"" part of that mission is important, otherwise we're just building another place for the same questions that every other Q&A site has. We want the law Stack Exchange to attract lawyers, the movie Stack Exchange to attract filmmakers, and the aviation Stack Exchange to attract pilots. What makes a community great is great people... that is, real experts. And the experts want to hang out with other experts.
	"
https://www.joelonsoftware.com/2010/04/13/stack-exchange-20/,Stack Exchange 2.0,2010-04-13T00:13:38+00:00,2018-04-19T21:56:22+00:00,Joel Spolsky,"Stack Overflow, News","
	Like the small-town mayor who suddenly finds herself running an entire state, our ambitions for Stack Overflow keep growing. Our original idea of making the Internet a better place to get expert answers to your programming questions suddenly seemed too small. Programming questions? We asked. Why just programming questions? Why not every question under the sun? And who says we can't run for Vice President of the United States of America?
We tried making our software available as a hosted white label product called Stack Exchange. We thought that other people would create awesome sites on every imaginable topic. Some people did (yay!), but it wasn't the flood of high quality sites we were hoping for.
So we're making a few changes. Briefly:
Stack Exchange will now be free.
We're changing the way that new Stack Exchange sites are created to move to a more democratic, community process.
The content of these new, community-created Stack Exchange sites will be publically owned under a Creative Commons license, instead of being owned by individuals or businesses.
If you've already created a Stack Exchange site, be sure to read the announcement in more detail to hear about our transition plan. Don't be alarmed; we'd never do anything to mess with Stack Exchange sites that are already working.
Read all the details on the StackExchange Blog.
	"
https://www.joelonsoftware.com/2010/05/18/news-128/,News,2010-05-18T00:13:43+00:00,,Joel Spolsky,News,"
	FogBugz 7.3 is a pretty huge release, despite the modest version number. It has a bunch of features that almost everyone will find useful on a daily basis.
The Case Event Edit Plugin now lets you edit cases (instead of just appending to them).
Bulk Reply, so you can respond to multiple emails with the same response. You can even flip through the outgoing responses and customize each one if you want.
Width of the case area is now resizable.
We now support IMAP (in addition to POP3) for incoming email
Project backlog editing (for scrum/agile shops) is now much faster.
What's new in FogBugz 7.3?
	"
https://www.joelonsoftware.com/2010/05/10/kathy-sierras-talk-at-the-business-of-software-2009/,Kathy Sierra’s talk at the Business of Software 2009,2010-05-10T00:13:42+00:00,2018-04-23T21:07:52+00:00,Joel Spolsky,News,"
	I'm a long-time Kathy Sierra fan. Her talk at the Business of Software 2009 was amazing, even though, in retrospect, I realize now that she had a slide making fun of Stack Overflow's terrific new VC-backed business model. She even got the unicorn!
Watch the whole talk here. The next Business of Software conference will be in Boston, October 4th-6th.
	"
https://www.joelonsoftware.com/2010/05/04/news-127/,News,2010-05-04T00:13:41+00:00,2018-04-19T21:56:22+00:00,Joel Spolsky,"Stack Overflow, News","
	""And the best answer we could come up with was, let's make the damn thing free, and get some VC somewhere to pay for it.""
Announcing the Stack Overflow Series A financing
	"
https://www.joelonsoftware.com/2010/06/28/don-norman-at-the-business-of-software-2009/,Don Norman at the Business of Software 2009,2010-06-28T00:13:47+00:00,,Joel Spolsky,News,"
	Neil has posted a video of Don Norman (most famous for his book The Design of Everyday Things) speaking at the Business of Software conference last year in San Francisco.
""Imagine you're on the first slide of your powerpoint presentation and want to move to the next slide. Your remote control has two buttons. They are unmarked, but one button points up and one button points down.
""Which button do you press?""
It turns out half the people press up, half the people press down, and everybody thinks their choice is obvious. It's a great talk.
The early bird discount for the Business of Software 2010 (Boston, October 4-6) saves you $400, but it expires this week, so this is the right time to sign up for my favorite conference.
	"
https://www.joelonsoftware.com/2010/06/22/area-51-is-now-in-beta/,Area 51 is now in beta,2010-06-22T00:13:46+00:00,2018-04-19T21:56:22+00:00,Joel Spolsky,"Stack Overflow, News","
	Area 51 is now in beta. This is the promised place where the community comes together to invent new Stack Exchange sites.
Benofsky from Hacker News writes:
 Seems overly complicated, I have no idea what's going on when I visit Area 51, I guess this is their strategy for turning away uncommitted users. 
 Also, how are they going to make money?
I'm glad you asked, benofsky! The answer is simple. Volume.
(transcript)
Well, I'm not one to take Internet chat board comments seriously. After all, the Anonymous Nostradamus's over at Code Project reacted thus when Stack Overflow itself launched:
 I think the UI sucks. I can't imagine this site being around in a year.
We all know how stunningly accurate that prediction was:
Benofsky is onto something, though. Area 51 is not for everyone. If you don't know what it's for, or why it's going to work, or you can't figure it out, it's not, actually for you.
	"
https://www.joelonsoftware.com/2010/06/09/my-secret-weapon-for-setting-executive-compensation/,My secret weapon for setting executive compensation,2010-06-09T00:13:45+00:00,,Joel Spolsky,News,"
	My friend Noam at Harvard Business School does annual surveys of executive compensation in tech companies. The surveys are a great way to figure out how much to pay that VP of Sales you were thinking of hiring, or whether your equity grant as CTO is fair.
You can buy the studies for $999, or you can participate in the survey and get free access to the results when they're published.
	"
https://www.joelonsoftware.com/2010/06/08/paul-kennys-talk-at-the-business-of-software-2009/,Paul Kenny’s talk at the Business of Software 2009,2010-06-08T00:13:44+00:00,,Joel Spolsky,News,"
	Paul Kenny is a regular speaker at the Business of Software. He's an expert on sales, especially high tech sales, and both Red Gate and Fog Creek hire him all the time to train our sales teams and build our sales organization.
Here's a video of his talk at last year's conference:
The next Business of Software conference will be in Boston, October 4th-6th.
	"
https://www.joelonsoftware.com/2010/07/16/the-growing-empire-of-stack-exchange/,The growing empire of Stack Exchange,2010-07-16T00:13:50+00:00,,Joel Spolsky,News,"
	We launched three new Stack Exchange sites this week!
Gaming
Cooking
Pro Webmasters
We'll have three more for you next week, too.
	"
https://www.joelonsoftware.com/2010/07/12/domain-names/,Domain Names,2010-07-12T00:13:49+00:00,,Joel Spolsky,News,"
	""We decided that individually-branded sites felt more authentic and trustworthy. We thought that letting every Stack Exchange site have its own domain name, visual identity, logo, and brand would help the community feel more coherent. After all, nobody wants to say that they live in Housing Block 2938TC. They want to live in Colonial Manor. Never mind the connotation of, well, colonies.""
Domain Names
	"
https://www.joelonsoftware.com/2010/07/07/web-applications-stack-exchange-now-in-beta/,Web Applications Stack Exchange now in beta,2010-07-07T00:13:48+00:00,2018-04-19T21:56:21+00:00,Joel Spolsky,"Stack Overflow, News","
	Want to know how to export mail from Gmail? Or delete your Facebook account? Or send giant files via email?
Well, the new Web Applications Stack Exchange is for you. It's a part of the Stack Exchange network, so it has the clean, elegant design that made Stack Overflow a phenomenal success.
The newest member of the Stack Exchange Network is the first one to go through the community site-creation process called Area 51. There are more great sites in the pipeline, but they have to demonstrate that they can reach critical mass or we won't create them.
	"
https://www.joelonsoftware.com/2010/08/31/a-new-wordpress-stack-exchange/,A new WordPress Stack Exchange,2010-08-31T00:13:52+00:00,2018-04-19T21:56:21+00:00,Joel Spolsky,"Stack Overflow, News","
	We've been opening new Stack Exchanges left and right on a variety of topics. In almost every case, the Stack Exchange appears to duplicate the content of an existing community. For example, our WordPress answers site (now in beta) covers the exact same material as WordPress.org's existing forums.
This is nothing new to us at Stack Overflow, which purported to cover the exact same material as hundreds (if not thousands) of other programming sites. There's no rule that says that there needs to be exactly one Q&A website per topic.
There is, however, a compelling case for the Stack Exchange technology. WordPress.org's forums don't have voting, so you have to read through every answer and decide for yourself which one might solve your problem. They don't have reputation, so there's no way to see whether you're getting an answer from someone who knows what they're talking about. They don't have wiki-style editing, so collaboration is impossible. You have to log on to ask or answer a question, so the burden of participation is higher. Stack Overflow is simply better than traditional forums, which is why it largely replaced proprietary forums. I remember hours of discussion with John Resig and the folks at jQuery who couldn't decide whether to replace the jQuery Google Group with a forum or with a Stack Exchange. Ultimately it didn't matter that much, because most of the jQuery Q&A activity happens on Stack Overflow anyway.
One day, the features that are standard on Stack Exchange will be copied everywhere. Until then, we'll keep churning out new sites.
	"
https://www.joelonsoftware.com/2010/08/19/simplicity-vs-choice/,Simplicity vs. Choice,2010-08-19T00:13:51+00:00,,Joel Spolsky,News,"
	Sometimes I think a pretty good business model would be to copy the applications that 37signals makes, but make them more complex. More features, more promises-generally, just more complicated.
Here's the video from a talk I gave at the Business of Software conference last year:
I'll be speaking again at this year's conference in Boston, October 4th-6th.
	"
https://www.joelonsoftware.com/2010/09/30/webappsstackexchangecom-strikenothingtoinstallcomstrike-now-live/,WebApps.stackexchange.com nothingtoinstall.com now live!,2010-09-30T00:13:57+00:00,2016-12-05T01:58:34+00:00,Joel Spolsky,News,"
	The first Stack Exchange site to make it all the way through the community creation process is now live and out of beta!
webapps.stackexchange.com is a place to get help with web applications. Want to know how to email huge files? How to delete your Facebook account? How to secretly follow someone on Twitter? How to backup WordPress blogs, ahem, Jeff? This is the site.
(Updated: Only days after launching, we changed the name from ""nothingtoinstall.com"" to ""webapps.stackexchange.com"" because nobody really liked that name!)
	"
https://www.joelonsoftware.com/2010/09/29/fogbugz-and-kiln-coming-soon-to-a-city-near-you/,FogBugz and Kiln (coming soon to a city near you),2010-09-29T00:13:56+00:00,,Joel Spolsky,News,"
	Thanks to the hard work of the Fog Creek team, including ten great summer interns, we have just released amazing new upgrades to FogBugz and Kiln.
To kick off the new releases, we're about to start another one of our famous world tours. I'll be flying to 20 (yes, twenty) different cities to demo FogBugz 8.0 to anyone who wants to come see it in person.
As an added bonus, I'm also going to bring along someone from the Kiln team to teach a one-hour course in distributed version control. If you've been wondering what all the fuss is about, this is a painless way to learn the basics of the new generation of version control.
The events are absolutely free but they always fill up right away, so go sign up now! 
Map generated by the Great Circle Mapper - copyright (c) Karl L. Swartz
	"
https://www.joelonsoftware.com/2010/09/21/new-png-based-stack-overflow-flair/,"New, PNG-based Stack Overflow flair",2010-09-21T00:13:55+00:00,2018-04-19T21:56:21+00:00,Joel Spolsky,"Stack Overflow, News","
	
	"
https://www.joelonsoftware.com/2010/09/17/merging-season/,Merging Season,2010-09-17T00:13:54+00:00,,Joel Spolsky,News,"
	Area 51 is filling up with thousands of ideas for new Stack Exchange sites, and a pretty clear pattern has started to worry us: too many ridiculously niche proposals, overlapping proposals, and proposals that are already covered by an existing site.
Merging Season
 
	"
https://www.joelonsoftware.com/2010/09/02/fork-it/,Fork it!,2010-09-02T00:13:53+00:00,2018-04-19T21:56:21+00:00,Joel Spolsky,"Stack Overflow, News","
	The Stack Overflow Blog: ""The Unix world loves to take sides. I don't have to blog about this; Freud already did, in 1930. He called it 'the narcissism of minor differences'""
	"
https://www.joelonsoftware.com/2010/10/21/world-tour-last-chance/,World Tour – last chance,2010-10-21T00:13:58+00:00,,Joel Spolsky,News,"
	Due to unexpected demand we've been working with the venues for the upcoming FogBugz World Tour 2010 (incorporating DVCS University) to find more room. We already have more than 3154 people signed up and in some cities, we moved to a larger venue to accomodate everybody.
That means there's still room in most cities if you haven't signed up.
If you come, you'll see me give a demo of FogBugz 8.0 and Kiln 2.0, and we'll give you a one hour introduction to distributed version control ... how it works, how it's different than the version control you know and love, and how to set it up to make your life easier. There will also be coffee and cookies, and a chance to meet Fog Creek people and other techies from your town.
Sign up now, it's free! Hurry up-it all starts next week. I look forward to meeting you in person.
PS: If you get waitlisted, don't despair. The night before each event, we will email everybody begging them to cancel if they know they can't make it, so that we can let in people from the waitlist. What happened last year is that a few people cancelled the night before allowing us to let in all or most of the waitlist.
	"
https://www.joelonsoftware.com/2010/12/09/stack-exchange-for-jewish-life-and-learning/,Stack Exchange for Jewish Life and Learning,2010-12-09T00:13:59+00:00,2018-04-19T21:57:44+00:00,Joel Spolsky,"Stack Overflow, News","
	
It seems like Stack Exchange is the perfect platform for questions about Jewish observance. After all, most of the Talmud reads just like Stack Overflow: a question, followed by multiple answers, usually with the highest ranking answer appearing first. The number of questions is infinite. 
If you would be interested in participating in such a thing, please commit to the proposal today.
	"
https://www.joelonsoftware.com/2011/01/24/stack-overflow-2010-recap/,Stack Overflow 2010 recap,2011-01-24T00:14:01+00:00,2018-04-19T21:57:44+00:00,Joel Spolsky,"Stack Overflow, News","
	(reposted from the Stack Overflow blog)
2010 was an absolutely amazing year here at Stack Overflow. We grew from 7 million visitors to over 16 million, putting us in Quantcast's top 400. We raised $6 million in venture capital, and we went from three full time employees to 27. We built a 7500 square foot office in New York, and we launched a ton of new features and sites, like Stack Exchange, a network of 33 Q&A sites on diverse topics from cooking to computer science. Stack Exchange grew 51% in December alone. Wow.
The expert Q&A model that Stack Overflow pioneered is really working. The statistic I'm proudest of is the percentage of questions that get a good answer, over 80% (and many of the new Stack Exchange sites have 100% answer rates!)
Traffic
The true measure of success for any Internet company is how often people come up to me in swank hotel lobbies and offer to buy me meals, let me use their corporate jet, etc. But since there is a great deal of disagreement as to how to measure that, we track a reasonable proxy called ""eyeballs,"" on the theory that if a site is useful, people will load it up in their browsers and eyeball it.
Traffic to Stack Overflow grew 131% in 2010, to 16.6 million global monthly uniques. *Uniques* are counted by cookies, so the number of human beings is less. We also measure the number of page views (top level pages loaded, which doesn't count images and supporting files), which has similarly grown from 31.8 million per month to 72.8 million per month, i.e. 129% growth.
Based on the number of people who do come up to us in hotel lobbies, we're pretty sure that ALL the programmers in the world use Stack Overflow. (Source: completely made up. But seriously, when was the last time you met a programmer who didn't use ""El Stack""?) In order to keep growing and making the Internet more awesome, we have to expand into new subject areas, like Molecular Biology and Harley Davidson Belt Buckles. That's what Stack Exchange is all about. Stack Exchange growth is insane. In six short months, we've gone from zero to 1.5 million monthly visitors, growing 51% in December.
If, as planned, we continue growing at 51% a month, we will be bigger than Facebook in 15 months. We're ALREADY bigger than ocn.ne.jp (No, I've never heard of that either. But we're bigger). Jeff and I are already planning who will play us in the Aaron Sorkin movie. (Tyler Labine and Zac Efron, obviously.)
Now, obviously, all this TRAFFIC isn't worth a thing if people aren't getting answers to their questions. That's why our favorite thing to measure is ""percent of questions answered."" And not just any answer will do, either: to count a question as ""answered"", either the original poster has to accept the answer, or a third party has to upvote the answer. This is where Stack Overflow really shines compared to other Q&A sites: we actually get questions answered. Three of our sites actually have 100% answer rates!
New Sites
Last summer, we relaunched Stack Exchange as a democratically-driven network of sites on topics chosen by our users. Some of these sites are directly related to programming (for example, Game Development), but some are quite far afield, from English Language toCooking.
We call it the Stack Exchange network, and at StackExchange.com you'll find a directory of all of them, along with some hot questions, statistics, leaderboards, and other tools so that you can follow the sites and tags that you're interested in.
We learned a long time ago that the only way to get questions answered promptly is to have a critical mass of knowledgeable users, so we have an onerous process called Area 51 where sites are proposed, discussed, and voted on. If a proposed site doesn't have critical mass, we just won't create it. Even if it does get created, it has to maintain a certain level of traffic and quality or we'll close it down.
So far, 13 sites have gone all the way through the Area 51 process and launched. Dozens more are already in beta. Hundreds more are in active discussion and will launch when they reach a critical mass of interested participants.
The development team has been knocking out new features at a constant pace. They built an amazing web-based chat system, and we've added literally hundreds of new features and improvements to the core Stack Overflow engine which we roll out continuously.
The Company
At the beginning of the year, Stack Overflow LLC was just three developers working from home. In the spring, we raised $6 million in venture capital from Union Square Ventures and a long list of celebrity angel investors, which allowed us to expand rapidly. We hired a team of great people, including several of the high-reputation users that you know from Stack Overflow.
We now have community managers, a sales team, two full time system administrators, and Very Important Administrative Overhead like myself, but most importantly, we have a great team of developers, in New York and around the world, building the next generation of cool features, like the important ""wheel of blame"" feature, which we can run at any time to calculate precisely who is responsible for anything that went wrong. (Contrary to popular belief, it's not always Jason Punyon.)
To make room for all these people, or, at least, those who live in New York, we rented a 7500 square foot, class A, super-elite batcave in New York and then fixed it up to be nice, with cool furniture including Aeron chairs and height-adjustable desks, and lots of glass to bring views and daylight deep into the batcave. And of course, we have private offices with a half dozen gigantic 453-inch monitors for each developer. And there's an amazingly cool Star Trek couch. Does your company have a Star Trek Couch? *I didn't think so.* We also have Rovio, a little robot that our remote developers can use to visit the office ""virtually."" (There. I said ""virtually."" Are you happy now?)
Overall 2010 has been a real breakout year for Stack Overflow, which is now the largest programmer website in the world (source: me) and the best, fastest-growing Q&A website in the world (source: also me). We've got an incredible team firing on all cylinders, so we're really looking forward to 2011.
	"
https://www.joelonsoftware.com/2011/01/05/the-wikipedia-of-long-tail-programming-questions/,The Wikipedia of Long Tail Programming Questions,2011-01-05T00:14:00+00:00,2018-04-19T21:57:44+00:00,Joel Spolsky,"Stack Overflow, News","
	""Have you ever noticed how certain questions come up again and again on Stack Overflow sites?""
- From The Wikipedia of Long Tail Programming Questions, over on the Stack Overflow blog.
	"
https://www.joelonsoftware.com/2011/02/23/careers-20-by-stack-overflow/,Careers 2.0 (by Stack Overflow),2011-02-23T00:14:04+00:00,2018-04-19T21:57:44+00:00,Joel Spolsky,"Stack Overflow, News","
	One day, you'll be telling your grandchildren about getting a programming job, version 1.0. You would send a ""resume"" to a ""recruiter."" It included all kinds of silly information required by the esoteric resume ritual (foreign languages spoken, whether or not you play ultimate Frisbee, Microsoft-veteran status). This so-called ""information"" was utterly useless at determining whether you could program or not, but if you spelled everything right and used suitable fonts, you could come in for a day of interviews at which you would be asked to perform mundane programming tasks on a whiteboard.
Careers 2.0 is here!
	"
https://www.joelonsoftware.com/2011/02/11/does-your-employer-own-your-side-projects/,Does your employer own your side projects?,2011-02-11T00:14:03+00:00,,Joel Spolsky,News,"
	There's a surprising amount of misinformation out there about whether software companies own the work that a programmer does in their spare time.
From my answer to the question on answers.onstartups.com:
 Being an employee of a high tech company whose product is intellectual means that you have decided that you want to sell your intellectual output.
Read the whole thing here:
 If I'm working at a company, do they have intellectual property rights to the stuff I do in my spare time?
	"
https://www.joelonsoftware.com/2011/02/03/fogbugzkiln-demo/,FogBugz/Kiln Demo,2011-02-03T00:14:02+00:00,,Joel Spolsky,News,"
	If you weren't able to make it to the FogBugz/Kiln world tour, a video of my presentation is up now on YouTube.
(If you have a high bandwidth connection, try the ""720p"" option, which shows the screen more clearly.)
	"
https://www.joelonsoftware.com/2011/03/09/stack-overflow-the-company-is-now-stack-exchange/,Stack Overflow (the company) is now Stack Exchange,2011-03-09T00:14:05+00:00,2018-04-19T21:57:44+00:00,Joel Spolsky,"Stack Overflow, News","
	The snack room at Stack Exchange got a wee upgrade today:
Find out why (and read to the end to find out how to get your own StackExchange sticker) at the Stack Overflow Blog.
	"
https://www.joelonsoftware.com/2011/04/28/lunch/,Lunch,2011-04-28T00:14:07+00:00,,Joel Spolsky,News,"
	What do you do for lunch every day? Where do you eat it? With whom?
I've been on teams that eat together every day, and it's awesome. I've been on teams that don't, and lunch every day is, at best, lonely.
A lot of big tech companies have cafeterias, either free (Google) or cheap (Microsoft). At these companies, some teams actually make an effort to eat together every day. But a lot of teams don't. If you wander around these places at lunchtime, you'll see some large groups, a lot of pairs of people who have scheduled a ""lunch meeting,"" but you'll also see a distressing number of loners eating by themselves. Maybe they're reading a book or checking their email while they eat so they don't look sad. Maybe they took their lunch back to their desk so they wouldn't have to sit in the cafeteria by themselves. Maybe they genuinely don't like people and they're happy to eat alone. Or maybe they're just telling you that.
At Google and Microsoft, the cafeterias can get so crowded that the loners really have to sit with other groups because there isn't enough room to sit at a table by themselves. Occasionally, the group they sit down with makes an effort to include the loner in their conversation. More often, the loner is obligated to pretend to be utterly engrossed in playing Farmbook on their smartphone, so as to provide a pretext to avoid having to make social contact. Excuse me, I'd love to introduce myself to you, but it's very important that I update my cabbage.
Where and with whom we eat lunch is a much bigger deal than most people care to admit. Obviously, psychologists will tell us, obviously it goes back to childhood, and especially school, particularly Junior High, where who you eat with is of monumental importance. Being in any clique, even if it's just the nerds, is vastly preferable than eating alone. For loners and geeks, finding people to eat with in the cafeteria at school can be a huge source of stress.
The importance of eating together with your co-workers is not negotiable, to me. It's too important to be left to chance. That's why we eat together at long tables, not a bunch of little round tables. That's why when new people start work at the company, they're not allowed to sit off by themselves in a corner. When we have visitors, they eat together with everyone else.
Even though Stack Exchange and Fog Creek are completely separate companies, we take advantage of the fact that our offices are in the same building to eat together every day. I'm glad that we have a chance to do this, even though a lot of people tend to clique-up and sit with the same people day after day.
There's a lot of stuff that's accidental about Fog Creek and Stack Exchange, but lunch is not one of them. Ten years ago Michael and I set out with the rather ambitious goal of making a great place to work. Eating together is a critical part of what it means to be human and what it means to have a humane workplace, and that's been a part of our values from day one.
	"
https://www.joelonsoftware.com/2011/04/27/the-podcast-is-back/,The podcast is back!,2011-04-27T00:14:06+00:00,2018-04-23T17:16:22+00:00,Joel Spolsky,News,"
	Jeff Atwood and I have resumed our weekly podcast, formerly known as the Stack Overflow Podcast, now known as the Stack Exchange Podcast!
Here are some ways to find us:
On iTunes. If you have an iPhone or iPod that you sync to iTunes, you can set this up to automatically download every week. iTunes link to Stack Exchange Podcast
On SoundCloud. SoundCloud is sort of like a sound version of Twitter, a very cool way to subscribe to audio. Stack Exchange Podcast on SoundCloud
Or you can simply subscribe to the Stack Exchange Blog, where the podcast will arrive every Wednesday at about 3PM EST, complete with show notes and listener comments.
Special thanks to Special Agent Alex Miller, who is, in his spare time, the new producer of the podcast. We'll be making lots of technical improvements to the podcast over the next couple of months, so stay tuned... it'll be really fun.
	"
https://www.joelonsoftware.com/2011/05/26/modern-community-building/,Modern community building,2011-05-26T00:14:09+00:00,,Joel Spolsky,News,"
	The Stack Exchange network is already up to 51 sites on diverse topics, from math to cooking to science fiction. Each site is a community on its own, and each community has its own needs and values. Pouring a big fat algorithm in equal measures on top of 51 different groups of people does not always work the way you might hope it would work. Maybe that's why the super-algorithm companies (like Google) tend to suck when they try to build social applications.
Our goal as a company is to incubate each of these 51 communities-to get them to critical mass. Critical mass is that magic moment when the community has enough activity that it grows by itself.
Building communities on the Internet is a new kind of profession. There are an awful lot of technology companies, founded by programmers, who think they are building communities on the Internet, but they're really just building software and wondering why the community doesn't magically show up.
Stack Exchange is trying really hard not to suck at building communities. I would say we're earning a solid B so far, but we're working really hard at learning... doing little experiments and getting early results. And one thing we noticed is that the pure, algorithmic approach can't possibly work for different communities: you need a political/social approach. That is, you need smart human beings to use smart human judgment and cultivate each community individually.
Or, to use a metaphor that has been on my mind, you can't use a robot to train a puppy. Every puppy is different.
With 51 communities and a new one opening almost every week, our small team of four community managers are doing a great job but they just don't have the bandwidth to help cultivate every site. So we depend on the most active, enthusiastic users to promote their own communities and help them flourish. But these users are usually domain experts, not community organization experts.
So what I plan to do is build a team of super-evangelists here at Stack Exchange to serve as backup. Sort of like Lady Gaga's backup dancers, but probably without as many muscles, they are not onstage to lead; they're there to fill up the stage with more hotness than one person can provide.
This job will be sort of like being a community organizer at a non-profit. It combines elements of marketing, PR, and sales, but it's really something different. I don't expect that there are a lot of people out there who already kn0w how to do this well, so I'm going to train them, personally. Not that I know how to do this, but we'll learn together. Every workday is going to start with a huddle at 9am and a plan for the day's activities and an intensive six hours of work. Every workday is going to end with an hour of learning... reading Kawasaki and Godin and Ries and Trout, talking with invited experts, meeting with members of the community about what worked and what didn't worked. Everyone who joins the program (and survives for a year) will come out with an almost supernatural ability to take a dead, lifeless site on the internet and make it into the hottest bar in town. That's a skill worth learning for the 21st century.
If you or someone you know is enthusiastic, energetic, super-outgoing (a social connector), a great communicator (capable of sending 50 personal emails in an afternoon), with some training in psychology, political science, economics, philosophy, or the humanities in general, and you're looking for an alternative to a dead-end mailroom job at a PR agency, this is a rare opportunity... please apply.
	"
https://www.joelonsoftware.com/2011/05/09/help-us-organize-the-next-stack-overflow-conference/,Help us organize the next Stack Overflow conference,2011-05-09T00:14:08+00:00,2018-04-23T21:56:20+00:00,Joel Spolsky,News,"
	We're working on a series of two-day Stack Overflow conferences for the fall:
""What's this conference about? The idea for the original DevDays was to have high-bandwidth, intensive introductions to a wide variety of new technologies... the kinds of technologies that everybody wants to learn but doesn't necessarily need to use on a project right now. Last time, it was things like iPhone development, Python, jQuery, Google AppEngine, etc. This year, we're asking you. So far, there's a lot of interest in DVCS, HTML5, and Node.js.""
 
	"
https://www.joelonsoftware.com/2011/06/27/stack-overflow-devdays-is-back/,Stack Overflow DevDays is Back!,2011-06-27T00:14:11+00:00,2018-04-23T21:54:51+00:00,Joel Spolsky,News,"
	[UPDATE - September 6th - Regrettably, DevDays had to be cancelled. See the announcement on the Stack Exchange Blog for details.]
Stack Overflow DevDays, the universe's best conference series for coders, is back, and it's bigger than ever!
Here's the idea behind DevDays. You're a developer. You'd love to learn all the latest hot new technologies. Things like DVCS, HTML 5, Node.js, CSS3, Hadoop, etc. The stuff the cool kids are all talking about on the playground while you're stuck in the basement somewhere grinding away on Java Enterprise Visual Basic.
The idea behind DevDays is a fast, high-bandwidth, fire hose tutorial on at least ten interesting concepts. We'll assume that you're a developer, you know what a loop is, but each tutorial starts at the ground level and gives you a whirlwind tour through a technology by showing you actual code. Every presenter launches an editor and writes code from scratch and shows you what it does. There are almost no prepared PowerPoint slides with ten bullet items each containing 10 words explaining the ROI benefits of some new technology. There are not even any PowerPoint slides with cats and pandas doing hilarious things, such as this one:
Yes, DevDays contains precisely NO funny pictures of cats. We might have Jon Skeet with a sock puppet, though:
(That was Jon Skeet and Tony the Pony from London DevDays 2009.)
What we have instead is some great presenters from the community who will write code and compile code and explain it all while you watch, and you'll come away knowing enough about each new technology to know what it's good for, what it's not so good at, how to do the basics, and how to learn more. Bottom line: it's the best possible way to spend two days and learn as much as you would learn in two years of reading Twitter.
We have FOUR, yes FOUR different DevDays conferences coming up this fall. Each one is its own production, and they're all going to be spectacular. If you came to DevDays last time, prepare to get blown away. This time everything is DOUBLE. Two days instead of one. Better food and coffee. Better locations. Bigger screens to make it easier to follow along. Lots of social activities. And, for the first time ever, we'll be visiting one city in Australia (shown at right), for an antipodean increase of infinity percent.
Anyway, registration is now open. The schedule is:
October 12-13 San Francisco
October 25-26 Sydney
November 14-15 London
December 15-16 Washington, DC
There are two! special! bonuses! you should know about before you choose a city:
In San Francisco, the day after the conference (October 14), Server Fault is holding a one-day High Scalability conference. You may want to go to both for a full three days of amazing amazingness... if you think your heart can handle the excitement.
In Washington, the day before the conference (December 14), we're have a big open source hackathon. The entire Stack Exchange dev team will be on hand and it'll be a lot of fun.
So, go, sign up now. You can save $100 using discount code JOELONSOFTWARE.
	"
https://www.joelonsoftware.com/2011/06/24/ny-state-passes-marriage-equality-act/,NY State Passes Marriage Equality Act,2011-06-24T00:14:10+00:00,,Joel Spolsky,News,"
	
	"
https://www.joelonsoftware.com/2011/09/15/should-you-launch-at-a-conference/,Should you launch at a conference?,2011-09-15T00:14:13+00:00,,Joel Spolsky,News,"
	Should you launch at Launch? (Or TechCrunch Disrupt? Or Demo? They're all pretty similar). 
This year I launched two major new products at conferences: Careers 2.0 and Trello, and both times, it was totally worth it.
First, a little background. There are three popular conferences where you can launch new products: Launch, TechCrunch Disrupt, and Demo. They all work the same way:
You apply. If you have a half-decent product that is genuinely new, you're likely to get a spot. That said, hundreds of companies apply for these conferences with unbearably awful products, so there's always a risk that you'll get lost in the noise.
If you get in, you will have a chance to give a demo on stage for exactly six minutes. There will be some celebrity judges who will give you a few sentences of honest feedback about your startup. (Here's how our demo went down).
Even if you don't get a slot presenting, you may have a chance to set up at a little table in the conference area where you can show off your product to passers-by.
The official promise is that you'll get exposure to a lot of journalists and VCs, and this will launch your startup on the way to huge success. The truth is, well, complicated, but I'll get into that in a minute.
At the end there is a ""winner."" For example at Disrupt the winner (chosen by a panel of utterly uncorruptable, gazillionaire judges) receives a check for $50,000. There are between 30 and 50 startups presenting at each conference, and the politics behind who ""wins"" are murky enough that you should basically assume that the chance of winning is zero. There's always going to be a ""Netflix for Cabbage"" or a ""Second Life for Facebook"" that the judges fall in love with. So the benefits of winning, which is vanishingly unlikely, should never factor into your decision as to whether to go or not.
So, are these conferences worth it?
Let's look, individually, at the two big promises of the conferences: exposure to VCs and exposure to the press.
Are VCs at these conferences? Absolutely. Does going to one of these conferences get you funded? It's complicated.
If you have a brilliant product, a great team, and you're eminently fundable, but you don't know any VCs yet, and you launch at one of these conferences, you will meet a bunch of VCs-even some top notch ones-and the conference may actually get you funded. At the last TechCrunch Disrupt, the finalist judging panel consisted of some of the best investors in Silicon Valley. If you made it to the finals, these folks now know who you are and what your product does, and if your company is fundable, they'll all take your call.
That said, if there's some reason your product is not fundable, all the conferences in the world can't help you. Yeah, you may have a chance to present to a bunch of unknown VCs wandering around looking for investment ideas, but most of them won't actually invest in you and those that will may be more trouble than they're worth.
I've been tossing around the word fundable without defining it. Every entrepreneur thinks their ""Mint.com for Laundry Tickets"" is the most fundable idea ever, and all VCs should be dying to invest, if they would only sit still for the brief 62 minute demo! 
No. Technically, whether you're fundable has to do with things like traction, the total size of the opportunity, the quality of the team, whether you build moats (?), and a bunch of other gibberish that VCs like to tell themselves in their heads so that they don't think they're just spinning bottles. 
But it's too hard for an entrepreneur to evaluate their own fundability. So here's a working definition of fundable which is all that matters for you as an entrepreneur:
If you're knocking on VC's doors and they all seem to be opening, you're fundable. If you keep getting more meetings, more introductions, and good vibes, keep going. You'll get funded.
If you're knocking on VC's doors and they all seem to be closed, you're not fundable. These days most VCs will just tell you why. If you can't get a second meeting with anyone, just stop. You're beautiful, you're smart, and you're going to change the world, but you happen to be non-fundable, so just stop. Either change the company or the product, or find a way to make your product popular and successful without investors. 
So, that said, if you don't know any VCs and think you might have a fundable company, a conference like Launch or Disrupt will get you your first intros.
Now, on to the other promise: Press and publicity.
It is possible, nay, common, to launch at one of these conferences and get NO press whatsoever. Zero. Nada. At Disrupt you're guaranteed at least one mention in TechCrunch, but you'll soon discover that TechCrunch's tech-industry insiders may not really be the audience you need.
Yes, there are a lot of journalists at these conferences. Disrupt probably had about 200. When we launched Trello this week, you know how much press we got? 
Four stories. 
And every one of those stories came because I knew the reporter and emailed them before we launched, and pre-briefed them on our product under embargo.
Yep. There was not a single reporter, from the 200 that were registered, at Disrupt who saw our presentation and said, ""Oh cool, I'm going to write about that.""
You know why? Because there were dozens of companies launching in two days, and reporters usually file one or two stories a day, so they all focus on one or two companies they find interesting (and at this last conference, they mostly wanted to talk about Arringtongate).
That said, you can get exactly the burst of publicity you need from launching at one of these conferences, if you do it right. You have to:
Prebrief friendly media (under embargo)
Get the bloggers in your area to write about you
Have a sensational demo that gets retweeted
And do this all at exactly the same moment when it's newsworthy.
We did all that and leveraged 6 minutes of fame into 130,000 eyeballs.
The thing entrepreneurs often forget about news media: It's supposed to be news. They want new things. As a startup, you are only going to have two or three new things that happen, ever:
Launching your product
Raising money from a VC
Reporting insane traffic or revenue (optional)
That's it. Those are your chances to get news. Under no circumstances can you expect to be covered because you take a walk in the woods with potential employees... you're not Mark Zuckerberg. (Unless you are, in which case, Hi Mark!) You're not getting font changes on the home page covered, unless you used to work for Mark Zuckerberg.
In short, you only have two or at most three chances to got coverage unless there's Mark Zuckerberg involvement.
Well, wait, there's one more way. If you are very lucky, you will have some famous people involved in your company, and some of them will have tawdry affairs with prostitutes that are captured on video. That will get you a fourth story. Otherwise, you're not news. Get over it.
Also important: the news cycle is 12 hours, tops. If you call journalists the day after you release your product, it's not news. They won't care. You have to call them two days before you launch, tell them you're going to launch in two days, and offer to pre-brief them, so that they can run their story when it's actually newsworthy. The bottom line is that you have to get all your coverage within a period of a few hours which means you have to plan ahead and work hard. This is not the time for incrementalism. Don't worry about DDOSing your own server. There's no choice: you can't spread out the newsworthiness of your launch.
Because there are so few opportunities for a startup to get press, you have to make the most out of each one. That's why I am still a big believer in ""the big launch"" even though the Lean Startup ethic today is all about trickling things out to your users bit by bit and pivoting a million times.
Here's the story of Trello. We wrote the first line of code last January. By the time we hit 700 lines of code, the product was useful, and we immediately started dogfooding it in-house. We probably could have brought it to market after three months. That would have been ever so lean. There was a strong temptation just to dump it on the world super-early and spend the next year iterating and improving. 
We didn't do that. We worked for nine months, and then launched.
I couldn't stop thinking that you never have a second chance to make a first impression. We got 131,000 eyeballs on 9-month-old Trello when we launched, and it was AWESOME, so 22% of them signed up. If we had launched 3-month-old Trello, it would have been NOT SO AWESOME. Maybe even MEH. I don't want 131,000 eyeballs on MEH.
Still, I do, firmly, believe that a completely new product has to go through what Steve Blank calls customer development to find ""product/customer fit."" I.e., you have to get real people really using your product and you have to watch them and listen to them and make changes to make your product better, and you have to do this very, very early.
How did we reconcile this? Through the old fashioned method of a closed beta. We got a hundred of our best friends to use Trello and tell us what they thought while we iterated and polished and improved.
So the thing we launched, nine-month-old Trello, is really kind of slick. And we got a little initial bit of publicity for it, but then that publicity became massively viral. So those four news stories caused a few people to check out the product, and they liked it, because it was AWESOME NINE-MONTH-OLD TRELLO, and they wrote amazingly nice tweets. Thousands of amazingly nice tweets.
So, the story so far: if your product is really good, launching at one of these conferences is an incredible catalyst. If your product is ""meh,"" it won't help.
But wait-there's one important, bonus reason to launch at a conference, and it's a good enough reason to do it even if you don't need the publicity or the VC at all.
It's all about your team.
When you launch at a conference, you have an incredible hard deadline. This deadline forces you to ship. It forces you to make decisions about what has to be in version 1.0. It's actually an incredible team-building exercise to work your butt off, together, for the weeks leading up to the conference.
The morale boost you'll get will be incredible. After months of toiling away, the feeling you get from seeing real-world people actually start using your product is the best feeling you will ever get as a software programmer in your professional life. These are the great moments that make it all worthwhile. We *made* something. People used it. It matters.
It's like sex, with clothes on.
The members of our team who came out to San Francisco for Disrupt (including two summer interns who skipped a week of classes to join us) had a blast. It was the best week, ever. The members of the team who stayed back in the office, watching the conference piped in over the Internet, had a blast. It was the best week, ever.
Work has to matter. 
The stuff we create can't just be bits on a hard drive.
Brett, Daniel, Bobby, Justin, Ian, and Aaron built something with their bare hands that will be a part of how the future works.
One company that just launched at Disrupt is trying to fix medical bills. Another wants to bring fresh produce from farmers direct to households. Another company built the universal translator from Star Trek. Good software developers invent the future.
This is what matters: launching products, getting them in the hands of users, and hearing them get value out of it. That's why we stay up late, ruin our wrists and our eyesight, and drive our families crazy. It's all about shipping.
	"
https://www.joelonsoftware.com/2011/09/13/announcing-trello/,Announcing Trello,2011-09-13T00:14:12+00:00,,Joel Spolsky,News,"
	Around the time of Fog Creek Software's ten year anniversary, I started thinking that if we want to keep our employees excited and motivated for another ten years, we were going to need some new things to work on. It occurred to me that we could easily afford to make four little two-person teams to launch four new products. That would give our developers more chances to move around from product to product when they got bored, which would make Fog Creek Software an even better place to work.
Each team, we decided, would be guided by the spirit of lean startups. They would ship early and often. They would listen to real-world customers instead of building things in an ivory tower. And they wouldn't be afraid to pivot endlessly until they made something that people wanted.
Next, we needed some business ideas. After ten years in management I still never knew what anyone was supposed to be working on. Once in a while I would walk around asking everyone what they were doing, and half the time, my reaction was ""why the hell are you working on THAT?"" So one of the teams started working on finding better ways to keep track of who was working on what. It had to be super simple and friction-free so that everyone would use it, but it had to be powerful, too.
We had an early idea called FIVE THINGS. Everybody would have a list of exactly five things that they were allowed to work on. The top two were things they were actively doing right now. The other three were things that they would do as soon as they finished the first two. But nobody was ever allowed to have SIX things assigned to them. If you have too many things on your to-do list, your motivation tends to sag.
Five Things wasn't the right idea, but it led us to the idea that became Trello. Pretty soon we had four programmers and two summer interns working on it. We started dogfooding the product when it was only 700 lines of code, and even in that super-simple form, we found it incredibly useful. By the end of the summer we realized we had a hit on our hands: an incredibly simple, easy-to-understand way for teams to collaborate online.
So without further ado, I'd like to introduce you to Fog Creek's newest product: Trello.
Read more about what Trello does
Sign up, it's awesome! 
	"
https://www.joelonsoftware.com/2012/01/13/new-york-city-gets-a-software-engineering-high-school/,New York City gets a Software Engineering High School,2012-01-13T00:14:15+00:00,,Joel Spolsky,News,"
	This fall New York City will open The Academy for Software Engineering, the city's first public high school that will actually train kids to develop software. The project has been a long time dream of Mike Zamansky, the highly-regarded CS teacher at New York's elite Stuyvesant public high school. It was jump started when Fred Wilson, a VC at Union Square Ventures, promised to get the tech community to help with knowledge, advice, and money.
I'm on the board of advisors of the new school, which plans to accept ninth graders for fall of 2012. Here's why I'm excited about this new school:
1. It's a ""limited, unscreened"" school. That's Board of Ed jargon. It means that any student who is interested can apply-their grades and attendence record are not taken into account in deciding whether or not to admit them, only their interest. I think this is the best thing about the school. A lot of kids are just not interested enough in other academic subjects to get good grades, but they would make great software engineers. A lot of immigrants (especially in New York) are not yet proficient enough in English to get good grades in all their subjects, but they're going to make great software engineers, too. And in my humble opinion, a school that accepts a cross-section of students is bound to be more enriching than a school that only accepts academic superstars.
2. OMG do we ever need more software engineers. The US post-secondary education system is massively failing us: it's not producing even remotely enough programmers to meet the hiring needs of the technology industry. Not even remotely enough. Starting salaries for smart programmers from top schools are flirting with the $100,000 mark. Supply isn't even close to meeting demand. This school is going to be pretty small (in the 400-500 student range) but the Board of Ed has promised that if it's successful it'll be used as a template for more schools or for special programs inside larger schools. I predict that they will be overwhelmed with applicants and this will be the most popular new school in New York City in years.
3. And we need more diversity, too. One of the reasons the elite US colleges seem to turn out so few computer science majors every year is that they are only drawing from a narrow pool of mostly white and asian males. Minorities and women are embarrassingly under-represented. Hopefully an unscreened school in New York City can pump a lot more diversity into the pool.
4. It's not a vocational school. Unlike traditional vocational schools, this new school will have a rigorous academic component and will prepare students for college. But college is not for everyone-many of the best programmers I know were just not interested enough in a general four year degree and went straight into jobs programming.
I'm pleased to be involved in this project, but it needs more help: they're still looking for qualified computer science teachers and a principal. If you're interested drop me an email and I'll make sure it gets through to the right people.
	"
https://www.joelonsoftware.com/2012/01/06/how-trello-is-different/,How Trello is different,2012-01-06T00:14:14+00:00,,Joel Spolsky,"Fog Creek Software, News","
	Just a few months ago, we launched Trello, a super simple, web-based team coordination system. The feedback has been overwhelmingly positive and adoption has been very strong, even in its early, 1.0 state.
Trello is new kind of development project for Fog Creek. It's 100% hosted; there will never be an ""installed software"" version of Trello. That allowed us to modernize many aspects of our development process; I am happy to announce that there is absolutely no Visual Basic code involved in any part of Trello. What's next, flying cars?
The biggest difference you'll notice (compared to our previous products pitched solely at software developers) is that Trello is a totally horizontal product. 
Horizontal means that it can be used by people from all walks of life. Word processors and web browsers are horizontal. The software your dentist uses to torture you with drills is vertical.
Vertical software is much easier to pull off and make money with, and it's a good choice for your first startup. Here are two key reasons:
It's easier to find customers. If you make dentist software, you know which conventions to go to and which magazines to advertise in. All you have to do is find dentists. 
The margins are better. Your users are professionals at work and it makes sense for them to give you money if you can solve their problems.
Making a major horizontal product that's useful in any walk of life is almost impossible to pull off. You can't charge very much, because you're competing with other horizontal products that can amortize their development costs across a huge number of users. It's high risk, high reward: not suitable for a young bootstrapped startup, but not a bad idea for a second or third product from a mature and stable company like Fog Creek.
Forgive me if I now divert into telling you a quick story about my time spent on the Microsoft Excel team way back in 1991. (Yes, I know you were not born yet, but I assure you that computers had been invented. Just hop up here on my knee and shut up.)
Everybody thought of Excel as a financial modeling application. It was used for creating calculation models with formulas and stuff. You would put in your assumptions and then calculate things like ""if interest rates go up by 0.00001% next year, what percentage of Las Vegas homeowners will plunge into bankruptcy?"" For example.
Round about 1993 a couple of us went on customer visits to see how people were using Excel.
We found a fellow whose entire job consisted of maintaining the ""number of injuries this week"" spreadsheet for a large, highly-regulated utility.
Once a week, he opened an Excel spreadsheet which listed ten facilities, containing the name of the facilities and the number 0, which indicated that were 0 injuries that week. (They never had injuries).
He typed the current date in the top of the spreadsheet, printed a copy, put it in a three-ring binder, and that was pretty much his whole, entire job. It was kind of sad. He took two lunch breaks a day. I would too, if that was my whole job.
Over the next two weeks we visited dozens of Excel customers, and did not see anyone using Excel to actually perform what you would call ""calculations."" Almost all of them were using Excel because it was a convenient way to create a table.
(Irrelevant sidenote: the few customers we could find who were doing calculations were banks, devising explosive devices called ""derivatives."" They used Excel to maximize the bankers' bonuses on nine out of ten years, and to cause western civilization to nearly collapse every tenth year. Something about black swans. Probably just a floating point rounding error.)
What was I talking about? Oh yeah... most people just used Excel to make lists. Suddenly we understood why Lotus Improv, which was this fancy futuristic spreadsheet that was going to make Excel obsolete, had failed completely: because it was great at calculations, but terrible at creating tables, and everyone was using Excel for tables, not calculations.
Bing! A light went off in my head. 
The great horizontal killer applications are actually just fancy data structures.
Spreadsheets are not just tools for doing ""what-if"" analysis. They provide a specific data structure: a table. Most Excel users never enter a formula. They use Excel when they need a table. The gridlines are the most important feature of Excel, not recalc.
Word processors are not just tools for writing books, reports, and letters. They provide a specific data structure: lines of text which automatically wrap and split into pages. 
PowerPoint is not just a tool for making boring meetings. It provides a specific data structure: an array of full-screen images. 
Some people saw Trello and said, ""oh, it's Kanban boards. For developing software the agile way."" Yeah, it's that, but it's also for planning a wedding, for making a list of potential vacation spots to share with your family, for keeping track of applicants to open job positions, and for a billion other things. In fact Trello is for anything where you want to maintain a list of lists with a group of people.
There are millions of things that need that kind of data structure, and there hasn't been a great ""list-of-list"" app before Trello. (There have been outliners, but outlines are, IMHO, one of the great dead ends in UI design: so appealing to programmers, yet so useless to civilians).
Once you get into Trello, you'll use it for everything. I use about thirty Trello boards regularly, and I use them with everyone in my life, from the APs (Aged Parents), with whom I plan vacations, with every team at work, and just about every project I'm involved in.
So, ok, that was the first big difference with Trello: horizonal, not vertical. But there are a bunch of other differences:
It's delivered continuously. Rather than having major and minor releases, we pretty much just continuously push out new features from development to customers. A feature that you built and tested, but didn't deliver yet because you're waiting for the next major release, becomes inventory. Inventory is dead weight: money you spent that's just wasting away without earning you anything. Sure, 100 years ago, we had these things called ""CD-ROMs"" and we shipped software that way, so there was an economic reason to bunch up features before we inflict 'em on the world. But there's no reason to work that way any more. You already knew that, of course. I'm just saying-I stopped using Visual Basic about five minutes ago. Brave New World.
It's not exhaustively tested before being released. We thought we could get away with this because Trello is free, so customers are more forgiving. But to tell the truth, the real reason we get away with it is because bugs are fixed in a matter of hours, not months, so the net number of ""bugs experienced by the public"" is low.
We work in public. The rule on the Trello team is ""default public."" We have a public Trello board that shows everything that we're working on and where it's up to. We use this to let customers vote and comment on their favorite features. By the way, while Trello was under development, it was secret. We had a lot of beta testers who gave us customer feedback so that the development team could use lean startup principles, but the nine months we spent building version 1.0 in secret gave us a significant lead in a competitive marketplace. But now that we're shipping, there's no reason not to talk about our plans.
This is a ""Get Big Fast"" product, not a ""Ben and Jerry's"" product. See Strategy Letter I. The business goal for Trello is to ultimately get to 100 million users. That means that our highest priority is removing any obstacles to adoption. Anything that people might use as a reason not to use Trello has to be found and eliminated. For example:
Trello is free. The friction caused by charging for a product is the biggest impediment to massive growth. In the long run, we think it's much easier to figure out how to extract a small amount of money out of a large number of users than to extract a large amount of money out of a small number of users. Once you have 100 million users, it's easy to figure out which of those users are getting the most value out of the product you built. The ones who are getting the most value will be happy to pay you. The others don't cost much to support.
The API and plug-in architectures are the highest priority. Another way of putting that is: never build anything in-house if you can expose a basic API and get those high-value users (the ones who are getting the most value out of the platform) to build it for you. On the Trello team, any feature that can be provided by a plug-in must be provided by a plug-in.
(The API is currently in very rudimentary form. You can already use it to do very interesting things. It is under rapid development.)
We use cutting edge technology. Often, this means we get cut fingers. Our developers bleed all over MongoDB, WebSockets, CoffeeScript and Node. But at least they're having fun. And in today's tight job market, great programmers have a lot of sway on what they're going to be working on. If you can give them an exciting product that will touch millions of people, and let them dig deep into TCP-IP internals while they try to figure out why simple things aren't working, they'll have fun and they'll love their jobs. Besides, we're creating a product that we'll be working on for the next ten years. Technology that's merely ""state of the art"" today is going to be old and creaky in five years. We tried to go a little bit beyond ""state of the art."" It's a calculated risk.
None of this is very radical. TL;DR: Fog Creek Software develops an internet product using techniques that every Y-combinator startup has been using since spez was sleeping with his laptop so he could reboot Reddit when Lisp crashed in the middle of the night. If you haven't tried Trello yet, try it, then tell me on twitter if it worked.
	"
https://www.joelonsoftware.com/2012/02/13/the-management-team/,The Management Team,2012-02-13T00:14:16+00:00,,Joel Spolsky,News,"
	""The saddest thing about the Steve Jobs hagiography is all the young 'incubator twerps' strutting around Mountain View deliberately cultivating their worst personality traits because they imagine that's what made Steve Jobs a design genius. Cum hoc ergo propter hoc, young twerp. Maybe try wearing a black turtleneck too.""
From The Management Team, my guest post on Fred Wilson's blog.
	"
https://www.joelonsoftware.com/2012/03/27/the-founders-dilemmas/,The Founder’s Dilemmas,2012-03-27T00:14:17+00:00,,Joel Spolsky,News,"
	My friend Noam Wasserman at Harvard Business School has spent years researching startups. His work is great, because he actually does real, quantitative research on the kinds of things that everybody has opinions about. Should you raise more money or maintain more control? Should you have a cofounder? Should your friends and relatives be cofounders? When and if should a founder be replaced by a ""professional"" manager? There are certainly a lot of blog posts about this stuff but not a lot of data... until now. Wasserman has finally put it all together in a great book called The Founder's Dilemmas, which I highly recommend if you're starting a company.
(By the way, Wasserman will also be speaking at the Business of Software conference this fall in Boston.)
	"
https://www.joelonsoftware.com/2012/04/17/trello-at-uservoice/,Trello at UserVoice,2012-04-17T00:14:18+00:00,,Joel Spolsky,News,"
	The folks over at UserVoice are using Trello quite extensively throughout their development process. 
Founder Richard White describes it all in detail.
	"
https://www.joelonsoftware.com/2012/07/09/software-inventory/,Software Inventory,2012-07-09T00:14:19+00:00,,Joel Spolsky,"News, Program manager","
	Imagine, for a moment, that you came upon a bread factory for the first time. At first it just looks like a jumble of incomprehensible machinery with a few people buzzing around. As your eyes adjust you start to see little piles of things that you do understand. Buckets of sesame seeds. Big vats of dough. Little balls of dough. Baked loaves of bread.
Those things are inventory. Inventory tends to pile up between machines. Next to the machine where sesame seeds are applied to hamburger buns, there's a big vat of...sesame seeds. At the very end of the assembly line, there are boxes and boxes of bread, waiting for trucks to drive them off to customers.
Keeping inventory costs money. Suppose your bakery has six 50-ton silos to store flour. Whenever they empty out, you fill them up. That means on the average day you have 150 metric tons of wheat flour in stock. At today's prices, you've tied up $73,000. Forever.
Inventory may have other costs too, like spoilage. Flour lasts for months, but the minute bread comes out of the oven it starts dropping in value; after 24 hours it's nearly worthless.
Why keep inventory at all? Because there are costs associated with running out of things, too. If sesame seeds take two days to order, and you run out of sesame seeds, you are out of the hamburger bun business for two days. Inventory provides a buffer that prevents any part of the process from stalling. There are modern algorithms to optimize how much buffer you need at every point (read up on Toyota's lean production system and the Theory of Constraints to get started).
Why do I care about any of this? The software production process has several major ""inventory"" accumulation points, itself. Stuff accumulates at those points and ends up wasting a lot of time and money.
""What? How is software like a factory?"" you ask.
Think of product ideas as the raw material. Depending on your process, product ideas may go through several assembly line points before they are delivered as finished features to the customer:
A decision-making process (should we implement this feature?)
A design process (specs, whiteboards, mockups, etc)
An implementation process (writing code)
A testing process (finding bugs)
A debugging process (fixing bugs)
A deployment process (sending code to customers, putting it on web server, etc)
(PS No, this is not ""waterfall."" No it isn't. Is not. Shut up.)
In between each of these stages, inventory can pile up. For example, when a programmer finishes implementing their code (stage 3) they give it to a tester to check (stage 4). At any given time, there is a certain amount of code waiting to be tested. That code is inventory.
The ""cost"" of code inventory is huge. It might add up to six or twelve months of work that is stuck in the assembly line and not yet in customers' hands. This could be the difference between having a cutting-edge product (iPhone) or constantly playing catchup (Windows Phone). It's nearly impossible to get people to buy Windows Phones, even if the iPhone is only six months better. A lot of markets have network effects, and being first has winner-take-all implications. So getting rid of inventory in the development process can make or break a product.
Let's go over the three places most inventory accumulates.
Feature backlogs. Every product attracts new feature ideas, and you can't implement ideas as fast as you can think them up, so you write them down, and this list is called the feature backlog. A lot of the ideas on the backlog are bad ideas, and you merely wrote them down to avoid hurting the feelings of the people who thought them up. Backlogs make everyone feel good. 
The trouble is that 90% of the things in the feature backlog will never get implemented, ever. So every minute you spent writing down, designing, thinking about, or discussing features that are never going to get implemented is just time wasted. When I hear about product teams that regularly have ""backlog grooming"" sessions, in which they carefully waste a tiny amount of time and mental energy every day or every week thinking about every single feature which will never be implemented, I want to poke my eyes out.
Suggestion: Do not allow more than a month or two of work to get into the feature backlog list. Once the backlog is full, do not allow new items to be added unless you remove an item. Do not spend any time speccing, designing, or talking about backlog items: the backlog, in fact, should be seen as a list of things you are not allowed to talk about or work on.
The bug database is obviously a great thing to have. Bug reports should be complete, accurate, and actionable. But I have noticed that in many real-world companies, the desire never to miss any bug report leads to bug bankrupcy, where you wake up one day and discover that there are 3000 open bugs in the database, some of which are so old they may not apply any more, some of which can never be reproduced, and most of which are not even worth fixing because they're so tiny. When you look closely you realize that months or years of work has gone into preparing those bug reports, and you ask yourself, how could we have 3000 bugs in the database while our product is delightful and customers love it and use it every day? At some point you realize that you've put too much work into the bug database and not quite enough work into the product.
Suggestion: use a triage system to decide if a bug is even worth recording. 
Do not allow more than two weeks (in fix time) of bugs to get into the bug database. 
If you have more than that, stop and fix bugs until you feel like you're fixing stupid bugs. Then close as ""won't fix"" everything left in the bug database. Don't worry, the severe bugs will come back.
Undeployed features. There are still a lot of teams doing quarterly or annual releases, usually because their deployment process is expensive. Operating systems, or anything where software has to be installed by every user, is usually batched up. 
This is one of the most expensive forms of inventory: unshipped feature inventory. It could be earning you money, but it's sitting on the shipping dock of your factory, while the guy down the street already has a product that does that exact same thing.
Sometimes, perniciously, you don't even feel the pain, because everyone on your team has been dogfooding the new version for months. I'm sure everyone at Microsoft has been happily using Windows 8 for a year now, so they don't really feel, on a day to day basis, the pain of OEMs trying to sell Windows 7 in a Mac OS X Lion world.
Suggestion: Don't let completed features pile up in ways that don't make you money. Work on your deployment process so that you can get customers features in months rather than years. If you're already shipping monthly, figure out how to ship weekly. Keep pushing the bar on more and more frequent deployment of smaller and smaller changes.
So, where am I going with this? We've had all three kinds of inventory at Fog Creek: crazy long backlogs, overambitious bug databases, and features which got stuck for a year waiting for the next release to go out. All of these snuck up on us. I realized that we needed a system to constrain inventory so it doesn't build up. 
My original idea was to make a product called Five Things. It was going to be a project manager where everybody was allowed to have five things assigned to them: two things they were actively doing, one thing that was ""up next"", and a couple more that they were planning. That exact design idea didn't go anywhere (but if you want to build it, go for it), but it did evolve into Trello.
Trello works great for a reasonable amount of inventory, but it intentionally starts to get klunky if you have too many cards in one list. And that's exactly the point: it makes inventory visible so that you know when it's starting to pile up. (Click on the image at the right to see the Trello team's own development board).
Every day you look at your Trello board and see that there are seventeen completed features that are totally ready to ship but which haven't shipped for some reason, and you go find the bottleneck and eliminate it. 
Every time somebody suggests a crazy feature idea, you look at the Feature Backlog and realize it's just too long, so you don't waste any time documenting or designing that crazy idea.
And hopefully, you'll spend less effort working on things that never see the light of day. ""Backlog grooming."" Sheeeesh.
	"
https://www.joelonsoftware.com/2013/03/11/town-car-version-control/,Town Car Version Control,2013-03-11T00:14:20+00:00,2018-04-23T21:06:48+00:00,Joel Spolsky,News,"
	The team at Fog Creek is releasing a major new version of Kiln today. Kiln is a distributed version control system.
One of the biggest new features is Kiln Harmony, which lets you operate on Kiln repositories using either Git or Mercurial. So you can push changes to a Kiln repo using Git and then pull them using Mercurial. This means that you never have to decide whether you want to use Git or Mercurial. Religious war: averted.
But, I'm getting ahead of myself!
For those of you that have been living under a rock, the single biggest change in developers' lives in the last decade (besides Stack Overflow, natch) is Distributed Version Control. DVCS is such an important improvement over the previous generation of centralized version control (Subversion, CVS, etc.) that it's a required upgrade, even though it's honestly a bit harder to use.
The popular DVCS options are Git and Mercurial. Both are open source. They are very, very similar in capabilities and operation; in fact, they are so similar that Kiln Harmony hides all the differences, so you can use any Git or Mercurial tool to work with any Kiln repository.
If Git and Mercurial are open source, why are people making money selling them?
The short answer is that the open source tools are kind of raw. They're dune buggies. Powerful, yes, and sufficient for a college project, but as it turns out, people buy Cadillacs, not dune buggies, to drive around in, because they like to have windshield wipers, 14-way power adjustable seats, and a way to start the engine from twenty feet away. Just in case you live in a Hollywood movie and the ignition has been hooked up to a bomb.
Fog Creek (and others, notably GitHub) are making money selling version control by providing a whole bunch of features that make the overall code management experience easier and more useful. For example, we both provide professional, secure hosting, a web management and administration interface, and somebody you can call for help.
Where we differ is that Kiln is more focused on the corporate market, while GitHub was designed for open source projects. I think of Kiln as the corporate Lincoln Town Car, while GitHub is kind of a VW Minibus. Both are eminently better choices than using raw Git.
So, specifically, Kiln gives you corporate things like:
code reviews
access control and permissions
fast code search
a news feed to follow code you care about
GitHub gives you things that match the sociology of open source projects:
public home pages
a social network, with profiles
fork and pull workflow
Since internal corporate projects have a very different sociology than open source projects, Kiln is very different than GitHub. On internal projects, almost all code that is developed is eventually used, although it needs to be reviewed, so Kiln kind of assumes that everything you do is most likely going to end up in the main code base, and we have a slick code review system.
On open source projects, contributions can come from volunteers all over the Internet, many of whom are happy to fork the code for their own needs. So GitHub provides a social network, emphasizes the ease of forking someone else's code (something you're unlikely to do in a closed corporate environment), and has a thing called a pull request that matches the way people tend to collaborate on open source projects without advance coordination.
ANYWAY, back to the new version of Kiln.
When Tyler and Ben built Kiln 1.0, they built it on Mercurial. Why? Well, Mercurial had pretty much all the same concepts as Git, but Git was historically unfriendly to Windows which is used by many of our corporate clients. We also thought that the Mercurial command line (hg) was a bit closer to Subversion (svn) which a lot of programmers were already used to.
So, long story short, we decided Mercurial was about 1% better than Git and that's the way we went. We didn't want to start a holy war, and we liked Git, but we just had a feeling that all else being equal, Mercurial was marginally better than Git.
We still think that, but in the years since Kiln first shipped, GitHub has taken the world by storm, creating an ecosystem around Git that more than makes up for its minor failings. Today Git is without a doubt more popular. So we knew we needed to add Git to Kiln.
We could have done it the lazy way: support both kinds of repositories and make you choose which one to use. Maybe add some nice conversion tools.
But we are not lazy. We decided to do it the awesome way.
We decided that the awesome way would be to make Kiln fully bilingual. It stores every repo in both formats. It automatically converts everything back and forth, always. The translation is 1:1, reversible, and round-trippable. Whatever you do to a Kiln repository using Git will be immediately visible to Mercurial users and vice versa.
Every user of every Kiln repo can choose either Mercurial or Git, and everything always works.
You can push in Git, and pull in Mercurial. Or vice versa. Or both.
A team that uses Mercurial internally (and barely understands Git) can push their code to GitHub and interact with the GitHub community.
If your team likes Git but you prefer Mercurial yourself, you can use a different version control system than everybody else on your team and, honestly, they don't even have to know.
If your team is using Mercurial today but you want to switch to Git, you can move over - one person at a time. If Joe in Accounting refuses to move, it doesn't matter. He can keep using Mercurial.
Everything maps. Everything round-trips.
There are some other big improvements in the version of Kiln available today. Super-fast code search. SSH and IP-whitelisting for security. Project READMEs. A bunch of other improvements throughout the interface that will be a huge upgrade for anyone already using Kiln. If you're interested, you can start a free trial online.
	"
https://www.joelonsoftware.com/2013/04/30/free-as-in-fortune-cookies/,Free as in Fortune Cookies,2013-04-30T00:14:22+00:00,,Joel Spolsky,News,"
	Trello has been out for less than two years and it's been growing like wildfire. We recently hit 1.5 million members, of whom about 1/3 perform some action every month, and our MongoDB database now contains more than 70 million cards on 3.7 million boards.
So the obvious question I get all the time is, ""How exactly are you supposed to make money with that?""
You may have noticed that Trello is free. Not ""free trial,"" not ""freemium,"" but just plain old free. Some people have justifiably wondered if it really makes sense to pay a dozen people, nestled in fancy offices with free lunch and espresso, to develop software that we have to pay Amazon cash money to host, while not actually charging for said software. Some have commented that this business model might actually be just a few fries short of a Happy Meal.
What we really wanted to do was make a free product that helps millions of people, and then find some way to get paid by the 1% of those people who get the most value out of it. The 1% are delighted to pay. They actually email us asking if there is some way they can pay us. A fortune-cookie factory was so pleased with Trello they sent us a crate of tasty fortune cookies. Custom, Trello-color fortune cookies, with Trello fortunes inside. (Don't tell the IRS, because that's basically all we've made off of Trello to date, and I don't think we declared it.)
How do you identify the users who get the most value out of Trello? We thought any medium-to-large organization with lots of different Trello boards and many active Trello users must qualify. So then we tried to think of what kind of value-added stuff we could build and sell (for money) to organizations with lots of active users. Besides cookie dough.
The most obvious things were features around security (permissions, backups, etc). Big organizations have people coming and going all the time, so they might benefit from tools that make it easy to add people to Trello en-masse, and tools to make sure that when people leave the organization, they're removed from any boards they should be removed from. The kind of stuff that's helpful when tens or thousands of people inside an organization are all using Trello every day. 
We also added a feature called ""observers,"" which lets you add people to a board who might have permission to watch, vote, and comment, but who can't add cards or move cards around. This is meant to give professional landscapers, developers, web designers, consultants, and fortune-cookie factories a way to let their paying customers peek in on the progress of their project without messing it up. It's a classic example of a feature that is only useful when you're in that class of Trello users who get the most value out of it, so paying should be a no-brainer.
We bundled these features up and called them Trello Business Class. It's available today for $25 a month (per organization), or $200/year if you'd like to pay in advance. Of course, Trello itself is, and will remain, free, but starting today, we hope to actually make a little bit of walking-around money, too.
In the future we'll continue to add free features to Trello (there is a lot of exciting stuff in the hopper)-anything that is a common feature, useful to anyone, will be free. We'll also continue to develop new Business Class features that help large organizations manage Trello, and we may come up with other things to sell to people who are getting a lot of value out of Trello. In the meantime, we sure appreciate the cookies!
	"
https://www.joelonsoftware.com/2013/04/02/the-patent-protection-racket/,The Patent Protection Racket,2013-04-02T00:14:21+00:00,,Joel Spolsky,News,"
	The fastest growing industry in the US right now, even during this time of slow economic growth, is probably the patent troll protection racket industry. Lawsuits surrounding software patents have more than tripled since 1999.
It's a great business model. 
Step one: buy a software patent. There are millions of them, and they're all quite vague and impossible to understand.
Step two: FedEx a carefully crafted letter to a few thousand small software companies, iPhone app developers, and Internet startups. This is where it gets a tiny bit tricky, because the recipients of the letter need to think that it's a threat to sue if they don't pay up, but in court, the letter has to look like an invitation to license some exciting new technology. In other words it has to be just on this side of extortion.
Step three: wait patiently while a few thousand small software companies call their lawyers, and learn that it's probably better just to pay off the troll, because even beginning to fight the thing using the legal system is going to cost a million dollars.
Step four: Profit!
What does this sound like? Yes, it's a textbook case of a protection racket. It is organized crime, plain and simple. It is an abuse of the legal system, an abuse of the patent system, and a moral affront.
In the face of organized crime, civilized people don't pay up. When you pay up, you're funding the criminals, which makes you complicit in their next attacks. I know, you're just trying to write a little app for the iPhone with in-app purchases, and you didn't ask for this fight to be yours, but if you pay the trolls, giving them money and comfort to go after the next round of indie developers, you're not just being ""pragmatic,"" you have actually gone over to the dark side. Sorry. Life is a bit hard sometimes, and sometimes you have to step up and fight fights that you never signed up for.
Civilized people don't pay up. They band together, and fight, and eliminate the problem. The EFF is launching a major initiative to reform the patent system. At Stack Exchange, we're trying to help with Ask Patents, which will hopefully block a few bad patents before they get issued.
The Application Developers Alliance (of which I am currently serving as the chairman of the board) is also getting involved with a series of Developer Patent Summits, a nationwide tour of 15 cities, which will kick off a long term program to band together to fight patent trolls. Come to the summit in your city-I'll be at the San Francisco event on April 9th-and find out what you can do to help.
	"
https://www.joelonsoftware.com/2013/07/22/victory-lap-for-ask-patents/,Victory Lap for Ask Patents,2013-07-22T00:14:23+00:00,,Joel Spolsky,News,"
	There are a lot of people complaining about lousy software patents these days. I say, stop complaining, and start killing them. It took me about fifteen minutes to stop a crappy Microsoft patent from being approved. Got fifteen minutes? You can do it too.
In a minute, I'll tell you that story. But first, a little background.
Software developers don't actually invent very much. The number of actually novel, non-obvious inventions in the software industry that maybe, in some universe, deserve a government-granted monopoly is, perhaps, two. 
The other 40,000-odd software patents issued every year are mostly garbage that any working programmer could ""invent"" three times before breakfast. Most issued software patents aren't ""inventions"" as most people understand that word. They're just things that any first-year student learning Java should be able to do as a homework assignment in two hours.
Nevertheless, a lot of companies large and small have figured out that patents are worth money, so they try to file as many as they possibly can. They figure they can generate a big pile of patents as an inexpensive byproduct of the R&D work they're doing anyway, just by sending some lawyers around the halls to ask programmers what they're working on, and then attempting to patent everything. Almost everything they find is either obvious or has been done before, so it shouldn't be patentable, but they use some sneaky tricks to get these things through the patent office. 
The first technique is to try to make the language of the patent as confusing and obfuscated as possible. That actually makes it harder for a patent examiner to identify prior art or evaluate if the invention is obvious. 
A bonus side effect of writing an incomprehensible patent is that it works better as an infringement trap. Many patent owners, especially the troll types, don't really want you to avoid their patent. Often they actually want you to infringe their patent, and then build a big business that relies on that infringement, and only then do they want you to find out about the patent, so you are in the worst possible legal position and can be extorted successfully. The harder the patent is to read, the more likely it will be inadvertently infringed.
The second technique to getting bad software patents issued is to use a thesaurus. Often, software patent applicants make up new terms to describe things with perfectly good, existing names. A lot of examiners will search for prior art using, well, search tools. They have to; no single patent examiner can possibly be aware of more than (rounding to nearest whole number) 0% of the prior art which might have invalidated the application.
Since patent examiners rely so much on keyword searches, when you submit your application, if you can change some of the keywords in your patent to be different than the words used everywhere else, you might get your patent through even when there's blatant prior art, because by using weird, made-up words for things, you've made that prior art harder to find. 
Now on to the third technique. Have you ever seen a patent application that appears ridiculously broad? (""Good lord, they're trying to patent CARS!""). Here's why. The applicant is deliberately overreaching, that is, striving to get the broadest possible patent knowing that the worst thing that can happen is that the patent examiner whittles their claims down to what they were entitled to patent anyway.
Let me illustrate that as simply as I can. At the heart of a patent is a list of claims: the things you allege to have invented that you will get a monopoly on if your patent is accepted.
An example might help. Imagine a simple application with these three claims:
1. A method of transportation2. The method of transportation in claim 1, wherein there is an engine connected to wheels3. The method of transportation in claim 2, wherein the engine runs on water
Notice that claim 2 mentions claim 1, and narrows it... in other words, it claims a strict subset of things from claim 1.
Now, suppose you invented the water-powered car. When you submit your patent, you might submit it this way even knowing that there's prior art for ""methods of transportation"" and you can't really claim all of them as your invention. The theory is that (a) hey, you might get lucky! and (b) even if you don't get lucky and the first claim is rejected, the narrower claims will still stand.
What you're seeing is just a long shot lottery ticket, and you have to look deep into the narrower claims to see what they really expect to get. And you never know, the patent office might be asleep at the wheel and BOOM you get to extort everyone who makes, sells, buys, or rides transportation.
So anyway, a lot of crappy software patents get issued and the more that get issued, the worse it is for software developers.
The patent office got a little bit of heat about this. The America Invents Act changed the law to allow the public to submit examples of prior art while a patent application is being examined. And that's why the USPTO asked us to set up Ask Patents, a Stack Exchange site where software developers like you can submit examples of prior art to stop crappy software patents even before they're issued.
Sounds hard, right?
At first I honestly thought it was going to be hard. Would we even be able to find vulnerable applications? The funny thing is that when I looked at a bunch of software patent applications at random I came to realize that they were all bad, which makes our job much easier.
Take patent application US 20130063492 A1, submitted by Microsoft. An Ask Patent user submitted this call for prior art on March 26th. 
I tried to find prior art for this just to see how hard it was. First I read the application. Well, to be honest, I kind of glanced at the application. In fact I skipped the abstract and the description and went straight to the claims. Dan Shapiro has great blog post called How to Read a Patent in 60 Seconds which taught me how to do this.
This patent was, typically, obfuscated, and it used terms like ""pixel density"" for something that every other programmer in the world would call ""resolution,"" either accidentally (because Microsoft's lawyers were not programmers), or, more likely, because the obfuscation makes it that much harder to search.
Without reading too deeply, I realized that this patent is basically trying to say ""Sometimes you have a picture that you want to scale to different resolutions. When this happens, you might want to have multiple versions of the image available at different resolutions, so you can pick the one that's closest and scale that.""
This didn't seem novel to me. I was pretty sure that the Win32 API already had a feature to do something like that. I remembered that it was common to provide multiple icons at different resolutions and in fact I was pretty sure that the operating system could pick one based on the resolution of the display. So I spent about a minute with Google and eventually (bing!) found this interesting document entitled Writing DPI-Aware Win32 Applications [PDF] written by Ryan Haveson and Ken Sykes at, what a coincidence, Microsoft. 
And it was written in 2008, while Microsoft's new patent application was trying to claim that this ""invention"" was ""invented"" in 2011. Boom. Prior art found, and deployed.
Total time elapsed, maybe 10 minutes. One of the participants on Ask Patents pointed out that the patent application referred to something called ""scaling sets."" I wasn't sure what that was supposed to mean but I found a specific part of the older Microsoft document that demonstrated this ""invention"" without using the same word, so I edited my answer a bit to point it out. Here's my complete answer on AskPatents.
Mysteriously, whoever it was that posted the request for prior art checked the Accepted button on Stack Exchange. We thought this might be the patent examiner, but it was posted with a generic username.
At that point I promptly forgot about it, until May 21 (two months later), when I got this email from Micah Siegel (Micah is our full-time patent expert):
The USPTO rejected Microsoft's Resizing Imaging Patent!
The examiner referred specifically to Prior Art cited in Joel's answer (""Haveson et al"").
Here is the actual document rejecting the patent. It is a clean sweep starting on page 4 and throughout, basically citing rejecting the application as obvious in view of Haveson.
Micah showed me a document from the USPTO confirming that they had rejected the patent application, and the rejection relied very heavily on the document I found. This was, in fact, the first ""confirmed kill"" of Ask Patents, and it was really surprisingly easy. I didn't have to do the hard work of studying everything in the patent application and carefully proving that it was all prior art: the examiner did that for me. (It's a pleasure to read him demolish the patent in question, all twenty claims, if that kind of schadenfreude amuses you).
(If you want to see the rejection, go to Public Pair and search for publication number US 20130063492 A1. Click on Image File Wrapper, and look at the non-final rejection of 4-11-2013. Microsoft is, needless to say, appealing the decision, so this crappy patent may re-surface.) Update October 2013: the patent received a FINAL REJECTION from the USPTO!
There is, though, an interesting lesson here. Software patent applications are of uniformly poor quality. They are remarkably easy to find prior art for. Ask Patents can be used to block them with very little work. And this kind of individual destruction of one software patent application at a time might start to make a dent in the mountain of bad patents getting granted.
My dream is that when big companies hear about how friggin' easy it is to block a patent application, they'll use Ask Patents to start messing with their competitors. How cool would it be if Apple, Samsung, Oracle and Google got into a Mexican Standoff on Ask Patents? If each of those companies had three or four engineers dedicating a few hours every day to picking off their competitors' applications, the number of granted patents to those companies would grind to a halt. Wouldn't that be something!
Got 15 minutes? Go to Ask Patents right now, and see if one of these RFPAs covers a topic you know something about, and post any examples you can find. They're hidden in plain view; most of the prior art you need for software patents can be found on Google. Happy hunting!
	"
https://www.joelonsoftware.com/2014/07/24/trello-inc/,"Trello, Inc.",2014-07-24T00:14:24+00:00,2018-04-23T17:16:57+00:00,Joel Spolsky,News,"
	Hello? is this thing on?
I'm not sure if I even know how to operate this ""blog"" device any more. It's been a year since my last post. I'm retired from blogging, remember?
Want to hear something funny? The only way I can post blog posts is by remote-desktopping into a carefully preserved Windows 7 machine which we keep in a server closet running a bizarrely messed-up old copy of CityDesk which I somehow hacked together and which only runs on that particular machine. The shame!
I do need to fill you in on some exciting Trello News, though. As you no doubt know, Trello is the amazing visual project management system we developed at Fog Creek.
Let me catch you up. As legend has it, back in yonder days, early twenty-oh-eleven, we launched a modest little initiative at Fog Creek to try to come up with new product ideas. We peeled off eight developers. The idea was that they would break into four teams. Two people each. Each team would work for a few months building a prototype or MVP for some product idea. Hopefully, at least one of those ideas would turn into something people wanted.
One of those teams started working on the concept that became Trello. The idea seemed so good that we doubled that team to four developers. The more we played around with it, the better we liked it. Within nine months, it was starting to look good enough to go public with, so we launched Trello at TechCrunch Disrupt to great acclaim and immediately got our first batch of users.
Over the next three years, Trello showed some real traction. The team grew to about 18 people, almost all in engineering. We did iPhone, iPad, Android, and Web versions. And Kindle. Oh and Android Wear. The user base grew steadily to 4.6 million people.
Zowie.
Here are some things that surprised me:
We've successfully made a non-developer product that actually appeals to civilians. We tried to avoid the software developer niche this time, and it worked. I think that's because Trello is visual. The board / card metaphor makes every board instantly understandable, which seems to attract all types of users who traditionally had never found online project management to be useful or worth doing.
It spreads like crazy. It's a gas that expands to fill all available space. Somebody finds out about Trello from their reading group and adopts it at work; pretty soon their whole company has hundreds of Trello boards for everything from high level road maps to a list of snacks that need to be bought for the break room.
People love it. We regularly monitor Twitter for mentions of Trello and the amount of positive sentiment out there is awe-inspiring.
We launched something called Trello Business Class, which, for a small fee, provides all kinds of advanced administration features so that the larger organizations using Trello can manage it better, and Hey Presto, Trello was making money!
Taco got big, tooIn the meantime, we started getting calls from investors. ""Can we invest in Trello?"" they asked. They were starting to notice that whenever they looked around their portfolio companies all they saw was Trello boards everywhere.
We didn't really need the money; Fog Creek is profitable and could afford to fund Trello development to profitability. And when we told the investors that they could take a minority, non-controlling stake in Fog Creek, we had to start explaining about our culture and our developer tools and our profit sharing plans and our free lunches and private offices and whatnot, and they got confused and said, ""hmm, why don't you keep all that, we just want to invest in Trello.""
Now, we didn't need the money, but we certainly like money. We had a bunch of ideas for ways we could make Trello grow faster and do all kinds of astonishing new features and hire sales and marketing teams to work on Trello Business Class. We would have gotten around to all that eventually, but not as quickly as we could with a bit of folding money.
Which lead to this fairly complicated plan. We spun out Trello into its own company, Trello Inc., and allowed outside investors to buy a minority stake in that. So now, Trello and Fog Creek are officially separate companies. Trello has a bunch of money in the bank to operate independently. Fog Creek will continue to build FogBugz and Kiln and continue to develop new products every once in a while. Michael Pryor, who co-founded Fog Creek with me in 2000, will be CEO of Trello.
So, yeah. This is the point at which old-time readers of this blog point out that the interest of VCs is not always aligned with the interest of founders, and VCs often screw up the companies they invest in.
That's mostly true, but not universal. There are smart, founder-friendly VCs out there. And with Trello (and Stack Overflow, for that matter), we didn't take any outside investment until we already had traction and revenue, so we could choose the investors that we thought were the most entrepreneur-friendly, and we kept control of the company.
In the case of Trello, we had so much interest from investors that we were even able to limit ourselves to investors who were already investors in Stack Exchange and still get the price and terms we wanted. The advantage of this is that we know them, they know us, and they're aligned enough not to fret about any conflicts of interest which might arise between Stack Exchange and Trello because they have big stakes in both.
Both Index Ventures and Spark Capital will co-lead the investment in Trello, with Bijan Sabet from Spark joining our board. Bijan was an early investor in Twitter, Tumblr, and Foursquare which says a lot about the size of our ambitions for Trello. The other two members of the board are Michael and me.
Even though Fog Creek, Trello, and Stack Exchange are now three separate companies, they are all running basically the same operating system, based on the original microprocessor architecture known as ""making a company where the best developers want to work,"" or, in simpler terms, treating people well.
This operating system applies both to the physical layer (beautiful daylit private offices, allowing remote work, catered lunches, height-adjustable desks and Aeron chairs, and top-tier coffee), the application layer (health insurance where everything is paid for, liberal vacations, family-friendly policies, reasonable work hours), the presentation layer (clean and pragmatic programming practices, pushing decisions down to the team, hiring smart people and letting them get things done, and a commitment to inclusion and professional development), and mostly, the human layer, where no matter what we do, it's guided first and foremost by obsession over being fair, humane, kind, and treating each other like family. (Did I tell you I got married?)
So, yeah, there are three companies here, with different products, but every company has a La Marzocco Linea espresso machine in every office, and every company gives you $500 when you or your partner has a baby to get food delivered, and when we're trying to figure out how to manage people, our number one consideration is how to do so fairly and compassionately.
That architecture is all the stuff I spent ten years ranting on this blog about, but y'all don't listen, so I'm just going to have to build company after company that runs my own wacky operating system, and eventually you'll catch on. It's OK to put people first. You don't have to be a psychopath or work people to death or create heaps of messy code or work in noisy open offices.
Anyway, that's the news from our neck of the woods. If the mission of Trello sounds exciting we'll be hiring a bunch of people soon so please apply!
	"
https://www.joelonsoftware.com/2015/01/20/stack-exchange-raises-40m/,Stack Exchange Raises $40m,2015-01-20T00:14:25+00:00,2018-04-19T21:58:46+00:00,Joel Spolsky,"Stack Overflow, News","
	 
Today Stack Exchange is pleased to announce that we have raised $40 million, mostly from Andreessen Horowitz.
Everybody wants to know what we're going to do with all that money. First of all, of course we're going to gold-plate the Aeron chairs in the office. Then we're going to upgrade the game room, and we're already sending lox platters to our highest-rep users.
But I'll get into that in a minute. First, let me catch everyone up on what's happening at Stack Exchange.
In 2008, Jeff Atwood and I set out to fix a problem for programmers. At the time, getting answers to programming questions online was super annoying. The answers that we needed were hidden behind paywalls, or buried in thousands of pages of stale forums.
So we built Stack Overflow with a single-minded, compulsive, fanatical obsession with serving programmers with a better Q&A site.
Everything about how Stack Overflow works today was designed to make programmers' jobs easier. We let members vote up answers, so we can show you the best answer first. We don't allow opinionated questions, because they descend into flame wars that don't help people who need an answer right now. We have scrupulously avoided any commercialization of our editorial content, because we want to have a site that programmers can trust.
Heck, we don't even allow animated ads, even though they are totally standard on every other site on the Internet, because it would be disrespectful to programmers to strain their delicate eyes with a dancing monkey, and we can't serve them 100% if we are distracting them with a monkey. That would only be serving them 98%. And we're OBSESSED, so 98% is like, we might as well close this all down and go drive taxis in Las Vegas.
Anyway, it worked! Entirely thanks to you. An insane number of developers stepped up to pass on their knowledge and help others. Stack Overflow quickly grew into the largest, most trusted repository of programming knowledge in the world.
Quickly, Jeff and I discovered that serving programmers required more than just code-related questions, so we built Server Fault and Super User. And when that still didn't satisfy your needs, we set up Stack Exchange so the community could create sites on new topics. Now when a programmer has to set up a server, or a PC, or a database, or Ubuntu, or an iPhone, they have a place to go to ask those questions that are full of the people who can actually help them do it.
But you know how programmers are. They ""have babies."" Or ""take pictures of babies."" So our users started building Stack Exchange sites on unrelated topics, like parenting and photography, because the programmers we were serving expected-nay, demanded!-a place as awesome as Stack Overflow to ask about baby feeding schedules and f-stops and whatnot.
And we did such a good job of serving programmers that a few smart non-programmers looked at us and said, ""Behold! I want that!"" and we thought, hey! What works for developers should work for a lot of other people, too, as long as they're willing to think like developers, which is the best way to think. So, we decided that anybody who wants to get with the program is welcome to join in our plan. And these sites serve their own communities of, you know, bicycle mechanics, or what have you, and make the world safer for the Programmer Way Of Thinking and thus serve programmers by serving bicycle mechanics.
In the five years since then, our users have built 133 communities. Stack Overflow is still the biggest. It reminds me of those medieval maps of the ancient world. The kind that shows a big bustling city (Jerusalem) smack dab in the middle, with a few smaller settlements around the periphery. (Please imagine Gregorian chamber music).
View of JerusalemStack Overflow is the big city in the middle. Because the programmer-city worked so well, people wanted to ask questions about other subjects, so we let them build other Q&A villages in the catchment area of the programmer-city. Some of these Q&A villages became cities of their own. The math cities barely even have any programmers and they speak their own weird language. They are math-Jerusalem. They makes us very proud. Even though they don't directly serve programmers, we love them and they bring a little tear to our eyes, like the other little villages, and they're certainly making the Internet-and the world-better, so we're devoted to them.
One of these days some of those villages will be big cities, so we're committed to keeping them clean, and pulling the weeds, and helping them grow.
But let's go back to programmer Jerusalem, which-as you might expect-is full of devs milling about, building the ENTIRE FUTURE of the HUMAN RACE, because, after all, software is eating the world and writing software is just writing a script for how the future will play out.
So given the importance of software and programmers, you might think they all had wonderful, satisfying jobs that they love.
But sadly, we saw that was not universal. Programmers often have crappy jobs, and their bosses often poke them with sharp sticks. They are underpaid, and they aren't learning things, and they are sometimes overqualified, and sometimes underqualified. So we decided we could actually make all the programmers happier if we could move them into better jobs.
That's why we built Stack Overflow Careers. This was the first site that was built for developers, not recruiters. We banned the scourge of contingency recruiters (even if they have big bank accounts and are just LINING UP at the Zion Gate trying to get into our city to feed on programmer meat, but, to hell with them). We are SERVING PROGRAMMERS, not spammers. Bye Felicia.
Which brings us to 2015.
The sites are still growing like crazy. By our measurements, the Stack Exchange network is already in the top 50 of all US websites, ranked by number of unique visitors, with traffic still growing at 25% annually. The company itself has passed 200 employees worldwide, with big plush offices in Denver, New York, and London, and dozens of amazing people who work from the comfort of their own homes. (By the way, if 200 people seems like a lot, keep in mind that more than half of them are working on Stack Overflow Careers).
We could just slow down our insane hiring pace and get profitable right now, but it would mean foregoing some of the investments that let us help more developers. To be honest, we literally can't keep up with the features we want to build for our users. The code is not done yet-we're dedicating a lot of resources to the core Q&A engine. This year we'll work on improving the experience for both new users and highly experienced users.
And let's not forget Stack Overflow Careers. I believe it is, bar-none, the single best job board for developer candidates, which should automatically make it the best place for employers to find developer talent. There's a LOT more to be done to serve developers here and we're just getting warmed up.
So that's why we took this new investment of $40m.
We're ecstatic to have Andreessen Horowitz on board. The partners there believe in our idea of programmers taking over (it was Marc Andreessen who coined the phrase ""Software is eating the world""). Chris Dixon has been a personal investor in the company since the beginning and has always known we'd be the obvious winner in the Q&A category, and will be joining our board of directors as an observer.
This is not the first time we've raised money; we're proud to have previously taken investments from Union Square Ventures, Index Ventures, Spark Capital, and Bezos Expeditions. We only take outside money when we are 100% confident that the investors share our philosophy completely and after our lawyers have done a ruthless (sorry, investors) job of maintaining control so that it is literally impossible for anyone to mess up our vision of fanatically serving the people who use our site, and continuing to make the Internet a better place to get expert answers to your questions.
For those of you who have been with us since the early days of Our Incredible Journey, thank you. For those of you who are new, welcome. And if you want to learn more, check out our hott new ""about"" page. Or ask!
	"
https://www.joelonsoftware.com/2016/05/31/introducing-hyperdev/,Introducing HyperDev,2016-05-31T00:14:26+00:00,2018-04-23T21:59:09+00:00,Joel Spolsky,"Fog Creek Software, News","
	One more thing...
It's been awhile since we launched a whole new product at Fog Creek Software (the last one was Trello, and that's doing pretty well). Today we're announcing the public beta of HyperDev, a developer playground for building full-stack web-apps fast.
HyperDev is going to be the fastest way to bang out code and get it running on the internet. We want to eliminate 100% of the complicated administrative details around getting code up and running on a website. The best way to explain that is with a little tour.
Step one. You go to hyperdev.com.
Boom. Your new website is already running. You have your own private virtual machine (well, really it's a container but you don't have to care about that or know what that means) running on the internet at its own, custom URL which you can already give people and they can already go to it and see the simple code we started you out with.
All that happened just because you went to hyperdev.com.
Notice what you DIDN'T do.
You didn't make an account.
You didn't use Git. Or any version control, really.
You didn't deal with name servers.
You didn't sign up with a hosting provider.
You didn't provision a server.
You didn't install an operating system or a LAMP stack or Node or operating systems or anything.
You didn't configure the server.
You didn't figure out how to integrate and deploy your code.
You just went to hyperdev.com. Try it now!
What do you see in your browser?
Well, you're seeing a basic IDE. There's a little button that says SHOW and when you click on that, another browser window opens up showing you your website as it appears to the world. Notice that we invented a unique name for you.
Over there in the IDE, in the bottom left, you see some client side files. One of them is called index.html. You know what to do, right? Click on index.html and make a couple of changes to the text.
Now here's something that is already a little bit magic... As you type changes into the IDE, without saving, those changes are deploying to your new web server and we're refreshing the web browser for you, so those changes are appearing almost instantly, both in your browser and for anyone else on the internet visiting your URL.
Again, notice what you DIDN'T do:
You didn't hit a ""save"" button.
You didn't commit to Git.
You didn't push.
You didn't run a deployment script.
You didn't restart the web server.
You didn't refresh the page on your web browser.
You just typed some changes and BOOM they appeared.
OK, so far so good. That's a little bit like jsFiddle or Stack Overflow snippets, right? NBD.
But let's look around the IDE some more. In the top left, you see some server side files. These are actual code that actually runs on the actual (virtual) server that we're running for you. It's running node. If you go into the server.js file you see a bunch of JavaScript. Now change something there, and watch your window over on the right.
Magic again... the changes you are making to the server-side Javascript code are already deployed and they're already showing up live in the web browser you're pointing at your URL.
Literally every change you make is instantly saved, uploaded to the server, the server is restarted with the new code, and your browser is refreshed, all within half a second. So now your server-side code changes are instantly deployed, and once again, notice that you didn't:
Save
Do Git incantations
Deploy
Buy and configure a continuous integration solution
Restart anything
Send any SIGHUPs
You just changed the code and it was already reflected on the live server.
Now you're starting to get the idea of HyperDev. It's just a SUPER FAST way to get running code up on the internet without dealing with any administrative headaches that are not related to your code.
Ok, now I think I know the next question you're going to ask me.
""Wait a minute,"" you're going to ask. ""If I'm not using Git, is this a single-developer solution?""
No. There's an Invite button in the top left. You can use that to get a link that you give your friends. When they go to that link, they'll be editing, live, with you, in the same documents. It's a magical kind of team programming where everything shows up instantly, like Trello, or Google Docs. It is a magical thing to collaborate with a team of two or three or four people banging away on different parts of the code at the same time without a source control system. It's remarkably productive; you can dive in and help each other or you can each work on different parts of the code.
""This doesn't make sense. How is the code not permanently broken? You can't just sync all our changes continuously!""
You'd be surprised just how well it does work, for most small teams and most simple programming projects. Listen, this is not the future of all software development. Professional software development teams will continue to use professional, robust tools like Git and that's great. But it's surprising how just having continuous merging and reliable Undo solves the ""version control"" problem for all kinds of simple coding problems. And it really does create an insanely addictive form of collaboration that supercharges your team productivity.
""What if I literally type 'DELETE * FROM USERS' on my way to typing 'WHERE id=9283', do I lose all my user data?""
Erm... yes. Don't do that. This doesn't come up that often, to be honest, and we're going to add the world's simplest ""branch"" feature so that optionally you can have a ""dev"" and ""live"" branch, but for now, yeah, you'd be surprised at how well this works in practice even though in theory it sounds terrifying.
""Does it have to be JavaScript?""
Right now the server we gave you is running Node so today it has to be JavaScript. We'll add other languages soon.
""What can I do with my server?""
Anything you can do in Node. You can add any package you want just by editing package.json. So literally any working JavaScript you want to cut and paste from Stack Overflow is going to work fine.
""Is my server always up?""
If you don't use it for a while, we'll put your server to sleep, but it will never take more than a few seconds to restart. But yes for all intents and purposes, you can treat it like a reasonably reliably, 24/7 web server. This is still a beta so don't ask me how many 9's. You can have all the 8's you want.
""Why would I trust my website to you? What if you go out of business?""
There's nothing special about the container we gave you; it's a generic VM running Node. There's nothing special about the way we told you to write code; we do not give you special frameworks or libraries that will lock you in. Download your source code and host it anywhere and you're back in business.
""How are you going to make money off of this?""
Aaaaaah! why do you care!
But seriously, the current plan is to have a free version for public / open source code you don't mind sharing with the world. If you want private code, much like private repos, there will eventually be paid plans, and we'll have corporate and enterprise versions. For now it's all just a beta so don't worry too much about that!
""What is the point of this Joel?""
As developers we have fantastic sets of amazing tools for building, creating, managing, testing, and deploying our source code. They're powerful and can do anything you might need. But they're usually too complex and too complicated for very simple projects. Useful little bits of code never get written because you dread the administration of setting up a new dev environment, source code repo, and server. New programmers and students are overwhelmed by the complexity of distributed version control when they're still learning to write a while loop. Apps that might solve real problems never get written because of the friction of getting started.
Our theory here is that HyperDev can remove all the barriers to getting started and building useful things, and more great things will get built.
""What now?""
Really? Just go to HyperDev and start playing!
	"
https://www.joelonsoftware.com/2016/12/09/developers-side-projects/,Developers’ side projects,2016-12-09T22:00:27+00:00,2016-12-09T22:11:16+00:00,Joel Spolsky,"New developer, News","
	Pretty much 100% of developers working for other people end up signing some kind of ""proprietary invention agreement,"" but almost all of them misunderstand what's going on with that agreement. Most developers think that the work they do at work belongs to their employer, but anything they work on at home or on their own time is theirs. This is wrong enough to be dangerous.
So let's consider this question: if you're a developer working for software company, does that company own what you do in your spare time?
Before I start: be careful before taking legal advice from the Internet. I see enough wrong information that you could get in trouble. Non-US readers should also be aware that the law and legal practice could be completely different in their country.
There are three pieces of information you would need to know to answer this question:
1. What state (or country) are you employed in?
There are state laws that vary from state to state which may even override specific contracts.
2. What does your contract with your employer say?
In the US, in general, courts are very lenient about letting people sign any kind of contract they want, but sometimes, state laws will specifically say ""even if you sign such and such a contract, the law overrides.""
3. Are you a contractor or an employee? In the US there are two different ways you might be hired, and the law is different in each case.
But before I can even begin to explain these issues, we gotta break it down.
Imagine that you start a software company. You need a developer. So you hire Sarah from across the street and make a deal whereby you will pay her $20 per hour and she will write lines of code for your software product. She writes the code, you pay her the $20/hour, and all is well. Right?
Well... maybe. In the United States, if you hired Sarah as a contractor, she still owns the copyright on that work. That is kind of weird, because you might say, ""Well, I paid her for it."" It sounds weird, but it is the default way copyright works. In fact, if you hire a photographer to take pictures for your wedding, you own the copies of the pictures that you get, but the photographer still owns the copyright and has the legal monopoly on making more copies of those pictures. Surprise! Same applies to code.
Every software company is going to want to own the copyright to the code that its employees write for them, so no software company can accept the ""default"" way the law works. That is why all software companies that are well-managed will require all developers, at the very least, to sign an agreement that says, at the very least, that
in exchange for receiving a salary,
the developer agrees to ""assign"" (give) the copyright to the company.
This agreement can happen in the employment contract or in a separate ""Proprietary Invention Assignment"" contract. The way it is often expressed is by using the legal phrase work for hire, which means ""we have decided that the copyright will be owned by the company, not the employee.""
Now, we still haven't said anything about spare time work yet. Suppose, now, you have a little game company. Instead of making software, you knock out three or four clever games every few months. You can't invent all the games yourself. So you go out and hire a game designer to invent games. You are going to pay the game designer $6,000 a month to invent new games. Those games will be clever and novel. They are patentable. It is important to you, as a company, to own the patents on the games.
Your game designer works for a year and invents 7 games. At the end of the year, she sues you, claiming that she owns 4 of them, because those particular games were invented between 5pm and 9am, when she wasn't on duty.
Ooops. That's not what you meant. You wanted to pay her for all the games that she invents, and you recognize that the actual process of invention for which you are paying her may happen at any time... on weekdays, weekends, in the office, in the cubicle, at home, in the shower, climbing a mountain on vacation.
So before you hire this developer, you agree, ""hey listen, I know that inventing happens all the time, and it's impossible to prove whether you invented something while you were sitting in the chair I supplied in the cubicle I supplied or not. I don't just want to buy your 9:00-5:00 inventions. I want them all, and I'm going to pay you a nice salary to get them all,"" and she agrees to that, so now you want to sign something that says that all her inventions belong to the company for as long as she is employed by the company.
This is where we are by default. This is the standard employment contract for developers, inventors, and researchers.
Even if a company decided, ""oh gosh, we don't want to own the 5:00-9:00 inventions,"" they would soon get into trouble. Why? Because they might try to take an investment, and the investor would say, ""prove to me that you're not going to get sued by some disgruntled ex-employee who claims to have invented the things that you're selling."" The company wants to be able to pull out a list of all current and past employees, and show a contract from every single one of them assigning inventions to the company. This is expected as a part of due diligence in every single high tech financing, merger, and acquisition, so a software company that isn't careful about getting these assignments is going to have trouble getting financed, or merging, or being acquired, and that ONE GUY from 1998 who didn't sign the agreement is going to be a real jerk about signing it now, because he knows that he's personally holding up a $350,000,000 acquisition and he can demand a lot of money to sign.
So... every software company tries to own everything that its employees do. (They don't necessarily enforce it in cases of unrelated hobby projects, but on paper, they probably can.)
Software developers, as you can tell from this thread, found this situation to be upsetting. They always imagined that they should be able to sit in their own room at night on their own computer writing their own code for their own purposes and own the copyright and patents. So along came state legislators, in certain states (like California) but not others (not New York, for example). These state legislatures usually passed laws that said something like this:
Anything you do on your own time, with your own equipment, that is not related to your employer's line of work is yours, even if the contract you signed says otherwise.
Because this is the law of California, this particular clause is built into the standard Nolo contract and most of the standard contracts that California law firms give their software company clients, so programmers all over the country might well have this in their contract even if their state doesn't require it.
Let's look at that closely.
On your own time. Easy to determine, I imagine.
With your own equipment. Trivial to determine.
Not related to your employer's line of work. Um, wait. What's the definition of related? If my employer is Google, they do everything. They made a goddamn HOT AIR BALLOON with an internet router in it once. Are hot air balloons related? Obviously search engines, mail, web apps, and advertising are related to Google's line of work. Hmmm.
OK, what if my employer is a small company making software for the legal industry. Would software for the accounting industry be ""related""?
I don't know. It's a big enough ambiguity that you could drive a truck through it. It's probably going to depend on a judge or jury.
The judge (or jury) is likely to be friendly to the poor employee against Big Bad Google, but you can't depend on it.
This ambiguity is meant to create enough of a chilling effect on the employee working in their spare time that for all intents and purposes it achieves the effect that the employer wants: the employee doesn't bother doing any side projects that might turn into a business some day, and the employer gets a nice, refreshed employee coming to work in the morning after spending the previous evening watching TV.
So... to answer the question. There is unlikely to be substantial difference between the contracts that you sign at various companies in the US working as a developer or in the law that applies. All of them need to purchase your copyright and patents without having to prove that they were generated ""on the clock,"" so they will all try to do this, unless the company is being negligent and has not arranged for appropriate contracts to be in place, in which case, the company is probably being badly mismanaged and there's another reason not to work there.
The only difference is in the stance of management as to how hard they want to enforce their rights under these contracts. This can vary from:
We love side projects. Have fun!
We don't really like side projects. You should be thinking about things for us.
We love side projects. We love them so much we want to own them and sell them!
We are kinda indifferent. If you piss us off, we will look for ways to make you miserable. If you leave and start a competitive company or even a half-competitive company, we will use this contract to bring you to tears. BUT, if you don't piss us off, and serve us loyally, we'll look the other way when your iPhone app starts making $40,000 a month.
It may vary depending on whom you talk to, who is in power at any particular time, and whether or not you're sleeping with the boss. You're on your own, basically-the only way to gain independence is to be independent. Being an employee of a high tech company whose product is intellectual means that you have decided that you want to sell your intellectual output, and maybe that's OK, and maybe it's not, but it's a free choice.
	"
https://www.joelonsoftware.com/2016/12/09/developers-are-writing-the-script-for-the-future/,Developers are Writing the Script for the Future,2016-12-09T18:28:39+00:00,,Joel Spolsky,News,"
	Last week I was invited to Slush in Helsinki, where I gave a keynote called ""Developers are Writing the Script for the Future."" Here's a 20 minute video of that talk.
	"
https://www.joelonsoftware.com/2016/12/09/rip-citydesk/,RIP CityDesk,2016-12-09T02:18:13+00:00,2018-04-23T21:57:43+00:00,Joel Spolsky,News,"
	Here's a quick history of the technology behind Joel on Software.
Version one was on Manila, created by Dave Winer. Dave was the one who convinced me to blog, by blogging himself, and by creating what was, I think, the first public blogging platform at editthispage.com. My site was joel.editthispage.com and back in 1999 people thought it was pretty spiffy that you could get your own subdomain like that.
In order to use my own domain, I registered joelonsoftware.com and took an old IBM desktop computer (probably running Windows NT 4.0), shoved it in a closet, and ran my own copy of Manila. The first time Slashdot linked to me it melted down. We upgraded the memory from 256M to 512M and it recovered.
In those days all the cool kids wrote their own blogging platforms. I wrote CityDesk. In what turned out to be a monumentally wrong bet, I thought that people would want to blog on Windows, with all the slick WYSIWYG editing goodness that wasn't yet available in early versions of HTML. CityDesk kept your entire website in a SQL database (Microsoft Jet, the backend of Access) and had a frontend like a word processor. Every time you needed to publish, it generated the entire site as a set of html pages, which it then uploaded to an ftp server for you. That worked ""OK"" for 10 pages. By the time this site was over 1000 pages, even on modern super speedy computers with flash drives, it took something like 5 minutes to publish.
Over the years the CityDesk code base (VB 6.0, another bad bet) stopped running on the latest versions of Windows. Nobody else cared but by that time I was using a custom version of CityDesk which only ran on Windows XP. So until recently, I had a virtual machine set up with Windows XP running in there, and a copy of CityDesk. That virtual machine runs on a modern Windows box which I don't use for any other purpose, so it lives under a desk in a cave somewhere and I have to remote desktop into it. Lately, I haven't been able to do that. I'm not sure why.
Doesn't matter. Matt Mullenweg over at WordPress has been trying to get me to move Joel on Software over to WordPress for so long it's not even funny. I finally gave in. An astonishingly talented group of people were collected who created the port you are looking at now. I owe a huge debt of gratitude to Chris Hardie, Sarah Semark, Valerie Kalantyrski, Michelle Langston, Daniel Robert, James Tien, and
Steve Seear for weeks of hard work on creating this almost perfect port of 16 years of cruft, preserving over 1000 links with redirects, hand crafting html and css to preserve awful formatting, some of which was created before CSS was in use, and doing some monumental heroics to keep just about everything about the old site in its new WordPress home.
I also want to thank our host Pressable.
OK, I haven't blogged too much since getting a puppy and ""officially"" retiring on the tenth anniversary of Joel on Software. I won't have too much time to blog now, either, but now that we're on WordPress, it's a million times easier, so I'll probably throw up some things here that I've written anyway, like internal documents from Fog Creek and Stack Overflow.
See you soon!
 
	"
https://www.joelonsoftware.com/2016/12/06/anil-dash-is-the-new-ceo-of-fog-creek-software/,Anil Dash is the new CEO of Fog Creek Software,2016-12-06T14:19:23+00:00,2018-04-23T21:57:15+00:00,Joel Spolsky,"Fog Creek Software, News","
	I have some huge news to share with you.
For the first time since Fog Creek Software was founded more than sixteen years ago, we have a new CEO, Anil Dash.
Who?
I've been friends with Anil since the earliest days of Fog Creek Software. He's a pioneer of blogging (beat me to it by about five months), and has been a tech industry entrepreneur, activist, and writer for almost two decades.
You can read Anil's full bio here. For those of you that want the top level bullet points:
Blogging pioneer
Helped start Six Apart, the company behind Moveable Type and TypePad
Founder of Expert Labs, ThinkUp, and MakerBase (which is joining Fog Creek)
Advisor and board member to a whole slew of companies and non-profits
Lives in New York City, with his wife Alaina Browne and their son Malcolm.
I've gotten to know Anil much better since he joined the Stack Overflow Board of Directors in 2011 and discovered that he's a remarkable creative thinker and really, really understands developers, how the work developers do fits into society, and thus, how we can make technology more humane and ethical from our unique position of making things for software developers. There is no single person I would trust more to help Fog Creek figure out how to make something big, important, and valuable.
Fog Creek is a weird company here, with unique values that you don't find in a lot of other companies. That's why we're so successful, and that's why we love working here. Some of the weird stuff we do is non-negotiable. We would never dream of having just any competent person from outside the company come in, let alone give them the CEO role, if we weren't convinced that they were 100% fanatical and excited about Fog Creek Software's unique operating system. We've been friends with Anil for so long that we're confident that the combination of his talents and worldview with our quirky operating system will be a stellar combination.
In short, we need Anil to help support us with ideas and leadership for HyperDev (now renamed Gomix) and any future products we come up with, and we need his soapbox and industry connections to continue to keep Fog Creek Software relevant. Thus I think the perfect position for him is as CEO of Fog Creek Software.
A typical startup is built around a single product, and some theory that people will pay money for that product. This theory eventually become false, and the company goes away. But Fog Creek was different. We were just a place where great people come together to build great things. People come here because of the other people that are here. And that makes it fundamentally much stronger and longer lasting. We build new products every year, some of which work, and some of which don't; we can spin off other companies; the individuals who work here can change; but as long as we remain dedicated to being a place where great people come together to build great things we're going to remain a highly respected and successful company for a long long time.
What are you doing, Joel?
I'm the full-time CEO of Stack Overflow, which just hit 300 employees and really takes all my time now.
Where's Michael Pryor?
He's the full-time CEO of Trello, which is about to hit 100 employees and takes all of his time.
So, what's going on at Fog Creek?
Fog Creek is focused on two things:
Fog Creek's developer tool, FogBugz, is still going strong. We have a dedicated development team continuing to work on it and are still regularly releasing new features and enhancements, especially in the area of agile development.
Fog Creek's newest project, Gomix (formerly ""HyperDev"") is relaunching. This is a developer playground for building full-stack web-apps fast.
Anil as CEO will be assisted by COO Jordan Harris, and Michael and I are still heavily involved but now at the board level.
	"
https://www.joelonsoftware.com/2016/12/06/oh-look-a-new-site/,"Oh look, a new site!",2016-12-06T02:23:21+00:00,2016-12-06T19:50:47+00:00,Joel Spolsky,News,"
	I've moved to WordPress. There may be some bugs!
	"
https://www.joelonsoftware.com/2018/01/12/birdcage-liners/,Birdcage liners,2018-01-12T06:11:34+00:00,2018-04-23T21:58:13+00:00,Joel Spolsky,News,"
	My new year's resolution was to give up on reading Twitter and Facebook.
I gave up on the feeds because they were making me angry. A lot of times I was angry because of politics, but even on non-political things, the feeds seemed like they were full of conflict and stress.
I can't tell you how much happier I am without them. Am I the only one that hated reading feeds? Do they make everybody unhappy? And if they make people unhappy why are they so popular?
Since I design social software for a living I feel like I should have a professional opinion on why Twitter and Facebook made me unhappy.
Let's start with Twitter. I used Twitter to keep in touch with friends and colleagues because I cared about them. Unfortunately, those friends mostly didn't use Twitter to share happy news and tell me how things were going. They used Twitter for bumper sticker flame wars. These were not the thoughtful long essays on blogs of yesteryear. 140 characters is too short for that.
Here's what happened with the 140 characters. You would start out having some kind of complicated thought. ""Ya know, dogs are great and all? I love dogs! But sometimes they can be a little bit too friendly. They can get excited and jump on little kids and scare the bejesus out of them. They wag their tails so hard they knock things over. (PS not Huskies! Huskies are the cats of the dog world!)""
Ok, so now you try to post that on Twitter. And you edit and edit and you finally get it down to something that fits: ""Dogs can be too friendly!""
All the nuance is lost. And this is where things go wrong. ""@spolsky what about huskies? #dontforgethuskies""
Ten minutes later, ""Boycott @stackoverflow. @spolsky proves again that tech bros hate huskies. #shame""
By the time you get off the plane in Africa you're on the international pariah list and your @replies are full of people accusing you of throwing puppies out of moving cars for profit.
Yeah, I get it, this 140 character limitation was just a historical accident, and now it's 280 characters anyway, and you can always make a Twitter Story, but the flame wars on Twitter emerged from the fact that we've taken a medium, text, which is already bad at conveying emotion and sentiment and high-bandwidth nuance, and made it even worse, and the net result is a lot of outrage and indignation.
The outrage and indignation, of course, are what makes it work. That's what keeps you coming back. Oooh shade. Oooh flamewar. We rubberneckers can't keep our eyes off of it. I don't know what the original idea of Twitter was, but it succeeded because of natural selection. In a world where the tech industry was cranking out millions of dumb little social applications, this one happens to limit messages to 140 characters and that happens to create, unintentionally, a subtlety-free indignation machine, which is addictive as heck, so this is the one that survives and thrives and becomes a huge new engine of polarization and anger. It's not a coincidence that we got a president who came to power through bumper-sticker slogans, outrageous false statements chosen to make people's blood boil, and of course Twitter. This is all a part of a contagious disease that is spreading like crazy because we as a society have not figured out how to fight back yet.
But Twitter is small potatoes. Facebook is where the action is. Facebook quickly copied Twitter's idea of the ""feed"" as a mechanism to keep you coming back compulsively. But whereas Twitter sort of stumbled upon addictiveness through the weird 140-character limit, Facebook mixed a new, super-potent active ingredient into their feed called Machine Learning. They basically said, ""look, we are not going to show everybody every post,"" and they used the new Midas-style power of machine learning and set it in the direction of getting people even more hyper-addicted to the feed. The only thing the ML algorithm was told to care about was addiction, or, as they called it, engagement. They had a big ol' growth team that was trying different experiments and a raw algorithm that was deciding what to show everybody and the only thing it cared about was getting you to come back constantly.
Now, this algorithm, accidentally, learned something interesting-something that dog trainers have always known.
Dog trainers give dogs a treat when they get something right. When they say ""come,"" and the dog comes, he gets a treat. Woof. I can train any arbitrary dog to do that with some reliability. But here's what happens. Once, just once, I forget to give the dog a treat. And then the dog thinks, well, heck this, I guess ""come"" doesn't always mean ""treat."" So the trained behavior goes away. It's technically called extinction: the trained behavior goes extinct.
How do we prevent extinction? By only giving treats some of the time. So the dog learns something more subtle. When my master says come and I obey, I might get a treat. Sometimes I do, sometimes I don't. That way, if I obey and don't get the treat, I shouldn't panic. I should still always come when he says come because that's still the best way to get the most treats. Intermittent reinforcement works better.
This sounds like what Facebook was doing to me.
Rather than providing a constant stream of satisfying news and engagement with friends, Facebook's algorithm had learned to give me a bunch of junk I didn't need to hear, and only gave me intermittent rewards through the occasional useful nugget of information about friends. Once in a blue moon I would hear about a friend's accomplishment or I would find out that someone I like is going to be in town. The rest of the time I would just get the kind of garbage newspaper clippings circulated by someone who had too much coffee and is misattributing the kick from the caffeine to something they just read online and now MUST share IMMEDIATELY with EVERYONE because this news story about something that happened to a baby bear is SOOOOO important to THE ENTIRE WORLD. And so 9 of out 10 things in my feed are complete garbage-last week's newspaper lining the birdcage with the droppings already on it-but then once every two weeks I find out my niece is engaged or my best friend got a great new job or my oldest friend is in town and I should make plans to hang out. And now no matter how full the Facebook feed is of bird droppings I still have to keep going back.
Both Twitter and Facebook's selfish algorithms, optimized solely for increasing the number of hours I spend on their services, are kind of destroying civil society at the same time. Researchers also discovered that the algorithms served to divide up the world into partisan groups. So even though I was following hundreds of people on social networks, I noticed that the political pieces which I saw were nevertheless directionally aligned with my own political beliefs. But to be honest they were much... shriller. Every day the Twitter told me about something that The Other Side did that was Outrageous and Awful (or, at least, this was reported), and everyone was screeching in sync and self-organizing in a lynch mob, and I would have to click LIKE or RETWEET just to feel like I had done something about it, but I hadn't actually done anything about it. I had just slacktivated.
What is the lesson? The lesson here is that when you design software, you create the future.
If you're designing software for a social network, the decision to limit message lengths, or the decision to use ML to maximize engagement, will have vast social impact which is often very hard to predict.
As software developers and designers, we have a responsibility to the world to think these things through carefully and design software that makes the world better, or, at least, no worse than it started out. And when our inventions spin out of control, we have a responsibility to understand why and to try to fix them.
This blog post has a surprise piece of good news. The good news is that Facebook suddenly realized what they had done, and today they announced a pretty major change of direction. They want the feed to leave people feeling ""more connected and less lonely,"" so they have actually decided to sacrifice ""engagement."" Mark Zuckerberg posted, ""By making these changes, I expect the time people spend on Facebook and some measures of engagement will go down. But I also expect the time you do spend on Facebook will be more valuable."" That's amazing, but it's amazing because it demonstrates that Facebook has finally grown up and joined the rest of us in understanding that software developers are designing the future.
	"
https://www.joelonsoftware.com/2018/04/23/strange-and-maddening-rules/,Strange and maddening rules,2018-04-23T14:42:45+00:00,2018-04-23T15:43:26+00:00,Joel Spolsky,News,"
	There's this popular idea among developers that when you face a problem with code, you should get out a rubber duck and explain, to the duck, exactly how your code was supposed to work, line by line, what you expected to see, what you saw instead, etc. Developers who try this report that the very act of explaining the problem in detail to an inanimate object often helps them find the solution.
This is one of many tricks to solving programming problems on your own. Another trick is divide and conquer debugging. You can't study a thousand lines of code to find the one bug. But you can divide them in half and quickly figure out if the problem happens in the first half or the second half. Keep doing this five or six times and you'll pinpoint the single line of code with the problem.
It's interesting, with this in mind, to read Jon Skeet's checklist for writing the perfect question. One of the questions Jon asks is ""Have you read the whole question to yourself carefully, to make sure it makes sense and contains enough information for someone coming to it without any of the context that you already know?"" That is essentially the Rubber Duck Test. Another question is ""If your question includes code, have you written it as a short but complete program?"" Emphasis on the short-that is essentially a test of whether or not you tried divide and conquer.
What Jon's checklist can do, in the best of worlds, is to help people try the things that experienced programmers may have already tried, before they ask for help.
Sadly, not everybody finds his checklist. Maybe they found it and they don't care. They're having an urgent problem with code; they heard that Stack Overflow could help them; and they don't have time to read some nerd's complicated protocol for requesting help.
One of the frequent debates about Stack Overflow is whether the site needs to be open to questions from programming novices.
When Jeff and I were talking about the initial design of Stack Overflow, I told him about this popular Usenet group for the C programming language in the 1980s. It was called comp.lang.c.
C is a simple and limited programming language. You can get a C compiler that fits in 100K. So, when you make a discussion group about C, you quickly run out of things to talk about.
Also. In the 1990s, C was a common language for undergraduates who were learning programming. And, in fact, said undergraduates would have very basic problems in C. And they might show up on comp.lang.c asking their questions.
And the old-timers on comp.lang.c were bored. So bored. Bored of the undergraduates showing up every September wondering why they can't return a local char array from a function et cetera, et cetera, ad nauseum. Every damn September.
The old timers invented the concept of FAQs. They used them to say ""please don't ask things that have been asked before, ever, in the history of Usenet"" which honestly meant that the only questions they really wanted to see were so bizarre and so esoteric that they were really enormously boring to 99% of working C programmers. The newsgroup languished because it catered only to the few people that had been there for a decade.
Jeff and I talked about this. What did we think of newbie questions?
We decided that newbies had to be welcome. Nothing was too ""beginner"" to be a reasonable question on Stack Overflow... as long as you did some homework before asking the question.
We understood that this might mean that some of the more advanced people might grow bored with duplicate, simple questions, and move on. We thought that was fine: Stack Overflow doesn't have to be a lifetime commitment. You're welcome to get bored and move on if you think that the newbies keep asking why they can't return local char arrays (""but it works for me!"") and you would rather devote the remaining short years of your life to something more productive, like sorting your record albums.
The mere fact that you are a newbie doesn't mean that your question doesn't belong on Stack Overflow. To prove the point, I asked ""How do you move the turtle in Logo,"" hoping to leave behind evidence that the site designers wanted to allow absolute beginners.
Thanks to the law of unintended consequences, this caused a lot of brouhaha, but not because the question was too easy. The real problem there was that I was asking the question in bad faith. Jeff Atwood explained it: ""Simple is fine. No effort and research is not."" (Also this.)
To novices, the long bureaucratic rigmarole associated with asking your first question on Stack Overflow can feel either completely unnecessary, or just plain weird. It's like Burning Man. You just want to go to a nice glittery dance party in the desert, but the Burning People are yammering on about their goddamn 10 principles, and ""radical self-expression"" and so on and so forth, and therefore after washing your dishes you must carefully save the dirty dishwater like a cherished relic and remove every drop of it from the Playa, bringing it home with you, in your check-in luggage if necessary. Every community has lots of rules and when you join the community they either seem strange and delightful or, if you're just desperately trying to get some code to work, they are strange and maddening.
A lot of the rules that are important to make Burning Man successful are seemingly arbitrary, but they're still necessary. The US Bureau of Land Management which makes the desert available for Burning Man requires that no contaminated water be poured out on the ground because the clay dirt doesn't really absorb it so well and it can introduce all kinds of disease and whatnot, but who cares because Burning Man simply will not be allowed to continue if the participants don't pack out their used water.
Similarly for Stack Overflow. We don't allow, say, questions that are too broad (""How do I make a program?""). Our general rule is that if the correct length of an answer is a whole book you are asking too much. These questions feel like showing up on a medical website and saying something like ""I think my kidney has been hurting. How can I remove it?"" It's crazy-and incidentally, insulting to the people who spent ten years in training learning to be surgeons.
One thing I'm very concerned about, as we try to educate the next generation of developers, and, importantly, get more diversity and inclusiveness in that new generation, is what obstacles we're putting up for people as they try to learn programming. In many ways Stack Overflow's specific rules for what is permitted and what is not are obstacles, but an even bigger problem is rudeness, snark, or condescension that newcomers often see.
I care a lot about this. Being a developer gives you an unparalleled opportunity to write the script for the future. All the flak that Stack Overflow throws in the face of newbies trying to become developers is actively harmful to people, to society, and to Stack Overflow itself, by driving away potential future contributors. And programming is hard enough; we should see our mission as making it easier.
We're planning a lot of work in this area for the next year. We can't change everybody and we can't force people to be nice. But I think we can improve some aspects of the Stack Overflow user interface to encourage better behavior, for example, we could improve the prompts we provide on the ""Ask Question"" page, and we could provide more tools for community moderation of comments where the snark currently runs unchecked.
We're also working on new features that will let you direct your questions to a private, smaller group of people on your own team, which may bring some of the friendly neighborhood feel to the big city of Stack Overflow.
Even as we try to make Stack Overflow more friendly, our primary consideration at Stack Overflow has been to build the world's greatest resource for software developers. The average programmer, in the world, has been helped by Stack Overflow 340 times. That's the real end-game here. There are other resources for learning to program and getting help, but there's only one site in the world that developers trust this much, and that is worth preserving-the programming equivalent to the Library of Congress.
	"
https://www.joelonsoftware.com/2018/04/13/gamification/,A Dusting of Gamification,2018-04-13T13:40:21+00:00,2018-04-13T13:41:00+00:00,Joel Spolsky,News,"
	[This is the second in a series of posts about Stack Overflow. The first one is The Stack Overflow Age.]
Around 2010 the success of Stack Overflow had led us into some conversations with VCs, who wanted to invest.
The firm that eventually invested in us, Union Square Ventures, told us that they were so excited by the power of gamification that they were only investing in companies that incorporated some kind of game play.
For example, Foursquare. Remember Foursquare? It was all about making your normal post-NYU life of going to ramen noodle places and dive bars into a fun game that incidentally generated wads of data for marketers. Or Duolingo, which is a fun app with flash cards that teaches you foreign languages. Those were other USV investments from that time period.
At the time, I had to think for a minute to realize that Stack Overflow has ""gamification"" too. Not a ton. Maybe a dusting of gamification, most of it around reputation.
Stack Overflow reputation started as a very simple score. The original idea was just that you would get 10 points when your answers were upvoted. Upvotes do two things. They get the most useful answers to the top, signaling that other developers who saw this answer thought it was good. They also send the person who wrote the answer a real signal that their efforts helped someone. This can be incredibly motivating.
You would lose points if your questions were downvoted, but you actually only lose 2 points. We didn't want to punish you so much as we wanted to show other people that your answer was wrong. And to avoid abuse, we actually make you pay one reputation point to downvote somebody, so you better really mean it. That was pretty much the whole system.
Now, this wasn't an original idea. It was originally inspired by Reddit Karma, which started out as an integer that appeared in parentheses after your handle. If you posted something that got upvoted, your karma went up as a ""reward."" That was it. Karma didn't do a single thing but still served as a system for reward and punishment.
What reputation and karma do is send a message that this is a community with norms, it's not just a place to type words onto the internet. (That would be 4chan.) We don't really exist for the purpose of letting you exercise your freedom of speech. You can get your freedom of speech somewhere else. Our goal is to get the best answers to questions. All the voting makes it clear that we have standards, that some posts are better than others, and that the community itself has some norms about what's good and bad that they express through the vote.
It's not a perfect system (more on the problems in a minute), but it's a reasonable first approximation.
By the way, Alexis Ohanian and Steve Huffman, the creators of Reddit, were themselves inspired by a more primitive karma system, on Slashdot. This system had real-world implications. You didn't get karma so that other people could see your karma; you got karma so that the system knew you weren't a spammer. If a lot of your posts had been flagged for abuse, your karma would go down and you might lose posting or moderation privileges. But you weren't really supposed to show off your high karma. ""Don't worry too much about it; it's just an integer in a database,"" Slashdot told us.
To be honest, it was initially surprising to me that you could just print a number after people's handles and they would feel rewarded. Look at me! Look at my four digit number! But it does drive a tremendous amount of good behavior. Even people who aren't participating in the system (by working to earn reputation) buy into it (e.g., by respecting high-reputation users for their demonstrated knowledge and helpfulness).
But there's still something of a mystery here, which is why earning ""magic internet points"" is appealing to anyone.
I think the answer is that it's nice to know that you've made a difference. You toil away in the hot kitchen all day and when you serve dinner it's nice to hear a compliment or two. If somebody compliments you on the extra effort you put into making radish roses, you're going to be very happy.
This is a part of a greater human need: to make an impact on the world, and to know that you're contributing and being appreciated for it. Stack Overflow's reputation system serves to recognize that you're a human being and we are super thankful for your contribution.
That said, there is a dark side to gamification. It's not 100% awesome.
The first problem we noticed is that it's very nice to get an upvote, but getting a downvote feels like a slap in the face. Especially if you don't understand why you got the downvote, or if you don't agree. Stack Overflow's voting has made many people unhappy over the years, and there are probably loads of people who felt unwelcome and who don't participate in Stack Overflow as a result. (Here's an old blog post explaining why we didn't just eliminate downvotes).
There's another problem, which is that, to the extent that the gamification in Stack Overflow makes the site feel less inclusive and welcoming to many people, it is disproportionately off-putting to programmers from underrepresented groups. While Stack Overflow does have many amazing, high reputation contributors who are women or minorities, we've also heard from too many who were apprehensive about participating.
These are big problems. There's a lot more we can and will say about that over the next few months, and we've got a lot of work ahead of us trying to make Stack Overflow a more inclusive and diverse place so we can improve the important service that it provides to developers everywhere.
Gamification can shape behavior. It can guide you to do certain things in certain ways, and it can encourage certain behaviors. But it's a very weak force. You can't do that much with gamification. You certainly can't get people to do something that they're not interested in doing, anyway. I've heard a lot of crazy business plans that are pinning rather too high hopes on gamification as a way of getting people to go along with some crazy scheme that the people won't want to go along with. Nobody's going to learn French just to get the Duolingo points. But if you are learning French, and you are using Duolingo, you might make an effort to open the app every day just to keep your streak going.
I've got more posts coming! The next one will be about the obsessive way Stack Overflow was designed for the artifact, in other words, we optimized everything to create amazing results for developers with problems arriving from Google, not just to answer questions that people typed into our site.
 
	"
https://www.joelonsoftware.com/2018/04/06/the-stack-overflow-age/,The Stack Overflow Age,2018-04-06T13:32:10+00:00,2018-04-19T21:58:45+00:00,Joel Spolsky,"Stack Overflow, News","
	Hi, everyone! A lot of stuff has happened since I was writing all those blog posts about Aeron chairs 18 years ago. Some of those blog posts are old enough to go to college.
And, also: Stack Overflow will be ten years old soon! Wow! So I thought it would be cool to get the old band back together for a little reunion tour over the next few weeks. I want to catch you all up on some stuff but mostly I want to tell the story of Stack Overflow in a not-completely-disorganized way. With some perspective, it's clearer now what we did right and what we messed up, so I'll try to cover the good and the bad over a series of blog posts.
And, also: we're just a few weeks away from launching Stack Overflow Teams, the biggest upgrade to Stack Overflow ever, so that's going to be really cool. I'll get to that in a future blog post!
Today is chapter one. I want to talk a little bit about what it was like for developers before Stack Overflow, the problem that Stack Overflow tried to solve, and early origins.
In the early days of the Internet, before the Web, there was a system called Usenet which created primitive online discussion forums. When programmers had problems with their code, they could ask a question on a Usenet forum. (They were technically called newsgroups, not forums (even though they had nothing to do with news. (You couldn't even get news on Usenet.)))
As soon as the world wide web became a thing, Usenet was immediately technically obsolete. We programmers started asking about our problems on various web-based forums, of which there were thousands.
One of the biggest such forums was called Experts Exchange. The first version of Experts Exchange was not successful financially. Apparently they went bankrupt in 2001. Eventually new owners bought the assets and resurrected the site with a clever business model: charging money to read answers.
This actually fixed the business, which started making money, but it caused some problems.
The first problem was that programmers with problems would search on Google, not on Experts Exchange. And Google only knows about free, open websites, not websites that you have to pay to access. So EE did a bamboozle: when the Google Robot came by, they showed it the full question and its answers. But when regular people went to the same page, they saw the answers were scrambled, with instructions to pay (I think it was about $250 a year) to see the results. Most programmers couldn't be bothered.
The second problem was that EE let you get a free membership if you answered a certain number of questions. As it turned out, the people who were most desperate for free memberships were not exactly the best programmers in the world, and they wrote low quality answers to questions just to get those free memberships. And the quality of answers on the site went down.
For a long time (at least five years, I think) programmers would constantly come across EE in the Google search results, try to click on them, discover that it was a pay site, grumble, and just go back to Google and try to find an answer for free.
And I kept thinking, how hard is it to run a discussion forum on the Internet? For fudge sake, I had written one in Visual Basic in a weekend. (Not kidding, actually. Yeah I know that I am always saying ""I could do that in a weekend in Visual Basic"" when developers tell me some feature is going to take a year. This is why). So I was confident that it was only a matter of time before one of the 9,000,000 smart programmers in the world decided to route around this EE damage and make a free forum.
You know what? Nobody ever did. I kept waiting.
Another thing I wrote in a weekend (well, to be precise: a fortnight (shut up, I'm telling this lie)) was a job listing board for this blog. And in the first month of running that job board I think we sold about $90,000 of job listings. Huzzah! And then I thought, wow, if we smashed these ideas together-replace Experts Exchange with a free site, and pay for it with job listings-we could undo the damage to the internet and let developers get work done again.
I kept thinking ""Man, this is so obvious, somebody is going to do it.""
And they never did.
And I went to one of the programmers at Fog Creek, and explained my idea, and he was like ""yeah yeah sounds like a great idea, but I really like working on FogBugz.""
And more time went by.
And eventually, early in 2008, a developer/blogger named Jeff Atwood called me up, and said, ""Hey Joel, I'm thinking of quitting my day job to be a Pro Blogger; you're a blogger: what do you think?""
And I said, ""Jeff, I've got a better idea"" and I told him about the idea to combine the job listings with the Q&A site for developers, and, it took more than a weekend, but eventually I convinced him. We started talking about all the ways our Q&A site would be amazing. Jeff started working on the code in April 2008, recruited two other programmers to join him (Geoff and Jarrod, who are still here), and the three of them heroically launched what became Stack Overflow in September 2008.
 
 
And thus began the Stack Overflow Age.
Stack Overflow was better because it was free, but it had a ton of other ""innovations"" (which I put in quotes because we stole them from other Internet pioneers) which made it a much, much better site for getting answers to programming questions.
We wanted the whole thing to be a fun game, with incentives to answer questions, so we had a reputation system. The more you answer, the more reputation you earn. The reputation idea had been seen before on sites like Slashdot and Reddit.
As you earn reputation, you also earn moderation privileges on the site. So the site actually moderates itself, which is pretty cool.
Instead of putting all the Java programmers in one little forum and all the C++ programmers in another, we dumped everyone together and just let them tag their questions. This idea was stolen from flickr (remember flickr?) who, I think, stole it from del.icio.us (now gone)-who knows, anyway, the point is, tags were the new hotness and made Stack Overflow work great.
Most importantly, we realized that each question is asked by one person but the answers are seen by thousands of people who found it through a search. So we decided to optimize everything to be useful for the thousands, not the individual. We literally have 1000 visitors for every person who asks a question. That's why we sort the answers by votes. It's also why we optimize for questions and answers that will be helpful to other people, later.
Interestingly, when Jeff and I started Stack Overflow, we didn't really care if it was a business and we didn't need it to be a big profitable success. We created it because the internet sucked for programmers and we needed to make it better. We thought the job listings would pay the bills, and we'd fix the internet, and that was all we cared about and it's what motivated us to work so hard.
Of course, it turned out a lot bigger than we thought it would. The company today has 250 employees, is profitable, and has made it possible for millions of people to learn how to code and to deal with the new, super-complicated world of APIs and frameworks that we live in. But we just wanted to fix the internet.
I have met a lot of people who started businesses because they wanted to start a business. Paul Graham calls this ""Playing House."" And they didn't really care what the business did; they just wanted to ""be entrepreneurs."" Which is weird, because being an entrepreneur really sucks. It's really hard to get through all the extraordinary difficulty, pain, and stress of starting a company if you're not super, super motivated to solve a problem for the world.
The entrepreneurs who succeed do so because it is incredibly important to them a thing exist in the world, and it does not exist, so they work like crazy until it does. When we started Stack Overflow we didn't expect it to be a big business; we just wanted there to be someplace where developers could get help to daily problems, while showing off how smart they were helping other developers.
Ok, that's chapter one. I've got a lot more to talk about. In the next installment, I'll talk more about how Stack Overflow's light dusting of gamification made it really take off.
	"
https://www.joelonsoftware.com/2018/05/03/announcing-stack-overflow-for-teams/,Announcing Stack Overflow for Teams,2018-05-03T12:58:25+00:00,2018-05-03T13:39:50+00:00,Joel Spolsky,"Stack Overflow, News","
	Hey, we have a new thing for you today!
Today's new thing is called Stack Overflow for Teams. It lets you set up a private place on Stack Overflow where you can ask questions that will only be visible to members of your team, company, or organization. It is a paid service, but it's not expensive.
I meet people who use Stack Overflow every single day, but a lot of them tell me they have never needed to post their own question. ""All the questions are already answered!"" they say. Mission accomplished, I guess!
Still, when I think about what questions developers have every day, only the ones that have to do with public stuff can be asked on Stack Overflow. Maybe you don't have a question about Python or Android... maybe you want to ask something about your team's own code base!
That's the idea behind Stack Overflow Teams.
Quick background: every development team since the beginning of time has been trying to figure out how to get institutional knowledge out of people's heads and into written, searchable form where everyone can find it. Like new members of the team. And old members of the team working on new parts of the code. And people who forgot what they did three years ago and now have questions about their own code.
For a while developers thought wikis might be the solution. Anyone who has used a wiki for this purpose has probably discovered that not very much knowledge actually makes it into the wiki, and what does is not particularly useful, doesn't get updated, and honestly it just feels like a bunch of homework to write a bunch of wiki documentation about your code when you don't know if it will ever help anyone.
Another solution being sold today is the idea of having some kind of online IRC-style chat rooms, and hoping that by searching those chat archives, you can find ""institutional knowledge."" Ha ha ha! Even if that works, all you really find is the history of some conversation people had. It might have clues but it's not knowledge.
But you know what does work? A Q&A system. Like Stack Overflow.
Why? Because unlike wikis, you don't write documentation in the hopes that one day it might help someone. You answer questions that are going to help someone immediately. And you can stop answering the minute you get the green checkmark that shows that you solved their problem.
And unlike chatrooms, searching actually works. It finds you a question and its answers, not a conversation-captured-in-amber.
This is why Stack Overflow worked so much better on the public internet than the previous generation of discussion forums, and we think that it will work for all the same reasons with teams' proprietary questions and answers.
When you join a team, you'll see your team's private questions right on stackoverflow.com (although they actually live in a separate database for security). Your teams are listed in the left hand navbar.
Everything else works pretty much ... like you would expect. When you ask a question, you can direct it to your team or to the whole world. The UI makes it very clear whether you are posting publicly or privately. If you are asking a question of your team, there's a Notify field so you can type the names of some people who might be able to answer the question, and they'll hear about it right away.
When you search, you can search everywhere, or just within your team. You can set up tags that are specific to your team, too.
The pricing is designed to be ""no-brainer"" pricing, starting at just $10 per month for the first ten users.
I think Stack Overflow for Teams is going to be almost as important to developers' daily work as public Stack Overflow. It brings Stack Overflow's uniquely powerful system to every developer question, not just the things that can be discussed in public. You can stop asking your teammates questions in email (where they help nobody else) or in chatrooms (where they are impossible to find) and start building your own private knowledge base to document your code and answer future teammates' questions before they have them.
	"
https://www.joelonsoftware.com/2019/03/28/the-next-ceo-of-stack-overflow/,The next CEO of Stack Overflow,2019-03-28T14:00:53+00:00,,Joel Spolsky,"Stack Overflow, News","
	
Big news! We're looking for a new CEO for Stack Overflow. I'm stepping out of the day-to-day and up to the role of Chairman of the Board.
Stack Overflow has been around for more than a decade. As I look back, it's really amazing how far it has come. 
Only six months after we had launched Stack Overflow, my co-founder Jeff Atwood and I were invited to speak at a Microsoft conference for developers in Las Vegas. We were there, I think, to demonstrate that you could use their latest ASP.NET MVC technology on a real website without too much of a disaster. (In fact .NET has been a huge, unmitigated success for us, but you kids go ahead and have fun with whatever platform you want mkay? They're all great, or, at least, above-average).
It was a giant conference, held at the Venetian Hotel. This hotel was so big that other hotels stay there when they go on vacation. The main ballroom was the size of, approximately, Ireland. I later learned there were 5,000 developers in that room.
I thought it would be a fun thing to ask the developers in the room how many of them had visited Stack Overflow. As I remember, Jeff was very much against this idea. ""Joel,"" he said, ""That is going to be embarrassing and humiliating. Nobody is going to raise their hand.""
Well, I asked it anyway. And we were both surprised to see about one-third of the hands go up. We were really making an impact! That felt really good.
Anyway, I tried that trick again whenever I spoke to a large audience. It doesn't work anymore. Today, audiences just laugh. It's like asking, ""Does anyone use gravity? Raise your hand if you use gravity.""
Where are we at after 11 years? Practically every developer in the world uses Stack Overflow. Including the Stack Exchange network of 174 sites, we have over 100 million monthly visitors. Every month, over 125,000 wonderful people write answers. According to Alexa, stackoverflow.com is one of the top 50 websites in the world. (That's without even counting the Stack Exchange network, which is almost as big.) And every time I see a developer write code, they've got Stack Overflow open in one of their browser windows. Oh and-hey!-we do not make you sign up or pay to see the answers.
The company has been growing, too. Today we are profitable. We have almost 300 amazing employees worldwide and booked $70m in revenue last year. We have talent, advertising, and software products. The SaaS products (Stack Overflow for Teams and Enterprise) are growing at 200% a year. That speaks to the fact that we've recruited an incredibly talented team that has produced such fantastic results. 
But, we have a lot of work ahead of us, and it's going to take a different type of leader to get us through that work. 
The type of people Stack Overflow serves has changed, and now, as a part of the developer ecosystem, we have a responsibility to create an online community that is far more diverse, inclusive, and welcoming of newcomers.
In the decade or so since Stack Overflow started, the number of people employed as software developers grew by 64% in the US alone. The field is going to keep growing everywhere in the world, and the demand for great software developers far outstrips supply. So a big challenge for Stack Overflow is welcoming those new developers into the fold. As I've written:
One thing I'm very concerned about, as we try to educate the next generation of developers, and, importantly, get more diversity and inclusiveness in that new generation, is what obstacles we're putting up for people as they try to learn programming. In many ways Stack Overflow's specific rules for what is permitted and what is not are obstacles, but an even bigger problem is rudeness, snark, or condescension that newcomers often see.I care a lot about this. Being a developer gives you an unparalleled opportunity to write the script for the future. All the flak that Stack Overflow throws in the face of newbies trying to become developers is actively harmful to people, to society, and to Stack Overflow itself, by driving away potential future contributors. And programming is hard enough; we should see our mission as making it easier.
The world has started taking a closer look at tech, and understanding that software and the internet are not just tools; they are shaping the future of society. Big tech companies are struggling with their place in the world. Stack Overflow is situated at the right place to be influential in how that future develops, and that is going to take a new type of leader.
new dog, too
It will not be easy to find a CEO who is the right person to lead that mission. We will, no doubt, hire one of those fancy executive headhunters to help us in the search. But, hey, this is Stack Overflow. If there's one thing I have learned by now, it's that there's always someone in the community who can answer the questions I can't. 
So we decided to put this announcement out there in hopes of finding great candidates that might have been under the radar. We're especially focused on identifying candidates from under-represented groups, and making sure that every candidate we consider is deeply committed to making our company and community more welcoming, diverse, and inclusive.
Over the years, Fog Creek Software created several incredible hits and many wonderful memories along the way. It is great to watch Trello (under Michael Pryor) and Glitch (under Anil Dash) growing into enormously valuable, successful, and influential products with dedicated leaders who took these products much further than I ever could have, and personally I'm excited to see where Stack Overflow can go and turn my attention to the next thing.
	"
https://www.joelonsoftware.com/2019/09/24/announcing-stack-overflows-new-ceo/,"Welcome, Prashanth!",2019-09-24T14:00:17+00:00,2019-09-24T14:23:14+00:00,Joel Spolsky,News,"
	
Last March, I shared that we were starting to look for a new CEO for Stack Overflow. We were looking for that rare combination of someone who could foster the community while accelerating the growth of our businesses, especially Teams, where we are starting to close many huge deals and becoming a hyper-growth enterprise software company very quickly. This is not something I'm particularly good at, and I thought it was time to bring on more experienced leadership.
The Board of Directors nominated a search committee and we went through almost 200 candidates. It speaks to how well respected a company Stack Overflow is that we found ourselves in the rare position of having plenty of highly qualified executives who were excited about the opportunity. Nevertheless, one of them really stood out, and we are pleased to let you know that we have selected Prashanth Chandrasekar as our next CEO. His first day will be October 1st.
Prashanth was born in Bangalore, India, the city with the highest number of Stack Overflow users in the world, one of the global capitals for software developers writing the script for the future. He started out as a software engineer before moving over to management. He has a BS in Computer Engineering from the University of Maine, a Masters in Engineering Management from Cornell, and an MBA from Harvard. He worked at Capgemini as a management consultant and Barclays as an investment banker in their technology group before joining Rackspace in San Antonio, Texas.
At Rackspace, Prashanth really proved his mettle, creating from scratch a completely new business unit inside the company, the Global Managed Public Clouds Business. This group serves companies around the world who need help running on AWS, Azure, Google, and so on. Under his leadership, Rackspace successfully pivoted from a leading managed hosting company to a cloud services company. And he did this while working with developers both inside Rackspace and outside, so he understands our vision of ""writing the script for the future"" better than anyone I've met.
This is an exciting time for Stack Overflow, and we have some big goals for the year ahead. We want to make Stack Overflow more diverse, inclusive, and welcoming. And we want to make it possible for knowledge workers everywhere to use Stack Overflow to get answers to the proprietary questions that are specific to their organizations and teams. We're doing great work and making great progress in these areas, and I'm confident that Prashanth has some great ideas about how to move forward faster on all our goals.
As you know, I'm keeping my job as Chairman of the Board, so I'll continue to be closely involved. Being Stack Overflow's CEO has been an honor, and I can't wait to see the things the team accomplishes in the year ahead. This will be a great new chapter for Stack Overflow.
	"
https://www.joelonsoftware.com/2019/12/05/so-hows-that-retirement-thing-going-anyway/,"So, how’s that retirement thing going, anyway?",2019-12-05T22:51:39+00:00,2019-12-06T15:50:33+00:00,Joel Spolsky,News,"
	
For the last couple of months, Prashanth Chandrasekar has been getting settled in as the new CEO of Stack Overflow. I'm still going on some customer calls and have a weekly meeting with him, but I have freed up a lot of time. I'm also really enjoying discovering just how little I knew about running medium-sized companies, as I watch Prashanth rearrange everything-for the better. It's really satisfying to realize that the best possible outcome for me is if he proves what a bad CEO I was by doing a much better job running the company.
Even though I live in Manhattan's premier NORC (""Naturally Occurring Retirement Community,"") I'm thinking of this time as a sabbatical, not retirement. And in fact I'm really, really busy, and, in the interest of deflecting a million questions about what I'm doing nowadays, thought I'd update my long-suffering readers here.
This adorable little fella, Cooper, is two. If your web app needs a mascot, apply within. 
I'm chairman of three companies. You probably know all about Stack Overflow so I'll skip ahead. 
Fog Creek Software has been renamed Glitch, ""the friendly community for building the web."" Under CEO Anil Dash, they have grown to millions of apps and raised a decent round of money to accelerate that growth. I think that in every era there has to be some kind of simplified programming environment for the quiet majority of developers who don't need fancy administration features for their code, like git branches or multistep deployment processes; they just want to write code and have it run. Glitch is aimed at those developers.
The third company, HASH, is still kind of under the radar right now, although today they put a whole bunch of words up on their website so I guess I can give you a preview. HASH is building an open source platform for doing simulations. It's a great way to model problems where you have some idea of how every agent is supposed to behave, but you don't really know what all that is going to add up to.
For example, suppose you're a city planner and you want to model traffic so that you can make a case for a new bus line. You can, sort of, pretend that every bus takes 50 cars off the road, but that's not going to work unless you can find 50 commuters who will all decide to take your new bus line... and the way they decide is that they check if the bus is actually going to save them time and money over just driving. This is a case where you can actually simulate the behavior of every ""agent"" in your model, like Cities: Skylines does, and figure out the results. Then you can try thousands or millions of different potential bus routes and see which ones actually reduce traffic. 
This kind of modeling is incredibly computationally intensive, but it works even when you don't have a closed-form formula for how bus lines impact traffic, or, in general, how individual agents' behavior affects overall outcomes. This kind of tool will be incredibly useful in far-ranging problems, like epidemiology, econometrics, urban planning, finance, political science, and a lot of other areas which are not really amenable to closed-form modeling or common ""AI"" techniques. (I love putting AI in ""scare"" ""quotes"". There are a lot of startups out there trying to train machine learning models with way too little data. Sometimes the models they create just reproduce the bad decision making of the humans they are trained on. In many cases a model with simulated agents running a white box algorithm is going to be superior). 
Ok, so those are the three companies I'm still working on in some way or another. That still leaves me with a couple of free days every week which I'm actually using to work on some electronics projects. 
In particular, I'm really into pixel-addressable RGB LEDs, like those WS2812b and APA102-type things. Right now I'm working on designing a circuit board that connects a Teensy 3.2 controller, which can drive up to 4416 LEDs at a high frame rate, to a WizNET Ethernet adapter, and then creating some software which can be used to distribute 4416 pixels worth of data to each Teensy over a TCP-IP network in hopes of creating huge installations with hundreds of thousands of pixels. If that made any sense at all, you're probably already a member of the LEDs ARE AWESOME Facebook group and you probably think I'm dumb. If that doesn't make any sense, rest assured that I am probably not going to burn down the apartment because I am very careful with the soldering iron almost every time. 
	"
